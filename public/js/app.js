/*! For license information please see app.js.LICENSE.txt */
(()=>{var e={432:e=>{u.SYNC=1,u.ASYNC=2,u.QUEUE=4;var n="fun-hooks",t=Object.freeze({useProxy:!0,ready:0}),r=new WeakMap,i="2,1,0"===[1].reduce((function(e,n,t){return[e,n,t]}),2).toString()?Array.prototype.reduce:function(e,n){var t,r=Object(this),i=r.length>>>0,o=0;if(n)t=n;else{for(;o<i&&!(o in r);)o++;t=r[o++]}for(;o<i;)o in r&&(t=e(t,r[o],o,r)),o++;return t};function o(e,n){return Array.prototype.slice.call(e,n)}var a=Object.assign||function(e){return i.call(o(arguments,1),(function(e,n){return n&&Object.keys(n).forEach((function(t){e[t]=n[t]})),e}),e)};function u(e){var c,s={},d=[];function f(e,n){return"function"==typeof e?v.call(null,"sync",e,n):"string"==typeof e&&"function"==typeof n?v.apply(null,arguments):"object"==typeof e?l.apply(null,arguments):void 0}function l(e,n,t){var r=!0;void 0===n&&(n=Object.getOwnPropertyNames(e),r=!1);var i={},o=["constructor"];do{(n=n.filter((function(n){return!("function"!=typeof e[n]||-1!==o.indexOf(n)||n.match(/^_/))}))).forEach((function(n){var r=n.split(":"),o=r[0],a=r[1]||"sync";if(!i[o]){var u=e[o];i[o]=e[o]=v(a,u,t?[t,o]:void 0)}})),e=Object.getPrototypeOf(e)}while(r&&e);return i}function p(e){var t=Array.isArray(e)?e:e.split(".");return i.call(t,(function(r,i,o){var a=r[i],u=!1;return a||(o===t.length-1?(c||d.push((function(){u||console.warn(n+": referenced '"+e+"' but it was never created")})),r[i]=g((function(e){r[i]=e,u=!0}))):r[i]={})}),s)}function g(e){var n=[],t=[],i=function(){},o={before:function(e,t){return c.call(this,n,"before",e,t)},after:function(e,n){return c.call(this,t,"after",e,n)},getHooks:function(e){var r=n.concat(t);"object"==typeof e&&(r=r.filter((function(n){return Object.keys(e).every((function(t){return n[t]===e[t]}))})));try{a(r,{remove:function(){return r.forEach((function(e){e.remove()})),this}})}catch(e){console.error("error adding `remove` to array, did you modify Array.prototype?")}return r},removeAll:function(){return this.getHooks().remove()}},u={install:function(r,o,a){this.type=r,i=a,a(n,t),e&&e(o)}};return r.set(o.after,u),o;function c(e,r,o,a){var u={hook:o,type:r,priority:a||10,remove:function(){var r=e.indexOf(u);-1!==r&&(e.splice(r,1),i(n,t))}};return e.push(u),e.sort((function(e,n){return n.priority-e.priority})),i(n,t),this}}function v(t,i,s){var f=i.after&&r.get(i.after);if(f){if(f.type!==t)throw n+": recreated hookable with different type";return i}var l,v,h=s?p(s):g(),m={get:function(e,n){return h[n]||Reflect.get.apply(Reflect,arguments)}};return c||d.push(y),e.useProxy&&"function"==typeof Proxy&&Proxy.revocable?v=new Proxy(i,m):(v=function(){return m.apply?m.apply(i,this,o(arguments)):i.apply(this,arguments)},a(v,h)),r.get(v.after).install(t,v,(function(e,n){var r,i=[];function a(e){i.push(e.hook)}e.length||n.length?(e.forEach(a),r=i.push(void 0)-1,n.forEach(a),l=function(e,n,a){var u,c=0,s="async"===t&&"function"==typeof a[a.length-1]&&a.pop();function d(e){"sync"===t?u=e:s&&s.apply(null,arguments)}function f(e){if(i[c]){var r=o(arguments);return f.bail=d,r.unshift(f),i[c++].apply(n,r)}"sync"===t?u=e:s&&s.apply(null,arguments)}return i[r]=function(){var r=o(arguments,1);"async"===t&&s&&(delete f.bail,r.push(f));var i=e.apply(n,r);"sync"===t&&f(i)},f.apply(null,a),u}):l=void 0,y()})),v;function y(){!c&&("sync"!==t||e.ready&u.SYNC)&&("async"!==t||e.ready&u.ASYNC)?"sync"!==t&&e.ready&u.QUEUE?m.apply=function(){var e=arguments;d.push((function(){v.apply(e[1],e[2])}))}:m.apply=function(){throw n+": hooked function not ready"}:m.apply=l}}return(e=a({},t,e)).ready?f.ready=function(){c=!0,function(e){for(var n;n=e.shift();)n()}(d)}:c=!0,f.get=p,f}e.exports=u},79:e=>{e.exports=function e(n){var t=Array.isArray(n)?[]:{};for(var r in n){var i=n[r];t[r]=i&&"object"==typeof i?e(i):i}return t}},486:function(e,n,t){var r;e=t.nmd(e),function(){var i,o="Expected a function",a="__lodash_hash_undefined__",u="__lodash_placeholder__",c=32,s=128,d=1/0,f=9007199254740991,l=NaN,p=4294967295,g=[["ary",s],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",c],["partialRight",64],["rearg",256]],v="[object Arguments]",h="[object Array]",m="[object Boolean]",y="[object Date]",b="[object Error]",w="[object Function]",_="[object GeneratorFunction]",I="[object Map]",C="[object Number]",A="[object Object]",T="[object Promise]",E="[object RegExp]",O="[object Set]",S="[object String]",k="[object Symbol]",j="[object WeakMap]",R="[object ArrayBuffer]",B="[object DataView]",U="[object Float32Array]",D="[object Float64Array]",x="[object Int8Array]",P="[object Int16Array]",q="[object Int32Array]",N="[object Uint8Array]",M="[object Uint8ClampedArray]",F="[object Uint16Array]",z="[object Uint32Array]",L=/\b__p \+= '';/g,W=/\b(__p \+=) '' \+/g,H=/(__e\(.*?\)|\b__t\)) \+\n'';/g,G=/&(?:amp|lt|gt|quot|#39);/g,V=/[&<>"']/g,$=RegExp(G.source),K=RegExp(V.source),J=/<%-([\s\S]+?)%>/g,Y=/<%([\s\S]+?)%>/g,Q=/<%=([\s\S]+?)%>/g,Z=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,X=/^\w*$/,ee=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ne=/[\\^$.*+?()[\]{}|]/g,te=RegExp(ne.source),re=/^\s+/,ie=/\s/,oe=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ae=/\{\n\/\* \[wrapped with (.+)\] \*/,ue=/,? & /,ce=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,se=/[()=,{}\[\]\/\s]/,de=/\\(\\)?/g,fe=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,le=/\w*$/,pe=/^[-+]0x[0-9a-f]+$/i,ge=/^0b[01]+$/i,ve=/^\[object .+?Constructor\]$/,he=/^0o[0-7]+$/i,me=/^(?:0|[1-9]\d*)$/,ye=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,be=/($^)/,we=/['\n\r\u2028\u2029\\]/g,_e="\\ud800-\\udfff",Ie="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ce="\\u2700-\\u27bf",Ae="a-z\\xdf-\\xf6\\xf8-\\xff",Te="A-Z\\xc0-\\xd6\\xd8-\\xde",Ee="\\ufe0e\\ufe0f",Oe="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Se="["+_e+"]",ke="["+Oe+"]",je="["+Ie+"]",Re="\\d+",Be="["+Ce+"]",Ue="["+Ae+"]",De="[^"+_e+Oe+Re+Ce+Ae+Te+"]",xe="\\ud83c[\\udffb-\\udfff]",Pe="[^"+_e+"]",qe="(?:\\ud83c[\\udde6-\\uddff]){2}",Ne="[\\ud800-\\udbff][\\udc00-\\udfff]",Me="["+Te+"]",Fe="\\u200d",ze="(?:"+Ue+"|"+De+")",Le="(?:"+Me+"|"+De+")",We="(?:['’](?:d|ll|m|re|s|t|ve))?",He="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ge="(?:"+je+"|"+xe+")?",Ve="["+Ee+"]?",$e=Ve+Ge+"(?:"+Fe+"(?:"+[Pe,qe,Ne].join("|")+")"+Ve+Ge+")*",Ke="(?:"+[Be,qe,Ne].join("|")+")"+$e,Je="(?:"+[Pe+je+"?",je,qe,Ne,Se].join("|")+")",Ye=RegExp("['’]","g"),Qe=RegExp(je,"g"),Ze=RegExp(xe+"(?="+xe+")|"+Je+$e,"g"),Xe=RegExp([Me+"?"+Ue+"+"+We+"(?="+[ke,Me,"$"].join("|")+")",Le+"+"+He+"(?="+[ke,Me+ze,"$"].join("|")+")",Me+"?"+ze+"+"+We,Me+"+"+He,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Re,Ke].join("|"),"g"),en=RegExp("["+Fe+_e+Ie+Ee+"]"),nn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,tn=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],rn=-1,on={};on[U]=on[D]=on[x]=on[P]=on[q]=on[N]=on[M]=on[F]=on[z]=!0,on[v]=on[h]=on[R]=on[m]=on[B]=on[y]=on[b]=on[w]=on[I]=on[C]=on[A]=on[E]=on[O]=on[S]=on[j]=!1;var an={};an[v]=an[h]=an[R]=an[B]=an[m]=an[y]=an[U]=an[D]=an[x]=an[P]=an[q]=an[I]=an[C]=an[A]=an[E]=an[O]=an[S]=an[k]=an[N]=an[M]=an[F]=an[z]=!0,an[b]=an[w]=an[j]=!1;var un={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},cn=parseFloat,sn=parseInt,dn="object"==typeof t.g&&t.g&&t.g.Object===Object&&t.g,fn="object"==typeof self&&self&&self.Object===Object&&self,ln=dn||fn||Function("return this")(),pn=n&&!n.nodeType&&n,gn=pn&&e&&!e.nodeType&&e,vn=gn&&gn.exports===pn,hn=vn&&dn.process,mn=function(){try{return gn&&gn.require&&gn.require("util").types||hn&&hn.binding&&hn.binding("util")}catch(e){}}(),yn=mn&&mn.isArrayBuffer,bn=mn&&mn.isDate,wn=mn&&mn.isMap,_n=mn&&mn.isRegExp,In=mn&&mn.isSet,Cn=mn&&mn.isTypedArray;function An(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}function Tn(e,n,t,r){for(var i=-1,o=null==e?0:e.length;++i<o;){var a=e[i];n(r,a,t(a),e)}return r}function En(e,n){for(var t=-1,r=null==e?0:e.length;++t<r&&!1!==n(e[t],t,e););return e}function On(e,n){for(var t=null==e?0:e.length;t--&&!1!==n(e[t],t,e););return e}function Sn(e,n){for(var t=-1,r=null==e?0:e.length;++t<r;)if(!n(e[t],t,e))return!1;return!0}function kn(e,n){for(var t=-1,r=null==e?0:e.length,i=0,o=[];++t<r;){var a=e[t];n(a,t,e)&&(o[i++]=a)}return o}function jn(e,n){return!(null==e||!e.length)&&Fn(e,n,0)>-1}function Rn(e,n,t){for(var r=-1,i=null==e?0:e.length;++r<i;)if(t(n,e[r]))return!0;return!1}function Bn(e,n){for(var t=-1,r=null==e?0:e.length,i=Array(r);++t<r;)i[t]=n(e[t],t,e);return i}function Un(e,n){for(var t=-1,r=n.length,i=e.length;++t<r;)e[i+t]=n[t];return e}function Dn(e,n,t,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(t=e[++i]);++i<o;)t=n(t,e[i],i,e);return t}function xn(e,n,t,r){var i=null==e?0:e.length;for(r&&i&&(t=e[--i]);i--;)t=n(t,e[i],i,e);return t}function Pn(e,n){for(var t=-1,r=null==e?0:e.length;++t<r;)if(n(e[t],t,e))return!0;return!1}var qn=Hn("length");function Nn(e,n,t){var r;return t(e,(function(e,t,i){if(n(e,t,i))return r=t,!1})),r}function Mn(e,n,t,r){for(var i=e.length,o=t+(r?1:-1);r?o--:++o<i;)if(n(e[o],o,e))return o;return-1}function Fn(e,n,t){return n==n?function(e,n,t){for(var r=t-1,i=e.length;++r<i;)if(e[r]===n)return r;return-1}(e,n,t):Mn(e,Ln,t)}function zn(e,n,t,r){for(var i=t-1,o=e.length;++i<o;)if(r(e[i],n))return i;return-1}function Ln(e){return e!=e}function Wn(e,n){var t=null==e?0:e.length;return t?$n(e,n)/t:l}function Hn(e){return function(n){return null==n?i:n[e]}}function Gn(e){return function(n){return null==e?i:e[n]}}function Vn(e,n,t,r,i){return i(e,(function(e,i,o){t=r?(r=!1,e):n(t,e,i,o)})),t}function $n(e,n){for(var t,r=-1,o=e.length;++r<o;){var a=n(e[r]);a!==i&&(t=t===i?a:t+a)}return t}function Kn(e,n){for(var t=-1,r=Array(e);++t<e;)r[t]=n(t);return r}function Jn(e){return e?e.slice(0,lt(e)+1).replace(re,""):e}function Yn(e){return function(n){return e(n)}}function Qn(e,n){return Bn(n,(function(n){return e[n]}))}function Zn(e,n){return e.has(n)}function Xn(e,n){for(var t=-1,r=e.length;++t<r&&Fn(n,e[t],0)>-1;);return t}function et(e,n){for(var t=e.length;t--&&Fn(n,e[t],0)>-1;);return t}var nt=Gn({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),tt=Gn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function rt(e){return"\\"+un[e]}function it(e){return en.test(e)}function ot(e){var n=-1,t=Array(e.size);return e.forEach((function(e,r){t[++n]=[r,e]})),t}function at(e,n){return function(t){return e(n(t))}}function ut(e,n){for(var t=-1,r=e.length,i=0,o=[];++t<r;){var a=e[t];a!==n&&a!==u||(e[t]=u,o[i++]=t)}return o}function ct(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}function st(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=[e,e]})),t}function dt(e){return it(e)?function(e){for(var n=Ze.lastIndex=0;Ze.test(e);)++n;return n}(e):qn(e)}function ft(e){return it(e)?function(e){return e.match(Ze)||[]}(e):function(e){return e.split("")}(e)}function lt(e){for(var n=e.length;n--&&ie.test(e.charAt(n)););return n}var pt=Gn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),gt=function e(n){var t,r=(n=null==n?ln:gt.defaults(ln.Object(),n,gt.pick(ln,tn))).Array,ie=n.Date,_e=n.Error,Ie=n.Function,Ce=n.Math,Ae=n.Object,Te=n.RegExp,Ee=n.String,Oe=n.TypeError,Se=r.prototype,ke=Ie.prototype,je=Ae.prototype,Re=n["__core-js_shared__"],Be=ke.toString,Ue=je.hasOwnProperty,De=0,xe=(t=/[^.]+$/.exec(Re&&Re.keys&&Re.keys.IE_PROTO||""))?"Symbol(src)_1."+t:"",Pe=je.toString,qe=Be.call(Ae),Ne=ln._,Me=Te("^"+Be.call(Ue).replace(ne,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Fe=vn?n.Buffer:i,ze=n.Symbol,Le=n.Uint8Array,We=Fe?Fe.allocUnsafe:i,He=at(Ae.getPrototypeOf,Ae),Ge=Ae.create,Ve=je.propertyIsEnumerable,$e=Se.splice,Ke=ze?ze.isConcatSpreadable:i,Je=ze?ze.iterator:i,Ze=ze?ze.toStringTag:i,en=function(){try{var e=co(Ae,"defineProperty");return e({},"",{}),e}catch(e){}}(),un=n.clearTimeout!==ln.clearTimeout&&n.clearTimeout,dn=ie&&ie.now!==ln.Date.now&&ie.now,fn=n.setTimeout!==ln.setTimeout&&n.setTimeout,pn=Ce.ceil,gn=Ce.floor,hn=Ae.getOwnPropertySymbols,mn=Fe?Fe.isBuffer:i,qn=n.isFinite,Gn=Se.join,vt=at(Ae.keys,Ae),ht=Ce.max,mt=Ce.min,yt=ie.now,bt=n.parseInt,wt=Ce.random,_t=Se.reverse,It=co(n,"DataView"),Ct=co(n,"Map"),At=co(n,"Promise"),Tt=co(n,"Set"),Et=co(n,"WeakMap"),Ot=co(Ae,"create"),St=Et&&new Et,kt={},jt=qo(It),Rt=qo(Ct),Bt=qo(At),Ut=qo(Tt),Dt=qo(Et),xt=ze?ze.prototype:i,Pt=xt?xt.valueOf:i,qt=xt?xt.toString:i;function Nt(e){if(eu(e)&&!Wa(e)&&!(e instanceof Lt)){if(e instanceof zt)return e;if(Ue.call(e,"__wrapped__"))return No(e)}return new zt(e)}var Mt=function(){function e(){}return function(n){if(!Xa(n))return{};if(Ge)return Ge(n);e.prototype=n;var t=new e;return e.prototype=i,t}}();function Ft(){}function zt(e,n){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=i}function Lt(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function Wt(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var r=e[n];this.set(r[0],r[1])}}function Ht(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var r=e[n];this.set(r[0],r[1])}}function Gt(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var r=e[n];this.set(r[0],r[1])}}function Vt(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new Gt;++n<t;)this.add(e[n])}function $t(e){var n=this.__data__=new Ht(e);this.size=n.size}function Kt(e,n){var t=Wa(e),r=!t&&La(e),i=!t&&!r&&$a(e),o=!t&&!r&&!i&&cu(e),a=t||r||i||o,u=a?Kn(e.length,Ee):[],c=u.length;for(var s in e)!n&&!Ue.call(e,s)||a&&("length"==s||i&&("offset"==s||"parent"==s)||o&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||ho(s,c))||u.push(s);return u}function Jt(e){var n=e.length;return n?e[Gr(0,n-1)]:i}function Yt(e,n){return Bo(Ei(e),or(n,0,e.length))}function Qt(e){return Bo(Ei(e))}function Zt(e,n,t){(t!==i&&!Ma(e[n],t)||t===i&&!(n in e))&&rr(e,n,t)}function Xt(e,n,t){var r=e[n];Ue.call(e,n)&&Ma(r,t)&&(t!==i||n in e)||rr(e,n,t)}function er(e,n){for(var t=e.length;t--;)if(Ma(e[t][0],n))return t;return-1}function nr(e,n,t,r){return dr(e,(function(e,i,o){n(r,e,t(e),o)})),r}function tr(e,n){return e&&Oi(n,ju(n),e)}function rr(e,n,t){"__proto__"==n&&en?en(e,n,{configurable:!0,enumerable:!0,value:t,writable:!0}):e[n]=t}function ir(e,n){for(var t=-1,o=n.length,a=r(o),u=null==e;++t<o;)a[t]=u?i:Tu(e,n[t]);return a}function or(e,n,t){return e==e&&(t!==i&&(e=e<=t?e:t),n!==i&&(e=e>=n?e:n)),e}function ar(e,n,t,r,o,a){var u,c=1&n,s=2&n,d=4&n;if(t&&(u=o?t(e,r,o,a):t(e)),u!==i)return u;if(!Xa(e))return e;var f=Wa(e);if(f){if(u=function(e){var n=e.length,t=new e.constructor(n);return n&&"string"==typeof e[0]&&Ue.call(e,"index")&&(t.index=e.index,t.input=e.input),t}(e),!c)return Ei(e,u)}else{var l=lo(e),p=l==w||l==_;if($a(e))return wi(e,c);if(l==A||l==v||p&&!o){if(u=s||p?{}:go(e),!c)return s?function(e,n){return Oi(e,fo(e),n)}(e,function(e,n){return e&&Oi(n,Ru(n),e)}(u,e)):function(e,n){return Oi(e,so(e),n)}(e,tr(u,e))}else{if(!an[l])return o?e:{};u=function(e,n,t){var r,i=e.constructor;switch(n){case R:return _i(e);case m:case y:return new i(+e);case B:return function(e,n){var t=n?_i(e.buffer):e.buffer;return new e.constructor(t,e.byteOffset,e.byteLength)}(e,t);case U:case D:case x:case P:case q:case N:case M:case F:case z:return Ii(e,t);case I:return new i;case C:case S:return new i(e);case E:return function(e){var n=new e.constructor(e.source,le.exec(e));return n.lastIndex=e.lastIndex,n}(e);case O:return new i;case k:return r=e,Pt?Ae(Pt.call(r)):{}}}(e,l,c)}}a||(a=new $t);var g=a.get(e);if(g)return g;a.set(e,u),ou(e)?e.forEach((function(r){u.add(ar(r,n,t,r,e,a))})):nu(e)&&e.forEach((function(r,i){u.set(i,ar(r,n,t,i,e,a))}));var h=f?i:(d?s?no:eo:s?Ru:ju)(e);return En(h||e,(function(r,i){h&&(r=e[i=r]),Xt(u,i,ar(r,n,t,i,e,a))})),u}function ur(e,n,t){var r=t.length;if(null==e)return!r;for(e=Ae(e);r--;){var o=t[r],a=n[o],u=e[o];if(u===i&&!(o in e)||!a(u))return!1}return!0}function cr(e,n,t){if("function"!=typeof e)throw new Oe(o);return So((function(){e.apply(i,t)}),n)}function sr(e,n,t,r){var i=-1,o=jn,a=!0,u=e.length,c=[],s=n.length;if(!u)return c;t&&(n=Bn(n,Yn(t))),r?(o=Rn,a=!1):n.length>=200&&(o=Zn,a=!1,n=new Vt(n));e:for(;++i<u;){var d=e[i],f=null==t?d:t(d);if(d=r||0!==d?d:0,a&&f==f){for(var l=s;l--;)if(n[l]===f)continue e;c.push(d)}else o(n,f,r)||c.push(d)}return c}Nt.templateSettings={escape:J,evaluate:Y,interpolate:Q,variable:"",imports:{_:Nt}},Nt.prototype=Ft.prototype,Nt.prototype.constructor=Nt,zt.prototype=Mt(Ft.prototype),zt.prototype.constructor=zt,Lt.prototype=Mt(Ft.prototype),Lt.prototype.constructor=Lt,Wt.prototype.clear=function(){this.__data__=Ot?Ot(null):{},this.size=0},Wt.prototype.delete=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n},Wt.prototype.get=function(e){var n=this.__data__;if(Ot){var t=n[e];return t===a?i:t}return Ue.call(n,e)?n[e]:i},Wt.prototype.has=function(e){var n=this.__data__;return Ot?n[e]!==i:Ue.call(n,e)},Wt.prototype.set=function(e,n){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=Ot&&n===i?a:n,this},Ht.prototype.clear=function(){this.__data__=[],this.size=0},Ht.prototype.delete=function(e){var n=this.__data__,t=er(n,e);return!(t<0||(t==n.length-1?n.pop():$e.call(n,t,1),--this.size,0))},Ht.prototype.get=function(e){var n=this.__data__,t=er(n,e);return t<0?i:n[t][1]},Ht.prototype.has=function(e){return er(this.__data__,e)>-1},Ht.prototype.set=function(e,n){var t=this.__data__,r=er(t,e);return r<0?(++this.size,t.push([e,n])):t[r][1]=n,this},Gt.prototype.clear=function(){this.size=0,this.__data__={hash:new Wt,map:new(Ct||Ht),string:new Wt}},Gt.prototype.delete=function(e){var n=ao(this,e).delete(e);return this.size-=n?1:0,n},Gt.prototype.get=function(e){return ao(this,e).get(e)},Gt.prototype.has=function(e){return ao(this,e).has(e)},Gt.prototype.set=function(e,n){var t=ao(this,e),r=t.size;return t.set(e,n),this.size+=t.size==r?0:1,this},Vt.prototype.add=Vt.prototype.push=function(e){return this.__data__.set(e,a),this},Vt.prototype.has=function(e){return this.__data__.has(e)},$t.prototype.clear=function(){this.__data__=new Ht,this.size=0},$t.prototype.delete=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t},$t.prototype.get=function(e){return this.__data__.get(e)},$t.prototype.has=function(e){return this.__data__.has(e)},$t.prototype.set=function(e,n){var t=this.__data__;if(t instanceof Ht){var r=t.__data__;if(!Ct||r.length<199)return r.push([e,n]),this.size=++t.size,this;t=this.__data__=new Gt(r)}return t.set(e,n),this.size=t.size,this};var dr=ji(yr),fr=ji(br,!0);function lr(e,n){var t=!0;return dr(e,(function(e,r,i){return t=!!n(e,r,i)})),t}function pr(e,n,t){for(var r=-1,o=e.length;++r<o;){var a=e[r],u=n(a);if(null!=u&&(c===i?u==u&&!uu(u):t(u,c)))var c=u,s=a}return s}function gr(e,n){var t=[];return dr(e,(function(e,r,i){n(e,r,i)&&t.push(e)})),t}function vr(e,n,t,r,i){var o=-1,a=e.length;for(t||(t=vo),i||(i=[]);++o<a;){var u=e[o];n>0&&t(u)?n>1?vr(u,n-1,t,r,i):Un(i,u):r||(i[i.length]=u)}return i}var hr=Ri(),mr=Ri(!0);function yr(e,n){return e&&hr(e,n,ju)}function br(e,n){return e&&mr(e,n,ju)}function wr(e,n){return kn(n,(function(n){return Ya(e[n])}))}function _r(e,n){for(var t=0,r=(n=hi(n,e)).length;null!=e&&t<r;)e=e[Po(n[t++])];return t&&t==r?e:i}function Ir(e,n,t){var r=n(e);return Wa(e)?r:Un(r,t(e))}function Cr(e){return null==e?e===i?"[object Undefined]":"[object Null]":Ze&&Ze in Ae(e)?function(e){var n=Ue.call(e,Ze),t=e[Ze];try{e[Ze]=i;var r=!0}catch(e){}var o=Pe.call(e);return r&&(n?e[Ze]=t:delete e[Ze]),o}(e):function(e){return Pe.call(e)}(e)}function Ar(e,n){return e>n}function Tr(e,n){return null!=e&&Ue.call(e,n)}function Er(e,n){return null!=e&&n in Ae(e)}function Or(e,n,t){for(var o=t?Rn:jn,a=e[0].length,u=e.length,c=u,s=r(u),d=1/0,f=[];c--;){var l=e[c];c&&n&&(l=Bn(l,Yn(n))),d=mt(l.length,d),s[c]=!t&&(n||a>=120&&l.length>=120)?new Vt(c&&l):i}l=e[0];var p=-1,g=s[0];e:for(;++p<a&&f.length<d;){var v=l[p],h=n?n(v):v;if(v=t||0!==v?v:0,!(g?Zn(g,h):o(f,h,t))){for(c=u;--c;){var m=s[c];if(!(m?Zn(m,h):o(e[c],h,t)))continue e}g&&g.push(h),f.push(v)}}return f}function Sr(e,n,t){var r=null==(e=To(e,n=hi(n,e)))?e:e[Po(Jo(n))];return null==r?i:An(r,e,t)}function kr(e){return eu(e)&&Cr(e)==v}function jr(e,n,t,r,o){return e===n||(null==e||null==n||!eu(e)&&!eu(n)?e!=e&&n!=n:function(e,n,t,r,o,a){var u=Wa(e),c=Wa(n),s=u?h:lo(e),d=c?h:lo(n),f=(s=s==v?A:s)==A,l=(d=d==v?A:d)==A,p=s==d;if(p&&$a(e)){if(!$a(n))return!1;u=!0,f=!1}if(p&&!f)return a||(a=new $t),u||cu(e)?Zi(e,n,t,r,o,a):function(e,n,t,r,i,o,a){switch(t){case B:if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case R:return!(e.byteLength!=n.byteLength||!o(new Le(e),new Le(n)));case m:case y:case C:return Ma(+e,+n);case b:return e.name==n.name&&e.message==n.message;case E:case S:return e==n+"";case I:var u=ot;case O:var c=1&r;if(u||(u=ct),e.size!=n.size&&!c)return!1;var s=a.get(e);if(s)return s==n;r|=2,a.set(e,n);var d=Zi(u(e),u(n),r,i,o,a);return a.delete(e),d;case k:if(Pt)return Pt.call(e)==Pt.call(n)}return!1}(e,n,s,t,r,o,a);if(!(1&t)){var g=f&&Ue.call(e,"__wrapped__"),w=l&&Ue.call(n,"__wrapped__");if(g||w){var _=g?e.value():e,T=w?n.value():n;return a||(a=new $t),o(_,T,t,r,a)}}return!!p&&(a||(a=new $t),function(e,n,t,r,o,a){var u=1&t,c=eo(e),s=c.length;if(s!=eo(n).length&&!u)return!1;for(var d=s;d--;){var f=c[d];if(!(u?f in n:Ue.call(n,f)))return!1}var l=a.get(e),p=a.get(n);if(l&&p)return l==n&&p==e;var g=!0;a.set(e,n),a.set(n,e);for(var v=u;++d<s;){var h=e[f=c[d]],m=n[f];if(r)var y=u?r(m,h,f,n,e,a):r(h,m,f,e,n,a);if(!(y===i?h===m||o(h,m,t,r,a):y)){g=!1;break}v||(v="constructor"==f)}if(g&&!v){var b=e.constructor,w=n.constructor;b==w||!("constructor"in e)||!("constructor"in n)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(g=!1)}return a.delete(e),a.delete(n),g}(e,n,t,r,o,a))}(e,n,t,r,jr,o))}function Rr(e,n,t,r){var o=t.length,a=o,u=!r;if(null==e)return!a;for(e=Ae(e);o--;){var c=t[o];if(u&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++o<a;){var s=(c=t[o])[0],d=e[s],f=c[1];if(u&&c[2]){if(d===i&&!(s in e))return!1}else{var l=new $t;if(r)var p=r(d,f,s,e,n,l);if(!(p===i?jr(f,d,3,r,l):p))return!1}}return!0}function Br(e){return!(!Xa(e)||(n=e,xe&&xe in n))&&(Ya(e)?Me:ve).test(qo(e));var n}function Ur(e){return"function"==typeof e?e:null==e?tc:"object"==typeof e?Wa(e)?Nr(e[0],e[1]):qr(e):fc(e)}function Dr(e){if(!_o(e))return vt(e);var n=[];for(var t in Ae(e))Ue.call(e,t)&&"constructor"!=t&&n.push(t);return n}function xr(e,n){return e<n}function Pr(e,n){var t=-1,i=Ga(e)?r(e.length):[];return dr(e,(function(e,r,o){i[++t]=n(e,r,o)})),i}function qr(e){var n=uo(e);return 1==n.length&&n[0][2]?Co(n[0][0],n[0][1]):function(t){return t===e||Rr(t,e,n)}}function Nr(e,n){return yo(e)&&Io(n)?Co(Po(e),n):function(t){var r=Tu(t,e);return r===i&&r===n?Eu(t,e):jr(n,r,3)}}function Mr(e,n,t,r,o){e!==n&&hr(n,(function(a,u){if(o||(o=new $t),Xa(a))!function(e,n,t,r,o,a,u){var c=Eo(e,t),s=Eo(n,t),d=u.get(s);if(d)Zt(e,t,d);else{var f=a?a(c,s,t+"",e,n,u):i,l=f===i;if(l){var p=Wa(s),g=!p&&$a(s),v=!p&&!g&&cu(s);f=s,p||g||v?Wa(c)?f=c:Va(c)?f=Ei(c):g?(l=!1,f=wi(s,!0)):v?(l=!1,f=Ii(s,!0)):f=[]:ru(s)||La(s)?(f=c,La(c)?f=hu(c):Xa(c)&&!Ya(c)||(f=go(s))):l=!1}l&&(u.set(s,f),o(f,s,r,a,u),u.delete(s)),Zt(e,t,f)}}(e,n,u,t,Mr,r,o);else{var c=r?r(Eo(e,u),a,u+"",e,n,o):i;c===i&&(c=a),Zt(e,u,c)}}),Ru)}function Fr(e,n){var t=e.length;if(t)return ho(n+=n<0?t:0,t)?e[n]:i}function zr(e,n,t){n=n.length?Bn(n,(function(e){return Wa(e)?function(n){return _r(n,1===e.length?e[0]:e)}:e})):[tc];var r=-1;n=Bn(n,Yn(oo()));var i=Pr(e,(function(e,t,i){var o=Bn(n,(function(n){return n(e)}));return{criteria:o,index:++r,value:e}}));return function(e,n){var r=e.length;for(e.sort((function(e,n){return function(e,n,t){for(var r=-1,i=e.criteria,o=n.criteria,a=i.length,u=t.length;++r<a;){var c=Ci(i[r],o[r]);if(c)return r>=u?c:c*("desc"==t[r]?-1:1)}return e.index-n.index}(e,n,t)}));r--;)e[r]=e[r].value;return e}(i)}function Lr(e,n,t){for(var r=-1,i=n.length,o={};++r<i;){var a=n[r],u=_r(e,a);t(u,a)&&Yr(o,hi(a,e),u)}return o}function Wr(e,n,t,r){var i=r?zn:Fn,o=-1,a=n.length,u=e;for(e===n&&(n=Ei(n)),t&&(u=Bn(e,Yn(t)));++o<a;)for(var c=0,s=n[o],d=t?t(s):s;(c=i(u,d,c,r))>-1;)u!==e&&$e.call(u,c,1),$e.call(e,c,1);return e}function Hr(e,n){for(var t=e?n.length:0,r=t-1;t--;){var i=n[t];if(t==r||i!==o){var o=i;ho(i)?$e.call(e,i,1):ci(e,i)}}return e}function Gr(e,n){return e+gn(wt()*(n-e+1))}function Vr(e,n){var t="";if(!e||n<1||n>f)return t;do{n%2&&(t+=e),(n=gn(n/2))&&(e+=e)}while(n);return t}function $r(e,n){return ko(Ao(e,n,tc),e+"")}function Kr(e){return Jt(Mu(e))}function Jr(e,n){var t=Mu(e);return Bo(t,or(n,0,t.length))}function Yr(e,n,t,r){if(!Xa(e))return e;for(var o=-1,a=(n=hi(n,e)).length,u=a-1,c=e;null!=c&&++o<a;){var s=Po(n[o]),d=t;if("__proto__"===s||"constructor"===s||"prototype"===s)return e;if(o!=u){var f=c[s];(d=r?r(f,s,c):i)===i&&(d=Xa(f)?f:ho(n[o+1])?[]:{})}Xt(c,s,d),c=c[s]}return e}var Qr=St?function(e,n){return St.set(e,n),e}:tc,Zr=en?function(e,n){return en(e,"toString",{configurable:!0,enumerable:!1,value:Xu(n),writable:!0})}:tc;function Xr(e){return Bo(Mu(e))}function ei(e,n,t){var i=-1,o=e.length;n<0&&(n=-n>o?0:o+n),(t=t>o?o:t)<0&&(t+=o),o=n>t?0:t-n>>>0,n>>>=0;for(var a=r(o);++i<o;)a[i]=e[i+n];return a}function ni(e,n){var t;return dr(e,(function(e,r,i){return!(t=n(e,r,i))})),!!t}function ti(e,n,t){var r=0,i=null==e?r:e.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=e[o];null!==a&&!uu(a)&&(t?a<=n:a<n)?r=o+1:i=o}return i}return ri(e,n,tc,t)}function ri(e,n,t,r){var o=0,a=null==e?0:e.length;if(0===a)return 0;for(var u=(n=t(n))!=n,c=null===n,s=uu(n),d=n===i;o<a;){var f=gn((o+a)/2),l=t(e[f]),p=l!==i,g=null===l,v=l==l,h=uu(l);if(u)var m=r||v;else m=d?v&&(r||p):c?v&&p&&(r||!g):s?v&&p&&!g&&(r||!h):!g&&!h&&(r?l<=n:l<n);m?o=f+1:a=f}return mt(a,4294967294)}function ii(e,n){for(var t=-1,r=e.length,i=0,o=[];++t<r;){var a=e[t],u=n?n(a):a;if(!t||!Ma(u,c)){var c=u;o[i++]=0===a?0:a}}return o}function oi(e){return"number"==typeof e?e:uu(e)?l:+e}function ai(e){if("string"==typeof e)return e;if(Wa(e))return Bn(e,ai)+"";if(uu(e))return qt?qt.call(e):"";var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}function ui(e,n,t){var r=-1,i=jn,o=e.length,a=!0,u=[],c=u;if(t)a=!1,i=Rn;else if(o>=200){var s=n?null:Vi(e);if(s)return ct(s);a=!1,i=Zn,c=new Vt}else c=n?[]:u;e:for(;++r<o;){var d=e[r],f=n?n(d):d;if(d=t||0!==d?d:0,a&&f==f){for(var l=c.length;l--;)if(c[l]===f)continue e;n&&c.push(f),u.push(d)}else i(c,f,t)||(c!==u&&c.push(f),u.push(d))}return u}function ci(e,n){return null==(e=To(e,n=hi(n,e)))||delete e[Po(Jo(n))]}function si(e,n,t,r){return Yr(e,n,t(_r(e,n)),r)}function di(e,n,t,r){for(var i=e.length,o=r?i:-1;(r?o--:++o<i)&&n(e[o],o,e););return t?ei(e,r?0:o,r?o+1:i):ei(e,r?o+1:0,r?i:o)}function fi(e,n){var t=e;return t instanceof Lt&&(t=t.value()),Dn(n,(function(e,n){return n.func.apply(n.thisArg,Un([e],n.args))}),t)}function li(e,n,t){var i=e.length;if(i<2)return i?ui(e[0]):[];for(var o=-1,a=r(i);++o<i;)for(var u=e[o],c=-1;++c<i;)c!=o&&(a[o]=sr(a[o]||u,e[c],n,t));return ui(vr(a,1),n,t)}function pi(e,n,t){for(var r=-1,o=e.length,a=n.length,u={};++r<o;){var c=r<a?n[r]:i;t(u,e[r],c)}return u}function gi(e){return Va(e)?e:[]}function vi(e){return"function"==typeof e?e:tc}function hi(e,n){return Wa(e)?e:yo(e,n)?[e]:xo(mu(e))}var mi=$r;function yi(e,n,t){var r=e.length;return t=t===i?r:t,!n&&t>=r?e:ei(e,n,t)}var bi=un||function(e){return ln.clearTimeout(e)};function wi(e,n){if(n)return e.slice();var t=e.length,r=We?We(t):new e.constructor(t);return e.copy(r),r}function _i(e){var n=new e.constructor(e.byteLength);return new Le(n).set(new Le(e)),n}function Ii(e,n){var t=n?_i(e.buffer):e.buffer;return new e.constructor(t,e.byteOffset,e.length)}function Ci(e,n){if(e!==n){var t=e!==i,r=null===e,o=e==e,a=uu(e),u=n!==i,c=null===n,s=n==n,d=uu(n);if(!c&&!d&&!a&&e>n||a&&u&&s&&!c&&!d||r&&u&&s||!t&&s||!o)return 1;if(!r&&!a&&!d&&e<n||d&&t&&o&&!r&&!a||c&&t&&o||!u&&o||!s)return-1}return 0}function Ai(e,n,t,i){for(var o=-1,a=e.length,u=t.length,c=-1,s=n.length,d=ht(a-u,0),f=r(s+d),l=!i;++c<s;)f[c]=n[c];for(;++o<u;)(l||o<a)&&(f[t[o]]=e[o]);for(;d--;)f[c++]=e[o++];return f}function Ti(e,n,t,i){for(var o=-1,a=e.length,u=-1,c=t.length,s=-1,d=n.length,f=ht(a-c,0),l=r(f+d),p=!i;++o<f;)l[o]=e[o];for(var g=o;++s<d;)l[g+s]=n[s];for(;++u<c;)(p||o<a)&&(l[g+t[u]]=e[o++]);return l}function Ei(e,n){var t=-1,i=e.length;for(n||(n=r(i));++t<i;)n[t]=e[t];return n}function Oi(e,n,t,r){var o=!t;t||(t={});for(var a=-1,u=n.length;++a<u;){var c=n[a],s=r?r(t[c],e[c],c,t,e):i;s===i&&(s=e[c]),o?rr(t,c,s):Xt(t,c,s)}return t}function Si(e,n){return function(t,r){var i=Wa(t)?Tn:nr,o=n?n():{};return i(t,e,oo(r,2),o)}}function ki(e){return $r((function(n,t){var r=-1,o=t.length,a=o>1?t[o-1]:i,u=o>2?t[2]:i;for(a=e.length>3&&"function"==typeof a?(o--,a):i,u&&mo(t[0],t[1],u)&&(a=o<3?i:a,o=1),n=Ae(n);++r<o;){var c=t[r];c&&e(n,c,r,a)}return n}))}function ji(e,n){return function(t,r){if(null==t)return t;if(!Ga(t))return e(t,r);for(var i=t.length,o=n?i:-1,a=Ae(t);(n?o--:++o<i)&&!1!==r(a[o],o,a););return t}}function Ri(e){return function(n,t,r){for(var i=-1,o=Ae(n),a=r(n),u=a.length;u--;){var c=a[e?u:++i];if(!1===t(o[c],c,o))break}return n}}function Bi(e){return function(n){var t=it(n=mu(n))?ft(n):i,r=t?t[0]:n.charAt(0),o=t?yi(t,1).join(""):n.slice(1);return r[e]()+o}}function Ui(e){return function(n){return Dn(Yu(Lu(n).replace(Ye,"")),e,"")}}function Di(e){return function(){var n=arguments;switch(n.length){case 0:return new e;case 1:return new e(n[0]);case 2:return new e(n[0],n[1]);case 3:return new e(n[0],n[1],n[2]);case 4:return new e(n[0],n[1],n[2],n[3]);case 5:return new e(n[0],n[1],n[2],n[3],n[4]);case 6:return new e(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new e(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var t=Mt(e.prototype),r=e.apply(t,n);return Xa(r)?r:t}}function xi(e){return function(n,t,r){var o=Ae(n);if(!Ga(n)){var a=oo(t,3);n=ju(n),t=function(e){return a(o[e],e,o)}}var u=e(n,t,r);return u>-1?o[a?n[u]:u]:i}}function Pi(e){return Xi((function(n){var t=n.length,r=t,a=zt.prototype.thru;for(e&&n.reverse();r--;){var u=n[r];if("function"!=typeof u)throw new Oe(o);if(a&&!c&&"wrapper"==ro(u))var c=new zt([],!0)}for(r=c?r:t;++r<t;){var s=ro(u=n[r]),d="wrapper"==s?to(u):i;c=d&&bo(d[0])&&424==d[1]&&!d[4].length&&1==d[9]?c[ro(d[0])].apply(c,d[3]):1==u.length&&bo(u)?c[s]():c.thru(u)}return function(){var e=arguments,r=e[0];if(c&&1==e.length&&Wa(r))return c.plant(r).value();for(var i=0,o=t?n[i].apply(this,e):r;++i<t;)o=n[i].call(this,o);return o}}))}function qi(e,n,t,o,a,u,c,d,f,l){var p=n&s,g=1&n,v=2&n,h=24&n,m=512&n,y=v?i:Di(e);return function s(){for(var b=arguments.length,w=r(b),_=b;_--;)w[_]=arguments[_];if(h)var I=io(s),C=function(e,n){for(var t=e.length,r=0;t--;)e[t]===n&&++r;return r}(w,I);if(o&&(w=Ai(w,o,a,h)),u&&(w=Ti(w,u,c,h)),b-=C,h&&b<l){var A=ut(w,I);return Hi(e,n,qi,s.placeholder,t,w,A,d,f,l-b)}var T=g?t:this,E=v?T[e]:e;return b=w.length,d?w=function(e,n){for(var t=e.length,r=mt(n.length,t),o=Ei(e);r--;){var a=n[r];e[r]=ho(a,t)?o[a]:i}return e}(w,d):m&&b>1&&w.reverse(),p&&f<b&&(w.length=f),this&&this!==ln&&this instanceof s&&(E=y||Di(E)),E.apply(T,w)}}function Ni(e,n){return function(t,r){return function(e,n,t,r){return yr(e,(function(e,i,o){n(r,t(e),i,o)})),r}(t,e,n(r),{})}}function Mi(e,n){return function(t,r){var o;if(t===i&&r===i)return n;if(t!==i&&(o=t),r!==i){if(o===i)return r;"string"==typeof t||"string"==typeof r?(t=ai(t),r=ai(r)):(t=oi(t),r=oi(r)),o=e(t,r)}return o}}function Fi(e){return Xi((function(n){return n=Bn(n,Yn(oo())),$r((function(t){var r=this;return e(n,(function(e){return An(e,r,t)}))}))}))}function zi(e,n){var t=(n=n===i?" ":ai(n)).length;if(t<2)return t?Vr(n,e):n;var r=Vr(n,pn(e/dt(n)));return it(n)?yi(ft(r),0,e).join(""):r.slice(0,e)}function Li(e){return function(n,t,o){return o&&"number"!=typeof o&&mo(n,t,o)&&(t=o=i),n=lu(n),t===i?(t=n,n=0):t=lu(t),function(e,n,t,i){for(var o=-1,a=ht(pn((n-e)/(t||1)),0),u=r(a);a--;)u[i?a:++o]=e,e+=t;return u}(n,t,o=o===i?n<t?1:-1:lu(o),e)}}function Wi(e){return function(n,t){return"string"==typeof n&&"string"==typeof t||(n=vu(n),t=vu(t)),e(n,t)}}function Hi(e,n,t,r,o,a,u,s,d,f){var l=8&n;n|=l?c:64,4&(n&=~(l?64:c))||(n&=-4);var p=[e,n,o,l?a:i,l?u:i,l?i:a,l?i:u,s,d,f],g=t.apply(i,p);return bo(e)&&Oo(g,p),g.placeholder=r,jo(g,e,n)}function Gi(e){var n=Ce[e];return function(e,t){if(e=vu(e),(t=null==t?0:mt(pu(t),292))&&qn(e)){var r=(mu(e)+"e").split("e");return+((r=(mu(n(r[0]+"e"+(+r[1]+t)))+"e").split("e"))[0]+"e"+(+r[1]-t))}return n(e)}}var Vi=Tt&&1/ct(new Tt([,-0]))[1]==d?function(e){return new Tt(e)}:uc;function $i(e){return function(n){var t=lo(n);return t==I?ot(n):t==O?st(n):function(e,n){return Bn(n,(function(n){return[n,e[n]]}))}(n,e(n))}}function Ki(e,n,t,a,d,f,l,p){var g=2&n;if(!g&&"function"!=typeof e)throw new Oe(o);var v=a?a.length:0;if(v||(n&=-97,a=d=i),l=l===i?l:ht(pu(l),0),p=p===i?p:pu(p),v-=d?d.length:0,64&n){var h=a,m=d;a=d=i}var y=g?i:to(e),b=[e,n,t,a,d,h,m,f,l,p];if(y&&function(e,n){var t=e[1],r=n[1],i=t|r,o=i<131,a=r==s&&8==t||r==s&&256==t&&e[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==t;if(!o&&!a)return e;1&r&&(e[2]=n[2],i|=1&t?0:4);var c=n[3];if(c){var d=e[3];e[3]=d?Ai(d,c,n[4]):c,e[4]=d?ut(e[3],u):n[4]}(c=n[5])&&(d=e[5],e[5]=d?Ti(d,c,n[6]):c,e[6]=d?ut(e[5],u):n[6]),(c=n[7])&&(e[7]=c),r&s&&(e[8]=null==e[8]?n[8]:mt(e[8],n[8])),null==e[9]&&(e[9]=n[9]),e[0]=n[0],e[1]=i}(b,y),e=b[0],n=b[1],t=b[2],a=b[3],d=b[4],!(p=b[9]=b[9]===i?g?0:e.length:ht(b[9]-v,0))&&24&n&&(n&=-25),n&&1!=n)w=8==n||16==n?function(e,n,t){var o=Di(e);return function a(){for(var u=arguments.length,c=r(u),s=u,d=io(a);s--;)c[s]=arguments[s];var f=u<3&&c[0]!==d&&c[u-1]!==d?[]:ut(c,d);return(u-=f.length)<t?Hi(e,n,qi,a.placeholder,i,c,f,i,i,t-u):An(this&&this!==ln&&this instanceof a?o:e,this,c)}}(e,n,p):n!=c&&33!=n||d.length?qi.apply(i,b):function(e,n,t,i){var o=1&n,a=Di(e);return function n(){for(var u=-1,c=arguments.length,s=-1,d=i.length,f=r(d+c),l=this&&this!==ln&&this instanceof n?a:e;++s<d;)f[s]=i[s];for(;c--;)f[s++]=arguments[++u];return An(l,o?t:this,f)}}(e,n,t,a);else var w=function(e,n,t){var r=1&n,i=Di(e);return function n(){return(this&&this!==ln&&this instanceof n?i:e).apply(r?t:this,arguments)}}(e,n,t);return jo((y?Qr:Oo)(w,b),e,n)}function Ji(e,n,t,r){return e===i||Ma(e,je[t])&&!Ue.call(r,t)?n:e}function Yi(e,n,t,r,o,a){return Xa(e)&&Xa(n)&&(a.set(n,e),Mr(e,n,i,Yi,a),a.delete(n)),e}function Qi(e){return ru(e)?i:e}function Zi(e,n,t,r,o,a){var u=1&t,c=e.length,s=n.length;if(c!=s&&!(u&&s>c))return!1;var d=a.get(e),f=a.get(n);if(d&&f)return d==n&&f==e;var l=-1,p=!0,g=2&t?new Vt:i;for(a.set(e,n),a.set(n,e);++l<c;){var v=e[l],h=n[l];if(r)var m=u?r(h,v,l,n,e,a):r(v,h,l,e,n,a);if(m!==i){if(m)continue;p=!1;break}if(g){if(!Pn(n,(function(e,n){if(!Zn(g,n)&&(v===e||o(v,e,t,r,a)))return g.push(n)}))){p=!1;break}}else if(v!==h&&!o(v,h,t,r,a)){p=!1;break}}return a.delete(e),a.delete(n),p}function Xi(e){return ko(Ao(e,i,Ho),e+"")}function eo(e){return Ir(e,ju,so)}function no(e){return Ir(e,Ru,fo)}var to=St?function(e){return St.get(e)}:uc;function ro(e){for(var n=e.name+"",t=kt[n],r=Ue.call(kt,n)?t.length:0;r--;){var i=t[r],o=i.func;if(null==o||o==e)return i.name}return n}function io(e){return(Ue.call(Nt,"placeholder")?Nt:e).placeholder}function oo(){var e=Nt.iteratee||rc;return e=e===rc?Ur:e,arguments.length?e(arguments[0],arguments[1]):e}function ao(e,n){var t,r,i=e.__data__;return("string"==(r=typeof(t=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==t:null===t)?i["string"==typeof n?"string":"hash"]:i.map}function uo(e){for(var n=ju(e),t=n.length;t--;){var r=n[t],i=e[r];n[t]=[r,i,Io(i)]}return n}function co(e,n){var t=function(e,n){return null==e?i:e[n]}(e,n);return Br(t)?t:i}var so=hn?function(e){return null==e?[]:(e=Ae(e),kn(hn(e),(function(n){return Ve.call(e,n)})))}:gc,fo=hn?function(e){for(var n=[];e;)Un(n,so(e)),e=He(e);return n}:gc,lo=Cr;function po(e,n,t){for(var r=-1,i=(n=hi(n,e)).length,o=!1;++r<i;){var a=Po(n[r]);if(!(o=null!=e&&t(e,a)))break;e=e[a]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&Za(i)&&ho(a,i)&&(Wa(e)||La(e))}function go(e){return"function"!=typeof e.constructor||_o(e)?{}:Mt(He(e))}function vo(e){return Wa(e)||La(e)||!!(Ke&&e&&e[Ke])}function ho(e,n){var t=typeof e;return!!(n=null==n?f:n)&&("number"==t||"symbol"!=t&&me.test(e))&&e>-1&&e%1==0&&e<n}function mo(e,n,t){if(!Xa(t))return!1;var r=typeof n;return!!("number"==r?Ga(t)&&ho(n,t.length):"string"==r&&n in t)&&Ma(t[n],e)}function yo(e,n){if(Wa(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!uu(e))||X.test(e)||!Z.test(e)||null!=n&&e in Ae(n)}function bo(e){var n=ro(e),t=Nt[n];if("function"!=typeof t||!(n in Lt.prototype))return!1;if(e===t)return!0;var r=to(t);return!!r&&e===r[0]}(It&&lo(new It(new ArrayBuffer(1)))!=B||Ct&&lo(new Ct)!=I||At&&lo(At.resolve())!=T||Tt&&lo(new Tt)!=O||Et&&lo(new Et)!=j)&&(lo=function(e){var n=Cr(e),t=n==A?e.constructor:i,r=t?qo(t):"";if(r)switch(r){case jt:return B;case Rt:return I;case Bt:return T;case Ut:return O;case Dt:return j}return n});var wo=Re?Ya:vc;function _o(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||je)}function Io(e){return e==e&&!Xa(e)}function Co(e,n){return function(t){return null!=t&&t[e]===n&&(n!==i||e in Ae(t))}}function Ao(e,n,t){return n=ht(n===i?e.length-1:n,0),function(){for(var i=arguments,o=-1,a=ht(i.length-n,0),u=r(a);++o<a;)u[o]=i[n+o];o=-1;for(var c=r(n+1);++o<n;)c[o]=i[o];return c[n]=t(u),An(e,this,c)}}function To(e,n){return n.length<2?e:_r(e,ei(n,0,-1))}function Eo(e,n){if(("constructor"!==n||"function"!=typeof e[n])&&"__proto__"!=n)return e[n]}var Oo=Ro(Qr),So=fn||function(e,n){return ln.setTimeout(e,n)},ko=Ro(Zr);function jo(e,n,t){var r=n+"";return ko(e,function(e,n){var t=n.length;if(!t)return e;var r=t-1;return n[r]=(t>1?"& ":"")+n[r],n=n.join(t>2?", ":" "),e.replace(oe,"{\n/* [wrapped with "+n+"] */\n")}(r,function(e,n){return En(g,(function(t){var r="_."+t[0];n&t[1]&&!jn(e,r)&&e.push(r)})),e.sort()}(function(e){var n=e.match(ae);return n?n[1].split(ue):[]}(r),t)))}function Ro(e){var n=0,t=0;return function(){var r=yt(),o=16-(r-t);if(t=r,o>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(i,arguments)}}function Bo(e,n){var t=-1,r=e.length,o=r-1;for(n=n===i?r:n;++t<n;){var a=Gr(t,o),u=e[a];e[a]=e[t],e[t]=u}return e.length=n,e}var Uo,Do,xo=(Uo=Ua((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(ee,(function(e,t,r,i){n.push(r?i.replace(de,"$1"):t||e)})),n}),(function(e){return 500===Do.size&&Do.clear(),e})),Do=Uo.cache,Uo);function Po(e){if("string"==typeof e||uu(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}function qo(e){if(null!=e){try{return Be.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function No(e){if(e instanceof Lt)return e.clone();var n=new zt(e.__wrapped__,e.__chain__);return n.__actions__=Ei(e.__actions__),n.__index__=e.__index__,n.__values__=e.__values__,n}var Mo=$r((function(e,n){return Va(e)?sr(e,vr(n,1,Va,!0)):[]})),Fo=$r((function(e,n){var t=Jo(n);return Va(t)&&(t=i),Va(e)?sr(e,vr(n,1,Va,!0),oo(t,2)):[]})),zo=$r((function(e,n){var t=Jo(n);return Va(t)&&(t=i),Va(e)?sr(e,vr(n,1,Va,!0),i,t):[]}));function Lo(e,n,t){var r=null==e?0:e.length;if(!r)return-1;var i=null==t?0:pu(t);return i<0&&(i=ht(r+i,0)),Mn(e,oo(n,3),i)}function Wo(e,n,t){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return t!==i&&(o=pu(t),o=t<0?ht(r+o,0):mt(o,r-1)),Mn(e,oo(n,3),o,!0)}function Ho(e){return null!=e&&e.length?vr(e,1):[]}function Go(e){return e&&e.length?e[0]:i}var Vo=$r((function(e){var n=Bn(e,gi);return n.length&&n[0]===e[0]?Or(n):[]})),$o=$r((function(e){var n=Jo(e),t=Bn(e,gi);return n===Jo(t)?n=i:t.pop(),t.length&&t[0]===e[0]?Or(t,oo(n,2)):[]})),Ko=$r((function(e){var n=Jo(e),t=Bn(e,gi);return(n="function"==typeof n?n:i)&&t.pop(),t.length&&t[0]===e[0]?Or(t,i,n):[]}));function Jo(e){var n=null==e?0:e.length;return n?e[n-1]:i}var Yo=$r(Qo);function Qo(e,n){return e&&e.length&&n&&n.length?Wr(e,n):e}var Zo=Xi((function(e,n){var t=null==e?0:e.length,r=ir(e,n);return Hr(e,Bn(n,(function(e){return ho(e,t)?+e:e})).sort(Ci)),r}));function Xo(e){return null==e?e:_t.call(e)}var ea=$r((function(e){return ui(vr(e,1,Va,!0))})),na=$r((function(e){var n=Jo(e);return Va(n)&&(n=i),ui(vr(e,1,Va,!0),oo(n,2))})),ta=$r((function(e){var n=Jo(e);return n="function"==typeof n?n:i,ui(vr(e,1,Va,!0),i,n)}));function ra(e){if(!e||!e.length)return[];var n=0;return e=kn(e,(function(e){if(Va(e))return n=ht(e.length,n),!0})),Kn(n,(function(n){return Bn(e,Hn(n))}))}function ia(e,n){if(!e||!e.length)return[];var t=ra(e);return null==n?t:Bn(t,(function(e){return An(n,i,e)}))}var oa=$r((function(e,n){return Va(e)?sr(e,n):[]})),aa=$r((function(e){return li(kn(e,Va))})),ua=$r((function(e){var n=Jo(e);return Va(n)&&(n=i),li(kn(e,Va),oo(n,2))})),ca=$r((function(e){var n=Jo(e);return n="function"==typeof n?n:i,li(kn(e,Va),i,n)})),sa=$r(ra),da=$r((function(e){var n=e.length,t=n>1?e[n-1]:i;return t="function"==typeof t?(e.pop(),t):i,ia(e,t)}));function fa(e){var n=Nt(e);return n.__chain__=!0,n}function la(e,n){return n(e)}var pa=Xi((function(e){var n=e.length,t=n?e[0]:0,r=this.__wrapped__,o=function(n){return ir(n,e)};return!(n>1||this.__actions__.length)&&r instanceof Lt&&ho(t)?((r=r.slice(t,+t+(n?1:0))).__actions__.push({func:la,args:[o],thisArg:i}),new zt(r,this.__chain__).thru((function(e){return n&&!e.length&&e.push(i),e}))):this.thru(o)})),ga=Si((function(e,n,t){Ue.call(e,t)?++e[t]:rr(e,t,1)})),va=xi(Lo),ha=xi(Wo);function ma(e,n){return(Wa(e)?En:dr)(e,oo(n,3))}function ya(e,n){return(Wa(e)?On:fr)(e,oo(n,3))}var ba=Si((function(e,n,t){Ue.call(e,t)?e[t].push(n):rr(e,t,[n])})),wa=$r((function(e,n,t){var i=-1,o="function"==typeof n,a=Ga(e)?r(e.length):[];return dr(e,(function(e){a[++i]=o?An(n,e,t):Sr(e,n,t)})),a})),_a=Si((function(e,n,t){rr(e,t,n)}));function Ia(e,n){return(Wa(e)?Bn:Pr)(e,oo(n,3))}var Ca=Si((function(e,n,t){e[t?0:1].push(n)}),(function(){return[[],[]]})),Aa=$r((function(e,n){if(null==e)return[];var t=n.length;return t>1&&mo(e,n[0],n[1])?n=[]:t>2&&mo(n[0],n[1],n[2])&&(n=[n[0]]),zr(e,vr(n,1),[])})),Ta=dn||function(){return ln.Date.now()};function Ea(e,n,t){return n=t?i:n,n=e&&null==n?e.length:n,Ki(e,s,i,i,i,i,n)}function Oa(e,n){var t;if("function"!=typeof n)throw new Oe(o);return e=pu(e),function(){return--e>0&&(t=n.apply(this,arguments)),e<=1&&(n=i),t}}var Sa=$r((function(e,n,t){var r=1;if(t.length){var i=ut(t,io(Sa));r|=c}return Ki(e,r,n,t,i)})),ka=$r((function(e,n,t){var r=3;if(t.length){var i=ut(t,io(ka));r|=c}return Ki(n,r,e,t,i)}));function ja(e,n,t){var r,a,u,c,s,d,f=0,l=!1,p=!1,g=!0;if("function"!=typeof e)throw new Oe(o);function v(n){var t=r,o=a;return r=a=i,f=n,c=e.apply(o,t)}function h(e){var t=e-d;return d===i||t>=n||t<0||p&&e-f>=u}function m(){var e=Ta();if(h(e))return y(e);s=So(m,function(e){var t=n-(e-d);return p?mt(t,u-(e-f)):t}(e))}function y(e){return s=i,g&&r?v(e):(r=a=i,c)}function b(){var e=Ta(),t=h(e);if(r=arguments,a=this,d=e,t){if(s===i)return function(e){return f=e,s=So(m,n),l?v(e):c}(d);if(p)return bi(s),s=So(m,n),v(d)}return s===i&&(s=So(m,n)),c}return n=vu(n)||0,Xa(t)&&(l=!!t.leading,u=(p="maxWait"in t)?ht(vu(t.maxWait)||0,n):u,g="trailing"in t?!!t.trailing:g),b.cancel=function(){s!==i&&bi(s),f=0,r=d=a=s=i},b.flush=function(){return s===i?c:y(Ta())},b}var Ra=$r((function(e,n){return cr(e,1,n)})),Ba=$r((function(e,n,t){return cr(e,vu(n)||0,t)}));function Ua(e,n){if("function"!=typeof e||null!=n&&"function"!=typeof n)throw new Oe(o);var t=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=t.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return t.cache=o.set(i,a)||o,a};return t.cache=new(Ua.Cache||Gt),t}function Da(e){if("function"!=typeof e)throw new Oe(o);return function(){var n=arguments;switch(n.length){case 0:return!e.call(this);case 1:return!e.call(this,n[0]);case 2:return!e.call(this,n[0],n[1]);case 3:return!e.call(this,n[0],n[1],n[2])}return!e.apply(this,n)}}Ua.Cache=Gt;var xa=mi((function(e,n){var t=(n=1==n.length&&Wa(n[0])?Bn(n[0],Yn(oo())):Bn(vr(n,1),Yn(oo()))).length;return $r((function(r){for(var i=-1,o=mt(r.length,t);++i<o;)r[i]=n[i].call(this,r[i]);return An(e,this,r)}))})),Pa=$r((function(e,n){var t=ut(n,io(Pa));return Ki(e,c,i,n,t)})),qa=$r((function(e,n){var t=ut(n,io(qa));return Ki(e,64,i,n,t)})),Na=Xi((function(e,n){return Ki(e,256,i,i,i,n)}));function Ma(e,n){return e===n||e!=e&&n!=n}var Fa=Wi(Ar),za=Wi((function(e,n){return e>=n})),La=kr(function(){return arguments}())?kr:function(e){return eu(e)&&Ue.call(e,"callee")&&!Ve.call(e,"callee")},Wa=r.isArray,Ha=yn?Yn(yn):function(e){return eu(e)&&Cr(e)==R};function Ga(e){return null!=e&&Za(e.length)&&!Ya(e)}function Va(e){return eu(e)&&Ga(e)}var $a=mn||vc,Ka=bn?Yn(bn):function(e){return eu(e)&&Cr(e)==y};function Ja(e){if(!eu(e))return!1;var n=Cr(e);return n==b||"[object DOMException]"==n||"string"==typeof e.message&&"string"==typeof e.name&&!ru(e)}function Ya(e){if(!Xa(e))return!1;var n=Cr(e);return n==w||n==_||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Qa(e){return"number"==typeof e&&e==pu(e)}function Za(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=f}function Xa(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}function eu(e){return null!=e&&"object"==typeof e}var nu=wn?Yn(wn):function(e){return eu(e)&&lo(e)==I};function tu(e){return"number"==typeof e||eu(e)&&Cr(e)==C}function ru(e){if(!eu(e)||Cr(e)!=A)return!1;var n=He(e);if(null===n)return!0;var t=Ue.call(n,"constructor")&&n.constructor;return"function"==typeof t&&t instanceof t&&Be.call(t)==qe}var iu=_n?Yn(_n):function(e){return eu(e)&&Cr(e)==E},ou=In?Yn(In):function(e){return eu(e)&&lo(e)==O};function au(e){return"string"==typeof e||!Wa(e)&&eu(e)&&Cr(e)==S}function uu(e){return"symbol"==typeof e||eu(e)&&Cr(e)==k}var cu=Cn?Yn(Cn):function(e){return eu(e)&&Za(e.length)&&!!on[Cr(e)]},su=Wi(xr),du=Wi((function(e,n){return e<=n}));function fu(e){if(!e)return[];if(Ga(e))return au(e)?ft(e):Ei(e);if(Je&&e[Je])return function(e){for(var n,t=[];!(n=e.next()).done;)t.push(n.value);return t}(e[Je]());var n=lo(e);return(n==I?ot:n==O?ct:Mu)(e)}function lu(e){return e?(e=vu(e))===d||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function pu(e){var n=lu(e),t=n%1;return n==n?t?n-t:n:0}function gu(e){return e?or(pu(e),0,p):0}function vu(e){if("number"==typeof e)return e;if(uu(e))return l;if(Xa(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=Xa(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=Jn(e);var t=ge.test(e);return t||he.test(e)?sn(e.slice(2),t?2:8):pe.test(e)?l:+e}function hu(e){return Oi(e,Ru(e))}function mu(e){return null==e?"":ai(e)}var yu=ki((function(e,n){if(_o(n)||Ga(n))Oi(n,ju(n),e);else for(var t in n)Ue.call(n,t)&&Xt(e,t,n[t])})),bu=ki((function(e,n){Oi(n,Ru(n),e)})),wu=ki((function(e,n,t,r){Oi(n,Ru(n),e,r)})),_u=ki((function(e,n,t,r){Oi(n,ju(n),e,r)})),Iu=Xi(ir),Cu=$r((function(e,n){e=Ae(e);var t=-1,r=n.length,o=r>2?n[2]:i;for(o&&mo(n[0],n[1],o)&&(r=1);++t<r;)for(var a=n[t],u=Ru(a),c=-1,s=u.length;++c<s;){var d=u[c],f=e[d];(f===i||Ma(f,je[d])&&!Ue.call(e,d))&&(e[d]=a[d])}return e})),Au=$r((function(e){return e.push(i,Yi),An(Uu,i,e)}));function Tu(e,n,t){var r=null==e?i:_r(e,n);return r===i?t:r}function Eu(e,n){return null!=e&&po(e,n,Er)}var Ou=Ni((function(e,n,t){null!=n&&"function"!=typeof n.toString&&(n=Pe.call(n)),e[n]=t}),Xu(tc)),Su=Ni((function(e,n,t){null!=n&&"function"!=typeof n.toString&&(n=Pe.call(n)),Ue.call(e,n)?e[n].push(t):e[n]=[t]}),oo),ku=$r(Sr);function ju(e){return Ga(e)?Kt(e):Dr(e)}function Ru(e){return Ga(e)?Kt(e,!0):function(e){if(!Xa(e))return function(e){var n=[];if(null!=e)for(var t in Ae(e))n.push(t);return n}(e);var n=_o(e),t=[];for(var r in e)("constructor"!=r||!n&&Ue.call(e,r))&&t.push(r);return t}(e)}var Bu=ki((function(e,n,t){Mr(e,n,t)})),Uu=ki((function(e,n,t,r){Mr(e,n,t,r)})),Du=Xi((function(e,n){var t={};if(null==e)return t;var r=!1;n=Bn(n,(function(n){return n=hi(n,e),r||(r=n.length>1),n})),Oi(e,no(e),t),r&&(t=ar(t,7,Qi));for(var i=n.length;i--;)ci(t,n[i]);return t})),xu=Xi((function(e,n){return null==e?{}:function(e,n){return Lr(e,n,(function(n,t){return Eu(e,t)}))}(e,n)}));function Pu(e,n){if(null==e)return{};var t=Bn(no(e),(function(e){return[e]}));return n=oo(n),Lr(e,t,(function(e,t){return n(e,t[0])}))}var qu=$i(ju),Nu=$i(Ru);function Mu(e){return null==e?[]:Qn(e,ju(e))}var Fu=Ui((function(e,n,t){return n=n.toLowerCase(),e+(t?zu(n):n)}));function zu(e){return Ju(mu(e).toLowerCase())}function Lu(e){return(e=mu(e))&&e.replace(ye,nt).replace(Qe,"")}var Wu=Ui((function(e,n,t){return e+(t?"-":"")+n.toLowerCase()})),Hu=Ui((function(e,n,t){return e+(t?" ":"")+n.toLowerCase()})),Gu=Bi("toLowerCase"),Vu=Ui((function(e,n,t){return e+(t?"_":"")+n.toLowerCase()})),$u=Ui((function(e,n,t){return e+(t?" ":"")+Ju(n)})),Ku=Ui((function(e,n,t){return e+(t?" ":"")+n.toUpperCase()})),Ju=Bi("toUpperCase");function Yu(e,n,t){return e=mu(e),(n=t?i:n)===i?function(e){return nn.test(e)}(e)?function(e){return e.match(Xe)||[]}(e):function(e){return e.match(ce)||[]}(e):e.match(n)||[]}var Qu=$r((function(e,n){try{return An(e,i,n)}catch(e){return Ja(e)?e:new _e(e)}})),Zu=Xi((function(e,n){return En(n,(function(n){n=Po(n),rr(e,n,Sa(e[n],e))})),e}));function Xu(e){return function(){return e}}var ec=Pi(),nc=Pi(!0);function tc(e){return e}function rc(e){return Ur("function"==typeof e?e:ar(e,1))}var ic=$r((function(e,n){return function(t){return Sr(t,e,n)}})),oc=$r((function(e,n){return function(t){return Sr(e,t,n)}}));function ac(e,n,t){var r=ju(n),i=wr(n,r);null!=t||Xa(n)&&(i.length||!r.length)||(t=n,n=e,e=this,i=wr(n,ju(n)));var o=!(Xa(t)&&"chain"in t&&!t.chain),a=Ya(e);return En(i,(function(t){var r=n[t];e[t]=r,a&&(e.prototype[t]=function(){var n=this.__chain__;if(o||n){var t=e(this.__wrapped__);return(t.__actions__=Ei(this.__actions__)).push({func:r,args:arguments,thisArg:e}),t.__chain__=n,t}return r.apply(e,Un([this.value()],arguments))})})),e}function uc(){}var cc=Fi(Bn),sc=Fi(Sn),dc=Fi(Pn);function fc(e){return yo(e)?Hn(Po(e)):function(e){return function(n){return _r(n,e)}}(e)}var lc=Li(),pc=Li(!0);function gc(){return[]}function vc(){return!1}var hc,mc=Mi((function(e,n){return e+n}),0),yc=Gi("ceil"),bc=Mi((function(e,n){return e/n}),1),wc=Gi("floor"),_c=Mi((function(e,n){return e*n}),1),Ic=Gi("round"),Cc=Mi((function(e,n){return e-n}),0);return Nt.after=function(e,n){if("function"!=typeof n)throw new Oe(o);return e=pu(e),function(){if(--e<1)return n.apply(this,arguments)}},Nt.ary=Ea,Nt.assign=yu,Nt.assignIn=bu,Nt.assignInWith=wu,Nt.assignWith=_u,Nt.at=Iu,Nt.before=Oa,Nt.bind=Sa,Nt.bindAll=Zu,Nt.bindKey=ka,Nt.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Wa(e)?e:[e]},Nt.chain=fa,Nt.chunk=function(e,n,t){n=(t?mo(e,n,t):n===i)?1:ht(pu(n),0);var o=null==e?0:e.length;if(!o||n<1)return[];for(var a=0,u=0,c=r(pn(o/n));a<o;)c[u++]=ei(e,a,a+=n);return c},Nt.compact=function(e){for(var n=-1,t=null==e?0:e.length,r=0,i=[];++n<t;){var o=e[n];o&&(i[r++]=o)}return i},Nt.concat=function(){var e=arguments.length;if(!e)return[];for(var n=r(e-1),t=arguments[0],i=e;i--;)n[i-1]=arguments[i];return Un(Wa(t)?Ei(t):[t],vr(n,1))},Nt.cond=function(e){var n=null==e?0:e.length,t=oo();return e=n?Bn(e,(function(e){if("function"!=typeof e[1])throw new Oe(o);return[t(e[0]),e[1]]})):[],$r((function(t){for(var r=-1;++r<n;){var i=e[r];if(An(i[0],this,t))return An(i[1],this,t)}}))},Nt.conforms=function(e){return function(e){var n=ju(e);return function(t){return ur(t,e,n)}}(ar(e,1))},Nt.constant=Xu,Nt.countBy=ga,Nt.create=function(e,n){var t=Mt(e);return null==n?t:tr(t,n)},Nt.curry=function e(n,t,r){var o=Ki(n,8,i,i,i,i,i,t=r?i:t);return o.placeholder=e.placeholder,o},Nt.curryRight=function e(n,t,r){var o=Ki(n,16,i,i,i,i,i,t=r?i:t);return o.placeholder=e.placeholder,o},Nt.debounce=ja,Nt.defaults=Cu,Nt.defaultsDeep=Au,Nt.defer=Ra,Nt.delay=Ba,Nt.difference=Mo,Nt.differenceBy=Fo,Nt.differenceWith=zo,Nt.drop=function(e,n,t){var r=null==e?0:e.length;return r?ei(e,(n=t||n===i?1:pu(n))<0?0:n,r):[]},Nt.dropRight=function(e,n,t){var r=null==e?0:e.length;return r?ei(e,0,(n=r-(n=t||n===i?1:pu(n)))<0?0:n):[]},Nt.dropRightWhile=function(e,n){return e&&e.length?di(e,oo(n,3),!0,!0):[]},Nt.dropWhile=function(e,n){return e&&e.length?di(e,oo(n,3),!0):[]},Nt.fill=function(e,n,t,r){var o=null==e?0:e.length;return o?(t&&"number"!=typeof t&&mo(e,n,t)&&(t=0,r=o),function(e,n,t,r){var o=e.length;for((t=pu(t))<0&&(t=-t>o?0:o+t),(r=r===i||r>o?o:pu(r))<0&&(r+=o),r=t>r?0:gu(r);t<r;)e[t++]=n;return e}(e,n,t,r)):[]},Nt.filter=function(e,n){return(Wa(e)?kn:gr)(e,oo(n,3))},Nt.flatMap=function(e,n){return vr(Ia(e,n),1)},Nt.flatMapDeep=function(e,n){return vr(Ia(e,n),d)},Nt.flatMapDepth=function(e,n,t){return t=t===i?1:pu(t),vr(Ia(e,n),t)},Nt.flatten=Ho,Nt.flattenDeep=function(e){return null!=e&&e.length?vr(e,d):[]},Nt.flattenDepth=function(e,n){return null!=e&&e.length?vr(e,n=n===i?1:pu(n)):[]},Nt.flip=function(e){return Ki(e,512)},Nt.flow=ec,Nt.flowRight=nc,Nt.fromPairs=function(e){for(var n=-1,t=null==e?0:e.length,r={};++n<t;){var i=e[n];r[i[0]]=i[1]}return r},Nt.functions=function(e){return null==e?[]:wr(e,ju(e))},Nt.functionsIn=function(e){return null==e?[]:wr(e,Ru(e))},Nt.groupBy=ba,Nt.initial=function(e){return null!=e&&e.length?ei(e,0,-1):[]},Nt.intersection=Vo,Nt.intersectionBy=$o,Nt.intersectionWith=Ko,Nt.invert=Ou,Nt.invertBy=Su,Nt.invokeMap=wa,Nt.iteratee=rc,Nt.keyBy=_a,Nt.keys=ju,Nt.keysIn=Ru,Nt.map=Ia,Nt.mapKeys=function(e,n){var t={};return n=oo(n,3),yr(e,(function(e,r,i){rr(t,n(e,r,i),e)})),t},Nt.mapValues=function(e,n){var t={};return n=oo(n,3),yr(e,(function(e,r,i){rr(t,r,n(e,r,i))})),t},Nt.matches=function(e){return qr(ar(e,1))},Nt.matchesProperty=function(e,n){return Nr(e,ar(n,1))},Nt.memoize=Ua,Nt.merge=Bu,Nt.mergeWith=Uu,Nt.method=ic,Nt.methodOf=oc,Nt.mixin=ac,Nt.negate=Da,Nt.nthArg=function(e){return e=pu(e),$r((function(n){return Fr(n,e)}))},Nt.omit=Du,Nt.omitBy=function(e,n){return Pu(e,Da(oo(n)))},Nt.once=function(e){return Oa(2,e)},Nt.orderBy=function(e,n,t,r){return null==e?[]:(Wa(n)||(n=null==n?[]:[n]),Wa(t=r?i:t)||(t=null==t?[]:[t]),zr(e,n,t))},Nt.over=cc,Nt.overArgs=xa,Nt.overEvery=sc,Nt.overSome=dc,Nt.partial=Pa,Nt.partialRight=qa,Nt.partition=Ca,Nt.pick=xu,Nt.pickBy=Pu,Nt.property=fc,Nt.propertyOf=function(e){return function(n){return null==e?i:_r(e,n)}},Nt.pull=Yo,Nt.pullAll=Qo,Nt.pullAllBy=function(e,n,t){return e&&e.length&&n&&n.length?Wr(e,n,oo(t,2)):e},Nt.pullAllWith=function(e,n,t){return e&&e.length&&n&&n.length?Wr(e,n,i,t):e},Nt.pullAt=Zo,Nt.range=lc,Nt.rangeRight=pc,Nt.rearg=Na,Nt.reject=function(e,n){return(Wa(e)?kn:gr)(e,Da(oo(n,3)))},Nt.remove=function(e,n){var t=[];if(!e||!e.length)return t;var r=-1,i=[],o=e.length;for(n=oo(n,3);++r<o;){var a=e[r];n(a,r,e)&&(t.push(a),i.push(r))}return Hr(e,i),t},Nt.rest=function(e,n){if("function"!=typeof e)throw new Oe(o);return $r(e,n=n===i?n:pu(n))},Nt.reverse=Xo,Nt.sampleSize=function(e,n,t){return n=(t?mo(e,n,t):n===i)?1:pu(n),(Wa(e)?Yt:Jr)(e,n)},Nt.set=function(e,n,t){return null==e?e:Yr(e,n,t)},Nt.setWith=function(e,n,t,r){return r="function"==typeof r?r:i,null==e?e:Yr(e,n,t,r)},Nt.shuffle=function(e){return(Wa(e)?Qt:Xr)(e)},Nt.slice=function(e,n,t){var r=null==e?0:e.length;return r?(t&&"number"!=typeof t&&mo(e,n,t)?(n=0,t=r):(n=null==n?0:pu(n),t=t===i?r:pu(t)),ei(e,n,t)):[]},Nt.sortBy=Aa,Nt.sortedUniq=function(e){return e&&e.length?ii(e):[]},Nt.sortedUniqBy=function(e,n){return e&&e.length?ii(e,oo(n,2)):[]},Nt.split=function(e,n,t){return t&&"number"!=typeof t&&mo(e,n,t)&&(n=t=i),(t=t===i?p:t>>>0)?(e=mu(e))&&("string"==typeof n||null!=n&&!iu(n))&&!(n=ai(n))&&it(e)?yi(ft(e),0,t):e.split(n,t):[]},Nt.spread=function(e,n){if("function"!=typeof e)throw new Oe(o);return n=null==n?0:ht(pu(n),0),$r((function(t){var r=t[n],i=yi(t,0,n);return r&&Un(i,r),An(e,this,i)}))},Nt.tail=function(e){var n=null==e?0:e.length;return n?ei(e,1,n):[]},Nt.take=function(e,n,t){return e&&e.length?ei(e,0,(n=t||n===i?1:pu(n))<0?0:n):[]},Nt.takeRight=function(e,n,t){var r=null==e?0:e.length;return r?ei(e,(n=r-(n=t||n===i?1:pu(n)))<0?0:n,r):[]},Nt.takeRightWhile=function(e,n){return e&&e.length?di(e,oo(n,3),!1,!0):[]},Nt.takeWhile=function(e,n){return e&&e.length?di(e,oo(n,3)):[]},Nt.tap=function(e,n){return n(e),e},Nt.throttle=function(e,n,t){var r=!0,i=!0;if("function"!=typeof e)throw new Oe(o);return Xa(t)&&(r="leading"in t?!!t.leading:r,i="trailing"in t?!!t.trailing:i),ja(e,n,{leading:r,maxWait:n,trailing:i})},Nt.thru=la,Nt.toArray=fu,Nt.toPairs=qu,Nt.toPairsIn=Nu,Nt.toPath=function(e){return Wa(e)?Bn(e,Po):uu(e)?[e]:Ei(xo(mu(e)))},Nt.toPlainObject=hu,Nt.transform=function(e,n,t){var r=Wa(e),i=r||$a(e)||cu(e);if(n=oo(n,4),null==t){var o=e&&e.constructor;t=i?r?new o:[]:Xa(e)&&Ya(o)?Mt(He(e)):{}}return(i?En:yr)(e,(function(e,r,i){return n(t,e,r,i)})),t},Nt.unary=function(e){return Ea(e,1)},Nt.union=ea,Nt.unionBy=na,Nt.unionWith=ta,Nt.uniq=function(e){return e&&e.length?ui(e):[]},Nt.uniqBy=function(e,n){return e&&e.length?ui(e,oo(n,2)):[]},Nt.uniqWith=function(e,n){return n="function"==typeof n?n:i,e&&e.length?ui(e,i,n):[]},Nt.unset=function(e,n){return null==e||ci(e,n)},Nt.unzip=ra,Nt.unzipWith=ia,Nt.update=function(e,n,t){return null==e?e:si(e,n,vi(t))},Nt.updateWith=function(e,n,t,r){return r="function"==typeof r?r:i,null==e?e:si(e,n,vi(t),r)},Nt.values=Mu,Nt.valuesIn=function(e){return null==e?[]:Qn(e,Ru(e))},Nt.without=oa,Nt.words=Yu,Nt.wrap=function(e,n){return Pa(vi(n),e)},Nt.xor=aa,Nt.xorBy=ua,Nt.xorWith=ca,Nt.zip=sa,Nt.zipObject=function(e,n){return pi(e||[],n||[],Xt)},Nt.zipObjectDeep=function(e,n){return pi(e||[],n||[],Yr)},Nt.zipWith=da,Nt.entries=qu,Nt.entriesIn=Nu,Nt.extend=bu,Nt.extendWith=wu,ac(Nt,Nt),Nt.add=mc,Nt.attempt=Qu,Nt.camelCase=Fu,Nt.capitalize=zu,Nt.ceil=yc,Nt.clamp=function(e,n,t){return t===i&&(t=n,n=i),t!==i&&(t=(t=vu(t))==t?t:0),n!==i&&(n=(n=vu(n))==n?n:0),or(vu(e),n,t)},Nt.clone=function(e){return ar(e,4)},Nt.cloneDeep=function(e){return ar(e,5)},Nt.cloneDeepWith=function(e,n){return ar(e,5,n="function"==typeof n?n:i)},Nt.cloneWith=function(e,n){return ar(e,4,n="function"==typeof n?n:i)},Nt.conformsTo=function(e,n){return null==n||ur(e,n,ju(n))},Nt.deburr=Lu,Nt.defaultTo=function(e,n){return null==e||e!=e?n:e},Nt.divide=bc,Nt.endsWith=function(e,n,t){e=mu(e),n=ai(n);var r=e.length,o=t=t===i?r:or(pu(t),0,r);return(t-=n.length)>=0&&e.slice(t,o)==n},Nt.eq=Ma,Nt.escape=function(e){return(e=mu(e))&&K.test(e)?e.replace(V,tt):e},Nt.escapeRegExp=function(e){return(e=mu(e))&&te.test(e)?e.replace(ne,"\\$&"):e},Nt.every=function(e,n,t){var r=Wa(e)?Sn:lr;return t&&mo(e,n,t)&&(n=i),r(e,oo(n,3))},Nt.find=va,Nt.findIndex=Lo,Nt.findKey=function(e,n){return Nn(e,oo(n,3),yr)},Nt.findLast=ha,Nt.findLastIndex=Wo,Nt.findLastKey=function(e,n){return Nn(e,oo(n,3),br)},Nt.floor=wc,Nt.forEach=ma,Nt.forEachRight=ya,Nt.forIn=function(e,n){return null==e?e:hr(e,oo(n,3),Ru)},Nt.forInRight=function(e,n){return null==e?e:mr(e,oo(n,3),Ru)},Nt.forOwn=function(e,n){return e&&yr(e,oo(n,3))},Nt.forOwnRight=function(e,n){return e&&br(e,oo(n,3))},Nt.get=Tu,Nt.gt=Fa,Nt.gte=za,Nt.has=function(e,n){return null!=e&&po(e,n,Tr)},Nt.hasIn=Eu,Nt.head=Go,Nt.identity=tc,Nt.includes=function(e,n,t,r){e=Ga(e)?e:Mu(e),t=t&&!r?pu(t):0;var i=e.length;return t<0&&(t=ht(i+t,0)),au(e)?t<=i&&e.indexOf(n,t)>-1:!!i&&Fn(e,n,t)>-1},Nt.indexOf=function(e,n,t){var r=null==e?0:e.length;if(!r)return-1;var i=null==t?0:pu(t);return i<0&&(i=ht(r+i,0)),Fn(e,n,i)},Nt.inRange=function(e,n,t){return n=lu(n),t===i?(t=n,n=0):t=lu(t),function(e,n,t){return e>=mt(n,t)&&e<ht(n,t)}(e=vu(e),n,t)},Nt.invoke=ku,Nt.isArguments=La,Nt.isArray=Wa,Nt.isArrayBuffer=Ha,Nt.isArrayLike=Ga,Nt.isArrayLikeObject=Va,Nt.isBoolean=function(e){return!0===e||!1===e||eu(e)&&Cr(e)==m},Nt.isBuffer=$a,Nt.isDate=Ka,Nt.isElement=function(e){return eu(e)&&1===e.nodeType&&!ru(e)},Nt.isEmpty=function(e){if(null==e)return!0;if(Ga(e)&&(Wa(e)||"string"==typeof e||"function"==typeof e.splice||$a(e)||cu(e)||La(e)))return!e.length;var n=lo(e);if(n==I||n==O)return!e.size;if(_o(e))return!Dr(e).length;for(var t in e)if(Ue.call(e,t))return!1;return!0},Nt.isEqual=function(e,n){return jr(e,n)},Nt.isEqualWith=function(e,n,t){var r=(t="function"==typeof t?t:i)?t(e,n):i;return r===i?jr(e,n,i,t):!!r},Nt.isError=Ja,Nt.isFinite=function(e){return"number"==typeof e&&qn(e)},Nt.isFunction=Ya,Nt.isInteger=Qa,Nt.isLength=Za,Nt.isMap=nu,Nt.isMatch=function(e,n){return e===n||Rr(e,n,uo(n))},Nt.isMatchWith=function(e,n,t){return t="function"==typeof t?t:i,Rr(e,n,uo(n),t)},Nt.isNaN=function(e){return tu(e)&&e!=+e},Nt.isNative=function(e){if(wo(e))throw new _e("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Br(e)},Nt.isNil=function(e){return null==e},Nt.isNull=function(e){return null===e},Nt.isNumber=tu,Nt.isObject=Xa,Nt.isObjectLike=eu,Nt.isPlainObject=ru,Nt.isRegExp=iu,Nt.isSafeInteger=function(e){return Qa(e)&&e>=-9007199254740991&&e<=f},Nt.isSet=ou,Nt.isString=au,Nt.isSymbol=uu,Nt.isTypedArray=cu,Nt.isUndefined=function(e){return e===i},Nt.isWeakMap=function(e){return eu(e)&&lo(e)==j},Nt.isWeakSet=function(e){return eu(e)&&"[object WeakSet]"==Cr(e)},Nt.join=function(e,n){return null==e?"":Gn.call(e,n)},Nt.kebabCase=Wu,Nt.last=Jo,Nt.lastIndexOf=function(e,n,t){var r=null==e?0:e.length;if(!r)return-1;var o=r;return t!==i&&(o=(o=pu(t))<0?ht(r+o,0):mt(o,r-1)),n==n?function(e,n,t){for(var r=t+1;r--;)if(e[r]===n)return r;return r}(e,n,o):Mn(e,Ln,o,!0)},Nt.lowerCase=Hu,Nt.lowerFirst=Gu,Nt.lt=su,Nt.lte=du,Nt.max=function(e){return e&&e.length?pr(e,tc,Ar):i},Nt.maxBy=function(e,n){return e&&e.length?pr(e,oo(n,2),Ar):i},Nt.mean=function(e){return Wn(e,tc)},Nt.meanBy=function(e,n){return Wn(e,oo(n,2))},Nt.min=function(e){return e&&e.length?pr(e,tc,xr):i},Nt.minBy=function(e,n){return e&&e.length?pr(e,oo(n,2),xr):i},Nt.stubArray=gc,Nt.stubFalse=vc,Nt.stubObject=function(){return{}},Nt.stubString=function(){return""},Nt.stubTrue=function(){return!0},Nt.multiply=_c,Nt.nth=function(e,n){return e&&e.length?Fr(e,pu(n)):i},Nt.noConflict=function(){return ln._===this&&(ln._=Ne),this},Nt.noop=uc,Nt.now=Ta,Nt.pad=function(e,n,t){e=mu(e);var r=(n=pu(n))?dt(e):0;if(!n||r>=n)return e;var i=(n-r)/2;return zi(gn(i),t)+e+zi(pn(i),t)},Nt.padEnd=function(e,n,t){e=mu(e);var r=(n=pu(n))?dt(e):0;return n&&r<n?e+zi(n-r,t):e},Nt.padStart=function(e,n,t){e=mu(e);var r=(n=pu(n))?dt(e):0;return n&&r<n?zi(n-r,t)+e:e},Nt.parseInt=function(e,n,t){return t||null==n?n=0:n&&(n=+n),bt(mu(e).replace(re,""),n||0)},Nt.random=function(e,n,t){if(t&&"boolean"!=typeof t&&mo(e,n,t)&&(n=t=i),t===i&&("boolean"==typeof n?(t=n,n=i):"boolean"==typeof e&&(t=e,e=i)),e===i&&n===i?(e=0,n=1):(e=lu(e),n===i?(n=e,e=0):n=lu(n)),e>n){var r=e;e=n,n=r}if(t||e%1||n%1){var o=wt();return mt(e+o*(n-e+cn("1e-"+((o+"").length-1))),n)}return Gr(e,n)},Nt.reduce=function(e,n,t){var r=Wa(e)?Dn:Vn,i=arguments.length<3;return r(e,oo(n,4),t,i,dr)},Nt.reduceRight=function(e,n,t){var r=Wa(e)?xn:Vn,i=arguments.length<3;return r(e,oo(n,4),t,i,fr)},Nt.repeat=function(e,n,t){return n=(t?mo(e,n,t):n===i)?1:pu(n),Vr(mu(e),n)},Nt.replace=function(){var e=arguments,n=mu(e[0]);return e.length<3?n:n.replace(e[1],e[2])},Nt.result=function(e,n,t){var r=-1,o=(n=hi(n,e)).length;for(o||(o=1,e=i);++r<o;){var a=null==e?i:e[Po(n[r])];a===i&&(r=o,a=t),e=Ya(a)?a.call(e):a}return e},Nt.round=Ic,Nt.runInContext=e,Nt.sample=function(e){return(Wa(e)?Jt:Kr)(e)},Nt.size=function(e){if(null==e)return 0;if(Ga(e))return au(e)?dt(e):e.length;var n=lo(e);return n==I||n==O?e.size:Dr(e).length},Nt.snakeCase=Vu,Nt.some=function(e,n,t){var r=Wa(e)?Pn:ni;return t&&mo(e,n,t)&&(n=i),r(e,oo(n,3))},Nt.sortedIndex=function(e,n){return ti(e,n)},Nt.sortedIndexBy=function(e,n,t){return ri(e,n,oo(t,2))},Nt.sortedIndexOf=function(e,n){var t=null==e?0:e.length;if(t){var r=ti(e,n);if(r<t&&Ma(e[r],n))return r}return-1},Nt.sortedLastIndex=function(e,n){return ti(e,n,!0)},Nt.sortedLastIndexBy=function(e,n,t){return ri(e,n,oo(t,2),!0)},Nt.sortedLastIndexOf=function(e,n){if(null!=e&&e.length){var t=ti(e,n,!0)-1;if(Ma(e[t],n))return t}return-1},Nt.startCase=$u,Nt.startsWith=function(e,n,t){return e=mu(e),t=null==t?0:or(pu(t),0,e.length),n=ai(n),e.slice(t,t+n.length)==n},Nt.subtract=Cc,Nt.sum=function(e){return e&&e.length?$n(e,tc):0},Nt.sumBy=function(e,n){return e&&e.length?$n(e,oo(n,2)):0},Nt.template=function(e,n,t){var r=Nt.templateSettings;t&&mo(e,n,t)&&(n=i),e=mu(e),n=wu({},n,r,Ji);var o,a,u=wu({},n.imports,r.imports,Ji),c=ju(u),s=Qn(u,c),d=0,f=n.interpolate||be,l="__p += '",p=Te((n.escape||be).source+"|"+f.source+"|"+(f===Q?fe:be).source+"|"+(n.evaluate||be).source+"|$","g"),g="//# sourceURL="+(Ue.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++rn+"]")+"\n";e.replace(p,(function(n,t,r,i,u,c){return r||(r=i),l+=e.slice(d,c).replace(we,rt),t&&(o=!0,l+="' +\n__e("+t+") +\n'"),u&&(a=!0,l+="';\n"+u+";\n__p += '"),r&&(l+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),d=c+n.length,n})),l+="';\n";var v=Ue.call(n,"variable")&&n.variable;if(v){if(se.test(v))throw new _e("Invalid `variable` option passed into `_.template`")}else l="with (obj) {\n"+l+"\n}\n";l=(a?l.replace(L,""):l).replace(W,"$1").replace(H,"$1;"),l="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var h=Qu((function(){return Ie(c,g+"return "+l).apply(i,s)}));if(h.source=l,Ja(h))throw h;return h},Nt.times=function(e,n){if((e=pu(e))<1||e>f)return[];var t=p,r=mt(e,p);n=oo(n),e-=p;for(var i=Kn(r,n);++t<e;)n(t);return i},Nt.toFinite=lu,Nt.toInteger=pu,Nt.toLength=gu,Nt.toLower=function(e){return mu(e).toLowerCase()},Nt.toNumber=vu,Nt.toSafeInteger=function(e){return e?or(pu(e),-9007199254740991,f):0===e?e:0},Nt.toString=mu,Nt.toUpper=function(e){return mu(e).toUpperCase()},Nt.trim=function(e,n,t){if((e=mu(e))&&(t||n===i))return Jn(e);if(!e||!(n=ai(n)))return e;var r=ft(e),o=ft(n);return yi(r,Xn(r,o),et(r,o)+1).join("")},Nt.trimEnd=function(e,n,t){if((e=mu(e))&&(t||n===i))return e.slice(0,lt(e)+1);if(!e||!(n=ai(n)))return e;var r=ft(e);return yi(r,0,et(r,ft(n))+1).join("")},Nt.trimStart=function(e,n,t){if((e=mu(e))&&(t||n===i))return e.replace(re,"");if(!e||!(n=ai(n)))return e;var r=ft(e);return yi(r,Xn(r,ft(n))).join("")},Nt.truncate=function(e,n){var t=30,r="...";if(Xa(n)){var o="separator"in n?n.separator:o;t="length"in n?pu(n.length):t,r="omission"in n?ai(n.omission):r}var a=(e=mu(e)).length;if(it(e)){var u=ft(e);a=u.length}if(t>=a)return e;var c=t-dt(r);if(c<1)return r;var s=u?yi(u,0,c).join(""):e.slice(0,c);if(o===i)return s+r;if(u&&(c+=s.length-c),iu(o)){if(e.slice(c).search(o)){var d,f=s;for(o.global||(o=Te(o.source,mu(le.exec(o))+"g")),o.lastIndex=0;d=o.exec(f);)var l=d.index;s=s.slice(0,l===i?c:l)}}else if(e.indexOf(ai(o),c)!=c){var p=s.lastIndexOf(o);p>-1&&(s=s.slice(0,p))}return s+r},Nt.unescape=function(e){return(e=mu(e))&&$.test(e)?e.replace(G,pt):e},Nt.uniqueId=function(e){var n=++De;return mu(e)+n},Nt.upperCase=Ku,Nt.upperFirst=Ju,Nt.each=ma,Nt.eachRight=ya,Nt.first=Go,ac(Nt,(hc={},yr(Nt,(function(e,n){Ue.call(Nt.prototype,n)||(hc[n]=e)})),hc),{chain:!1}),Nt.VERSION="4.17.21",En(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){Nt[e].placeholder=Nt})),En(["drop","take"],(function(e,n){Lt.prototype[e]=function(t){t=t===i?1:ht(pu(t),0);var r=this.__filtered__&&!n?new Lt(this):this.clone();return r.__filtered__?r.__takeCount__=mt(t,r.__takeCount__):r.__views__.push({size:mt(t,p),type:e+(r.__dir__<0?"Right":"")}),r},Lt.prototype[e+"Right"]=function(n){return this.reverse()[e](n).reverse()}})),En(["filter","map","takeWhile"],(function(e,n){var t=n+1,r=1==t||3==t;Lt.prototype[e]=function(e){var n=this.clone();return n.__iteratees__.push({iteratee:oo(e,3),type:t}),n.__filtered__=n.__filtered__||r,n}})),En(["head","last"],(function(e,n){var t="take"+(n?"Right":"");Lt.prototype[e]=function(){return this[t](1).value()[0]}})),En(["initial","tail"],(function(e,n){var t="drop"+(n?"":"Right");Lt.prototype[e]=function(){return this.__filtered__?new Lt(this):this[t](1)}})),Lt.prototype.compact=function(){return this.filter(tc)},Lt.prototype.find=function(e){return this.filter(e).head()},Lt.prototype.findLast=function(e){return this.reverse().find(e)},Lt.prototype.invokeMap=$r((function(e,n){return"function"==typeof e?new Lt(this):this.map((function(t){return Sr(t,e,n)}))})),Lt.prototype.reject=function(e){return this.filter(Da(oo(e)))},Lt.prototype.slice=function(e,n){e=pu(e);var t=this;return t.__filtered__&&(e>0||n<0)?new Lt(t):(e<0?t=t.takeRight(-e):e&&(t=t.drop(e)),n!==i&&(t=(n=pu(n))<0?t.dropRight(-n):t.take(n-e)),t)},Lt.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Lt.prototype.toArray=function(){return this.take(p)},yr(Lt.prototype,(function(e,n){var t=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),o=Nt[r?"take"+("last"==n?"Right":""):n],a=r||/^find/.test(n);o&&(Nt.prototype[n]=function(){var n=this.__wrapped__,u=r?[1]:arguments,c=n instanceof Lt,s=u[0],d=c||Wa(n),f=function(e){var n=o.apply(Nt,Un([e],u));return r&&l?n[0]:n};d&&t&&"function"==typeof s&&1!=s.length&&(c=d=!1);var l=this.__chain__,p=!!this.__actions__.length,g=a&&!l,v=c&&!p;if(!a&&d){n=v?n:new Lt(this);var h=e.apply(n,u);return h.__actions__.push({func:la,args:[f],thisArg:i}),new zt(h,l)}return g&&v?e.apply(this,u):(h=this.thru(f),g?r?h.value()[0]:h.value():h)})})),En(["pop","push","shift","sort","splice","unshift"],(function(e){var n=Se[e],t=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);Nt.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(Wa(i)?i:[],e)}return this[t]((function(t){return n.apply(Wa(t)?t:[],e)}))}})),yr(Lt.prototype,(function(e,n){var t=Nt[n];if(t){var r=t.name+"";Ue.call(kt,r)||(kt[r]=[]),kt[r].push({name:n,func:t})}})),kt[qi(i,2).name]=[{name:"wrapper",func:i}],Lt.prototype.clone=function(){var e=new Lt(this.__wrapped__);return e.__actions__=Ei(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Ei(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Ei(this.__views__),e},Lt.prototype.reverse=function(){if(this.__filtered__){var e=new Lt(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Lt.prototype.value=function(){var e=this.__wrapped__.value(),n=this.__dir__,t=Wa(e),r=n<0,i=t?e.length:0,o=function(e,n,t){for(var r=-1,i=t.length;++r<i;){var o=t[r],a=o.size;switch(o.type){case"drop":e+=a;break;case"dropRight":n-=a;break;case"take":n=mt(n,e+a);break;case"takeRight":e=ht(e,n-a)}}return{start:e,end:n}}(0,i,this.__views__),a=o.start,u=o.end,c=u-a,s=r?u:a-1,d=this.__iteratees__,f=d.length,l=0,p=mt(c,this.__takeCount__);if(!t||!r&&i==c&&p==c)return fi(e,this.__actions__);var g=[];e:for(;c--&&l<p;){for(var v=-1,h=e[s+=n];++v<f;){var m=d[v],y=m.iteratee,b=m.type,w=y(h);if(2==b)h=w;else if(!w){if(1==b)continue e;break e}}g[l++]=h}return g},Nt.prototype.at=pa,Nt.prototype.chain=function(){return fa(this)},Nt.prototype.commit=function(){return new zt(this.value(),this.__chain__)},Nt.prototype.next=function(){this.__values__===i&&(this.__values__=fu(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},Nt.prototype.plant=function(e){for(var n,t=this;t instanceof Ft;){var r=No(t);r.__index__=0,r.__values__=i,n?o.__wrapped__=r:n=r;var o=r;t=t.__wrapped__}return o.__wrapped__=e,n},Nt.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Lt){var n=e;return this.__actions__.length&&(n=new Lt(this)),(n=n.reverse()).__actions__.push({func:la,args:[Xo],thisArg:i}),new zt(n,this.__chain__)}return this.thru(Xo)},Nt.prototype.toJSON=Nt.prototype.valueOf=Nt.prototype.value=function(){return fi(this.__wrapped__,this.__actions__)},Nt.prototype.first=Nt.prototype.head,Je&&(Nt.prototype[Je]=function(){return this}),Nt}();ln._=gt,(r=function(){return gt}.call(n,t,n,e))===i||(e.exports=r)}.call(this)}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,loaded:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e=t(486),n=t.n(e);function r(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function i(e,n){if(e){if("string"==typeof e)return r(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?r(e,n):void 0}}function o(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,i,o,a,u=[],c=!0,s=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;c=!1}else for(;!(c=(r=o.call(t)).done)&&(u.push(r.value),u.length!==n);c=!0);}catch(e){s=!0,i=e}finally{try{if(!c&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw i}}return u}}(e,n)||i(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function u(e){var n=function(e,n){if("object"!==a(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==a(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===a(n)?n:String(n)}function c(e,n,t){return(n=u(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var s=window,d=s.pbjs=s.pbjs||{};function f(){return d}function l(e){d.installedModules.push(e)}function p(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||i(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(e,n,t){return e&&e.includes(n,t)||!1}function v(e,n,t){return e&&e.find(n,t)}d.cmd=d.cmd||[],d.que=d.que||[],s===window&&(s._pbjsGlobals=s._pbjsGlobals||[],s._pbjsGlobals.push("pbjs"));var h=2,m={buckets:[{max:5,increment:.5}]},y={buckets:[{max:20,increment:.1}]},b={buckets:[{max:20,increment:.01}]},w={buckets:[{max:3,increment:.01},{max:8,increment:.05},{max:20,increment:.5}]},_={buckets:[{max:5,increment:.05},{max:10,increment:.1},{max:20,increment:.5}]};function I(e,n,t){var r="";if(!C(n))return r;var i=n.buckets.reduce((function(e,n){return e.max>n.max?e:n}),{max:0}),o=0,a=v(n.buckets,(function(n){if(e>i.max*t){var a=n.precision;void 0===a&&(a=h),r=(n.max*t).toFixed(a)}else{if(e<=n.max*t&&e>=o*t)return n.min=o,n;o=n.max}}));return a&&(r=A(e,a,t)),r}function C(e){if(Le(e)||!e.buckets||!Array.isArray(e.buckets))return!1;var n=!0;return e.buckets.forEach((function(e){e.max&&e.increment||(n=!1)})),n}function A(e,n,t){var r=void 0!==n.precision?n.precision:h,i=n.increment*t,o=n.min*t,a=Math.floor,u=D.getConfig("cpmRoundingFunction");"function"==typeof u&&(a=u);var c,s,d=Math.pow(10,r+2),f=(e*d-o*d)/(i*d);try{c=a(f)*i+o}catch(e){s=!0}return(s||"number"!=typeof c)&&(je("Invalid rounding function passed in config"),c=Math.floor(f)*i+o),(c=Number(c.toFixed(10))).toFixed(r)}function T(e,n,t,r,i){for(n=n.split?n.split("."):n,r=0;r<n.length;r++)e=e?e[n[r]]:i;return e===i?t:e}const E=JSON.parse('{"k2":{"xn":"adserverTargeting","zF":"standard"},"f":"pbjs_debug","Q_":{"Q":1},"FP":{"AUCTION_INIT":"auctionInit","AUCTION_END":"auctionEnd","BID_ADJUSTMENT":"bidAdjustment","BID_TIMEOUT":"bidTimeout","BID_REQUESTED":"bidRequested","BID_RESPONSE":"bidResponse","BID_REJECTED":"bidRejected","NO_BID":"noBid","SEAT_NON_BID":"seatNonBid","BID_WON":"bidWon","BIDDER_DONE":"bidderDone","BIDDER_ERROR":"bidderError","SET_TARGETING":"setTargeting","BEFORE_REQUEST_BIDS":"beforeRequestBids","BEFORE_BIDDER_HTTP":"beforeBidderHttp","REQUEST_BIDS":"requestBids","ADD_AD_UNITS":"addAdUnits","AD_RENDER_FAILED":"adRenderFailed","AD_RENDER_SUCCEEDED":"adRenderSucceeded","TCF2_ENFORCEMENT":"tcf2Enforcement","AUCTION_DEBUG":"auctionDebug","BID_VIEWABLE":"bidViewable","STALE_RENDER":"staleRender","BILLABLE_EVENT":"billableEvent"},"q_":{"PREVENT_WRITING_ON_MAIN_DOCUMENT":"preventWritingOnMainDocument","NO_AD":"noAd","EXCEPTION":"exception","CANNOT_FIND_AD":"cannotFindAd","MISSING_DOC_OR_ADID":"missingDocOrAdid"},"aI":{"bidWon":"adUnitCode"},"Ql":{"yE":"low","M2":"medium","lj":"high","B7":"auto","uN":"dense","qN":"custom"},"TD":{"BIDDER":"hb_bidder","AD_ID":"hb_adid","PRICE_BUCKET":"hb_pb","SIZE":"hb_size","DEAL":"hb_deal","SOURCE":"hb_source","FORMAT":"hb_format","UUID":"hb_uuid","CACHE_ID":"hb_cache_id","CACHE_HOST":"hb_cache_host","ADOMAIN":"hb_adomain","ACAT":"hb_acat","CRID":"hb_crid","DSP":"hb_dsp"},"kF":{"BIDDER":"hb_bidder","AD_ID":"hb_adid","PRICE_BUCKET":"hb_pb","SIZE":"hb_size","DEAL":"hb_deal","FORMAT":"hb_format","UUID":"hb_uuid","CACHE_HOST":"hb_cache_host"},"FY":{"title":"hb_native_title","body":"hb_native_body","body2":"hb_native_body2","privacyLink":"hb_native_privacy","privacyIcon":"hb_native_privicon","sponsoredBy":"hb_native_brand","image":"hb_native_image","icon":"hb_native_icon","clickUrl":"hb_native_linkurl","displayUrl":"hb_native_displayurl","cta":"hb_native_cta","rating":"hb_native_rating","address":"hb_native_address","downloads":"hb_native_downloads","likes":"hb_native_likes","phone":"hb_native_phone","price":"hb_native_price","salePrice":"hb_native_saleprice","rendererUrl":"hb_renderer_url","adTemplate":"hb_adTemplate"},"os":{"YZ":"s2s"},"UE":{"CK":"targetingSet","fe":"rendered"},"Gw":{"UI":"Bid has missing or invalid properties","Gp":"Invalid request ID","Dg":"Bidder code is not allowed by allowedAlternateBidderCodes / allowUnknownBidderCodes","Xx":"Unable to convert currency"},"V1":{"body":"desc","body2":"desc2","sponsoredBy":"sponsored","cta":"ctatext","rating":"rating","address":"address","downloads":"downloads","likes":"likes","phone":"phone","price":"price","salePrice":"saleprice","displayUrl":"displayurl"},"s$":{"sponsored":1,"desc":2,"rating":3,"likes":4,"downloads":5,"price":6,"saleprice":7,"phone":8,"address":9,"desc2":10,"displayurl":11,"ctatext":12},"oF":{"ICON":1,"MAIN":3},"zA":["privacyIcon","clickUrl","sendTargetingKeys","adTemplate","rendererUrl","type"]}');function O(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}var S,k="TRUE"===(S=E.f,In(Oe().search)[S]||"").toUpperCase(),j="random",R={};R[j]=!0,R.fixed=!0;var B=j,U={LOW:"low",MEDIUM:"medium",HIGH:"high",AUTO:"auto",DENSE:"dense",CUSTOM:"custom"},D=function(){var e,n,t,r=[],i=null;function u(){function r(e){return a[e].val}function i(e,n){a[e].val=n}e={};var a={publisherDomain:{set:function(e){null!=e&&je("publisherDomain is deprecated and has no effect since v7 - use pageUrl instead"),i("publisherDomain",e)}},priceGranularity:{val:U.MEDIUM,set:function(e){s(e)&&("string"==typeof e?i("priceGranularity",c(e)?e:U.MEDIUM):Fe(e)&&(i("customPriceBucket",e),i("priceGranularity",U.CUSTOM),Se("Using custom price granularity")))}},customPriceBucket:{val:{},set:function(){}},mediaTypePriceGranularity:{val:{},set:function(e){null!=e&&i("mediaTypePriceGranularity",Object.keys(e).reduce((function(n,t){return s(e[t])?"string"==typeof e?n[t]=c(e[t])?e[t]:r("priceGranularity"):Fe(e)&&(n[t]=e[t],Se("Using custom price granularity for ".concat(t))):je("Invalid price granularity for media type: ".concat(t)),n}),{}))}},bidderSequence:{val:B,set:function(e){R[e]?i("bidderSequence",e):je("Invalid order: ".concat(e,". Bidder Sequence was not set."))}},auctionOptions:{val:{},set:function(e){(function(e){if(!Fe(e))return je("Auction Options must be an object"),!1;for(var n=0,t=Object.keys(e);n<t.length;n++){var r=t[n];if("secondaryBidders"!==r&&"suppressStaleRender"!==r)return je("Auction Options given an incorrect param: ".concat(r)),!1;if("secondaryBidders"===r){if(!Ne(e[r]))return je("Auction Options ".concat(r," must be of type Array")),!1;if(!e[r].every(qe))return je("Auction Options ".concat(r," must be only string")),!1}else if("suppressStaleRender"===r&&!ze(e[r]))return je("Auction Options ".concat(r," must be of type boolean")),!1}return!0})(e)&&i("auctionOptions",e)}}},u={debug:k,bidderTimeout:3e3,enableSendAllBids:!0,useBidCache:!1,deviceAccess:!0,timeoutBuffer:400,disableAjaxTimeout:!1,maxNestedIframes:10};function c(e){return v(Object.keys(U),(function(n){return e===U[n]}))}function s(e){if(!e)return Re("Prebid Error: no value passed to `setPriceGranularity()`"),!1;if("string"==typeof e)c(e)||je("Prebid Warning: setPriceGranularity was called with invalid setting, using `medium` as default.");else if(Fe(e)&&!C(e))return Re("Invalid custom price value passed to `setPriceGranularity()`"),!1;return!0}Object.defineProperties(u,Object.fromEntries(Object.entries(a).map((function(e){var n=o(e,2),t=n[0],a=n[1];return[t,Object.assign({get:r.bind(null,t),set:i.bind(null,t),enumerable:!0},a)]})))),n&&_(Object.keys(n).reduce((function(e,t){return n[t]!==u[t]&&(e[t]=u[t]||{}),e}),{})),n=u,t={}}function s(){if(i&&t&&Fe(t[i])){var e=t[i];return function(){return Array.from.apply(Array,arguments)}(new Set(Object.keys(n).concat(Object.keys(e)))).reduce((function(t,r){return void 0===e[r]?t[r]=n[r]:void 0===n[r]?t[r]=e[r]:Fe(e[r])?t[r]=En({},n[r],e[r]):t[r]=e[r],t}),{})}return Object.assign({},n)}var d=[s,function(){var e=s();return Object.defineProperty(e,"ortb2",{get:function(){throw new Error("invalid access to 'orbt2' config - use request parameters instead")}}),e}].map((function(e){return function(){if(arguments.length<=1&&"function"!=typeof(arguments.length<=0?void 0:arguments[0])){var n=arguments.length<=0?void 0:arguments[0];return n?T(e(),n):s()}return w.apply(void 0,arguments)}})),f=o(d,2),l=f[0],p=f[1],h=o([p,l].map((function(e){return function(){var n=e.apply(void 0,arguments);return n&&"object"===a(n)&&(n=sn(n)),n}})),2),m=h[0],y=h[1];function b(t){if(Fe(t)){var r=Object.keys(t),i={};r.forEach((function(r){var o=t[r];Fe(e[r])&&Fe(o)&&(o=Object.assign({},e[r],o));try{i[r]=n[r]=o}catch(e){je("Cannot set config for property ".concat(r," : "),e)}})),_(i)}else Re("setConfig options must be an object")}function w(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=n;if("string"!=typeof e&&(i=e,e="*",t=n||{}),"function"==typeof i){var o={topic:e,callback:i};return r.push(o),t.init&&i("*"===e?p():c({},e,p(e))),function(){r.splice(r.indexOf(o),1)}}Re("listener must be a function")}function _(e){var n=Object.keys(e);r.filter((function(e){return g(n,e.topic)})).forEach((function(n){n.callback(c({},n.topic,e[n.topic]))})),r.filter((function(e){return"*"===e.topic})).forEach((function(n){return n.callback(e)}))}function I(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];try{!function(e){if(!Fe(e))throw"setBidderConfig bidder options must be an object";if(!Array.isArray(e.bidders)||!e.bidders.length)throw"setBidderConfig bidder options must contain a bidders list with at least 1 bidder";if(!Fe(e.config))throw"setBidderConfig bidder options must contain a config object"}(e),e.bidders.forEach((function(r){t[r]||(t[r]={}),Object.keys(e.config).forEach((function(i){var o=e.config[i];if(Fe(o)){var a=n?En:Object.assign;t[r][i]=a({},t[r][i]||{},o)}else t[r][i]=o}))}))}catch(e){Re(e)}}function A(e,n){i=e;try{return n()}finally{E()}}function E(){i=null}return u(),{getCurrentBidder:function(){return i},resetBidder:E,getConfig:p,getAnyConfig:l,readConfig:m,readAnyConfig:y,setConfig:b,mergeConfig:function(e){if(Fe(e)){var n=En(s(),e);return b(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?O(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):O(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({},n)),n}Re("mergeConfig input must be an object")},setDefaults:function(t){Fe(e)?(Object.assign(e,t),Object.assign(n,t)):Re("defaults must be an object")},resetConfig:u,runWithBidder:A,callbackWithBidder:function(e){return function(n){return function(){if("function"==typeof n){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];return A(e,me.call.apply(me,[n,this].concat(r)))}je("config.callbackWithBidder callback is not a function")}}},setBidderConfig:I,getBidderConfig:function(){return t},mergeBidderConfig:function(e){return I(e,!0)}}}(),x=t(79),P=t.n(x);function q(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function N(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,u(r.key),r)}}function M(e,n,t){return n&&N(e.prototype,n),t&&N(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function F(e,n,t){if(!n.has(e))throw new TypeError("attempted to "+t+" private field on non-instance");return n.get(e)}function z(e,n){return function(e,n){return n.get?n.get.call(e):n.value}(e,F(e,n,"get"))}function L(e,n,t){return function(e,n,t){if(n.set)n.set.call(e,t);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=t}}(e,F(e,n,"set"),t),t}function W(e,n,t){!function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,n),n.set(e,t)}function H(e,n,t){return function(e,n){if(e!==n)throw new TypeError("Private static access of wrong provenance")}(e,n),t}var G=0,V=1,$=new WeakMap,K=new WeakMap,J=function(){function e(n){if(q(this,e),W(this,$,{writable:!0,value:void 0}),W(this,K,{writable:!0,value:void 0}),"function"!=typeof n)throw new Error("resolver not a function");var t=[],r=[],i=o([G,V].map((function(e){return function(n){if(e===G&&"function"==typeof(null==n?void 0:n.then))n.then(a,u);else if(!t.length)for(t.push(e,n);r.length;)r.shift()()}})),2),a=i[0],u=i[1];try{n(a,u)}catch(e){u(e)}L(this,$,t),L(this,K,r)}return M(e,[{key:"then",value:function(e,n){var t=this,r=z(this,$);return new this.constructor((function(i,a){var u=function(){var t=r[1],u=o(r[0]===G?[e,i]:[n,a],2),c=u[0],s=u[1];if("function"==typeof c){try{t=c(t)}catch(e){return void a(e)}s=i}s(t)};r.length?u():z(t,K).push(u)}))}},{key:"catch",value:function(e){return this.then(null,e)}},{key:"finally",value:function(e){var n,t=this;return this.then((function(t){return n=t,e()}),(function(r){return n=t.constructor.reject(r),e()})).then((function(){return n}))}}],[{key:"timeout",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return new e((function(e){0===n?e():setTimeout(e,n)}))}},{key:"race",value:function(n){var t=this;return new this((function(r,i){H(t,e,Y).call(t,n,(function(e,n){return e?r(n):i(n)}))}))}},{key:"all",value:function(n){var t=this;return new this((function(r,i){var o=[];H(t,e,Y).call(t,n,(function(e,n,t){return e?o[t]=n:i(n)}),(function(){return r(o)}))}))}},{key:"allSettled",value:function(n){var t=this;return new this((function(r){var i=[];H(t,e,Y).call(t,n,(function(e,n,t){return i[t]=e?{status:"fulfilled",value:n}:{status:"rejected",reason:n}}),(function(){return r(i)}))}))}},{key:"resolve",value:function(e){return new this((function(n){return n(e)}))}},{key:"reject",value:function(e){return new this((function(n,t){return t(e)}))}}]),e}();function Y(e,n,t){var r=this,i=e.length;function o(){n.apply(this,arguments),--i<=0&&t&&t()}0===e.length&&t?t():e.forEach((function(e,n){return r.resolve(e).then((function(e){return o(!0,e,n)}),(function(e){return o(!1,e,n)}))}))}function Q(){var e,n,t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).promiseFactory;function r(e){return function(n){return e(n)}}return{promise:(void 0===t?function(e){return new J(e)}:t)((function(t,r){e=t,n=r})),resolve:r(e),reject:r(n)}}var Z,X="Array",ee="String",ne="Function",te="Number",re="Object",ie="Boolean",oe=Object.prototype.toString,ae=Boolean(window.console),ue=Boolean(ae&&window.console.log),ce=Boolean(ae&&window.console.info),se=Boolean(ae&&window.console.warn),de=Boolean(ae&&window.console.error),fe=f();function le(){null!=Z&&Z.apply(void 0,arguments)}var pe,ge={checkCookieSupport:gn,createTrackPixelIframeHtml:function(e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return e?((!(arguments.length>1&&void 0!==arguments[1])||arguments[1])&&(e=encodeURI(e)),n&&(n='sandbox="'.concat(n,'"')),"<iframe ".concat(n,' id="').concat(be(),'"\n      frameborder="0"\n      allowtransparency="true"\n      marginheight="0" marginwidth="0"\n      width="0" hspace="0" vspace="0" height="0"\n      style="height:0px;width:0px;display:none;"\n      scrolling="no"\n      src="').concat(e,'">\n    </iframe>')):""},getWindowSelf:Ee,getWindowTop:Te,getWindowLocation:Oe,insertUserSyncIframe:Qe,insertElement:$e,isFn:Pe,triggerPixel:Je,logError:Re,logWarn:je,logMessage:Se,logInfo:ke,parseQS:In,formatQS:function(e){return Object.keys(e).map((function(n){return Array.isArray(e[n])?e[n].map((function(e){return"".concat(n,"[]=").concat(e)})).join("&"):"".concat(n,"=").concat(e[n])})).join("&")},deepEqual:Tn},ve={},he={},me=function(e,n){return n}.bind(null,1,he)()===he?Function.prototype.bind:function(e){var n=this,t=Array.prototype.slice.call(arguments,1);return function(){return n.apply(e,t.concat(Array.prototype.slice.call(arguments)))}},ye=(pe=0,function(){return++pe});function be(){return ye()+Math.random().toString(16).substr(2)}function we(e){return e?(e^(window&&window.crypto&&window.crypto.getRandomValues?crypto.getRandomValues(new Uint8Array(1))[0]%16:16*Math.random())>>e/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,we)}function _e(e,n){return n&&n[e]?n[e]:""}function Ie(e){if(e){var n=[];if(e.mediaTypes&&e.mediaTypes.banner&&Array.isArray(e.mediaTypes.banner.sizes)){var t=e.mediaTypes.banner.sizes;Array.isArray(t[0])?n=t:n.push(t)}else Array.isArray(e.sizes)&&(Array.isArray(e.sizes[0])?n=e.sizes:n.push(e.sizes));return n}}function Ce(e){var n,t,r=[];if("string"==typeof e){var i=e.split(","),o=/^(\d)+x(\d)+$/i;if(i)for(var u in i)t=u,((n=i).hasOwnProperty?n.hasOwnProperty(t):void 0!==n[t]&&n.constructor.prototype[t]!==n[t])&&i[u].match(o)&&r.push(i[u])}else if("object"===a(e)){var c=e.length;if(c>0)if(2===c&&"number"==typeof e[0]&&"number"==typeof e[1])r.push(Ae(e));else for(var s=0;s<c;s++)r.push(Ae(e[s]))}return r}function Ae(e){if(function(e){return Ne(e)&&2===e.length&&!isNaN(e[0])&&!isNaN(e[1])}(e))return e[0]+"x"+e[1]}function Te(){return window.top}function Ee(){return window.self}function Oe(){return window.location}function Se(){De()&&ue&&console.log.apply(console,Ue(arguments,"MESSAGE:"))}function ke(){De()&&ce&&console.info.apply(console,Ue(arguments,"INFO:"))}function je(){De()&&se&&console.warn.apply(console,Ue(arguments,"WARNING:")),le(E.FP.AUCTION_DEBUG,{type:"WARNING",arguments})}function Re(){De()&&de&&console.error.apply(console,Ue(arguments,"ERROR:")),le(E.FP.AUCTION_DEBUG,{type:"ERROR",arguments})}function Be(e){function n(n){return function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];n.apply(void 0,[e].concat(r))}}return{logError:n(Re),logWarn:n(je),logMessage:n(Se),logInfo:n(ke)}}function Ue(e,n){e=[].slice.call(e);var t=D.getCurrentBidder();return n&&e.unshift(n),t&&e.unshift(r("#aaa")),e.unshift(r("#3b88c3")),e.unshift("%cPrebid"+(t?"%c".concat(t):"")),e;function r(e){return"display: inline-block; color: #fff; background: ".concat(e,"; padding: 1px 4px; border-radius: 3px;")}}function De(){return!!D.getConfig("debug")}function xe(e,n){return oe.call(e)==="[object "+n+"]"}function Pe(e){return xe(e,ne)}function qe(e){return xe(e,ee)}function Ne(e){return xe(e,X)}function Me(e){return xe(e,te)}function Fe(e){return xe(e,re)}function ze(e){return xe(e,ie)}function Le(e){if(!e)return!0;if(Ne(e)||qe(e))return!(e.length>0);for(var n in e)if(hasOwnProperty.call(e,n))return!1;return!0}function We(e){return qe(e)&&(!e||0===e.length)}function He(e,n){if(!Le(e)){if(Pe(e.forEach))return e.forEach(n,this);var t=0,r=e.length;if(r>0)for(;t<r;t++)n(e[t],t,e);else for(t in e)hasOwnProperty.call(e,t)&&n.call(this,e[t],t)}}function Ge(e,n){if(Le(e))return!1;if(Pe(e.indexOf))return-1!==e.indexOf(n);for(var t=e.length;t--;)if(e[t]===n)return!0;return!1}function Ve(e,n){if(Le(e))return[];if(Pe(e.map))return e.map(n);var t=[];return He(e,(function(r,i){t.push(n(r,i,e))})),t}function $e(e,n,t,r){var i;n=n||document,i=t?n.getElementsByTagName(t):n.getElementsByTagName("head");try{if((i=i.length?i:n.getElementsByTagName("body")).length){i=i[0];var o=r?null:i.firstChild;return i.insertBefore(e,o)}}catch(e){}}function Ke(e,n){var t=null;return new J((function(r){var i=function n(){e.removeEventListener("load",n),e.removeEventListener("error",n),null!=t&&window.clearTimeout(t),r()};e.addEventListener("load",i),e.addEventListener("error",i),null!=n&&(t=window.setTimeout(i,n))}))}function Je(e,n,t){var r=new Image;n&&ge.isFn(n)&&Ke(r,t).then(n),r.src=e}function Ye(e){var n=e.source,t=e.burl;n===E.os.YZ&&t&&ge.triggerPixel(t)}function Qe(e,n,t){var r=ge.createTrackPixelIframeHtml(e,!1,"allow-scripts allow-same-origin"),i=document.createElement("div");i.innerHTML=r;var o=i.firstChild;n&&ge.isFn(n)&&Ke(o,t).then(n),ge.insertElement(o,document,"html",!0)}function Ze(e,n,t){return t.indexOf(e)===n}function Xe(e,n){return e.concat(n)}function en(e,n){return e[n]}function nn(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:fe.adUnits).map((function(e){return e.bids.map((function(e){return e.bidder})).reduce(Xe,[])})).reduce(Xe,[]).filter((function(e){return void 0!==e})).filter(Ze)}function tn(){if(window.googletag&&Pe(window.googletag.pubads)&&Pe(window.googletag.pubads().getSlots))return!0}var rn=an("timeToRespond",(function(e,n){return e>n})),on=an("responseTimestamp",(function(e,n){return e>n}));function an(e,n){return function(t,r){return t.cpm===r.cpm?n(t[e],r[e])?r:t:t.cpm<r.cpm?r:t}}function un(e){for(var n=e.length;n>0;){var t=Math.floor(Math.random()*n),r=e[--n];e[n]=e[t],e[t]=r}return e}function cn(e,n){return g(e,n&&n.adUnitCode)}function sn(e){return P()(e)}function dn(e,n){if(e)return e.replace(/\$\{AUCTION_PRICE\}/g,n)}function fn(e,n){if(e&&n&&"string"==typeof n)return e.replace(/\${CLICKTHROUGH}/g,n)}function ln(){return(new Date).getTime()}function pn(){return!1!==D.getConfig("deviceAccess")}function gn(){if(window.navigator.cookieEnabled||document.cookie.length)return!0}function vn(e,n){if(n<1)throw new Error("numRequiredCalls must be a positive number. Got ".concat(n));var t=0;return function(){++t===n&&e.apply(this,arguments)}}function hn(e,n){return e.reduce((function(e,t){return(e[t[n]]=e[t[n]]||[]).push(t),e}),{})}function mn(e,n){return n.filter((function(n){return e[n]})).reduce((function(n,t){return Object.assign(n,c({},t,e[t]))}),{})}function yn(e,n,t){return e.filter((function(e){return e.code===n})).flatMap((function(e){return e.bids})).filter((function(e){return e.bidder===t})).map((function(e){return e.params||{}}))}an("responseTimestamp",(function(e,n){return e<n}));function bn(e){return Number.isInteger?Number.isInteger(e):"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}function wn(e,n){return"object"!==a(e)?{}:n.reduce((function(t,r,i){if("function"==typeof r)return t;var o=r,a=r.match(/^(.+?)\sas\s(.+?)$/i);a&&(r=a[1],o=a[2]);var u=e[r];return"function"==typeof n[i+1]&&(u=n[i+1](u,t)),void 0!==u&&(t[o]=u),t}),{})}function _n(e,n){return Ne(e)&&(!n||e.length===n)&&e.every((function(e){return bn(e)}))}function In(e){return e?e.replace(/^\?/,"").split("&").reduce((function(e,n){var t=o(n.split("="),2),r=t[0],i=t[1];return/\[\]$/.test(r)?(e[r=r.replace("[]","")]=e[r]||[],e[r].push(i)):e[r]=i||"",e}),{}):{}}function Cn(e,n){var t=document.createElement("a");n&&"noDecodeWholeURL"in n&&n.noDecodeWholeURL?t.href=e:t.href=decodeURIComponent(e);var r=n&&"decodeSearchAsString"in n&&n.decodeSearchAsString;return{href:t.href,protocol:(t.protocol||"").replace(/:$/,""),hostname:t.hostname,port:+t.port,pathname:t.pathname.replace(/^(?!\/)/,"/"),search:r?t.search:ge.parseQS(t.search||""),hash:(t.hash||"").replace(/^#/,""),host:t.host||window.location.host}}function An(e){return(e.protocol||"http")+"://"+(e.host||e.hostname+(e.port?":".concat(e.port):""))+(e.pathname||"")+(e.search?"?".concat(ge.formatQS(e.search||"")):"")+(e.hash?"#".concat(e.hash):"")}function Tn(e,n){var t=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).checkTypes,r=void 0!==t&&t;if(e===n)return!0;if("object"!==a(e)||null===e||"object"!==a(n)||null===n||r&&e.constructor!==n.constructor)return!1;if(Object.keys(e).length!==Object.keys(n).length)return!1;for(var i in e){if(!n.hasOwnProperty(i))return!1;if(!Tn(e[i],n[i],{checkTypes:r}))return!1}return!0}function En(e){for(var n=arguments.length,t=new Array(n>1?n-1:0),r=1;r<n;r++)t[r-1]=arguments[r];if(!t.length)return e;var i=t.shift();if(Fe(e)&&Fe(i)){var o=function(n){Fe(i[n])?(e[n]||Object.assign(e,c({},n,{})),En(e[n],i[n])):Ne(i[n])?e[n]?Ne(e[n])&&i[n].forEach((function(t){for(var r=1,i=0;i<e[n].length;i++)if(Tn(e[n][i],t)){r=0;break}r&&e[n].push(t)})):Object.assign(e,c({},n,p(i[n]))):Object.assign(e,c({},n,i[n]))};for(var a in i)o(a)}return En.apply(void 0,[e].concat(t))}function On(e){for(var n,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=function(e,n){if(Pe(Math.imul))return Math.imul(e,n);var t=(4194303&e)*(n|=0);return 4290772992&e&&(t+=(4290772992&e)*n|0),0|t},i=3735928559^t,o=1103547991^t,a=0;a<e.length;a++)i=r(i^(n=e.charCodeAt(a)),2654435761),o=r(o^n,1597334677);return i=r(i^i>>>16,2246822507)^r(o^o>>>13,3266489909),(4294967296*(2097151&(o=r(o^o>>>16,2246822507)^r(i^i>>>13,3266489909)))+(i>>>0)).toString()}function Sn(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e},t=new Map,r=function(){var r=n.apply(this,arguments);return t.has(r)||t.set(r,e.apply(this,arguments)),t.get(r)};return r.clear=t.clear.bind(t),r}function kn(e,n,t){n.split&&(n=n.split("."));for(var r,i,o=0,a=n.length,u=e;o<a&&"__proto__"!==(i=n[o++])&&"constructor"!==i&&"prototype"!==i;)u=u[i]=o===a?t:typeof(r=u[i])==typeof n?r:0*n[o]!=0||~(""+n[o]).indexOf(".")?{}:[]}function jn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Rn(){var e,n,t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=r.startTime,a=void 0===i?ln:i,u=r.ttl,s=void 0===u?function(){return null}:u,d=r.monotonic,f=void 0!==d&&d,l=r.slack,p=void 0===l?5e3:l,g=new Map,v=[],h=f?function(e){return v.push(e)}:function(e){return v.splice(function(e,n){for(var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(e){return e},r=0,i=e.length&&e.length-1,o=t(n);i-r>1;){var a=r+Math.round((i-r)/2);o>t(e[a])?r=a:i=a}for(;e.length>r&&o>t(e[r]);)r++;return r}(v,e,(function(e){return e.expiry})),0,e)};function m(){if(t&&clearTimeout(t),v.length>0){var e=ln();n=Math.max(e,v[0].expiry+p),t=setTimeout((function(){for(var e=ln(),n=0,r=0,i=v;r<i.length;r++){var o=i[r];if(o.expiry>e)break;g.delete(o.item),n++}v.splice(0,n),t=null,m()}),n-e)}else t=null}var y={};return c(e={},Symbol.iterator,(function(){return g.keys()})),c(e,"add",(function(e){!g.has(e)&&g.set(e,function(e){var r,i={},u=y,c=Object.entries({start:a,delta:s}).map((function(a){var c,s=o(a,2),d=s[0],f=s[1];return function(){var o=c={};J.resolve(f(e)).then((function(e){o===c&&(i[d]=e,u===y&&null!=i.start&&null!=i.delta&&(r=i.start+i.delta,h(g),(null==t||n>r+p)&&m()))}))}})),d=o(c,2),f=d[0],l=d[1],g={item:e,refresh:l,get expiry(){return r}};return f(),l(),g}(e))})),c(e,"clear",(function(){v.length=0,m(),g.clear(),y={}})),c(e,"toArray",(function(){return Array.from(g.keys())})),c(e,"refresh",(function(){v.length=0,m();var e,n=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return jn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?jn(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){u=!0,o=e},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}(g.values());try{for(n.s();!(e=n.n()).done;)e.value.refresh()}catch(e){n.e(e)}finally{n.f()}})),e}var Bn="eventHistoryTTL",Un=null,Dn=Rn({monotonic:!0,ttl:function(){return Un}});D.getConfig(Bn,(function(e){var n,t=Un;e=null===(n=e)||void 0===n?void 0:n[Bn],t!==(Un="number"==typeof e?1e3*e:null)&&Dn.refresh()}));var xn,Pn=Array.prototype.slice,qn=Array.prototype.push,Nn=Object.values(E.FP),Mn=E.aI,Fn=function(){var e={},n={on:function(n,t,r){if(function(e){return Ge(Nn,e)}(n)){var i=e[n]||{que:[]};r?(i[r]=i[r]||{que:[]},i[r].que.push(t)):i.que.push(t),e[n]=i}else Re("Wrong event name : "+n+" Valid event names :"+Nn)},emit:function(n){!function(n,t){Se("Emitting event for: "+n);var r=t[0]||{},i=r[Mn[n]],o=e[n]||{que:[]},a=Ve(o,(function(e,n){return n})),u=[];Dn.add({eventType:n,args:r,id:i,elapsedTime:window.performance&&window.performance.now&&window.performance.now()||0}),i&&Ge(a,i)&&qn.apply(u,o[i].que),qn.apply(u,o.que),He(u,(function(e){if(e)try{e.apply(null,t)}catch(e){Re("Error executing handler:","events.js",e)}}))}(n,Pn.call(arguments,1))},off:function(n,t,r){var i=e[n];Le(i)||Le(i.que)&&Le(i[r])||r&&(Le(i[r])||Le(i[r].que))||(r?He(i[r].que,(function(e){var n=i[r].que;e===t&&n.splice(n.indexOf(e),1)})):He(i.que,(function(e){var n=i.que;e===t&&n.splice(n.indexOf(e),1)})),e[n]=i)},get:function(){return e},addEvents:function(e){Nn=Nn.concat(e)},getEvents:function(){return Dn.toArray().map((function(e){return Object.assign({},e)}))}};return n}();xn=Fn.emit.bind(Fn),Z=xn;var zn=Fn.on,Ln=Fn.off,Wn=(Fn.get,Fn.getEvents),Hn=Fn.emit;Fn.addEvents;var Gn={fetch:window.fetch.bind(window),makeRequest:function(e,n){return new Request(e,n)},timeout:function(e,n){var t=new AbortController,r=setTimeout((function(){t.abort(),Re("Request timeout after ".concat(e,"ms"),n),r=null}),e);return{signal:t.signal,done:function(){r&&clearTimeout(r)}}}},Vn="GET",$n="POST",Kn="Content-Type";function Jn(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:3e3,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.request,i=t.done,o=function(e,t){var r,i,o;null==n||null!=(null===(r=t)||void 0===r?void 0:r.signal)||D.getConfig("disableAjaxTimeout")||(o=Gn.timeout(n,e),t=Object.assign({signal:o.signal},t));var a=Gn.fetch(e,t);return null!=(null===(i=o)||void 0===i?void 0:i.done)&&(a=a.finally(o.done)),a};return null==r&&null==i||(e=o,o=function(n,t){var o=new URL(null==(null==n?void 0:n.url)?n:n.url,document.location).origin,a=e(n,t);return r&&r(o),i&&(a=a.finally((function(){return i(o)}))),a}),o}function Yn(e,n){var t=e.status,r=e.statusText,i=void 0===r?"":r,o=e.headers,a=e.url,u=0;return{readyState:XMLHttpRequest.DONE,status:t,statusText:i,responseText:n,response:n,responseType:"",responseURL:a,get responseXML(){if(0===u)try{var e;u=(new DOMParser).parseFromString(n,null==o||null===(e=o.get(Kn))||void 0===e||null===(e=e.split(";"))||void 0===e?void 0:e[0])}catch(e){u=null,Re(e)}return u},getResponseHeader:function(e){return null!=o&&o.has(e)?o.get(e):null}}}function Qn(){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Jn(arguments.length>0&&void 0!==arguments[0]?arguments[0]:3e3,{request:e.request,done:e.done});return function(e,t,r){!function(e,n){var t="object"===a(n)&&null!=n?n:{success:"function"==typeof n?n:function(){return null},error:function(e,n){return Re("Network error",e,n)}},r=t.success,i=t.error;e.then((function(e){return e.text().then((function(n){return[e,n]}))})).then((function(e){var n=o(e,2),t=n[0],a=n[1],u=Yn(t,a);t.ok||304===t.status?r(a,u):i(t.statusText,u)}),(function(){return i("",Yn({status:0},""))}))}(n(function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=t.method||(n?$n:Vn);if(r===Vn&&n){var i=Cn(e,t);Object.assign(i.search,n),e=An(i)}var o=new Headers(t.customHeaders);o.set(Kn,t.contentType||"text/plain");var a={method:r,headers:o};return r!==Vn&&n&&(a.body=n),t.withCredentials&&(a.credentials="include"),t.browsingTopics&&isSecureContext&&(a.browsingTopics=!0),Gn.makeRequest(e,a)}(e,r,arguments.length>3&&void 0!==arguments[3]?arguments[3]:{})),t)}}var Zn=Qn(),Xn=(Jn(),15);function et(e){var n,t,r,i=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).index,o=void 0===i?No.index:i,a=e.vastXml?e.vastXml:(n=e.vastUrl,r=(t=e.vastImpUrl)?"<![CDATA[".concat(t,"]]>"):"",'<VAST version="3.0">\n    <Ad>\n      <Wrapper>\n        <AdSystem>prebid.org wrapper</AdSystem>\n        <VASTAdTagURI><![CDATA['.concat(n,"]]></VASTAdTagURI>\n        <Impression>").concat(r,"</Impression>\n        <Creatives></Creatives>\n      </Wrapper>\n    </Ad>\n  </VAST>")),u=o.getAuction(e),c={type:"xml",value:a,ttlseconds:Number(e.ttl)+Xn};return D.getConfig("cache.vasttrack")&&(c.bidder=e.bidder,c.bidid=e.requestId,c.aid=e.auctionId),null!=u&&(c.timestamp=u.getAuctionStart()),"string"==typeof e.customCacheKey&&""!==e.customCacheKey&&(c.key=e.customCacheKey),c}var nt=new WeakMap,tt=["debugging","adloox","criteo","outstream","adagio","spotx","browsi","brandmetrics","justtag","tncId","akamaidap","ftrackId","inskin","hadron","medianet","improvedigital","aaxBlockmeter","confiant","arcspan","airgrid","clean.io","a1Media","geoedge"];function rt(e,n,t,r,i){if(n&&e){if(g(tt,n)){r||(r=document);var o=c(r,e);if(o)return t&&"function"==typeof t&&(o.loaded?t():o.callbacks.push(t)),o.tag;var a=nt.get(r)||{},u={loaded:!1,tag:null,callbacks:[]};return a[e]=u,nt.set(r,a),t&&"function"==typeof t&&u.callbacks.push(t),je("module ".concat(n," is loading external JavaScript")),function(n,t,r,i){r||(r=document);var o=r.createElement("script");o.type="text/javascript",o.async=!0;var a=c(r,e);return a&&(a.tag=o),o.readyState?o.onreadystatechange=function(){"loaded"!==o.readyState&&"complete"!==o.readyState||(o.onreadystatechange=null,t())}:o.onload=function(){t()},o.src=n,i&&function(e,n){for(var t in n)n.hasOwnProperty(t)&&e.setAttribute(t,n[t])}(o,i),$e(o,r),o}(e,(function(){u.loaded=!0;try{for(var e=0;e<u.callbacks.length;e++)u.callbacks[e]()}catch(e){Re("Error executing callback","adloader.js:loadExternalScript",e)}}),r,i)}Re("".concat(n," not whitelisted for loading external JavaScript"))}else Re("cannot load external script without url and moduleCode");function c(e,n){var t=nt.get(e);return t&&t[n]?t[n]:null}}var it=f(),ot="outstream";function at(e){var n=this,t=e.url,r=e.config,i=e.id,o=e.callback,a=e.loaded,u=e.adUnitCode,c=e.renderNow;this.url=t,this.config=r,this.handlers={},this.id=i,this.renderNow=c,this.loaded=a,this.cmd=[],this.push=function(e){"function"==typeof e?n.loaded?e.call():n.cmd.push(e):Re("Commands given to Renderer.push must be wrapped in a function")},this.callback=o||function(){n.loaded=!0,n.process()},this.render=function(){var e=this,n=arguments,r=function(){e._render?e._render.apply(e,n):je("No render function was provided, please use .setRender on the renderer")};!function(e){var n=v(it.adUnits,(function(n){return n.code===e}));if(!n)return!1;var t=T(n,"renderer"),r=!!(t&&t.url&&t.render),i=T(n,"mediaTypes.video.renderer"),o=!!(i&&i.url&&i.render);return!!(r&&!0!==t.backupOnly||o&&!0!==i.backupOnly)}(u)?c?r():(this.cmd.unshift(r),rt(t,ot,this.callback,this.documentContext)):(je("External Js not loaded by Renderer since renderer url and callback is already defined on adUnit ".concat(u)),r())}.bind(this)}function ut(e){return!(!e||!e.url&&!e.renderNow)}function ct(e,n,t){var r=null;e.config&&e.config.documentResolver&&(r=e.config.documentResolver(n,document,t)),r||(r=document),e.documentContext=r,e.render(n,e.documentContext)}function st(e,n,t){if(!n.has(e))throw new TypeError("attempted to get private field on non-instance");return t}at.install=function(e){return new at({url:e.url,config:e.config,id:e.id,callback:e.callback,loaded:e.loaded,adUnitCode:e.adUnitCode,renderNow:e.renderNow})},at.prototype.getConfig=function(){return this.config},at.prototype.setRender=function(e){this._render=e},at.prototype.setEventHandlers=function(e){this.handlers=e},at.prototype.handleVideoEvent=function(e){var n=e.id,t=e.eventName;"function"==typeof this.handlers[t]&&this.handlers[t](),Se("Prebid Renderer event for id ".concat(n," type ").concat(t))},at.prototype.process=function(){for(;this.cmd.length>0;)try{this.cmd.shift().call()}catch(e){Re("Error processing Renderer command: ",e)}};var dt=new WeakSet,ft=function(){function e(n,t){var r,i;q(this,e),function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(r=this,i=dt),i.add(r),this.getSettings=n,this.defaultScope=t}return M(e,[{key:"get",value:function(e,n){var t=this.getOwn(e,n);return void 0===t&&(t=this.getOwn(null,n)),t}},{key:"getOwn",value:function(e,n){return e=st(this,dt,lt).call(this,e),T(this.getSettings(),"".concat(e,".").concat(n))}},{key:"getScopes",value:function(){var e=this;return Object.keys(this.getSettings()).filter((function(n){return n!==e.defaultScope}))}},{key:"settingsFor",value:function(e){return En({},this.ownSettingsFor(null),this.ownSettingsFor(e))}},{key:"ownSettingsFor",value:function(e){return e=st(this,dt,lt).call(this,e),this.getSettings()[e]||{}}}]),e}();function lt(e){return null==e?this.defaultScope:e}var pt=new ft((function(){return f().bidderSettings||{}}),E.k2.zF),gt="prebid",vt="bidder",ht="userId",mt="analytics",yt=t(432),bt=t.n(yt),wt=bt()({ready:bt().SYNC|bt().ASYNC|bt().QUEUE}),_t=Q();wt.ready=function(){var e=wt.ready;return function(){try{return e.apply(wt,arguments)}finally{_t.resolve()}}}();var It=_t.promise,Ct=wt.get,At={};function Tt(e,n){var t=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).postInstallAllowed,r=void 0!==t&&t;wt("async",(function(t){t.forEach((function(e){return n.apply(void 0,p(e))})),r&&(At[e]=n)}),e)([])}function Et(e){for(var n=arguments.length,t=new Array(n>1?n-1:0),r=1;r<n;r++)t[r-1]=arguments[r];var i=At[e];if(i)return i.apply(void 0,t);Ct(e).before((function(e,n){n.push(t),e(n)}))}var Ot="component",St=Ot+"Type",kt=Ot+"Name",jt="adapterCode",Rt="storageType",Bt="syncType";function Ut(e){return function(n,t,r){var i,o=(c(i={},St,n),c(i,kt,t),c(i,Ot,"".concat(n,".").concat(t)),i);return n===vt&&(o[jt]=e(t)),Dt(Object.assign(o,r))}}var Dt=wt("sync",(function(e){return e}));function xt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Pt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Be("Activity control:"),n={};function t(e){return n[e]=n[e]||[]}function r(n,t,r,i){var o;try{o=r(i)}catch(r){e.logError("Exception in rule ".concat(t," for '").concat(n,"'"),r),o={allow:!1,reason:r}}return o&&Object.assign({activity:n,name:t,component:i[Ot]},o)}var i={};function a(n){var t=n.activity,r=n.name,o=n.allow,a=n.reason,u=n.component,c="".concat(r," ").concat(o?"allowed":"denied"," '").concat(t,"' for '").concat(u,"'").concat(a?":":""),s=i.hasOwnProperty(c);if(s&&clearTimeout(i[c]),i[c]=setTimeout((function(){return delete i[c]}),1e3),!s){var d=[c];a&&d.push(a),(o?e.logInfo:e.logWarn).apply(e,d)}}return[function(e,n,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10,a=t(e),u=a.findIndex((function(e){var n=o(e,1)[0];return i<n})),c=[i,n,r];return a.splice(u<0?a.length:u,0,c),function(){var e=a.indexOf(c);e>=0&&a.splice(e,1)}},function(e,n){var i,u,c,s=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return xt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?xt(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){u=!0,o=e},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}(t(e));try{for(s.s();!(c=s.n()).done;){var d=o(c.value,3),f=d[0],l=d[1],p=d[2];if(i!==f&&u)break;i=f;var g=r(e,l,p,n);if(g){if(!g.allow)return a(g),!1;u=g}}}catch(e){s.e(e)}finally{s.f()}return u&&a(u),!0}]}(),qt=o(Pt,2),Nt=qt[0],Mt=qt[1],Ft="accessDevice",zt="syncUser",Lt="enrichUfpd",Wt="enrichEids",Ht="fetchBids",Gt="transmitEids",Vt="transmitUfpd",$t="transmitPreciseGeo",Kt="transmitTid";function Jt(e){var n=e;return{callBids:function(){},setBidderCode:function(e){n=e},getBidderCode:function(){return n}}}function Yt(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.src,r=void 0===t?"client":t,i=n.bidder,o=void 0===i?"":i,a=n.bidId,u=n.transactionId,c=n.auctionId,s=r,d=e||0;this.bidderCode=o,this.width=0,this.height=0,this.statusMessage=function(){switch(d){case 0:return"Pending";case 1:return"Bid available";case 2:return"Bid returned empty or error response";case 3:return"Bid timed out"}}(),this.adId=be(),this.requestId=a,this.transactionId=u,this.auctionId=c,this.mediaType="banner",this.source=s,this.getStatusCode=function(){return d},this.getSize=function(){return this.width+"x"+this.height},this.getIdentifiers=function(){return{src:this.source,bidder:this.bidderCode,bidId:this.requestId,transactionId:this.transactionId,auctionId:this.auctionId}}}function Qt(e,n){return new Yt(e,n)}var Zt="outstream",Xt=wt("sync",(function(e,n,t,r,i){return t&&(i||r!==Zt)?D.getConfig("cache.url")||!e.vastXml||e.vastUrl?!(!e.vastUrl&&!e.vastXml):(Re('\n        This bid contains only vastXml and will not work when a prebid cache url is not specified.\n        Try enabling prebid cache with pbjs.setConfig({ cache: {url: "..."} });\n      '),!1):!(r===Zt&&!i&&!(e.renderer||n&&n.renderer||t.renderer))}),"checkVideoBidSetup");function er(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var nr="performanceMetrics",tr=window.performance&&window.performance.now?function(){return window.performance.now()}:function(){return Date.now()},rr=new WeakMap;function ir(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.now,t=void 0===n?tr:n,r=e.mkNode,i=void 0===r?ur:r,o=e.mkTimer,a=void 0===o?ar:o,u=e.mkRenamer,c=void 0===u?function(e){return e}:u,s=e.nodes,d=void 0===s?rr:s;return function(){return function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return{forEach:function(n){n(e)}}};r=c(r);var o=("timestamps",function(e){return n.dfWalk({visit:function(n,t){var r=t.timestamps;if(r.hasOwnProperty(e))return r[e]}})});function u(e,t){var i=r(e);n.dfWalk({follow:function(e,n){return n.propagate&&(!e||!e.stopPropagation)},visit:function(e,n){i.forEach((function(r){null==e?n.metrics[r]=t:(n.groups.hasOwnProperty(r)||(n.groups[r]=[]),n.groups[r].push(t))}))}})}function s(e){return a(t,(function(n){return u(e,n)}))}function f(){var e={};return n.dfWalk({visit:function(n,t){e=Object.assign({},!n||n.includeGroups?t.groups:null,t.metrics,e)}}),e}var l={startTiming:s,measureTime:function(e,n){return s(e).stopAfter(n)()},measureHookTime:function(e,n,t){var r=s(e);return t(function(e){var n=r.stopBefore(e);return n.bail=e.bail&&r.stopBefore(e.bail),n.stopTiming=r,n.untimed=e,n}(n))},checkpoint:function(e){n.timestamps[e]=t()},timeSince:function(e,n){var r=o(e),i=null!=r?t()-r:null;return null!=n&&u(n,i),i},timeBetween:function(e,n,t){var r=o(e),i=o(n),a=null!=r&&null!=i?i-r:null;return null!=t&&u(t,a),a},setMetric:u,getMetrics:f,fork:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=t.propagate,a=void 0===o||o,u=t.stopPropagation,c=void 0!==u&&u,s=t.includeGroups;return e(i([[n,{propagate:a,stopPropagation:c,includeGroups:void 0!==s&&s}]]),r)},join:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.propagate,i=void 0===r||r,o=t.stopPropagation,a=void 0!==o&&o,u=t.includeGroups,c=void 0!==u&&u,s=d.get(e);null!=s&&s.addParent(n,{propagate:i,stopPropagation:a,includeGroups:c})},newMetrics:function(){return e(n.newSibling(),r)},renameWith:function(t){return e(n,t)},toJSON:function(){return f()}};return d.set(l,n),l}(i([]))}}function or(e,n,t){return function(){n&&n();try{return e.apply(this,arguments)}finally{t&&t()}}}function ar(e,n){var t=e(),r=!1;function i(){r||(n(e()-t),r=!0)}return i.stopBefore=function(e){return or(e,i)},i.stopAfter=function(e){return or(e,null,i)},i}function ur(e){return{metrics:{},timestamps:{},groups:{},addParent:function(n,t){e.push([n,t])},newSibling:function(){return ur(e.slice())},dfWalk:function(){var n,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=t.visit,i=t.follow,a=void 0===i?function(){return!0}:i,u=t.visited,c=void 0===u?new Set:u,s=t.inEdge;if(!c.has(this)){if(c.add(this),null!=(n=r(s,this)))return n;var d,f=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return er(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?er(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){u=!0,o=e},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}(e);try{for(f.s();!(d=f.n()).done;){var l=o(d.value,2),p=l[0],g=l[1];if(a(s,g)&&null!=(n=p.dfWalk({visit:r,follow:a,visited:c,inEdge:g})))return n}}catch(e){f.e(e)}finally{f.f()}}}}}var cr=function(){var e=function(){},n=function(){return{}},t={forEach:e},r=function(){return null};r.stopBefore=function(e){return e},r.stopAfter=function(e){return e};var i=Object.defineProperties({dfWalk:e,newSibling:function(){return i},addParent:e},Object.fromEntries(["metrics","timestamps","groups"].map((function(e){return[e,{get:n}]}))));return ir({now:function(){return 0},mkNode:function(){return i},mkRenamer:function(){return function(){return t}},mkTimer:function(){return r},nodes:{get:e,set:e}})()}(),sr=!0;function dr(e){return sr&&e||cr}D.getConfig(nr,(function(e){sr=!!e[nr]}));var fr,lr=(fr=ir(),function(){return sr?fr():cr});function pr(e,n){return function(t,r){return function(i){for(var o=arguments.length,a=new Array(o>1?o-1:0),u=1;u<o;u++)a[u-1]=arguments[u];var c=this;return dr(n.apply(c,a)).measureHookTime(e+t,i,(function(e){return r.call.apply(r,[c,e].concat(a))}))}}}var gr=pr("requestBids.",(function(e){return e.metrics})),vr=pr("addBidResponse.",(function(e,n){return n.metrics})),hr=Ut((function(e){return Vi.resolveAlias(e)})),mr=["cpm","ttl","creativeId","netRevenue","currency"],yr=["auctionId","transactionId"];function br(e){var n=Array.isArray(e.supportedMediaTypes)?{supportedMediaTypes:e.supportedMediaTypes}:void 0;function t(e){var t=wr(e);Vi.registerBidAdapter(t,e.code,n)}t(e),Array.isArray(e.aliases)&&e.aliases.forEach((function(n){var r,i,o=n;Fe(n)&&(o=n.code,r=n.gvlid,i=n.skipPbsAliasing),Vi.aliasRegistry[o]=e.code,t(Object.assign({},e,{code:o,gvlid:r,skipPbsAliasing:i}))}))}function wr(e){return Object.assign(new Jt(e.code),{getSpec:function(){return Object.freeze(Object.assign({},e))},registerSyncs:n,callBids:function(t,r,i,a,u,c){if(Array.isArray(t.bids)){var s=function(e){if(Mt(Kt,hr(vt,e)))return{bidRequest:function(e){return e},bidderRequest:function(e){return e}};function n(e,n,t){return yr.includes(n)?null:Reflect.get(e,n,t)}function t(e,n){var t=new Proxy(e,n);return Object.entries(e).filter((function(e){var n=o(e,2);return n[0],"function"==typeof n[1]})).forEach((function(n){var r=o(n,2),i=r[0],a=r[1];return t[i]=a.bind(e)})),t}var r=Sn((function(e){return t(e,{get:n})}),(function(e){return e.bidId}));return{bidRequest:r,bidderRequest:function(e){return t(e,{get:function(t,i,o){return"bids"===i?e.bids.map(r):n(t,i,o)}})}}}(t.bidderCode),d={},f=[],l=Ar(t).measureTime("validate",(function(){return t.bids.filter((function(n){return t=s.bidRequest(n),!!e.isBidRequestValid(t)||(je("Invalid bid sent to bidder ".concat(e.code,": ").concat(JSON.stringify(t))),!1);var t}))}));if(0!==l.length){var p={};l.forEach((function(e){p[e.bidId]=e,e.adUnitCode||(e.adUnitCode=e.placementCode)})),_r(e,l.map(s.bidRequest),s.bidderRequest(t),a,c,{onRequest:function(e){return Hn(E.FP.BEFORE_BIDDER_HTTP,t,e)},onResponse:function(n){u(e.code),f.push(n)},onFledgeAuctionConfigs:function(e){e.forEach((function(e){var n=p[e.bidId];n?Cr(n.adUnitCode,e.config):je("Received fledge auction configuration for an unknown bidId",e)}))},onError:function(n,r){u(e.code),Vi.callBidderError(e.code,r,t),Hn(E.FP.BIDDER_ERROR,{error:r,bidderRequest:t}),Re("Server call for ".concat(e.code," failed: ").concat(n," ").concat(r.status,". Continuing without bids."))},onBid:function(n){var t,i,a,u,c=p[n.requestId];if(c){if(n.adapterCode=c.bidder,t=n.bidderCode,i=c.bidder,a=pt.get(i,"allowAlternateBidderCodes")||!1,u=pt.get(i,"allowedAlternateBidderCodes"),t&&i&&i!==t&&(u=Ne(u)?u.map((function(e){return e.trim().toLowerCase()})).filter((function(e){return!!e})).filter(Ze):u,!a||Ne(u)&&"*"!==u[0]&&!u.includes(t)))return je("".concat(n.bidderCode," is not a registered partner or known bidder of ").concat(c.bidder,", hence continuing without bid. If you wish to support this bidder, please mark allowAlternateBidderCodes as true in bidderSettings.")),void r.reject(c.adUnitCode,n,E.Gw.Dg);n.originalCpm=n.cpm,n.originalCurrency=n.currency,n.meta=n.meta||Object.assign({},n[c.bidder]);var s=Object.assign(Qt(E.Q_.Q,c),n,wn(c,yr));!function(e,n){var t=dr(n.metrics);t.checkpoint("addBidResponse"),d[e]=!0,t.measureTime("addBidResponse.validate",(function(){return function(e,n){var t=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).index,r=void 0===t?No.index:t;function i(){var e=Object.keys(n);return mr.every((function(t){return g(e,t)&&!g([void 0,null],n[t])}))}function a(e){return"Invalid bid from ".concat(n.bidderCode,". Ignoring bid: ").concat(e)}return e?n?i()?"native"!==n.mediaType||function(e){var n,t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).index,r=(void 0===t?No.index:t).getAdUnit(e);if(!r)return!1;var i=r.nativeOrtbRequest;return function(e,n){if(!T(e,"link.url"))return Re("native response doesn't have 'link' property. Ortb response: ",e),!1;var t=n.assets.filter((function(e){return 1===e.required})).map((function(e){return e.id})),r=e.assets.map((function(e){return e.id})),i=t.every((function(e){return g(r,e)}));return i||Re("didn't receive a bid with all required assets. Required ids: ".concat(t,", but received ids in response: ").concat(r)),i}((null===(n=e.native)||void 0===n?void 0:n.ortb)||ua(e.native,i),i)}(n,{index:r})?"video"!==n.mediaType||function(e){var n=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).index,t=void 0===n?No.index:n,r=T(t.getMediaTypes(e),"video"),i=r&&T(r,"context"),o=r&&T(r,"useCacheKey"),a=t.getAdUnit(e);return Xt(e,a,r,i,o)}(n,{index:r})?!("banner"===n.mediaType&&!function(e,n){var t=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).index,r=void 0===t?No.index:t;if((n.width||0===parseInt(n.width,10))&&(n.height||0===parseInt(n.height,10)))return n.width=parseInt(n.width,10),n.height=parseInt(n.height,10),!0;var i=r.getBidRequest(n),a=r.getMediaTypes(n),u=Ce(i&&i.sizes||a&&a.banner&&a.banner.sizes);if(1===u.length){var c=o(u[0].split("x"),2),s=c[0],d=c[1];return n.width=parseInt(s,10),n.height=parseInt(d,10),!0}return!1}(e,n,{index:r}))||(Re(a("Banner bids require a width and height")),!1):(Re(a("Video bid does not have required vastUrl or renderer property")),!1):(Re(a("Native bid missing some required properties.")),!1):(Re(a("Bidder ".concat(n.bidderCode," is missing required params. Check http://prebid.org/dev-docs/bidder-adapter-1.html for list of params."))),!1):(je("Some adapter tried to add an undefined bid for ".concat(e,".")),!1):(je("No adUnitCode was supplied to addBidResponse."),!1)}(e,n)}))?r(e,n):r.reject(e,n,E.Gw.UI)}(c.adUnitCode,s)}else je("Bidder ".concat(e.code," made bid for unknown request ID: ").concat(n.requestId,". Ignoring.")),r.reject(null,n,E.Gw.Gp)},onCompletion:v})}else v()}function v(){i(),D.runWithBidder(e.code,(function(){Hn(E.FP.BIDDER_DONE,t),n(f,t.gdprConsent,t.uspConsent,t.gppConsent)}))}}});function n(n,t,r,i){Ir(e,n,t,r,i)}}var _r=wt("sync",(function(e,n,t,r,i,o){var u=o.onRequest,c=o.onResponse,s=o.onFledgeAuctionConfigs,d=o.onError,f=o.onBid,l=o.onCompletion,p=Ar(t);l=p.startTiming("total").stopBefore(l);var g=p.measureTime("buildRequests",(function(){return e.buildRequests(n,t)}));if(g&&0!==g.length){Array.isArray(g)||(g=[g]);var v=vn(l,g.length);g.forEach((function(n){var t=p.fork();function o(e){null!=e&&(e.metrics=t.fork().renameWith()),f(e)}var l=i((function(r,i){m();try{r=JSON.parse(r)}catch(e){}r={body:r,headers:{get:i.getResponseHeader.bind(i)}},c(r);try{r=t.measureTime("interpretResponse",(function(){return e.interpretResponse(r,n)}))}catch(n){return Re("Bidder ".concat(e.code," failed to interpret the server's response. Continuing without bids"),null,n),void v()}var a;r&&Ne(r.fledgeAuctionConfigs)?(s(r.fledgeAuctionConfigs),a=r.bids):a=r,a&&(Ne(a)?a.forEach(o):o(a)),v()})),g=i((function(e,n){m(),d(e,n),v()}));u(n);var h,m=t.startTiming("net");function y(t){var r=n.options;return Object.assign(t,r,{browsingTopics:!(null!=r&&r.hasOwnProperty("browsingTopics")&&!r.browsingTopics)&&Mt(Vt,hr(vt,e.code))})}switch(n.method){case"GET":r("".concat(n.url).concat((h=n.data)?"?".concat("object"===a(h)?function(e){var n="";for(var t in e)e.hasOwnProperty(t)&&(n+=t+"="+encodeURIComponent(e[t])+"&");return n.replace(/&$/,"")}(h):h):""),{success:l,error:g},void 0,y({method:"GET",withCredentials:!0}));break;case"POST":r(n.url,{success:l,error:g},"string"==typeof n.data?n.data:JSON.stringify(n.data),y({method:"POST",contentType:"text/plain",withCredentials:!0}));break;default:je("Skipping invalid request from ".concat(e.code,". Request type ").concat(n.type," must be GET or POST")),v()}}))}else l()}),"processBidderRequests"),Ir=wt("async",(function(e,n,t,r,i){var o=D.getConfig("userSync.aliasSyncEnabled");if(e.getUserSyncs&&(o||!Vi.aliasRegistry[e.code])){var a=D.getConfig("userSync.filterSettings"),u=e.getUserSyncs({iframeEnabled:!(!a||!a.iframe&&!a.all),pixelEnabled:!(!a||!a.image&&!a.all)},n,t,r,i);u&&(Array.isArray(u)||(u=[u]),u.forEach((function(n){eo.registerSync(n.type,e.code,n.url)})),eo.bidderDone(e.code))}}),"registerSyncs"),Cr=wt("sync",(function(e,n){}),"addComponentAuction");function Ar(e){return dr(e.metrics).renameWith((function(n){return["adapter.client.".concat(n),"adapters.client.".concat(e.bidderCode,".").concat(n)]}))}var Tr={};function Er(e,n,t){var r=function(e,n){var t=Tr[e]=Tr[e]||{bidders:{}};return n?t.bidders[n]=t.bidders[n]||{}:t}(e,t);return r[n]=(r[n]||0)+1,r[n]}var Or=function(e){return Er(e,"requestsCounter")},Sr=function(e,n){return Er(e,"requestsCounter",n)},kr=function(e,n){return Er(e,"winsCounter",n)},jr=function(e){return T(Tr,"".concat(e,".requestsCounter"))||0},Rr=function(e,n){return T(Tr,"".concat(e,".bidders.").concat(n,".requestsCounter"))||0},Br=function(e,n){return T(Tr,"".concat(e,".bidders.").concat(n,".winsCounter"))||0};function Ur(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:window;if(!e)return e;if(/\w+:\/\//.exec(e))return e;var t=n.location.protocol;try{t=n.top.location.protocol}catch(e){}return/^\/\//.exec(e)?t+e:"".concat(t,"//").concat(e)}function Dr(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.noLeadingWww,r=void 0!==t&&t,i=n.noPort,o=void 0!==i&&i;try{e=new URL(Ur(e))}catch(e){return}return e=o?e.hostname:e.host,r&&e.startsWith("www.")&&(e=e.substring(4)),e}function xr(e){try{var n=e.querySelector("link[rel='canonical']");if(null!==n)return n.href}catch(e){}return null}var Pr,qr=function(e){var n,t,r,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:window;return i.top!==i?e:function(){var o=xr(i.document),a=i.location.href;return n===o&&a===t||(n=o,t=a,r=e()),r}}((Pr=window,function(){var e,n,t,r,i=[],o=function(e){try{if(!e.location.ancestorOrigins)return;return e.location.ancestorOrigins}catch(e){}}(Pr),a=D.getConfig("maxNestedIframes"),u=!1,c=0,s=!1,d=!1,f=!1;do{var l=e,p=d,g=void 0,v=!1,h=null;d=!1,e=e?e.parent:Pr;try{g=e.location.href||null}catch(e){v=!0}if(v)if(p){var m=l.context;try{n=h=m.sourceUrl,f=!0,s=!0,e===Pr.top&&(u=!0),m.canonicalUrl&&(t=m.canonicalUrl)}catch(e){}}else{je("Trying to access cross domain iframe. Continuing without referrer and location");try{var y=l.document.referrer;y&&(h=y,e===Pr.top&&(u=!0))}catch(e){}!h&&o&&o[c-1]&&(h=o[c-1],e===Pr.top&&(f=!0)),h&&!s&&(n=h)}else{if(g&&(n=h=g,s=!1,e===Pr.top)){u=!0;var b=xr(e.document);b&&(t=b)}e.context&&e.context.sourceUrl&&(d=!0)}i.push(h),c++}while(e!==Pr.top&&c<a);i.reverse();try{r=Pr.top.document.referrer}catch(e){}var w=u||f?n:null,_=D.getConfig("pageUrl")||t||null,I=D.getConfig("pageUrl")||w||Ur(_,Pr);return w&&w.indexOf("?")>-1&&-1===I.indexOf("?")&&(I="".concat(I).concat(w.substring(w.indexOf("?")))),{reachedTop:u,isAmp:s,numIframes:c-1,stack:i,topmostLocation:n||null,location:w,canonicalUrl:_,page:I,domain:Dr(I)||null,ref:r||null,legacy:{reachedTop:u,isAmp:s,numIframes:c-1,stack:i,referer:n||null,canonicalUrl:_}}}));function Nr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Mr(e,n){return Mr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},Mr(e,n)}function Fr(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&Mr(e,n)}function zr(e){return zr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},zr(e)}function Lr(e){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var t,r=zr(e);if(n){var i=zr(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(e,n){if(n&&("object"===a(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return Nr(e)}(this,t)}}function Wr(e,n,t){Hr(e,n),n.set(e,t)}function Hr(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function Gr(e,n,t){if(!n.has(e))throw new TypeError("attempted to get private field on non-instance");return t}var Vr=Object.freeze({}),$r=new WeakMap,Kr=new WeakMap,Jr=new WeakMap,Yr=new WeakMap,Qr=new WeakMap,Zr=new WeakMap,Xr=new WeakSet,ei=function(){function e(){var n;q(this,e),Hr(this,n=Xr),n.add(this),Wr(this,$r,{writable:!0,value:void 0}),Wr(this,Kr,{writable:!0,value:void 0}),Wr(this,Jr,{writable:!0,value:void 0}),Wr(this,Yr,{writable:!0,value:void 0}),Wr(this,Qr,{writable:!0,value:!0}),Wr(this,Zr,{writable:!0,value:void 0}),c(this,"generatedTime",void 0),c(this,"hashFields",void 0),this.reset()}return M(e,[{key:"reset",value:function(){L(this,Jr,Q()),L(this,$r,!1),L(this,Kr,null),L(this,Yr,!1),this.generatedTime=null}},{key:"enable",value:function(){L(this,$r,!0)}},{key:"enabled",get:function(){return z(this,$r)}},{key:"ready",get:function(){return z(this,Yr)}},{key:"promise",get:function(){return z(this,Yr)?J.resolve(z(this,Kr)):(z(this,$r)||Gr(this,Xr,ni).call(this,null),z(this,Jr).promise)}},{key:"setConsentData",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ln();this.generatedTime=n,L(this,Qr,!0),Gr(this,Xr,ni).call(this,e)}},{key:"getConsentData",value:function(){return z(this,Kr)}},{key:"hash",get:function(){var e=this;return z(this,Qr)&&(L(this,Zr,On(JSON.stringify(z(this,Kr)&&this.hashFields?this.hashFields.map((function(n){return z(e,Kr)[n]})):z(this,Kr)))),L(this,Qr,!1)),z(this,Zr)}}]),e}();function ni(e){L(this,Yr,!0),L(this,Kr,e),z(this,Jr).resolve(e)}var ti,ri,ii,oi=function(e){Fr(t,e);var n=Lr(t);function t(){return q(this,t),n.apply(this,arguments)}return M(t,[{key:"getConsentMeta",value:function(){var e=this.getConsentData();if(e&&this.generatedTime)return{usp:e,generatedAt:this.generatedTime}}}]),t}(ei),ai=function(e){Fr(t,e);var n=Lr(t);function t(){var e;q(this,t);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return c(Nr(e=n.call.apply(n,[this].concat(i))),"hashFields",["gdprApplies","consentString"]),e}return M(t,[{key:"getConsentMeta",value:function(){var e=this.getConsentData();if(e&&e.vendorData&&this.generatedTime)return{gdprApplies:e.gdprApplies,consentStringSize:qe(e.vendorData.tcString)?e.vendorData.tcString.length:0,generatedAt:this.generatedTime,apiVersion:e.apiVersion}}}]),t}(ei),ui=function(e){Fr(t,e);var n=Lr(t);function t(){var e;q(this,t);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return c(Nr(e=n.call.apply(n,[this].concat(i))),"hashFields",["applicableSections","gppString"]),e}return M(t,[{key:"getConsentMeta",value:function(){if(this.getConsentData()&&this.generatedTime)return{generatedAt:this.generatedTime}}}]),t}(ei),ci=new ai,si=new oi,di=new ui,fi=function(){function e(){return!!D.getConfig("coppa")}return{getCoppa:e,getConsentData:e,getConsentMeta:e,reset:function(){},get promise(){return J.resolve(e())},get hash(){return e()?"1":"0"}}}(),li=(ti={},ri={},ii={},{register:function(e,n,t){t&&((ti[n]=ti[n]||{})[e]=t,ri.hasOwnProperty(n)?ri[n]!==t&&(ri[n]=ii):ri[n]=t)},get:function(e){var n={modules:ti[e]||{}};return ri.hasOwnProperty(e)&&ri[e]!==ii&&(n.gvlid=ri[e]),n}}),pi={gdpr:ci,usp:si,gpp:di,coppa:fi},gi=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:pi;return e=Object.entries(e),Object.assign({get promise(){return J.all(e.map((function(e){var n=o(e,2),t=n[0];return n[1].promise.then((function(e){return[t,e]}))}))).then((function(e){return Object.fromEntries(e)}))},get hash(){return On(e.map((function(e){var n=o(e,2);return n[0],n[1].hash})).join(":"))}},Object.fromEntries(["getConsentData","getConsentMeta","reset"].map((function(n){return[n,(t=n,function(){return Object.fromEntries(e.map((function(e){var n=o(e,2);return[n[0],n[1][t]()]})))})];var t}))))}();function vi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var hi=["user.data","user.ext.data","user.yob","user.gender","user.keywords","user.kwarray"],mi=["user.eids","user.ext.eids"],yi=["user.geo.lat","user.geo.lon","device.geo.lat","device.geo.lon"];function bi(e){return Object.assign({get:function(){},run:function(e,n,t,r,i){var o=t&&t[r];if(Ii(o)&&i()){var a=this.get(o);void 0===a?delete t[r]:t[r]=a}}},e)}function wi(e){return e.forEach((function(e){e.paths=e.paths.map((function(e){var n=e.split("."),t=n.pop();return[n.length>0?n.join("."):null,t]}))})),function(n,t){for(var r=[],i=arguments.length,a=new Array(i>2?i-2:0),u=2;u<i;u++)a[u-2]=arguments[u];var c=_i.apply(void 0,[n].concat(a));return e.forEach((function(e){if(!1!==n[e.name]){var i,a=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return vi(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?vi(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){u=!0,o=e},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}(e.paths);try{for(a.s();!(i=a.n()).done;){var u=o(i.value,2),s=u[0],d=u[1],f=null==s?t:T(t,s);if(r.push(e.run(t,s,f,d,c.bind(null,e))),!1===n[e.name])return}}catch(e){a.e(e)}finally{a.f()}}})),r.filter((function(e){return null!=e}))}}function _i(e){for(var n=arguments.length,t=new Array(n>1?n-1:0),r=1;r<n;r++)t[r-1]=arguments[r];return function(n){return e.hasOwnProperty(n.name)||(e[n.name]=!!n.applies.apply(n,t)),e[n.name]}}function Ii(e){return null!=e&&("object"!==a(e)||Object.keys(e).length>0)}function Ci(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Mt;return function(t){return!n(e,t)}}function Ai(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Mt;return[{name:Vt,paths:hi,applies:Ci(Vt,e)},{name:Gt,paths:mi,applies:Ci(Gt,e)},{name:$t,paths:yi,applies:Ci($t,e),get:function(e){return Math.round(100*(e+Number.EPSILON))/100}},{name:Kt,paths:["source.tid"],applies:Ci(Kt,e)}].map(bi)}var Ti=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Mt,n=wi(Ai(e)),t=wi(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Mt;return[{name:Gt,paths:["userId","userIdAsEids"],applies:Ci(Gt,e)},{name:Kt,paths:["ortb2Imp.ext.tid"],applies:Ci(Kt,e)}].map(bi)}(e));return function(e){var r={};return{ortb2:function(t){return n(r,t,e),t},bidRequest:function(n){return t(r,n,e),n}}}}();function Ei(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Oi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ei(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ei(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}Nt(Kt,"enableTIDs config",(function(){if(!D.getConfig("enableTIDs"))return{allow:!1,reason:"TIDs are disabled"}}));var Si="pbsBidAdapter",ki="client",ji="server",Ri={isAllowed:Mt,redact:Ti},Bi={},Ui=Bi.bidderRegistry={},Di=Bi.aliasRegistry={},xi=[];D.getConfig("s2sConfig",(function(e){e&&e.s2sConfig&&(xi=Ne(e.s2sConfig)?e.s2sConfig:[e.s2sConfig])}));var Pi={},qi=Ut((function(e){return Bi.resolveAlias(e)})),Ni=wt("sync",(function(e){var n=e.bidderCode,t=e.auctionId,r=e.bidderRequestId,i=e.adUnits,o=e.src,a=e.metrics;return i.reduce((function(e,i){var u=i.bids.filter((function(e){return e.bidder===n}));return null==n&&0===u.length&&null!=i.s2sBid&&u.push({bidder:null}),e.push(u.reduce((function(e,n){var u=null==(n=Object.assign({},n,{ortb2Imp:En({},i.ortb2Imp,n.ortb2Imp)},mn(i,["nativeParams","nativeOrtbRequest","mediaType","renderer"]))).mediaTypes?i.mediaTypes:n.mediaTypes;return function(e){var n=["banner","native","video"];return!!Object.keys(e).every((function(e){return g(n,e)}))&&(!e.video||!e.video.context||g(["instream","outstream","adpod"],e.video.context))}(u)?n=Object.assign({},n,{mediaTypes:u}):Re("mediaTypes is not correctly configured for adunit ".concat(i.code)),e.push(Object.assign({},n,{adUnitCode:i.code,transactionId:i.transactionId,sizes:T(u,"banner.sizes")||T(u,"video.playerSize")||[],bidId:n.bid_id||be(),bidderRequestId:r,auctionId:t,src:o,metrics:a,bidRequestsCount:jr(i.code),bidderRequestsCount:Rr(i.code,n.bidder),bidderWinsCount:Br(i.code,n.bidder)})),e}),[])),e}),[]).reduce(Xe,[]).filter((function(e){return""!==e}))}),"getBids"),Mi=wt("sync",(function(e,n){var t=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).getS2SBidders;if(null==n)return e;var r=(void 0===t?zi:t)(n);return e.filter((function(e){return r.has(e.bidder)}))}),"filterBidsForAdUnit"),Fi=wt("sync",(function(e,n){return e}),"setupAdUnitMediaTypes");function zi(e){Ne(e)||(e=[e]);var n=new Set([null]);return e.filter((function(e){return e&&e.enabled})).flatMap((function(e){return e.bidders})).forEach((function(e){return n.add(e)})),n}var Li=wt("sync",(function(e,n){var t,r=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).getS2SBidders,i=(void 0===r?zi:r)(n);return nn(e).reduce((function(e,n){return e[i.has(n)?ji:ki].push(n),e}),(c(t={},ki,[]),c(t,ji,[]),t))}),"partitionBidders");function Wi(e,n){var t=Ui[e],r=(null==t?void 0:t.getSpec)&&t.getSpec();if(r&&r[n]&&"function"==typeof r[n])return[r,r[n]]}function Hi(e,n,t,r){try{ke("Invoking ".concat(e,".").concat(n));for(var i=arguments.length,o=new Array(i>4?i-4:0),a=4;a<i;a++)o[a-4]=arguments[a];D.runWithBidder(e,r.bind.apply(r,[t].concat(o)))}catch(t){je("Error calling ".concat(n," of ").concat(e))}}function Gi(e,n,t){if((null==t?void 0:t.src)!==E.os.YZ){var r=Wi(e,n);null!=r&&Hi.apply(void 0,[e,n].concat(p(r),[t]))}}Bi.makeBidRequests=wt("sync",(function(e,n,t,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},a=arguments.length>6?arguments[6]:void 0;a=dr(a),Hn(E.FP.BEFORE_REQUEST_BIDS,e),function(e){e.forEach((function(e){var n=e.nativeParams||T(e,"mediaTypes.native");n&&(e.nativeParams=na(n)),e.nativeParams&&(e.nativeOrtbRequest=e.nativeParams.ortb||function(e){if(e||Fe(e)){var n={ver:"1.2",assets:[]};for(var t in e)if(!Jo.includes(t))if(Yo.hasOwnProperty(t))if("privacyLink"!==t){var r=e[t],i=0;r.required&&ze(r.required)&&(i=Number(r.required));var o={id:n.assets.length,required:i};if(t in Ko)o.data={type:Vo[Ko[t]]},r.len&&(o.data.len=r.len);else if("icon"===t||"image"===t){if(o.img={type:"icon"===t?$o.ICON:$o.MAIN},r.aspect_ratios)if(Ne(r.aspect_ratios))if(r.aspect_ratios.length){var a=r.aspect_ratios[0],u=a.min_width,c=a.min_height;bn(u)&&bn(c)?(o.img.wmin=u,o.img.hmin=c):Re("image.aspect_ratios min_width or min_height are invalid: ",u,c);var s=r.aspect_ratios.filter((function(e){return e.ratio_width&&e.ratio_height})).map((function(e){return"".concat(e.ratio_width,":").concat(e.ratio_height)}));s.length>0&&(o.img.ext={aspectratios:s})}else Re("image.aspect_ratios was passed, but it's empty:",r.aspect_ratios);else Re("image.aspect_ratios was passed, but it's not a an array:",r.aspect_ratios);r.sizes&&(2===r.sizes.length&&bn(r.sizes[0])&&bn(r.sizes[1])?(o.img.w=r.sizes[0],o.img.h=r.sizes[1],delete o.img.hmin,delete o.img.wmin):Re("image.sizes was passed, but its value is not an array of integers:",r.sizes))}else"title"===t?o.title={len:r.len||140}:"ext"===t&&(o.ext=r,delete o.required);n.assets.push(o)}else n.privacy=1;else Re("Unrecognized native asset code: ".concat(t,". Asset will be ignored."));return n}Re("Native assets object is empty or not an object: ",e)}(e.nativeParams))}))}(e),e.forEach((function(e){Fe(e.mediaTypes)||(e.mediaTypes={}),e.bids=e.bids.filter((function(e){return!e.bidder||Ri.isAllowed(Ht,qi(vt,e.bidder))}))})),e=Fi(e,i);var u=Li(e,xi),s=u[ki],d=u[ji];D.getConfig("bidderSequence")===j&&(s=un(s));var f=qr(),l=[],p=o.global||{},g=o.bidder||{};function h(e,n){var r=Ri.redact(null!=n?n:qi(vt,e.bidderCode)),i=Object.freeze(r.ortb2(En({source:{tid:t}},p,g[e.bidderCode])));return e.ortb2=i,e.bids=e.bids.map((function(e){return e.ortb2=i,r.bidRequest(e)})),e}xi.forEach((function(r){var i=function(e){return qi(gt,Si,c({},"configName",e.configName))}(r);if(r&&r.enabled&&Ri.isAllowed(Ht,i)){var o=function(e,n){var t=sn(e),r=!1;return t.forEach((function(e){var t=e.bids.filter((function(e){var t;return e.module===Si&&(null===(t=e.params)||void 0===t?void 0:t.configName)===n.configName}));1===t.length?(e.s2sBid=t[0],r=!0,e.ortb2Imp=En({},e.s2sBid.ortb2Imp,e.ortb2Imp)):t.length>1&&je('Multiple "module" bids for the same s2s configuration; all will be ignored',t),e.bids=Mi(e.bids,n).map((function(e){return e.bid_id=be(),e}))})),{adUnits:t=t.filter((function(e){return 0!==e.bids.length||null!=e.s2sBid})),hasModuleBids:r}}(e,r),u=o.adUnits,s=o.hasModuleBids,p=we();(0===d.length&&s?[null]:d).forEach((function(e){var o=be(),c=a.fork(),s=h({bidderCode:e,auctionId:t,bidderRequestId:o,uniquePbsTid:p,bids:Ni({bidderCode:e,auctionId:t,bidderRequestId:o,adUnits:sn(u),src:E.os.YZ,metrics:c}),auctionStart:n,timeout:r.timeout,src:E.os.YZ,refererInfo:f,metrics:c},i);0!==s.bids.length&&l.push(s)})),u.forEach((function(e){var n=e.bids.filter((function(e){return v(l,(function(n){return v(n.bids,(function(n){return n.bidId===e.bid_id}))}))}));e.bids=n})),l.forEach((function(e){void 0===e.adUnitsS2SCopy&&(e.adUnitsS2SCopy=u.filter((function(e){return e.bids.length>0||null!=e.s2sBid})))}))}}));var m=function(e){var n=sn(e);return n.forEach((function(e){e.bids=Mi(e.bids,null)})),n.filter((function(e){return 0!==e.bids.length}))}(e);return s.forEach((function(e){var o=be(),u=a.fork(),c=h({bidderCode:e,auctionId:t,bidderRequestId:o,bids:Ni({bidderCode:e,auctionId:t,bidderRequestId:o,adUnits:sn(m),labels:i,src:"client",metrics:u}),auctionStart:n,timeout:r,refererInfo:f,metrics:u}),s=Ui[e];s||Re("Trying to make a request for bidder that does not exist: ".concat(e)),s&&c.bids&&0!==c.bids.length&&l.push(c)})),l.forEach((function(e){ci.getConsentData()&&(e.gdprConsent=ci.getConsentData()),si.getConsentData()&&(e.uspConsent=si.getConsentData()),di.getConsentData()&&(e.gppConsent=di.getConsentData())})),l}),"makeBidRequests"),Bi.callBids=function(e,n,t,r,i,a,u){var c=arguments.length>7&&void 0!==arguments[7]?arguments[7]:{};if(n.length){var s=o(n.reduce((function(e,n){return e[Number(void 0!==n.src&&n.src===E.os.YZ)].push(n),e}),[[],[]]),2),d=s[0],f=s[1],l=[];f.forEach((function(e){for(var n=-1,t=0;t<l.length;++t)if(e.uniquePbsTid===l[t].uniquePbsTid){n=t;break}n<=-1&&l.push(e)}));var p=0;xi.forEach((function(e){if(e&&l[p]&&zi(e).has(l[p].bidderCode)){var n=Qn(a,i?{request:i.request.bind(null,"s2s"),done:i.done}:void 0),r=e.bidders,o=Ui[e.adapter],s=l[p].uniquePbsTid,d=l[p].adUnitsS2SCopy,g=f.filter((function(e){return e.uniquePbsTid===s}));if(o){var v={ad_units:d,s2sConfig:e,ortb2Fragments:c};if(v.ad_units.length){var h=g.map((function(e){return e.start=ln(),function(){u(e.bidderRequestId),h.apply(e,arguments)}})),m=nn(v.ad_units).filter((function(e){return r.includes(e)}));Se("CALLING S2S HEADER BIDDERS ==== ".concat(m.length>0?m.join(", "):'No bidder specified, using "ortb2Imp" definition(s) only')),g.forEach((function(e){Hn(E.FP.BID_REQUESTED,Oi(Oi({},e),{},{tid:e.auctionId}))})),o.callBids(v,f,t,(function(){return h.forEach((function(e){return e()}))}),n)}}else Re("missing "+e.adapter);p++}})),d.forEach((function(e){e.start=ln();var n=Ui[e.bidderCode];D.runWithBidder(e.bidderCode,(function(){Se("CALLING BIDDER"),Hn(E.FP.BID_REQUESTED,e)}));var o=Qn(a,i?{request:i.request.bind(null,e.bidderCode),done:i.done}:void 0),c=r.bind(e);try{D.runWithBidder(e.bidderCode,me.call(n.callBids,n,e,t,c,o,(function(){return u(e.bidderRequestId)}),D.callbackWithBidder(e.bidderCode)))}catch(n){Re("".concat(e.bidderCode," Bid Adapter emitted an uncaught error when parsing their bidRequest"),{e:n,bidRequest:e}),c()}}))}else je("callBids executed with no bidRequests.  Were they filtered by labels or sizing?")},Bi.videoAdapters=[],Bi.registerBidAdapter=function(e,n){var t,r=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).supportedMediaTypes,i=void 0===r?[]:r;e&&n?"function"==typeof e.callBids?(Ui[n]=e,li.register(vt,n,null===(t=e.getSpec)||void 0===t?void 0:t.call(e).gvlid),g(i,"video")&&Bi.videoAdapters.push(n),g(i,"native")&&Wo.push(n)):Re("Bidder adaptor error for bidder code: "+n+"bidder must implement a callBids() function"):Re("bidAdapter or bidderCode not specified")},Bi.aliasBidAdapter=function(e,n,t){if(void 0===Ui[n]){var r=Ui[e];if(void 0===r){var i=[];xi.forEach((function(t){if(t.bidders&&t.bidders.length){var r=t&&t.bidders;t&&g(r,n)?Di[n]=e:i.push(e)}})),i.forEach((function(e){Re('bidderCode "'+e+'" is not an existing bidder.',"adapterManager.aliasBidAdapter")}))}else try{var o,a=function(e){var n=[];return g(Bi.videoAdapters,e)&&n.push("video"),g(Wo,e)&&n.push("native"),n}(e);if(r.constructor.prototype!=Object.prototype)(o=new r.constructor).setBidderCode(n);else{var u=r.getSpec(),c=t&&t.gvlid;null!=u.gvlid&&null==c&&je("Alias '".concat(n,"' will NOT re-use the GVL ID of the original adapter ('").concat(u.code,"', gvlid: ").concat(u.gvlid,"). Functionality that requires TCF consent may not work as expected."));var s=t&&t.skipPbsAliasing;o=wr(Object.assign({},u,{code:n,gvlid:c,skipPbsAliasing:s})),Di[n]=e}Bi.registerBidAdapter(o,n,{supportedMediaTypes:a})}catch(n){Re(e+" bidder does not currently support aliasing.","adapterManager.aliasBidAdapter")}}else Se('alias name "'+n+'" has been already specified.')},Bi.resolveAlias=function(e){for(var n,t=e;Di[t]&&(!n||!n.has(t));)t=Di[t],(n=n||new Set).add(t);return t},Bi.registerAnalyticsAdapter=function(e){var n=e.adapter,t=e.code,r=e.gvlid;n&&t?"function"==typeof n.enableAnalytics?(n.code=t,Pi[t]={adapter:n,gvlid:r},li.register(mt,t,r)):Re('Prebid Error: Analytics adaptor error for analytics "'.concat(t,'"\n        analytics adapter must implement an enableAnalytics() function')):Re("Prebid Error: analyticsAdapter or analyticsCode not specified")},Bi.enableAnalytics=function(e){Ne(e)||(e=[e]),He(e,(function(e){var n=Pi[e.provider];n&&n.adapter?Ri.isAllowed("reportAnalytics",qi(mt,e.provider,c({},"_config",e)))&&n.adapter.enableAnalytics(e):Re("Prebid Error: no analytics adapter found in registry for '".concat(e.provider,"'."))}))},Bi.getBidAdapter=function(e){return Ui[e]},Bi.getAnalyticsAdapter=function(e){return Pi[e]},Bi.callTimedOutBidders=function(e,n,t){n=hn(n=n.map((function(n){return n.params=yn(e,n.adUnitCode,n.bidder),n.timeout=t,n})),"bidder"),Object.keys(n).forEach((function(e){Gi(e,"onTimeout",n[e])}))},Bi.callBidWonBidder=function(e,n,t){n.params=yn(t,n.adUnitCode,n.bidder),kr(n.adUnitCode,n.bidder),Gi(e,"onBidWon",n)},Bi.callBidBillableBidder=function(e){Gi(e.bidder,"onBidBillable",e)},Bi.callSetTargetingBidder=function(e,n){Gi(e,"onSetTargeting",n)},Bi.callBidViewableBidder=function(e,n){Gi(e,"onBidViewable",n)},Bi.callBidderError=function(e,n,t){Gi(e,"onBidderError",{error:n,bidderRequest:t})},Bi.callDataDeletionRequest=wt("sync",(function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];var r="onDataDeletionRequest";Object.keys(Ui).filter((function(e){return!Di.hasOwnProperty(e)})).forEach((function(e){var t=Wi(e,r);if(null!=t){var i=No.getBidsRequested().filter((function(n){return function(e){for(var n=new Set;Di.hasOwnProperty(e)&&!n.has(e);)n.add(e),e=Di[e];return e}(n.bidderCode)===e}));Hi.apply(void 0,[e,r].concat(p(t),[i],n))}})),Object.entries(Pi).forEach((function(e){var t,i=o(e,2),a=i[0],u=i[1],c=null==u||null===(t=u.adapter)||void 0===t?void 0:t[r];if("function"==typeof c)try{c.apply(u.adapter,n)}catch(e){Re("error calling ".concat(r," of ").concat(a),e)}}))}));const Vi=Bi;var $i="html5",Ki="cookie",Ji=[];function Yi(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.moduleName,t=e.moduleType,r=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).isAllowed,i=void 0===r?Mt:r;function o(e,r){var o=n,a=D.getCurrentBidder();return a&&t===vt&&Vi.aliasRegistry[a]===n&&(o=a),e({valid:i(Ft,hr(t,o,c({},Rt,r)))})}function a(e,n,t){if(!t||"function"!=typeof t)return o(e,n);Ji.push((function(){var r=o(e,n);t(r)}))}var u=function(e){return a((function(e){if(e&&e.valid)try{return!!window.localStorage}catch(e){Re("Local storage api disabled")}return!1}),$i,e)};return{setCookie:function(e,n,t,r,i,o){return a((function(o){if(o&&o.valid){var a=i&&""!==i?" ;domain=".concat(encodeURIComponent(i)):"",u=t&&""!==t?" ;expires=".concat(t):"",c=null!=r&&"none"==r.toLowerCase()?"; Secure":"";document.cookie="".concat(e,"=").concat(encodeURIComponent(n)).concat(u,"; path=/").concat(a).concat(r?"; SameSite=".concat(r):"").concat(c)}}),Ki,o)},getCookie:function(e,n){return a((function(n){if(n&&n.valid){var t=window.document.cookie.match("(^|;)\\s*"+e+"\\s*=\\s*([^;]*)\\s*(;|$)");return t?decodeURIComponent(t[2]):null}return null}),Ki,n)},localStorageIsEnabled:function(e){return a((function(e){if(e&&e.valid)try{return localStorage.setItem("prebid.cookieTest","1"),"1"===localStorage.getItem("prebid.cookieTest")}catch(e){}finally{try{localStorage.removeItem("prebid.cookieTest")}catch(e){}}return!1}),$i,e)},cookiesAreEnabled:function(e){return a((function(e){return!(!e||!e.valid)&&gn()}),Ki,e)},setDataInLocalStorage:function(e,n,t){return a((function(t){t&&t.valid&&u()&&window.localStorage.setItem(e,n)}),$i,t)},getDataFromLocalStorage:function(e,n){return a((function(n){return n&&n.valid&&u()?window.localStorage.getItem(e):null}),$i,n)},removeDataFromLocalStorage:function(e,n){return a((function(n){n&&n.valid&&u()&&window.localStorage.removeItem(e)}),$i,n)},hasLocalStorage:u,findSimilarCookies:function(e,n){return a((function(n){if(n&&n.valid){var t=[];if(pn())for(var r=document.cookie.split(";");r.length;){var i=r.pop(),o=i.indexOf("=");o=o<0?i.length:o,decodeURIComponent(i.slice(0,o).replace(/^\s+/,"")).indexOf(e)>=0&&t.push(decodeURIComponent(i.slice(o+1)))}return t}}),Ki,n)}}}function Qi(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.moduleType,t=e.moduleName,r=e.bidderCode;function i(){throw new Error("Invalid invocation for getStorageManager: must set either bidderCode, or moduleType + moduleName")}return r?((n&&n!==vt||t)&&i(),n=vt,t=r):t&&n||i(),Yi({moduleType:n,moduleName:t})}function Zi(e){return Yi({moduleName:e,moduleType:gt})}Nt(Ft,"deviceAccess config",(function(){if(!pn())return{allow:!1}})),Nt(Ft,"bidderSettings.*.storageAllowed",(function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:pt;if(e[St]===vt){var t=n.get(e[jt],"storageAllowed");if(t&&!0!==t){var r=e[Rt];t=Array.isArray(t)?t.some((function(e){return e===r})):t===r}else t=!!t;return t?void 0:{allow:t}}})),D.setDefaults({userSync:sn({syncEnabled:!0,filterSettings:{image:{bidders:"*",filter:"include"}},syncsPerBidder:5,syncDelay:3e3,auctionDelay:0})});var Xi=Zi("usersync"),eo=function(e){var n={},t={image:[],iframe:[]},r=new Set,i={},a={image:!0,iframe:!1},u=e.config;function s(){if(u.syncEnabled&&e.browserSupportsCookies){try{a.iframe&&d(t.iframe,(function(e){var n=o(e,2),r=n[0],i=n[1];Se("Invoking iframe user sync for bidder: ".concat(r)),Qe(i),function(e,n){e.image=e.image.filter((function(e){return e[0]!==n}))}(t,r)})),a.image&&d(t.image,(function(e){var n=o(e,2),t=n[0],r=n[1];Se("Invoking image pixel user sync for bidder: ".concat(t)),Je(r)}))}catch(e){return Re("Error firing user syncs",e)}t={image:[],iframe:[]}}}function d(e,n){un(e).forEach(n)}return D.getConfig("userSync",(function(e){if(e.userSync){var n=e.userSync.filterSettings;Fe(n)&&(n.image||n.all||(e.userSync.filterSettings.image={bidders:"*",filter:"include"}))}u=Object.assign(u,e.userSync)})),e.regRule(zt,"userSync config",(function(e){if(!u.syncEnabled)return{allow:!1,reason:"syncs are disabled"};if(e[St]===vt){var t=e[Bt],r=e[kt];if(!n.canBidderRegisterSync(t,r))return{allow:!1,reason:"".concat(t," syncs are not enabled for ").concat(r)}}})),n.registerSync=function(n,o,a){var s;return r.has(o)?Se('already fired syncs for "'.concat(o,'", ignoring registerSync call')):u.syncEnabled&&Ne(t[n])?o?0!==u.syncsPerBidder&&Number(i[o])>=u.syncsPerBidder?je('Number of user syncs exceeded for "'.concat(o,'"')):void(e.isAllowed(zt,hr(vt,o,(s={},c(s,Bt,n),c(s,"syncUrl",a),s)))&&(t[n].push([o,a]),i=function(e,n){return e[n]?e[n]+=1:e[n]=1,e}(i,o))):je("Bidder is required for registering sync"):je('User sync type "'.concat(n,'" not supported'))},n.bidderDone=r.add.bind(r),n.syncUsers=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;if(e)return setTimeout(s,Number(e));s()},n.triggerUserSyncs=function(){u.enableOverride&&n.syncUsers()},n.canBidderRegisterSync=function(e,n){return!u.filterSettings||!function(e,n){var t=u.filterSettings;if(function(e,n){if(e.all&&e[n])return je('Detected presence of the "filterSettings.all" and "filterSettings.'.concat(n,'" in userSync config.  You cannot mix "all" with "iframe/image" configs; they are mutually exclusive.')),!1;var t=e.all?e.all:e[n],r=e.all?"all":n;if(!t)return!1;var i=t.filter,o=t.bidders;return i&&"include"!==i&&"exclude"!==i?(je('UserSync "filterSettings.'.concat(r,".filter\" setting '").concat(i,"' is not a valid option; use either 'include' or 'exclude'.")),!1):!!("*"===o||Array.isArray(o)&&o.length>0&&o.every((function(e){return qe(e)&&"*"!==e})))||(je('Detected an invalid setup in userSync "filterSettings.'.concat(r,".bidders\"; use either '*' (to represent all bidders) or an array of bidders.")),!1)}(t,e)){a[e]=!0;var r=t.all?t.all:t[e],i="*"===r.bidders?[n]:r.bidders,o={include:function(e,n){return!g(e,n)},exclude:function(e,n){return g(e,n)}};return o[r.filter||"include"](i,n)}return!a[e]}(e,n)},n}(Object.defineProperties({config:D.getConfig("userSync"),isAllowed:Mt,regRule:Nt},{browserSupportsCookies:{get:function(){return!/^((?!chrome|android|crios|fxios).)*safari/i.test(navigator.userAgent)&&Xi.cookiesAreEnabled()}}})),no="native",to="video",ro="banner",io=eo.syncUsers,oo="completed";zn(E.FP.BID_ADJUSTMENT,(function(e){!function(e){var n=function(e,n,t){var r,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=i.index,a=void 0===o?No.index:o,u=i.bs,c=void 0===u?pt:u;t=t||a.getBidRequest(n);var s=null==n?void 0:n.adapterCode,d=(null==n?void 0:n.bidderCode)||(null===(r=t)||void 0===r?void 0:r.bidder),f=c.get(null==n?void 0:n.adapterCode,"adjustAlternateBids"),l=c.getOwn(d,"bidCpmAdjustment")||c.get(f?s:d,"bidCpmAdjustment");if(l&&"function"==typeof l)try{return l(e,Object.assign({},n),t)}catch(e){Re("Error during bid adjustment",e)}return e}(e.cpm,e);n>=0&&(e.cpm=n)}(e)}));var ao={},uo={},co=[],so=f();function fo(e){var n=e.adUnits,t=e.adUnitCodes,r=e.callback,i=e.cbTimeout,o=e.labels,u=e.auctionId,c=e.ortb2Fragments,s=e.metrics;s=dr(s);var d,f,l,p,v=n,h=o,C=t,A=u||we(),O=i,S=new Set,k=Q(),j=[],R=r,B=[],U=[],x=[],P=[],q=[];function N(){return{auctionId:A,timestamp:d,auctionEnd:f,auctionStatus:p,adUnits:v,adUnitCodes:C,labels:h,bidderRequests:B,noBids:x,bidsReceived:U,bidsRejected:j,winningBids:P,timeout:O,metrics:s,seatNonBids:q}}function M(e){if(e||clearTimeout(l),void 0===f){var t=[];e&&(Se("Auction ".concat(A," timedOut")),(t=B.filter((function(e){return!S.has(e.bidderRequestId)})).flatMap((function(e){return e.bids}))).length&&Hn(E.FP.BID_TIMEOUT,t)),p=oo,f=Date.now(),s.checkpoint("auctionEnd"),s.timeBetween("requestBids","auctionEnd","requestBids.total"),s.timeBetween("callBids","auctionEnd","requestBids.callBids"),k.resolve(),Hn(E.FP.AUCTION_END,N()),go(v,(function(){try{if(null!=R){var r=C,i=U.filter(me.call(cn,this,r)).reduce(Ro,{});R.apply(so,[i,e,A]),R=null}}catch(e){Re("Error executing bidsBackHandler",null,e)}finally{t.length&&Vi.callTimedOutBidders(n,t,O);var o=D.getConfig("userSync")||{};o.enableOverride||io(o.syncDelay)}}))}}function F(){D.resetBidder(),ke("Bids Received for Auction with id: ".concat(A),U),p=oo,M(!1)}function z(e){S.add(e)}function L(e){var n=this;e.forEach((function(e){var n;n=e,B=B.concat(n)}));var t={},r={bidRequests:e,run:function(){l=setTimeout((function(){return M(!0)}),O),p="inProgress",Hn(E.FP.AUCTION_INIT,N());var r=function(e,n){var t=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).index,r=void 0===t?No.index:t,i=0,o=!1,u=new Set,c={},s={};function d(){i--,o&&0===i&&e()}function f(e,n,t){return c[n.requestId]=!0,function(e,n){var t=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).index,r=void 0===t?No.index:t,i=r.getBidderRequest(e),o=r.getAdUnit(e),a=i&&i.start||e.requestTimestamp;Object.assign(e,{responseTimestamp:e.responseTimestamp||ln(),requestTimestamp:e.requestTimestamp||a,cpm:parseFloat(e.cpm)||0,bidder:e.bidder||e.bidderCode,adUnitCode:n}),null!=(null==o?void 0:o.ttlBuffer)&&(e.ttlBuffer=o.ttlBuffer),e.timeToRespond=e.responseTimestamp-e.requestTimestamp}(n,e),i++,t(d)}function l(e,t){f(e,t,(function(e){var r=function(e){var n,t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).index,r=void 0===t?No.index:t;Hn(E.FP.BID_ADJUSTMENT,e);var i=(null===(n=r.getBidRequest(e))||void 0===n?void 0:n.renderer)||r.getAdUnit(e).renderer,o=e.mediaType,u=r.getMediaTypes(e),c=u&&u[o],s=c&&c.renderer,d=null;s&&s.url&&s.render&&(!0!==s.backupOnly||!e.renderer)?d=s:i&&i.url&&i.render&&(!0!==i.backupOnly||!e.renderer)&&(d=i),d&&(e.renderer=at.install({url:d.url,config:d.options}),e.renderer.setRender(d.render));var f=Io(e.mediaType,u,D.getConfig("mediaTypePriceGranularity")),l=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=parseFloat(e);return isNaN(r)&&(r=""),{low:""===r?"":I(e,m,t),med:""===r?"":I(e,y,t),high:""===r?"":I(e,b,t),auto:""===r?"":I(e,_,t),dense:""===r?"":I(e,w,t),custom:""===r?"":I(e,n,t)}}(e.cpm,"object"===a(f)?f:D.getConfig("customPriceBucket"),D.getConfig("currency.granularityMultiplier"));return e.pbLg=l.low,e.pbMg=l.med,e.pbHg=l.high,e.pbAg=l.auto,e.pbDg=l.dense,e.pbCg=l.custom,e}(t);r.mediaType===to?function(e,n,t){var r=(arguments.length>3&&void 0!==arguments[3]?arguments[3]:{}).index,i=!0,o=T((void 0===r?No.index:r).getMediaTypes({requestId:n.originalRequestId||n.requestId,transactionId:n.transactionId}),"video"),a=o&&T(o,"context"),u=o&&T(o,"useCacheKey");D.getConfig("cache.url")&&(u||a!==Zt)&&(!n.videoCacheKey||D.getConfig("cache.ignoreBidderCacheKey")?(i=!1,_o(e,n,t,o)):n.vastUrl||(Re("videoCacheKey specified but not required vastUrl for video bid"),i=!1)),i&&(vo(e,n),t())}(n,r,e):(null!=r.native&&"object"===a(r.native)&&yo(r),vo(n,r),e())}))}function p(e,t,r){return f(e,t,(function(e){t.rejectionReason=r,je("Bid from ".concat(t.bidder||"unknown bidder"," was rejected: ").concat(r),t),Hn(E.FP.BID_REJECTED,t),n.addBidRejected(t),e()}))}function v(){var t=n.getBidRequests(),r=D.getConfig("auctionOptions");if(u.add(this),r&&!Le(r)){var a=r.secondaryBidders;a&&!t.every((function(e){return g(a,e.bidderCode)}))&&(t=t.filter((function(e){return!g(a,e.bidderCode)})))}o=t.every((function(e){return u.has(e)})),this.bids.forEach((function(e){c[e.bidId]||(n.addNoBid(e),Hn(E.FP.NO_BID,e))})),o&&0===i&&e()}return{addBidResponse:function(){function e(e,n){var t,i,o,a=r.getBidderRequest(n);i=a&&a.bidderRequestId||"",o=lo.call({dispatch:l},e,n,(t=!1,function(r){t||(p(e,n,r),t=!0)})),null==s[i]&&(s[i]=J.resolve()),s[i]=s[i].then((function(){return J.resolve(o).catch((function(){}))}))}return e.reject=p,e}(),adapterDone:function(){!function(e,t){var r=e.timeout;(null==r||r>n.getTimeout())&&(r=n.getTimeout());var i=n.getAuctionStart()+r-Date.now(),o=s[e.bidderRequestId],a=s[""];(null!=o||null!=a)&&i>0?J.race([J.timeout(i),J.resolve(a).then((function(){return o}))]).then(t):t()}(this,v.bind(this))}}}(F,n);Vi.callBids(v,e,r.addBidResponse,r.adapterDone,{request:function(e,n){o(ao,n),o(t,e),uo[e]||(uo[e]={SRA:!0,origin:n}),t[e]>1&&(uo[e].SRA=!1)},done:function(e){ao[e]--,co[0]&&i(co[0])&&co.shift()}},O,z,c)}};function i(e){var n=!0,t=D.getConfig("maxRequestsPerOrigin")||4;return e.bidRequests.some((function(e){var r=1,i=void 0!==e.src&&e.src===E.os.YZ?"s2s":e.bidderCode;return uo[i]&&(!1===uo[i].SRA&&(r=Math.min(e.bids.length,t)),ao[uo[i].origin]+r>t&&(n=!1)),!n})),n&&e.run(),n}function o(e,n){void 0===e[n]?e[n]=1:e[n]++}i(r)||(je("queueing auction due to limited endpoint capacity"),co.push(r))}return zn(E.FP.SEAT_NON_BID,(function(e){var n;e.auctionId===A&&(n=e.seatnonbid,q=q.concat(n))})),{addBidReceived:function(e){U=U.concat(e)},addBidRejected:function(e){j=j.concat(e)},addNoBid:function(e){x=x.concat(e)},callBids:function(){p="started",d=Date.now();var e=s.measureTime("requestBids.makeRequests",(function(){return Vi.makeBidRequests(v,d,A,O,h,c,s)}));ke("Bids Requested for Auction with id: ".concat(A),e),s.checkpoint("callBids"),e.length<1?(je("No valid bid requests returned for auction"),F()):po.call({dispatch:L,context:this},e)},addWinningBid:function(e){var t=n.find((function(n){return n.transactionId===e.transactionId}));P=P.concat(e),Vi.callBidWonBidder(e.adapterCode||e.bidder,e,n),t&&!t.deferBilling&&Vi.callBidBillableBidder(e)},setBidTargeting:function(e){Vi.callSetTargetingBidder(e.adapterCode||e.bidder,e)},getWinningBids:function(){return P},getAuctionStart:function(){return d},getAuctionEnd:function(){return f},getTimeout:function(){return O},getAuctionId:function(){return A},getAuctionStatus:function(){return p},getAdUnits:function(){return v},getAdUnitCodes:function(){return C},getBidRequests:function(){return B},getBidsReceived:function(){return U},getNoBids:function(){return x},getNonBids:function(){return q},getFPD:function(){return c},getMetrics:function(){return s},end:k.promise}}var lo=wt("sync",(function(e,n,t){this.dispatch.call(null,e,n)}),"addBidResponse"),po=wt("sync",(function(e){this.dispatch.call(this.context,e)}),"addBidderRequests"),go=wt("async",(function(e,n){n&&n()}),"bidsBackCallback");function vo(e,n){var t,r,i;t=n,i=!0===pt.get(t.bidderCode,"allowZeroCpmBids")?t.cpm>=0:t.cpm>0,t.bidderCode&&(i||t.dealId)&&(r=function(e,n){var t=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).index,r=void 0===t?No.index:t;if(!n)return{};var i=r.getBidRequest(n),o={};return jo(o,ko(n.mediaType,e),n,i),e&&pt.getOwn(e,E.k2.xn)&&(jo(o,pt.ownSettingsFor(e),n,i),n.sendStandardTargeting=pt.get(e,"sendStandardTargeting")),n.native&&(o=Object.assign({},o,function(e){var n=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).index,t=void 0===n?No.index:n,r={},i=t.getAdUnit(e);T(i,"nativeParams.rendererUrl")?e.native.rendererUrl=ia(i.nativeParams.rendererUrl):T(i,"nativeParams.adTemplate")&&(e.native.adTemplate=ia(i.nativeParams.adTemplate));var o=!1!==T(i,"nativeParams.sendTargetingKeys"),a=function(e){var n={};return T(e,"nativeParams.ext")&&Object.keys(e.nativeParams.ext).forEach((function(e){n[e]="hb_native_".concat(e)})),Lo(Lo({},E.FY),n)}(i),u=Lo(Lo({},e.native),e.native.ext);return delete u.ext,Object.keys(u).forEach((function(n){var t=a[n],u=ia(e.native[n])||ia(T(e,"native.ext.".concat(n)));if("adTemplate"!==n&&t&&u){var c=T(i,"nativeParams.".concat(n,".sendId"));"boolean"!=typeof c&&(c=T(i,"nativeParams.ext.".concat(n,".sendId"))),c&&(u="".concat(t,":").concat(e.adId));var s=T(i,"nativeParams.".concat(n,".sendTargetingKeys"));"boolean"!=typeof s&&(s=T(i,"nativeParams.ext.".concat(n,".sendTargetingKeys"))),("boolean"==typeof s?s:o)&&(r[t]=u)}})),r}(n))),o}(t.bidderCode,t)),t.adserverTargeting=Object.assign(t.adserverTargeting||{},r),dr(n.metrics).timeSince("addBidResponse","addBidResponse.total"),e.addBidReceived(n),Hn(E.FP.BID_RESPONSE,n)}var ho,mo,yo=function(e){var n,t,r=null===(n=No.index.getAdUnit(e))||void 0===n?void 0:n.nativeOrtbRequest,i=null===(t=e.native)||void 0===t?void 0:t.ortb;if(r&&i){var o=function(e,n){var t={},r=(null==n?void 0:n.assets)||[];t.clickUrl=e.link.url,t.privacyLink=e.privacy;var i,o=Mo((null==e?void 0:e.assets)||[]);try{var a=function(){var e=i.value,n=r.find((function(n){return e.id===n.id}));e.title?t.title=e.title.text:e.img?t[n.img.type===$o.MAIN?"image":"icon"]={url:e.img.url,width:e.img.w,height:e.img.h}:e.data&&(t[Qo[Zo[n.data.type]]]=e.data.value)};for(o.s();!(i=o.n()).done;)a()}catch(e){o.e(e)}finally{o.f()}t.impressionTrackers=[];var u,c=[];e.imptrackers&&(u=t.impressionTrackers).push.apply(u,p(e.imptrackers));var s,d=Mo((null==e?void 0:e.eventtrackers)||[]);try{for(d.s();!(s=d.n()).done;){var f=s.value;f.event===ea.impression&&f.method===Xo.img&&t.impressionTrackers.push(f.url),f.event===ea.impression&&f.method===Xo.js&&c.push(f.url)}}catch(e){d.e(e)}finally{d.f()}return c=c.map((function(e){return'<script async src="'.concat(e,'"><\/script>')})),null!=e&&e.jstracker&&c.push(e.jstracker),c.length&&(t.javascriptTrackers=c.join("\n")),t}(i,r);Object.assign(e.native,o)}},bo=function(e){!function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Qn,r={puts:e.map(et)};t(D.getConfig("cache.timeout"))(D.getConfig("cache.url"),function(e){return{success:function(n){var t;try{t=JSON.parse(n).responses}catch(n){return void e(n,[])}t?e(null,t):e(new Error("The cache server didn't respond with a responses property."),[])},error:function(n,t){e(new Error("Error storing video ad in the cache: ".concat(n,": ").concat(JSON.stringify(t))),[])}}}(n),JSON.stringify(r),{contentType:"text/plain",withCredentials:!0})}(e.map((function(e){return e.bidResponse})),(function(n,t){t.forEach((function(t,r){var i,o=e[r],a=o.auctionInstance,u=o.bidResponse,c=o.afterBidAdded;n?je("Failed to save to the video cache: ".concat(n,". Video bid must be discarded.")):""===t.uuid?je("Supplied video cache key was already in use by Prebid Cache; caching attempt was rejected. Video bid must be discarded."):(u.videoCacheKey=t.uuid,u.vastUrl||(u.vastUrl=(i=u.videoCacheKey,"".concat(D.getConfig("cache.url"),"?uuid=").concat(i))),vo(a,u),c())}))}))};D.getConfig("cache",(function(e){ho="number"==typeof e.cache.batchSize&&e.cache.batchSize>0?e.cache.batchSize:1,mo="number"==typeof e.cache.batchTimeout&&e.cache.batchTimeout>0?e.cache.batchTimeout:0}));var wo=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:setTimeout,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:bo,t=[[]],r=!1,i=function(e){return e()};return function(o,a,u){var c=mo>0?e:i;t[t.length-1].length>=ho&&t.push([]),t[t.length-1].push({auctionInstance:o,bidResponse:a,afterBidAdded:u}),r||(r=!0,c((function(){t.forEach(n),t=[[]],r=!1}),mo))}}(),_o=wt("async",(function(e,n,t,r){wo(e,n,t)}),"callPrebidCache");function Io(e,n,t){if(e&&t){if(e===to){var r=T(n,"".concat(to,".context"),"instream");if(t["".concat(to,"-").concat(r)])return t["".concat(to,"-").concat(r)]}return t[e]}}var Co=function(e){return function(n){var t=e||function(e){var n=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).index,t=void 0===n?No.index:n,r=Io(e.mediaType,t.getMediaTypes(e),D.getConfig("mediaTypePriceGranularity"));return"string"==typeof e.mediaType&&r?"string"==typeof r?r:"custom":D.getConfig("priceGranularity")}(n);return t===E.Ql.B7?n.pbAg:t===E.Ql.uN?n.pbDg:t===E.Ql.yE?n.pbLg:t===E.Ql.M2?n.pbMg:t===E.Ql.lj?n.pbHg:t===E.Ql.qN?n.pbCg:void 0}},Ao=function(){return function(e){return e.creativeId?e.creativeId:""}},To=function(){return function(e){return e.meta&&e.meta.advertiserDomains&&e.meta.advertiserDomains.length>0?[e.meta.advertiserDomains].flat()[0]:""}},Eo=function(){return function(e){return e.meta&&(e.meta.networkId||e.meta.networkName)?T(e,"meta.networkName")||T(e,"meta.networkId"):""}},Oo=function(){return function(e){return e.meta&&e.meta.primaryCatId?e.meta.primaryCatId:""}};function So(e,n){return{key:e,val:"function"==typeof n?function(e,t){return n(e,t)}:function(e){return en(e,n)}}}function ko(e,n){var t=E.TD,r=Object.assign({},pt.settingsFor(null));if(r[E.k2.xn]||(r[E.k2.xn]=function(){var e=E.TD;return[So(e.BIDDER,"bidderCode"),So(e.AD_ID,"adId"),So(e.PRICE_BUCKET,Co()),So(e.SIZE,"size"),So(e.DEAL,"dealId"),So(e.SOURCE,"source"),So(e.FORMAT,"mediaType"),So(e.ADOMAIN,To()),So(e.ACAT,Oo()),So(e.DSP,Eo()),So(e.CRID,Ao())]}()),"video"===e){var i=r[E.k2.xn].slice();if(r[E.k2.xn]=i,[t.UUID,t.CACHE_ID].forEach((function(e){void 0===v(i,(function(n){return n.key===e}))&&i.push(So(e,"videoCacheKey"))})),D.getConfig("cache.url")&&(!n||!1!==pt.get(n,"sendStandardTargeting"))){var o=Cn(D.getConfig("cache.url"));void 0===v(i,(function(e){return e.key===t.CACHE_HOST}))&&i.push(So(t.CACHE_HOST,(function(e){return T(e,"adserverTargeting.".concat(t.CACHE_HOST))?e.adserverTargeting[t.CACHE_HOST]:o.hostname})))}}return r}function jo(e,n,t,r){var i=n[E.k2.xn];return t.size=t.getSize(),He(i,(function(i){var o=i.key,a=i.val;if(e[o]&&je("The key: "+o+" is being overwritten"),Pe(a))try{a=a(t,r)}catch(e){Re("bidmanager","ERROR",e)}(void 0===n.suppressEmptyKeys||!0!==n.suppressEmptyKeys)&&o!==E.TD.DEAL&&o!==E.TD.ACAT&&o!==E.TD.DSP&&o!==E.TD.CRID||!We(a)&&null!=a?e[o]=a:ke("suppressing empty key '"+o+"' from adserver targeting")})),e}function Ro(e,n){return e[n.adUnitCode]||(e[n.adUnitCode]={bids:[]}),e[n.adUnitCode].bids.push(n),e}function Bo(e){Object.assign(this,{getAuction:function(n){var t=n.auctionId;if(null!=t)return e().find((function(e){return e.getAuctionId()===t}))},getAdUnit:function(n){var t=n.transactionId;if(null!=t)return e().flatMap((function(e){return e.getAdUnits()})).find((function(e){return e.transactionId===t}))},getMediaTypes:function(e){var n=e.transactionId,t=e.requestId;if(null!=t){var r=this.getBidRequest({requestId:t});if(null!=r&&(null==n||r.transactionId===n))return r.mediaTypes}else if(null!=n){var i=this.getAdUnit({transactionId:n});if(null!=i)return i.mediaTypes}},getBidderRequest:function(n){var t=n.requestId,r=n.bidderRequestId;if(null!=t||null!=r){var i=e().flatMap((function(e){return e.getBidRequests()}));return null!=r&&(i=i.filter((function(e){return e.bidderRequestId===r}))),null==t?i[0]:i.find((function(e){return e.bids&&null!=e.bids.find((function(e){return e.bidId===t}))}))}},getBidRequest:function(n){var t=n.requestId;if(null!=t)return e().flatMap((function(e){return e.getBidRequests()})).flatMap((function(e){return e.bids})).find((function(e){return e&&e.bidId===t}))}})}var Uo=1,Do=[];function xo(e){return e.ttl-(e.hasOwnProperty("ttlBuffer")?e.ttlBuffer:Uo)}function Po(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}D.getConfig("ttlBuffer",(function(e){"number"==typeof e.ttlBuffer?Uo!==(Uo=e.ttlBuffer)&&Do.forEach((function(e){return e(Uo)})):Re("Invalid value for ttlBuffer",e.ttlBuffer)}));var qo="minBidCacheTTL",No=function(){var e,n=null,t=Rn({startTime:function(e){return e.end.then((function(){return e.getAuctionEnd()}))},ttl:function(e){return null==n?null:e.end.then((function(){return 1e3*Math.max.apply(Math,[n].concat(p(e.getBidsReceived().map(xo))))}))}});e=function(){null!=n&&t.refresh()},Do.push(e),D.getConfig(qo,(function(e){n!==(n="number"==typeof(n=null==e?void 0:e[qo])?n:null)&&t.refresh()}));var r={};function i(e){var n,r=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return Po(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Po(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){u=!0,o=e},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}(t);try{for(r.s();!(n=r.n()).done;){var i=n.value;if(i.getAuctionId()===e)return i}}catch(e){r.e(e)}finally{r.f()}}function a(){return t.toArray().flatMap((function(e){return e.getBidsReceived()}))}return r.addWinningBid=function(e){var n=dr(e.metrics);n.checkpoint("bidWon"),n.timeBetween("auctionEnd","bidWon","render.pending"),n.timeBetween("requestBids","bidWon","render.e2e");var t=i(e.auctionId);t?(e.status=E.UE.fe,t.addWinningBid(e)):je("Auction not found when adding winning bid")},Object.entries({getAllWinningBids:{name:"getWinningBids"},getBidsRequested:{name:"getBidRequests"},getNoBids:{},getAdUnits:{},getBidsReceived:{pre:function(e){return e.getAuctionStatus()===oo}},getAdUnitCodes:{post:Ze}}).forEach((function(e){var n=o(e,2),i=n[0],a=n[1],u=a.name,c=void 0===u?i:u,s=a.pre,d=a.post,f=null==s?function(e){return e[c]()}:function(e){return s(e)?e[c]():[]},l=null==d?function(e){return e}:function(e){return e.filter(d)};r[i]=function(){return l(t.toArray().flatMap(f))}})),r.getAllBidsForAdUnitCode=function(e){return a().filter((function(n){return n&&n.adUnitCode===e}))},r.createAuction=function(e){var n=fo(e);return function(e){t.add(e)}(n),n},r.findBidByAdId=function(e){return a().find((function(n){return n.adId===e}))},r.getStandardBidderAdServerTargeting=function(){return ko()[E.k2.xn]},r.setStatusForBids=function(e,n){var t=r.findBidByAdId(e);if(t&&(t.status=n),t&&n===E.UE.CK){var o=i(t.auctionId);o&&o.setBidTargeting(t)}},r.getLastAuctionId=function(){var e=t.toArray();return e.length&&e[e.length-1].getAuctionId()},r.clearAllAuctions=function(){t.clear()},r.index=new Bo((function(){return t.toArray()})),r}();function Mo(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return Fo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Fo(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){u=!0,o=e},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}function Fo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function zo(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Lo(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?zo(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):zo(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var Wo=[],Ho=Object.keys(E.FY).map((function(e){return E.FY[e]})),Go={image:{ortb:{ver:"1.2",assets:[{required:1,id:1,img:{type:3,wmin:100,hmin:100}},{required:1,id:2,title:{len:140}},{required:1,id:3,data:{type:1}},{required:0,id:4,data:{type:2}},{required:0,id:5,img:{type:1,wmin:20,hmin:20}}]},image:{required:!0},title:{required:!0},sponsoredBy:{required:!0},clickUrl:{required:!0},body:{required:!1},icon:{required:!1}}},Vo=E.s$,$o=E.oF,Ko=E.V1,Jo=E.zA,Yo=E.FY,Qo=ca(Ko),Zo=ca(Vo),Xo={img:1,js:2,1:"img",2:"js"},ea={impression:1,"viewable-mrc50":2,"viewable-mrc100":3,"viewable-video50":4};function na(e){if(e&&e.type&&(!(!(n=e.type)||!g(Object.keys(Go),n))||(Re("".concat(n," nativeParam is not supported")),!1))&&(e=Go[e.type]),!e||!e.ortb||ta(e.ortb))return e;var n}function ta(e){var n=e.assets;if(!Array.isArray(n)||0===n.length)return Re("assets in mediaTypes.native.ortb is not an array, or it's empty. Assets: ",n),!1;var t=n.map((function(e){return e.id}));return n.length!==new Set(t).size||t.some((function(e){return e!==parseInt(e,10)}))?(Re("each asset object must have 'id' property, it must be unique and it must be an integer"),!1):e.hasOwnProperty("eventtrackers")&&!Array.isArray(e.eventtrackers)?(Re("ortb.eventtrackers is not an array. Eventtrackers: ",e.eventtrackers),!1):n.every((function(e){return function(e){if(!Fe(e))return Re("asset must be an object. Provided asset: ",e),!1;if(e.img){if(!Me(e.img.w)&&!Me(e.img.wmin))return Re("for img asset there must be 'w' or 'wmin' property"),!1;if(!Me(e.img.h)&&!Me(e.img.hmin))return Re("for img asset there must be 'h' or 'hmin' property"),!1}else if(e.title){if(!Me(e.title.len))return Re("for title asset there must be 'len' property defined"),!1}else if(e.data){if(!Me(e.data.type))return Re("for data asset 'type' property must be a number"),!1}else if(e.video&&!(Array.isArray(e.video.mimes)&&Array.isArray(e.video.protocols)&&Me(e.video.minduration)&&Me(e.video.maxduration)))return Re("video asset is not properly configured"),!1;return!0}(e)}))}function ra(e,n,t){var r,i=(arguments.length>3&&void 0!==arguments[3]?arguments[3]:{}).index,o=void 0===i?No.index:i,a={message:"assetResponse",adId:e.adId},u=o.getAdUnit(n),c=n.native;return n.native.ortb?a.ortb=n.native.ortb:null!==(r=u.mediaTypes)&&void 0!==r&&null!==(r=r.native)&&void 0!==r&&r.ortb&&(a.ortb=ua(n.native,u.nativeOrtbRequest)),a.assets=[],(null==t?Object.keys(c):t).forEach((function(e){if("adTemplate"===e&&c[e])a.adTemplate=ia(c[e]);else if("rendererUrl"===e&&c[e])a.rendererUrl=ia(c[e]);else if("ext"===e)Object.keys(c[e]).forEach((function(n){if(c[e][n]){var t=ia(c[e][n]);a.assets.push({key:n,value:t})}}));else if(c[e]&&E.FY.hasOwnProperty(e)){var n=ia(c[e]);a.assets.push({key:e,value:n})}})),a}function ia(e){return(null==e?void 0:e.url)||e}function oa(e){if(ta(e)){var n,t={},r=Mo(e.assets);try{var i=function(){var r=n.value;if(r.title){var i={required:!!r.required&&Boolean(r.required),len:r.title.len};t.title=i}else if(r.img){var o={required:!!r.required&&Boolean(r.required)};if(r.img.w&&r.img.h)o.sizes=[r.img.w,r.img.h];else if(r.img.wmin&&r.img.hmin){var a=function(e,n){for(;e&&n&&e!==n;)e>n?e-=n:n-=e;return e||n}(r.img.wmin,r.img.hmin);o.aspect_ratios=[{min_width:r.img.wmin,min_height:r.img.hmin,ratio_width:r.img.wmin/a,ratio_height:r.img.hmin/a}]}r.img.type===$o.MAIN?t.image=o:t.icon=o}else if(r.data){var u=Object.keys(Vo).find((function(e){return Vo[e]===r.data.type})),c=Object.keys(Ko).find((function(e){return Ko[e]===u}));t[c]={required:!!r.required&&Boolean(r.required)},r.data.len&&(t[c].len=r.data.len)}e.privacy&&(t.privacyLink={required:!1})};for(r.s();!(n=r.n()).done;)i()}catch(e){r.e(e)}finally{r.f()}return t}}function aa(e){var n={link:{},eventtrackers:[]};return Object.entries(e).forEach((function(e){var t=o(e,2),r=t[0],i=t[1];switch(r){case"clickUrl":n.link.url=i;break;case"clickTrackers":n.link.clicktrackers=Array.isArray(i)?i:[i];break;case"impressionTrackers":(Array.isArray(i)?i:[i]).forEach((function(e){n.eventtrackers.push({event:ea.impression,method:Xo.img,url:e})}));break;case"javascriptTrackers":n.jstracker=Array.isArray(i)?i.join(""):i;break;case"privacyLink":n.privacy=i}})),n}function ua(e,n){var t=Lo(Lo({},aa(e)),{},{assets:[]});function r(e,r){var i=n.assets.find(e);null!=i&&(r(i=sn(i)),t.assets.push(i))}return Object.keys(e).filter((function(n){return!!e[n]})).forEach((function(n){var t=ia(e[n]);switch(n){case"title":r((function(e){return null!=e.title}),(function(e){e.title={text:t}}));break;case"image":case"icon":var i="image"===n?$o.MAIN:$o.ICON;r((function(e){return null!=e.img&&e.img.type===i}),(function(e){e.img={url:t}}));break;default:n in Ko&&r((function(e){return null!=e.data&&e.data.type===Vo[Ko[n]]}),(function(e){e.data={value:t}}))}})),t}function ca(e){var n={};for(var t in e)n[e[t]]=t;return n}var sa=E.FP,da=sa.AD_RENDER_FAILED,fa=sa.AD_RENDER_SUCCEEDED;function la(e){var n=e.reason,t=e.message,r=e.bid,i=e.id,o={reason:n,message:t};r&&(o.bid=r),i&&(o.adId=i),Re(t),Hn(da,o)}function pa(e){var n=e.doc,t=e.bid,r=e.id,i={doc:n};t&&(i.bid=t),r&&(i.adId=r),Hn(fa,i)}var ga=E.FP.BID_WON,va=E.FP.STALE_RENDER,ha=new WeakSet,ma={"Prebid Request":function(e,n,t){if(null!=t){if(t.status!==E.UE.fe||(je("Ad id ".concat(t.adId," has been rendered before")),Hn(va,t),!T(D.getConfig("auctionOptions"),"suppressStaleRender"))){try{!function(e,n){var t=e.adId,r=e.ad,i=e.adUrl,o=e.width,a=e.height,u=e.renderer,c=e.cpm,s=e.originalCpm;ut(u)?ct(u,e):t&&(ba(e),n({message:"Prebid Response",ad:dn(r,s||c),adUrl:dn(i,s||c),adId:t,width:o,height:a}))}(t,e)}catch(e){return void la({reason:E.q_.EXCEPTION,message:e.message,id:n.adId,bid:t})}No.addWinningBid(t),Hn(ga,t)}}else la({reason:E.q_.CANNOT_FIND_AD,message:"Cannot find ad for cross-origin render request: '".concat(n.adId,"'"),id:n.adId})},"Prebid Event":function(e,n,t){if(null!=t)if(t.status===E.UE.fe)switch(n.event){case E.FP.AD_RENDER_FAILED:la({bid:t,id:n.adId,reason:n.info.reason,message:n.info.message});break;case E.FP.AD_RENDER_SUCCEEDED:pa({doc:null,bid:t,id:n.adId});break;default:Re("Received x-origin event request for unsupported event: '".concat(n.event,"' (adId: '").concat(n.adId,"')"))}else je("Received x-origin event request without corresponding render request for ad '".concat(n.adId,"'"));else Re("Cannot find ad '".concat(n.adId,"' for x-origin event request"))}};function ya(e){var n=e.message?"message":"data",t={};try{t=JSON.parse(e[n])}catch(e){return}if(t&&t.adId&&t.message){var r=v(No.getBidsReceived(),(function(e){return e.adId===t.adId}));ma.hasOwnProperty(t.message)&&ma[t.message](function(e){return null==e.origin&&0===e.ports.length?function(){var e="Cannot post message to a frame with null origin. Please update creatives to use MessageChannel, see https://github.com/prebid/Prebid.js/issues/7870";throw Re(e),new Error(e)}:e.ports.length>0?function(n){e.ports[0].postMessage(JSON.stringify(n))}:function(n){e.source.postMessage(JSON.stringify(n),e.origin)}}(e),t,r)}}function ba(e){var n=e.adId,t=e.adUnitCode,r=e.width,i=e.height;["div","iframe"].forEach((function(e){var o=function(e){var r=function(e,n){return tn()?function(e){var n=v(window.googletag.pubads().getSlots(),(function(n){return v(n.getTargetingKeys(),(function(t){return g(n.getTargeting(t),e)}))}));return n?n.getSlotElementId():null}(e):function(){if(window.apntag&&Pe(window.apntag.getTag))return!0}()?function(e){var n=window.apntag.getTag(e);return n&&n.targetId}(n):n}(n,t),i=document.getElementById(r);return i&&i.querySelector(e)}(e+':not([style*="display: none"])');if(o){var a=o.style;a.width=r?r+"px":"100%",a.height=i+"px"}else je("Unable to locate matching page element for adUnitCode ".concat(t,".  Can't resize it to ad's dimensions.  Please review setup."))}))}Object.assign(ma,{"Prebid Native":function(e,n,t){var r,i,o;if(null!=t)switch(ha.has(t)||(ha.add(t),No.addWinningBid(t),Hn(ga,t)),n.action){case"assetRequest":e(function(e,n){var t=e.assets.map((function(e){return function(e,n){for(var t in e)if(e.hasOwnProperty(t)&&e[t]===n)return t}(E.FY,e)}));return ra(e,n,t)}(n,t));break;case"allAssetRequest":e(function(e,n){return ra(e,n,null)}(n,t));break;case"resizeNativeHeight":t.height=n.height,t.width=n.width,ba(t);break;default:r=n,o=(i=t).native.ortb||aa(i.native),"click"===r.action?function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,t=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).fetchURL,r=void 0===t?Je:t;if(n){var i,o=(e.assets||[]).filter((function(e){return e.link})).reduce((function(e,n){return e[n.id]=n.link,e}),{}),a=(null===(i=e.link)||void 0===i?void 0:i.clicktrackers)||[],u=o[n],c=a;u&&(c=u.clicktrackers||[]),c.forEach((function(e){return r(e)}))}else{var s;((null===(s=e.link)||void 0===s?void 0:s.clicktrackers)||[]).forEach((function(e){return r(e)}))}}(o,null==r?void 0:r.assetId):function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.runMarkup,r=void 0===t?function(e){return function(e){if(e){var n=document.createElement("iframe");n.id=be(),n.width=0,n.height=0,n.hspace="0",n.vspace="0",n.marginWidth="0",n.marginHeight="0",n.style.display="none",n.style.height="0px",n.style.width="0px",n.scrolling="no",n.frameBorder="0",n.allowtransparency="true",ge.insertElement(n,document,"body"),n.contentWindow.document.open(),n.contentWindow.document.write(e),n.contentWindow.document.close()}}(e)}:t,i=n.fetchURL,o=void 0===i?Je:i,a=(e.eventtrackers||[]).filter((function(e){return e.event===ea.impression})).reduce((function(e,n){return Xo.hasOwnProperty(n.method)&&e[Xo[n.method]].push(n.url),e}),{img:[],js:[]}),u=a.img,c=a.js;e.imptrackers&&(u=u.concat(e.imptrackers)),u.forEach((function(e){return o(e)})),c=c.map((function(e){return'<script async src="'.concat(e,'"><\/script>')})),e.jstracker&&(c=c.concat([e.jstracker])),c.length&&r(c.join("\n"))}(o),r.action}else Re("Cannot find ad for x-origin event request: '".concat(n.adId,"'"))}});var wa=[],_a="targetingControls.allowTargetingKeys",Ia="targetingControls.addTargetingKeys",Ca='Only one of "'.concat(_a,'" or "').concat(Ia,'" can be set'),Aa=Object.keys(E.TD).map((function(e){return E.TD[e]})),Ta={isActualBid:function(e){return e.getStatusCode()===E.Q_.Q},isBidNotExpired:function(e){return e.responseTimestamp+1e3*xo(e)>ln()},isUnusedBid:function(e){return e&&(e.status&&!g([E.UE.fe],e.status)||!e.status)}};function Ea(e){return!Object.values(Ta).some((function(n){return!n(e)}))}var Oa=wt("sync",(function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(!(arguments.length>3&&void 0!==arguments[3]&&arguments[3])){var r=[],i=D.getConfig("sendBidsControl.dealPrioritization"),o=hn(e,"adUnitCode");return Object.keys(o).forEach((function(e){var a=[],u=hn(o[e],"bidderCode");Object.keys(u).forEach((function(e){return a.push(u[e].reduce(n))})),t>0?(a=i?a.sort(Sa(!0)):a.sort((function(e,n){return n.cpm-e.cpm})),r.push.apply(r,p(a.slice(0,t)))):r.push.apply(r,p(a))})),r}return e}));function Sa(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return function(n,t){return void 0!==n.adserverTargeting.hb_deal&&void 0===t.adserverTargeting.hb_deal?-1:void 0===n.adserverTargeting.hb_deal&&void 0!==t.adserverTargeting.hb_deal?1:e?t.cpm-n.cpm:t.adserverTargeting.hb_pb-n.adserverTargeting.hb_pb}}var ka=function(e){var n={},t={};function r(e,n){return e.adserverTargeting&&n&&(Ne(n)&&g(n,e.adUnitCode)||"string"==typeof n&&e.adUnitCode===n)}function i(n){return"string"==typeof n?[n]:Ne(n)?n:e.getAdUnitCodes()||[]}function o(){var n=e.getBidsReceived();if(D.getConfig("useBidCache")){var r=D.getConfig("bidCacheFilterFunction");"function"==typeof r&&(n=n.filter((function(e){return t[e.adUnitCode]===e.auctionId||!!r(e)})))}else n=n.filter((function(e){return t[e.adUnitCode]===e.auctionId}));return n=n.filter((function(e){return"adpod"!==T(e,"video.context")})).filter(Ea),Oa(n,on)}function a(e,t){var r=n.getWinningBids(e,t),i=u();return r=r.map((function(e){return c({},e.adUnitCode,Object.keys(e.adserverTargeting).filter((function(n){return void 0===e.sendStandardTargeting||e.sendStandardTargeting||-1===i.indexOf(n)})).reduce((function(n,t){var r=[e.adserverTargeting[t]],i=c({},t.substring(0,20),r);if(t===E.TD.DEAL){var o=c({},"".concat(t,"_").concat(e.bidderCode).substring(0,20),r);return[].concat(p(n),[i,o])}return[].concat(p(n),[i])}),[]))})),r}function u(){return e.getStandardBidderAdServerTargeting().map((function(e){return e.key})).concat(Aa).filter(Ze)}function s(e,n,t,r){return Object.keys(n.adserverTargeting).filter(d()).forEach((function(t){e.length&&e.filter(function(e){return function(t){return t.adUnitCode===n.adUnitCode&&t.adserverTargeting[e]}}(t)).forEach(function(e){return function(t){Ne(t.adserverTargeting[e])||(t.adserverTargeting[e]=[t.adserverTargeting[e]]),t.adserverTargeting[e]=t.adserverTargeting[e].concat(n.adserverTargeting[e]).filter(Ze),delete n.adserverTargeting[e]}}(t))})),e.push(n),e}function d(){var e=u();return e=e.concat(Ho),function(n){return-1===e.indexOf(n)}}function f(e){return c({},e.adUnitCode,Object.keys(e.adserverTargeting).filter(d()).map((function(n){return c({},n.substring(0,20),[e.adserverTargeting[n]])})))}function l(e,n){return n.map((function(n){return c({},"".concat(n,"_").concat(e.bidderCode).substring(0,20),[e.adserverTargeting[n]])}))}return n.setLatestAuctionForAdUnit=function(e,n){t[e]=n},n.resetPresetTargeting=function(n,t){if(tn()){var r=i(n),o=e.getAdUnits().filter((function(e){return g(r,e.code)})),a=wa.reduce((function(e,n){return e[n]=null,e}),{});window.googletag.pubads().getSlots().forEach((function(e){var n=Pe(t)&&t(e);o.forEach((function(t){(t.code===e.getAdUnitPath()||t.code===e.getSlotElementId()||Pe(n)&&n(t.code))&&e.updateTargetingFromMap(a)}))}))}},n.resetPresetTargetingAST=function(e){i(e).forEach((function(e){var n=window.apntag.getTag(e);if(n&&n.keywords){var t=Object.keys(n.keywords),r={};t.forEach((function(e){g(wa,e.toLowerCase())||(r[e]=n.keywords[e])})),window.apntag.modifyTag(e,{keywords:r})}}))},n.getAllTargeting=function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o(),u=i(n),d=a(u,t).concat(function(e,n){return n.filter((function(n){return g(e,n.adUnitCode)})).map((function(e){return Object.assign({},e)})).reduce(s,[]).map(f).filter((function(e){return e}))}(u,t)).concat(D.getConfig("enableSendAllBids")?function(e,n){var t=Aa.concat(Ho),i=D.getConfig("sendBidsControl.bidLimit"),o=Oa(n,rn,i),a=D.getConfig("targetingControls.allowSendAllBidsTargetingKeys"),u=a?a.map((function(e){return E.TD[e]})):t;return o.map((function(n){if(r(n,e))return c({},n.adUnitCode,l(n,t.filter((function(e){return void 0!==n.adserverTargeting[e]&&-1!==u.indexOf(e)}))))})).filter((function(e){return e}))}(u,t):function(e,n){if(!0===D.getConfig("targetingControls.alwaysIncludeDeals")){var t=Aa.concat(Ho);return Oa(n,rn).map((function(n){if(n.dealId&&r(n,e))return c({},n.adUnitCode,l(n,t.filter((function(e){return void 0!==n.adserverTargeting[e]}))))})).filter((function(e){return e}))}return[]}(u,t)).concat(function(n){function t(e){return T(e,E.k2.xn)}return e.getAdUnits().filter((function(e){return g(n,e.code)&&t(e)})).map((function(e){return c({},e.code,function(e){var n=t(e);return Object.keys(n).map((function(e){return qe(n[e])&&(n[e]=n[e].split(",").map((function(e){return e.trim()}))),Ne(n[e])||(n[e]=[n[e]]),c({},e,n[e])}))}(e))}))}(u));d.map((function(e){Object.keys(e).map((function(n){e[n].map((function(e){-1===wa.indexOf(Object.keys(e)[0])&&(wa=Object.keys(e).concat(wa))}))}))}));var p=Object.keys(Object.assign({},E.kF,E.FY)),h=D.getConfig(_a),m=D.getConfig(Ia);if(null!=m&&null!=h)throw new Error(Ca);h=null!=m?p.concat(m):h||p,Array.isArray(h)&&h.length>0&&(d=function(e,n){var t=Object.assign({},E.TD,E.FY),r=Object.keys(t),i={};ke("allowTargetingKeys - allowed keys [ ".concat(n.map((function(e){return t[e]})).join(", ")," ]")),e.map((function(e){var o=Object.keys(e)[0],a=e[o].filter((function(e){var o=Object.keys(e)[0],a=0===r.filter((function(e){return 0===o.indexOf(t[e])})).length||v(n,(function(e){var n=t[e];return 0===o.indexOf(n)}));return i[o]=!a,a}));e[o]=a}));var o=Object.keys(i).filter((function(e){return i[e]}));return ke("allowTargetingKeys - removed keys [ ".concat(o.join(", ")," ]")),e.filter((function(e){return e[Object.keys(e)[0]].length>0}))}(d,h)),d=function(e){var n=e.map((function(e){return c({},Object.keys(e)[0],e[Object.keys(e)[0]].map((function(e){return c({},Object.keys(e)[0],e[Object.keys(e)[0]].join(","))})).reduce((function(e,n){return Object.assign(n,e)}),{}))})).reduce((function(e,n){var t=Object.keys(n)[0];return e[t]=Object.assign({},e[t],n[t]),e}),{});return n}(d);var y=D.getConfig("targetingControls.auctionKeyMaxChars");return y&&(ke("Detected 'targetingControls.auctionKeyMaxChars' was active for this auction; set with a limit of ".concat(y," characters.  Running checks on auction keys...")),d=function(e,n){var t=sn(e),r=Object.keys(t).map((function(e){return{adUnitCode:e,adserverTargeting:t[e]}})).sort(Sa());return r.reduce((function(e,r,i,o){var a,u=(a=r.adserverTargeting,Object.keys(a).reduce((function(e,n){return e+"".concat(n,"%3d").concat(encodeURIComponent(a[n]),"%26")}),""));i+1===o.length&&(u=u.slice(0,-3));var c=r.adUnitCode,s=u.length;return s<=n?(n-=s,ke("AdUnit '".concat(c,"' auction keys comprised of ").concat(s," characters.  Deducted from running threshold; new limit is ").concat(n),t[c]),e[c]=t[c]):je("The following keys for adUnitCode '".concat(c,"' exceeded the current limit of the 'auctionKeyMaxChars' setting.\nThe key-set size was ").concat(s,", the current allotted amount was ").concat(n,".\n"),t[c]),i+1===o.length&&0===Object.keys(e).length&&Re("No auction targeting keys were permitted due to the setting in setConfig(targetingControls.auctionKeyMaxChars).  Please review setup and consider adjusting."),e}),{})}(d,y)),u.forEach((function(e){d[e]||(d[e]={})})),d},D.getConfig("targetingControls",(function(e){null!=T(e,_a)&&null!=T(e,Ia)&&Re(Ca)})),n.setTargetingForGPT=function(e,n){window.googletag.pubads().getSlots().forEach((function(t){Object.keys(e).filter(n?n(t):function(e){return function(n){return function(e,n){return e.getAdUnitPath()===n||e.getSlotElementId()===n}(e,n)}}(t)).forEach((function(n){Object.keys(e[n]).forEach((function(t){var r=e[n][t];"string"==typeof r&&-1!==r.indexOf(",")&&(r=r.split(",")),e[n][t]=r})),Se("Attempting to set targeting-map for slot: ".concat(t.getSlotElementId()," with targeting-map:"),e[n]),t.updateTargetingFromMap(e[n])}))}))},n.getWinningBids=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o(),t=i(e);return n.filter((function(e){return g(t,e.adUnitCode)})).filter((function(e){return!0===pt.get(e.bidderCode,"allowZeroCpmBids")?e.cpm>=0:e.cpm>0})).map((function(e){return e.adUnitCode})).filter(Ze).map((function(e){return n.filter((function(n){return n.adUnitCode===e?n:null})).reduce(rn)}))},n.setTargetingForAst=function(e){var t=n.getAllTargeting(e);try{n.resetPresetTargetingAST(e)}catch(e){Re("unable to reset targeting for AST"+e)}Object.keys(t).forEach((function(e){return Object.keys(t[e]).forEach((function(n){if(Se("Attempting to set targeting for targetId: ".concat(e," key: ").concat(n," value: ").concat(t[e][n])),qe(t[e][n])||Ne(t[e][n])){var r={};n.search(/pt[0-9]/)<0?r[n.toUpperCase()]=t[e][n]:r[n]=t[e][n],window.apntag.setKeywords(e,r,{overrideKeyValue:!0})}}))}))},n.isApntagDefined=function(){if(window.apntag&&Pe(window.apntag.setKeywords))return!0},n}(No),ja="__pbjs_debugging__";function Ra(){return f().installedModules.includes("debugging")}function Ba(e){return new J((function(n){rt(e,"debugging",n)}))}function Ua(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.alreadyInstalled,t=void 0===n?Ra:n,r=e.script,i=void 0===r?Ba:r,o=null;return function(){return null==o&&(o=new J((function(e,n){setTimeout((function(){if(t())e();else{var r="https://cdn.jsdelivr.net/npm/prebid.js@8.14.0/dist/debugging-standalone.js";Se('Debugging module not installed, loading it from "'.concat(r,'"...')),f()._installDebugging=!0,i(r).then((function(){f()._installDebugging({DEBUG_KEY:ja,hook:wt,config:D,createBid:Qt,logger:Be("DEBUG:")})})).then(e,n)}}))}))),o}}var Da=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.load,t=void 0===n?Ua():n,r=e.hook,i=void 0===r?Ct("requestBids"):r,o=null,a=!1;function u(e){for(var n=this,t=arguments.length,r=new Array(t>1?t-1:0),i=1;i<t;i++)r[i-1]=arguments[i];return(o||J.resolve()).then((function(){return e.apply(n,r)}))}function c(){i.getHooks({hook:u}).remove(),a=!1}return{enable:function(){a||(o=t(),i.before(u,99),a=!0)},disable:c,reset:function(){o=null,c()}}}();Da.reset,D.getConfig("debugging",(function(e){var n=e.debugging;null!=n&&n.enabled?Da.enable():Da.disable()}));var xa=Zi("fpdEnrichment"),Pa=Sn((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.location.host;if(!xa.cookiesAreEnabled())return e;var n,t,r=e.split(".");if(2===r.length)return e;var i=-2,o="_rdc".concat(Date.now()),a="writeable";do{n=r.slice(i).join(".");var u=new Date(ln()+1e4).toUTCString();xa.setCookie(o,a,u,"Lax",n,void 0),xa.getCookie(o,void 0)===a?(t=!1,xa.setCookie(o,"","Thu, 01 Jan 1970 00:00:01 GMT",void 0,n,void 0)):(i+=-1,t=Math.abs(i)<=r.length)}while(t);return n})),qa=["architecture","bitness","model","platformVersion","fullVersionList"],Na=["brands","mobile","platform"],Ma=function(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null===(e=window.navigator)||void 0===e?void 0:e.userAgentData,t=n&&Na.some((function(e){return void 0!==n[e]}))?Object.freeze(za(1,n)):null;return function(){return t}}(),Fa=function(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null===(e=window.navigator)||void 0===e?void 0:e.userAgentData,t={},r=new WeakMap;return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:qa;if(!r.has(e)){var i=Array.from(e);i.sort(),r.set(e,i.join("|"))}var o=r.get(e);if(!t.hasOwnProperty(o))try{t[o]=n.getHighEntropyValues(e).then((function(e){return Le(e)?null:Object.freeze(za(2,e))})).catch((function(){return null}))}catch(e){t[o]=J.resolve(null)}return t[o]}}();function za(e,n){function t(e,n){var t={brand:e};return qe(n)&&!We(n)&&(t.version=n.split(".")),t}var r={source:e};return n.platform&&(r.platform=t(n.platform,n.platformVersion)),(n.fullVersionList||n.brands)&&(r.browsers=(n.fullVersionList||n.brands).map((function(e){return t(e.brand,e.version)}))),void 0!==n.mobile&&(r.mobile=n.mobile?1:0),["model","bitness","architecture"].forEach((function(e){var t=n[e];qe(t)&&(r[e]=t)})),r}var La=["dooh","app","site"];function Wa(e,n){return null!=e[n]&&Object.keys(e[n]).length>0}function Ha(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ga={getRefererInfo:qr,findRootDomain:Pa,getWindowTop:Te,getWindowSelf:Ee,getHighEntropySUA:Fa,getLowEntropySUA:Ma},Va=("FPD",function(e){return La.reduce((function(n,t){return Wa(e,t)&&(null!=n?(je("".concat("FPD"," specifies both '").concat(n,"' and '").concat(t,"'; dropping the latter.")),delete e[t]):n=t),n}),null),e}),$a=wt("sync",(function(e){return J.all([e,(n=D.getConfig("firstPartyData.uaHints"),Array.isArray(n)&&0!==n.length?Ga.getHighEntropySUA(n):J.resolve(Ga.getLowEntropySUA())).catch((function(){return null}))]).then((function(e){var n=o(e,2),t=n[0],r=n[1],i=Ga.getRefererInfo();!function(e){["app","site","device"].forEach((function(n){var t=D.getConfig(n);null!=t&&(e[n]=En({},t,e[n]))}))}(t),Object.entries(Ya).forEach((function(e){var n=o(e,2),r=n[0],a=(0,n[1])(t,i);a&&Object.keys(a).length>0&&(t[r]=En({},a,t[r]))})),r&&kn(t,"device.sua",Object.assign({},r,t.device.sua)),t=Va(t);var a,u=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return Ha(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ha(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){u=!0,o=e},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}(La);try{for(u.s();!(a=u.n()).done;){var c=a.value;if(Wa(t,c)){t[c]=En({},Qa(0,i),t[c]);break}}}catch(e){u.e(e)}finally{u.f()}return t}));var n}));function Ka(e){try{return e(Ga.getWindowTop())}catch(n){return e(Ga.getWindowSelf())}}function Ja(e){return mn(e,Object.keys(e))}var Ya={site:function(e,n){if(!La.filter((function(e){return"site"!==e})).some(Wa.bind(null,e)))return Ja({page:n.page,ref:n.ref})},device:function(){return Ka((function(e){return{w:e.innerWidth||e.document.documentElement.clientWidth||e.document.body.clientWidth,h:e.innerHeight||e.document.documentElement.clientHeight||e.document.body.clientHeight,dnt:"1"===navigator.doNotTrack||"1"===window.doNotTrack||"1"===navigator.msDoNotTrack||"yes"===navigator.doNotTrack?1:0,ua:e.navigator.userAgent,language:e.navigator.language.split("-").shift()}}))},regs:function(){var e={};Ka((function(e){return e.navigator.globalPrivacyControl}))&&kn(e,"ext.gpc",1);var n=D.getConfig("coppa");return"boolean"==typeof n&&(e.coppa=n?1:0),e}};function Qa(e,n){var t,r,i=Dr(n.page,{noLeadingWww:!0}),o=null===(t=Ka((function(e){return e.document.querySelector("meta[name='keywords']")})))||void 0===t||null===(t=t.content)||void 0===t||null===(r=t.replace)||void 0===r?void 0:r.call(t,/\s/g,"");return Ja({domain:i,keywords:o,publisher:Ja({domain:Ga.findRootDomain(i)})})}var Za=f(),Xa=eo.triggerUserSyncs,eu=E.FP,nu=eu.ADD_AD_UNITS,tu=eu.BID_WON,ru=eu.REQUEST_BIDS,iu=eu.SET_TARGETING,ou=eu.STALE_RENDER,au=E.q_,uu=au.PREVENT_WRITING_ON_MAIN_DOCUMENT,cu=au.NO_AD,su=au.EXCEPTION,du=au.CANNOT_FIND_AD,fu=au.MISSING_DOC_OR_ADID,lu={bidWon:function(e){if(Ge(No.getBidsRequested().map((function(e){return e.bids.map((function(e){return e.adUnitCode}))})).reduce(Xe).filter(Ze),e))return!0;Re('The "'+e+'" placement is not defined.')}};function pu(e,n,t){e.defaultView&&e.defaultView.frameElement&&(e.defaultView.frameElement.width=n,e.defaultView.frameElement.height=t)}function gu(e,n){var t=[];return Ne(e)&&(n?e.length===n:e.length>0)&&(e.every((function(e){return _n(e,2)}))?t=e:_n(e,2)&&t.push(e)),t}function vu(e){var n=sn(e),t=n.mediaTypes.banner,r=gu(t.sizes);return r.length>0?(t.sizes=r,n.sizes=r):(Re("Detected a mediaTypes.banner object without a proper sizes field.  Please ensure the sizes are listed like: [[300, 250], ...].  Removing invalid mediaTypes.banner object from request."),delete n.mediaTypes.banner),n}function hu(e){var n=sn(e),t=n.mediaTypes.video;if(t.playerSize){var r="number"==typeof t.playerSize[0]?2:1,i=gu(t.playerSize,r);i.length>0?(2===r&&ke("Transforming video.playerSize from [640,480] to [[640,480]] so it's in the proper format."),t.playerSize=i,n.sizes=i):(Re("Detected incorrect configuration of mediaTypes.video.playerSize.  Please specify only one set of dimensions in a format like: [[640, 480]]. Removing invalid mediaTypes.video.playerSize property from request."),delete n.mediaTypes.video.playerSize)}return n}function mu(e){var n=sn(e),t=n.mediaTypes.native;if(t.ortb){var r=Object.keys(E.FY).filter((function(e){return E.FY[e].includes("hb_native_")})),i=Object.keys(t).filter((function(e){return r.includes(e)}));i.length>0&&(Re("when using native OpenRTB format, you cannot use legacy native properties. Deleting ".concat(i," keys from request.")),i.forEach((function(e){return delete n.mediaTypes.native[e]})))}return t.image&&t.image.sizes&&!Array.isArray(t.image.sizes)&&(Re("Please use an array of sizes for native.image.sizes field.  Removing invalid mediaTypes.native.image.sizes property from request."),delete n.mediaTypes.native.image.sizes),t.image&&t.image.aspect_ratios&&!Array.isArray(t.image.aspect_ratios)&&(Re("Please use an array of sizes for native.image.aspect_ratios field.  Removing invalid mediaTypes.native.image.aspect_ratios property from request."),delete n.mediaTypes.native.image.aspect_ratios),t.icon&&t.icon.sizes&&!Array.isArray(t.icon.sizes)&&(Re("Please use an array of sizes for native.icon.sizes field.  Removing invalid mediaTypes.native.icon.sizes property from request."),delete n.mediaTypes.native.icon.sizes),n}function yu(e,n){var t=T(e,"mediaTypes.".concat(n,".pos"));if(!Me(t)||isNaN(t)||!isFinite(t)){var r="Value of property 'pos' on ad unit ".concat(e.code," should be of type: Number");je(r),Hn(E.FP.AUCTION_DEBUG,{type:"WARNING",arguments:r}),delete e.mediaTypes[n].pos}return e}function bu(e){var n=function(n){return"adUnit.code '".concat(e.code,"' ").concat(n)},t=e.mediaTypes,r=e.bids;return null==r||Ne(r)?null==r&&null==e.ortb2Imp?(Re(n("has no 'adUnit.bids' and no 'adUnit.ortb2Imp'. Removing adUnit from auction")),null):t&&0!==Object.keys(t).length?(null==e.ortb2Imp||null!=r&&0!==r.length||(e.bids=[{bidder:null}],Se(n("defines 'adUnit.ortb2Imp' with no 'adUnit.bids'; it will be seen only by S2S adapters"))),e):(Re(n("does not define a 'mediaTypes' object.  This is a required field for the auction, so this adUnit has been removed.")),null):(Re(n("defines 'adUnit.bids' that is not an array. Removing adUnit from auction")),null)}!function(){var e=null;try{e=window.sessionStorage}catch(e){}if(null!==e){var n=Da,t=null;try{t=e.getItem(ja)}catch(e){}null!==t&&n.enable()}}(),Za.bidderSettings=Za.bidderSettings||{},Za.libLoaded=!0,Za.version="v8.14.0",ke("Prebid.js v8.14.0 loaded"),Za.installedModules=Za.installedModules||[],Za.adUnits=Za.adUnits||[],Za.triggerUserSyncs=Xa;var wu={validateAdUnit:bu,validateBannerMediaType:vu,validateSizes:gu};Object.assign(wu,{validateNativeMediaType:mu}),Object.assign(wu,{validateVideoMediaType:hu});var _u,Iu=wt("sync",(function(e){var n=[];return e.forEach((function(e){if(null!=(e=bu(e))){var t,r,i,o=e.mediaTypes;o.banner&&(t=vu(e),o.banner.hasOwnProperty("pos")&&(t=yu(t,"banner"))),o.video&&(r=hu(t||e),o.video.hasOwnProperty("pos")&&(r=yu(r,"video"))),o.native&&(i=mu(r||t||e));var a=Object.assign({},t,r,i);n.push(a)}})),n}),"checkAdUnitSetup");function Cu(e){var n=No[e]().filter(me.call(cn,this,No.getAdUnitCodes())),t=No.getLastAuctionId();return n.map((function(e){return e.adUnitCode})).filter(Ze).map((function(e){return n.filter((function(n){return n.auctionId===t&&n.adUnitCode===e}))})).filter((function(e){return e&&e[0]&&e[0].adUnitCode})).map((function(e){return c({},e[0].adUnitCode,{bids:e})})).reduce((function(e,n){return Object.assign(e,n)}),{})}function Au(e,n,t){var r=n.querySelector(t);e.parentNode&&e.parentNode===r||$e(e,n,t)}Za.getAdserverTargetingForAdUnitCodeStr=function(e){if(ke("Invoking pbjs.getAdserverTargetingForAdUnitCodeStr",arguments),e)return function(e){return e&&Object.getOwnPropertyNames(e).length>0?(n=e,Object.keys(n)).map((function(n){return"".concat(n,"=").concat(encodeURIComponent(en(e,n)))})).join("&"):"";var n}(Za.getAdserverTargetingForAdUnitCode(e));Se("Need to call getAdserverTargetingForAdUnitCodeStr with adunitCode")},Za.getHighestUnusedBidResponseForAdUnitCode=function(e){if(e){var n=No.getAllBidsForAdUnitCode(e).filter(Ea);return n.length?n.reduce(rn):{}}Se("Need to call getHighestUnusedBidResponseForAdUnitCode with adunitCode")},Za.getAdserverTargetingForAdUnitCode=function(e){return Za.getAdserverTargeting(e)[e]},Za.getAdserverTargeting=function(e){return ke("Invoking pbjs.getAdserverTargeting",arguments),ka.getAllTargeting(e)},Za.getConsentMetadata=function(){return ke("Invoking pbjs.getConsentMetadata"),gi.getConsentMeta()},Za.getNoBids=function(){return ke("Invoking pbjs.getNoBids",arguments),Cu("getNoBids")},Za.getNoBidsForAdUnitCode=function(e){return{bids:No.getNoBids().filter((function(n){return n.adUnitCode===e}))}},Za.getBidResponses=function(){return ke("Invoking pbjs.getBidResponses",arguments),Cu("getBidsReceived")},Za.getBidResponsesForAdUnitCode=function(e){return{bids:No.getBidsReceived().filter((function(n){return n.adUnitCode===e}))}},Za.setTargetingForGPTAsync=function(e,n){if(ke("Invoking pbjs.setTargetingForGPTAsync",arguments),tn()){var t=ka.getAllTargeting(e);ka.resetPresetTargeting(e,n),ka.setTargetingForGPT(t,n),Object.keys(t).forEach((function(e){Object.keys(t[e]).forEach((function(n){"hb_adid"===n&&No.setStatusForBids(t[e][n],E.UE.CK)}))})),Hn(iu,t)}else Re("window.googletag is not defined on the page")},Za.setTargetingForAst=function(e){ke("Invoking pbjs.setTargetingForAn",arguments),ka.isApntagDefined()?(ka.setTargetingForAst(e),Hn(iu,ka.getAllTargeting())):Re("window.apntag is not defined on the page")},Za.renderAd=wt("async",(function(e,n,t){if(ke("Invoking pbjs.renderAd",arguments),Se("Calling renderAd with adId :"+n),n){try{var r=No.findBidByAdId(n);if(!r){var i="Error trying to write ad. Cannot find ad by given id : ".concat(n);return void la({reason:du,message:i,id:n})}if(r.status===E.UE.fe&&(je("Ad id ".concat(r.adId," has been rendered before")),Hn(ou,r),T(D.getConfig("auctionOptions"),"suppressStaleRender")))return;if(r.ad=dn(r.ad,r.originalCpm||r.cpm),r.adUrl=dn(r.adUrl,r.originalCpm||r.cpm),t&&t.clickThrough){var o=t.clickThrough;r.ad=fn(r.ad,o),r.adUrl=fn(r.adUrl,o)}No.addWinningBid(r),Hn(tu,r);var a=r.height,u=r.width,c=r.ad,s=r.mediaType,d=r.adUrl,f=r.renderer,l=r.adUnitCode,p=Za.adUnits.filter((function(e){return e.code===l})),g=Za.videoModule;if(p.video&&g)return void g.renderBid(p.video.divId,r);if(!e){var v="Error trying to write ad Id :".concat(n," to the page. Missing document");return void la({reason:fu,message:v,id:n})}var h=document.createComment("Creative ".concat(r.creativeId," served by ").concat(r.bidder," Prebid.js Header Bidding"));if($e(h,e,"html"),ut(f))ct(f,r,e),Au(h,e,"html"),pa({doc:e,bid:r,id:n});else if(e===document&&!function(){try{return ge.getWindowSelf()!==ge.getWindowTop()}catch(e){return!0}}()||"video"===s){var m="Error trying to write ad. Ad render call ad id ".concat(n," was prevented from writing to the main document.");la({reason:uu,message:m,bid:r,id:n})}else if(c)e.write(c),e.close(),pu(e,u,a),Au(h,e,"html"),Ye(r),pa({doc:e,bid:r,id:n});else if(d){var y=((_=document.createElement("iframe")).id=be(),_.height=0,_.width=0,_.border="0px",_.hspace="0",_.vspace="0",_.marginWidth="0",_.marginHeight="0",_.style.border="0",_.scrolling="no",_.frameBorder="0",_.src="about:blank",_.style.display="none",_);y.height=a,y.width=u,y.style.display="inline",y.style.overflow="hidden",y.src=d,$e(y,e,"body"),pu(e,u,a),Au(h,e,"html"),Ye(r),pa({doc:e,bid:r,id:n})}else{var b="Error trying to write ad. No ad for bid response id: ".concat(n);la({reason:cu,message:b,bid:r,id:n})}}catch(e){var w="Error trying to write ad Id :".concat(n," to the page:").concat(e.message);la({reason:su,message:w,id:n})}var _}else{var I="Error trying to write ad Id :".concat(n," to the page. Missing adId");la({reason:fu,message:I,id:n})}})),Za.removeAdUnit=function(e){ke("Invoking pbjs.removeAdUnit",arguments),e?(Ne(e)?e:[e]).forEach((function(e){for(var n=Za.adUnits.length-1;n>=0;n--)Za.adUnits[n].code===e&&Za.adUnits.splice(n,1)})):Za.adUnits=[]},Za.requestBids=(_u=wt("async",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.bidsBackHandler,t=e.timeout,r=e.adUnits,i=e.adUnitCodes,a=e.labels,u=e.auctionId,c=e.ttlBuffer,s=e.ortb2,d=e.metrics,f=e.defer;Hn(ru);var l=t||D.getConfig("bidderTimeout");ke("Invoking pbjs.requestBids",arguments),i&&i.length?r=r.filter((function(e){return g(i,e.code)})):i=r&&r.map((function(e){return e.code}));var p={global:En({},D.getAnyConfig("ortb2")||{},s||{}),bidder:Object.fromEntries(Object.entries(D.getBidderConfig()).map((function(e){var n=o(e,2);return[n[0],n[1].ortb2]})).filter((function(e){var n=o(e,2);return n[0],null!=n[1]})))};return $a(J.resolve(p.global)).then((function(e){return p.global=e,Tu({bidsBackHandler:n,timeout:l,adUnits:r,adUnitCodes:i,labels:a,auctionId:u,ttlBuffer:c,ortb2Fragments:p,metrics:d,defer:f})}))}),"requestBids"),function(e,n){return Object.defineProperties(n,Object.fromEntries(["before","after","getHooks","removeAll"].map((function(n){return[n,{get:function(){return e[n]}}]})))),n}(_u,(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.adUnits||Za.adUnits;return e.adUnits=Ne(n)?n.slice():[n],e.metrics=lr(),e.metrics.checkpoint("requestBids"),e.defer=Q({promiseFactory:function(e){return new Promise(e)}}),_u.call(this,e),e.defer.promise})));var Tu=wt("async",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.bidsBackHandler,t=e.timeout,r=e.adUnits,i=e.ttlBuffer,o=e.adUnitCodes,a=e.labels,u=e.auctionId,c=e.ortb2Fragments,s=e.metrics,d=e.defer,f=zi(D.getConfig("s2sConfig")||[]);function l(e,t,r){if("function"==typeof n)try{n(e,t,r)}catch(e){Re("Error executing bidsBackHandler",null,e)}d.resolve({bids:e,timedOut:t,auctionId:r})}if(function(e){e.forEach((function(e){var n,t,r;null!=(r=null==(n=e)||null===(t=n.mediaTypes)||void 0===t?void 0:t.video)&&null==r.plcmt&&(r.context===Zt||[2,3,4].includes(r.placement)?r.plcmt=4:r.context!==Zt&&[2,6].includes(r.playbackmethod)&&(r.plcmt=2))}))}(r),(r=dr(s).measureTime("requestBids.validate",(function(){return Iu(r)}))).forEach((function(e){var n,t=Object.keys(e.mediaTypes||{banner:"banner"}),r=e.bids.map((function(e){return e.bidder})),o=Vi.bidderRegistry,a=r.filter((function(e){return!f.has(e)})),u=(null===(n=e.ortb2Imp)||void 0===n||null===(n=n.ext)||void 0===n?void 0:n.tid)||we();e.transactionId=u,null==i||e.hasOwnProperty("ttlBuffer")||(e.ttlBuffer=i),kn(e,"ortb2Imp.ext.tid",u),a.forEach((function(n){var r=o[n],i=r&&r.getSpec&&r.getSpec(),a=i&&i.supportedMediaTypes||["banner"];t.some((function(e){return g(a,e)}))?Sr(e.code,n):(je(function(e,n){var t=Object.keys(e.mediaTypes||{banner:"banner"}).join(", ");return"\n    ".concat(e.code," is a ").concat(t," ad unit\n    containing bidders that don't support ").concat(t,": ").concat(n,".\n    This bidder won't fetch demand.\n  ")}(e,n)),e.bids=e.bids.filter((function(e){return e.bidder!==n})))})),Or(e.code)})),r&&0!==r.length){var p=No.createAuction({adUnits:r,adUnitCodes:o,callback:l,cbTimeout:t,labels:a,auctionId:u,ortb2Fragments:c,metrics:s}),v=r.length;v>15&&ke("Current auction ".concat(p.getAuctionId()," contains ").concat(v," adUnits."),r),o.forEach((function(e){return ka.setLatestAuctionForAdUnit(e,p.getAuctionId())})),p.callBids()}else Se("No adUnits configured. No bids requested."),l()}),"startAuction");Za.requestBids.before((function(e,n){function t(e){for(var n;n=e.shift();)n()}t(Ji),t(Eu),e.call(this,n)}),49),Za.addAdUnits=function(e){ke("Invoking pbjs.addAdUnits",arguments),Za.adUnits.push.apply(Za.adUnits,Ne(e)?e:[e]),Hn(nu)},Za.onEvent=function(e,n,t){ke("Invoking pbjs.onEvent",arguments),Pe(n)?!t||lu[e].call(null,t)?zn(e,n,t):Re('The id provided is not valid for event "'+e+'" and no handler was set.'):Re('The event handler provided is not a function and was not set on event "'+e+'".')},Za.offEvent=function(e,n,t){ke("Invoking pbjs.offEvent",arguments),t&&!lu[e].call(null,t)||Ln(e,n,t)},Za.getEvents=function(){return ke("Invoking pbjs.getEvents"),Wn()},Za.registerBidAdapter=function(e,n){ke("Invoking pbjs.registerBidAdapter",arguments);try{Vi.registerBidAdapter(e(),n)}catch(e){Re("Error registering bidder adapter : "+e.message)}},Za.registerAnalyticsAdapter=function(e){ke("Invoking pbjs.registerAnalyticsAdapter",arguments);try{Vi.registerAnalyticsAdapter(e)}catch(e){Re("Error registering analytics adapter : "+e.message)}},Za.createBid=function(e){return ke("Invoking pbjs.createBid",arguments),Qt(e)};var Eu=[],Ou=wt("async",(function(e){e&&!Le(e)?(ke("Invoking pbjs.enableAnalytics for: ",e),Vi.enableAnalytics(e)):Re("pbjs.enableAnalytics should be called with option {}")}),"enableAnalyticsCb");Za.enableAnalytics=function(e){Eu.push(Ou.bind(this,e))},Za.aliasBidder=function(e,n,t){ke("Invoking pbjs.aliasBidder",arguments),e&&n?Vi.aliasBidAdapter(e,n,t):Re("bidderCode and alias must be passed as arguments","pbjs.aliasBidder")},Za.aliasRegistry=Vi.aliasRegistry,D.getConfig("aliasRegistry",(function(e){"private"===e.aliasRegistry&&delete Za.aliasRegistry})),Za.getAllWinningBids=function(){return No.getAllWinningBids()},Za.getAllPrebidWinningBids=function(){return No.getBidsReceived().filter((function(e){return e.status===E.UE.CK}))},Za.getHighestCpmBids=function(e){return ka.getWinningBids(e)},Za.markWinningBidAsUsed=function(e){var n=Su(e,"Improper use of markWinningBidAsUsed. It needs an adUnitCode or an adId to function.");n.length>0&&No.addWinningBid(n[0])};var Su=function(e,n){var t=[];return e.adUnitCode&&e.adId?t=No.getBidsReceived().filter((function(n){return n.adId===e.adId&&n.adUnitCode===e.adUnitCode})):e.adUnitCode?t=ka.getWinningBids(e.adUnitCode):e.adId?t=No.getBidsReceived().filter((function(n){return n.adId===e.adId})):je(n),t};function ku(e){e.forEach((function(e){if(void 0===e.called)try{e.call(),e.called=!0}catch(e){Re("Error processing command :","prebid.js",e)}}))}Za.getConfig=D.getAnyConfig,Za.readConfig=D.readAnyConfig,Za.mergeConfig=D.mergeConfig,Za.mergeBidderConfig=D.mergeBidderConfig,Za.setConfig=D.setConfig,Za.setBidderConfig=D.setBidderConfig,Za.que.push((function(){window.addEventListener("message",ya,!1)})),Za.cmd.push=function(e){if("function"==typeof e)try{e.call()}catch(e){Re("Error processing command :",e.message,e.stack)}else Re("Commands written into pbjs.cmd.push must be wrapped in a function")},Za.que.push=Za.cmd.push,Za.processQueue=function(){wt.ready(),ku(Za.que),ku(Za.cmd)},Za.triggerBilling=function(e){var n=Su(e,"Improper use of triggerBilling. It requires a bid with at least an adUnitCode or an adId to function."),t=n.find((function(n){return n.requestId===e.requestId}))||n[0];if(n.length>0&&t)try{Vi.callBidBillableBidder(t)}catch(e){Re("Error when triggering billing :",e)}else je("The bid provided to triggerBilling did not match any bids received.")};const ju=Za;function Ru(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Bu="allowActivities",Uu="".concat(Bu," config");!function(e){var n=new Map,t=new Map,r=new Map;function i(e){return Object.fromEntries(Object.entries(e).filter((function(e){return!o(e,1)[0].startsWith("_")})))}D.getConfig(Bu,(function(a){r.clear(),Array.from(n.values()).flatMap((function(e){return Array.from(e.values())})).forEach((function(e){return e()})),n.clear(),Array.from(t.values()).forEach((function(e){return e()})),t.clear(),Object.entries(a[Bu]).forEach((function(a){var u=o(a,2),c=u[0],s=u[1];!1===s.default&&function(n){t.has(n)||t.set(n,e(n,Uu,(function(){return{allow:!1,reason:"activity denied by default"}}),Number.POSITIVE_INFINITY))}(c);var d=new Map;r.set(c,d),(s.rules||[]).forEach((function(e){var n=null==e.priority?1:e.priority;d.has(n)||d.set(n,[]),d.get(n).push(e)})),Array.from(d.keys()).forEach((function(t){return function(t,o){n.has(t)||n.set(t,new Map);var a=n.get(t);a.has(o)||a.set(o,e(t,Uu,(function(e){var n,a=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return Ru(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ru(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){u=!0,o=e},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}(r.get(t).get(o));try{for(a.s();!(n=a.n()).done;){var u=n.value;if(!u.condition||u.condition(i(e)))return{allow:u.allow,reason:u}}}catch(e){a.e(e)}finally{a.f()}}),o))}(c,t)}))}))}))}(Nt),l("allowActivities");var Du,xu,Pu=["request","imp","bidResponse","response"],qu=Pu[0],Nu=(Pu[1],Pu[2],Pu[3],"default"),Mu=new Set(Pu),Fu=(Du={},{registerOrtbProcessor:function(e){var n=e.type,t=e.name,r=e.fn,i=e.priority,o=void 0===i?0:i,a=e.dialects,u=void 0===a?[Nu]:a;if(!Mu.has(n))throw new Error("ORTB processor type must be one of: ".concat(Pu.join(", ")));u.forEach((function(e){Du.hasOwnProperty(e)||(Du[e]={}),Du[e].hasOwnProperty(n)||(Du[e][n]={}),Du[e][n][t]={priority:o,fn:r}}))},getProcessors:function(e){return Du[e]||{}}}),zu=Fu.registerOrtbProcessor,Lu=4,Wu=[],Hu={},Gu=!1,Vu=!0,$u="USD",Ku=!1,Ju={},Yu={},Qu=function(){var e;function n(){e=Q()}return n(),{done:function(){return e.resolve()},reset:n,promise:function(){return e.promise}}}();function Zu(e){xu?(je(e),je("Currency failed loading rates, falling back to currency.defaultRates")):Re(e)}D.getConfig("currency",(function(e){return function(e){var n="https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=$$TODAY$$";if("object"===a(e.rates)&&(Ju.conversions=e.rates,Gu=!0,Vu=!1),"object"===a(e.defaultRates)&&(xu=e.defaultRates,Ju.conversions=xu,Gu=!0),"string"==typeof e.adServerCurrency){ke("enabling currency support",arguments),$u=e.adServerCurrency,e.conversionRateFile&&(ke("currency using override conversionRateFile:",e.conversionRateFile),n=e.conversionRateFile);var t=n.indexOf("$$TODAY$$");if(-1!==t){var r=new Date,i="".concat(r.getMonth()+1),o="".concat(r.getDate());i.length<2&&(i="0".concat(i)),o.length<2&&(o="0".concat(o));var u="".concat(r.getFullYear()).concat(i).concat(o);n="".concat(n.substring(0,t)).concat(u).concat(n.substring(t+9,n.length))}!function(e){Hu={},Ku=!0,ke("Installing addBidResponse decorator for currency module",arguments),f().convertCurrency=function(e,n,t){return parseFloat(e)*nc(n,t)},Ct("addBidResponse").before(Xu,100),Vu?(Vu=!1,Zn(e,{success:function(e){try{Ju=JSON.parse(e),ke("currencyRates set to "+JSON.stringify(Ju)),Hu={},Gu=!0,ec(),Qu.done()}catch(n){Zu("Failed to parse currencyRates response: "+e)}},error:function(){Zu.apply(void 0,arguments),Qu.done()}})):Qu.done()}(n)}else ke("disabling currency support"),function(){ke("Uninstalling addBidResponse decorator for currency module",arguments),Ct("addBidResponse").getHooks({hook:Xu}).remove(),delete f().convertCurrency,$u="USD",Hu={},Ku=!1,Gu=!1,Vu=!0,Ju={},Yu={}}();"object"===a(e.bidderCurrencyDefault)&&(Yu=e.bidderCurrencyDefault)}(e.currency)}));var Xu=vr("currency",(function(e,n,t,r){if(!t)return e.call(this,n,t,r);var i=t.bidderCode||t.bidder;if(Yu[i]){var o=Yu[i];t.currency&&o!==t.currency?je("Currency default '".concat(i,": ").concat(o,"' ignored. adapter specified '").concat(t.currency,"'")):t.currency=o}if(t.currency||(je('Currency not specified on bid.  Defaulted to "USD"'),t.currency="USD"),t.getCpmInNewCurrency=function(e){return(parseFloat(this.cpm)*nc(this.currency,e)).toFixed(3)},t.currency===$u)return e.call(this,n,t,r);Wu.push(function(e,n,t){return function(){var r=t[1];if(void 0!==r&&"currency"in r&&"cpm"in r){var i=r.currency;try{var o=nc(i);1!==o&&(r.cpm=(parseFloat(r.cpm)*o).toFixed(4),r.currency=$u)}catch(e){return je("getCurrencyConversion threw error: ",e),void t[2](E.Gw.Xx)}}return e.apply(n,t)}}(e,this,[n,t,r])),!Ku||Gu?ec():e.untimed.bail(Qu.promise())}));function ec(){for(;Wu.length>0;)Wu.shift()()}function nc(e){var n,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:$u,r=null,i="".concat(e,"->").concat(t);if(i in Hu)Se("Using conversionCache value "+(r=Hu[i])+" for "+i);else if(!1===Ku){if("USD"!==e)throw new Error("Prebid currency support has not been enabled and fromCurrency is not USD");r=1}else if(e===t)r=1;else if(e in Ju.conversions){if(!(t in(n=Ju.conversions[e])))throw new Error("Specified adServerCurrency in config '"+t+"' not found in the currency rates file");ke("getCurrencyConversion using direct "+e+" to "+t+" conversionRate "+(r=n[t]))}else if(t in Ju.conversions){if(!(e in(n=Ju.conversions[t])))throw new Error("Specified fromCurrency '"+e+"' not found in the currency rates file");ke("getCurrencyConversion using reciprocal "+e+" to "+t+" conversionRate "+(r=tc(1/n[e],Lu)))}else{var o=Object.keys(Ju.conversions)[0];if(!(e in Ju.conversions[o]))throw new Error("Specified fromCurrency '"+e+"' not found in the currency rates file");var a=1/Ju.conversions[o][e];if(!(t in Ju.conversions[o]))throw new Error("Specified adServerCurrency in config '"+t+"' not found in the currency rates file");ke("getCurrencyConversion using intermediate "+e+" thru "+o+" to "+t+" conversionRate "+(r=tc(a*Ju.conversions[o][t],Lu)))}return i in Hu||(Se("Adding conversionCache value "+r+" for "+i),Hu[i]=r),r}function tc(e,n){for(var t=1,r=0;r<n;r++)t+="0";return Math.round(e*t)/t}zu({type:qu,name:"currency",fn:function(e,n,t){Ku&&(e.cur=e.cur||[t.currency||$u])}}),l("currency"),l("enrichmentFpdModule");var rc=new Map;function ic(e,n){var t=rc.get(n);if(t&&e){var r={};r.source=Pe(t.getSource)?t.getSource(e):t.source;var i=Pe(t.getValue)?t.getValue(e):e;if(qe(i)){var o={id:i,atype:t.atype};if(Pe(t.getUidExt)){var a=t.getUidExt(e);a&&(o.ext=a)}if(r.uids=[o],Pe(t.getEidExt)){var u=t.getEidExt(e);u&&(r.ext=u)}return r}}return null}function oc(e){var n=[],t=function(t){if(e.hasOwnProperty(t))if("pubProvidedId"===t)n=n.concat(e.pubProvidedId);else if(Array.isArray(e[t]))e[t].forEach((function(e,r,i){var o=ic(e,t);o&&n.push(o)}));else{var r=ic(e[t],t);r&&n.push(r)}};for(var r in e)t(r);return n}var ac,uc,cc,sc,dc,fc,lc=wt("sync",(function(){})),pc="User ID",gc=Ki,vc=$i,hc="_pbjs_id_optout",mc=Zi("userId"),yc={isAllowed:Mt},bc=!1,wc=[],_c=[],Ic={},Cc=[],Ac=function(){return null==fc&&(fc=lr()),fc};function Tc(e){return Ac().fork().renameWith((function(n){return["userId.mod.".concat(n),"userId.mods.".concat(e,".").concat(n)]}))}function Ec(e,n){n=n||e.storageMgr;var t="function"==typeof e.submodule.domainOverride?e.submodule.domainOverride():null,r=e.config.storage.name;return function(e,i,o){n.setCookie(r+(e||""),i,o,"Lax",t)}}function Oc(e,n){var t=e.config.storage,r=e.storageMgr;try{var i=new Date(Date.now()+864e5*t.expires).toUTCString(),o=Fe(n)?JSON.stringify(n):n;if(t.type===gc){var a=Ec(e);a(null,o,i),a("_cst",Gc(),i),"number"==typeof t.refreshInSeconds&&a("_last",(new Date).toUTCString(),i)}else t.type===vc&&(r.setDataInLocalStorage("".concat(t.name,"_exp"),i),r.setDataInLocalStorage("".concat(t.name,"_cst"),Gc()),r.setDataInLocalStorage(t.name,encodeURIComponent(o)),"number"==typeof t.refreshInSeconds&&r.setDataInLocalStorage("".concat(t.name,"_last"),(new Date).toUTCString()))}catch(e){Re(e)}}function Sc(e){var n,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,r=e.storageMgr,i=e.config.storage,o=t?"".concat(i.name,"_").concat(t):i.name;try{if(i.type===gc)n=r.getCookie(o);else if(i.type===vc){var a=r.getDataFromLocalStorage("".concat(i.name,"_exp"));""===a?n=r.getDataFromLocalStorage(o):a&&new Date(a).getTime()-Date.now()>0&&(n=decodeURIComponent(r.getDataFromLocalStorage(o)))}"string"==typeof n&&"{"===n.trim().charAt(0)&&(n=JSON.parse(n))}catch(e){Re(e)}return n}function kc(e,n,t){n=Ac().fork().startTiming("userId.callbacks.total").stopBefore(n);var r=vn((function(){clearTimeout(undefined),n()}),e.length);e.forEach((function(e){var n=Tc(e.submodule.name).startTiming("callback").stopBefore(r);try{e.callback((function(r){r?(e.config.storage&&Oc(e,r),e.idObj=e.submodule.decode(r,e.config),Vc(jc(t))):ke("".concat(pc,": ").concat(e.submodule.name," - request id responded with an empty value")),n()}),Sc.bind(null,e))}catch(t){Re("Error in userID module '".concat(e.submodule.name,"':"),t),n()}e.callback=void 0}))}function jc(e){return Array.isArray(e)&&e.length?Bc(e):{}}function Rc(e,n,t){return Object.fromEntries(Object.entries(e.reduce((function(e,r){var i=n(r);return i&&Object.keys(i).forEach((function(n){var o,a=null===(o=Ic[n])||void 0===o?void 0:o.indexOf(t(r)),u={priority:Me(a)?a:-1,value:i[n]};if(e[n]){var c=u.priority>e[n].priority?u:e[n];e[n]=c}else e[n]=u})),e}),{})).map((function(e){var n=o(e,2);return[n[0],n[1].value]})))}function Bc(e){return Rc(e.filter((function(e){return Fe(e.idObj)&&Object.keys(e.idObj).length})),(function(e){return e.idObj}),(function(e){return e.submodule.name}))}var Uc,Dc={};function xc(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Nc()||[],n=sc&&e.find((function(e){return e.source===sc}));if(n&&"string"==typeof T(n,"uids.0.id")){var t=n.uids[0].id.replace(/[\W_]/g,"");if(t.length>=32&&t.length<=150)return t;je("User ID - Googletag Publisher Provided ID for ".concat(sc," is not between 32 and 150 characters - ").concat(t))}}var Pc=gr("userId",(function(e,n){var t=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=r.delay,o=void 0===i?J.timeout:i,a=r.getIds,u=void 0===a?Hc:a;J.race([u().catch((function(){return null})),o(cc)]).then((function(){(function(e,n){[e].some((function(e){return!Array.isArray(e)||!e.length}))||e.forEach((function(e){e.bids&&Ne(e.bids)&&e.bids.forEach((function(e){var t=function(e,n){return Array.isArray(e)&&e.length&&n?Bc(e.filter((function(e){return!e.config.bidders||!Ne(e.config.bidders)||g(e.config.bidders,n)}))):{}}(n,e.bidder);Object.keys(t).length&&(e.userId=t,e.userIdAsEids=oc(t))}))}))})(n.adUnits||f().adUnits,ac),Ac().join(dr(n.metrics),{propagate:!1,includeGroups:!0}),e.call(t,n)}))}));function qc(){return jc(ac)}function Nc(){return oc(qc())}function Mc(e){return oc(function(e,n){if(!Array.isArray(e)||!e.length)return{};var t=Bc(e),r=Object.keys(t).find((function(e){var t=rc.get(e);return(null==t?void 0:t.source)===n||Pe(null==t?void 0:t.getSource)&&t.getSource()===n}));return r?c({},r,t[r]):[]}(ac,e))[0]}function Fc(e,n,t){return Uc().then((function(){var r={};if(Pe(t)){ke("".concat(pc," - Getting encrypted signal from custom function : ").concat(t.name," & source : ").concat(e," "));var i=t(e);r[e]=i?zc(i):null}else{var o=Mc(e);ke("".concat(pc," - Getting encrypted signal for eids :").concat(JSON.stringify(o))),Le(o)||(r[o.source]=!0===n?zc(o):o.uids[0].id)}return ke("".concat(pc," - Fetching encrypted eids: ").concat(r[e])),r[e]}))}function zc(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,t="";return 1===n&&(t="object"===a(e)?window.btoa(JSON.stringify(e)):window.btoa(e)),"".concat(n,"||").concat(t)}function Lc(){if(tn()){window.googletag.secureSignalProviders=window.googletag.secureSignalProviders||[];var e=D.getConfig("userSync.encryptedSignalSources");if(e){var n=e.registerDelay||0;setTimeout((function(){e.sources&&e.sources.forEach((function(e){var n=e.source,t=e.encrypt,r=e.customFunc;n.forEach((function(e){window.googletag.secureSignalProviders.push({id:e,collectorFunction:function(){return Fc(e,t,r)}})}))}))}),n)}else je("".concat(pc," - ESP : encryptedSignalSources config not defined under userSync Object"))}}function Wc(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).submoduleNames,n=arguments.length>1?arguments[1]:void 0;return Uc({refresh:!0,submoduleNames:e}).then((function(){return n&&Pe(n)&&n(),qc()}))}function Hc(){return Uc().then((function(){return qc()}),(function(e){return e===Dc?Promise.resolve().then(Hc):(Re("Error initializing userId",e),J.reject(e))}))}function Gc(){for(var e=Number(gi.hash),n=[];e>0;)n.push(String.fromCharCode(255&e)),e>>>=8;return btoa(n.join())}function Vc(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:qc();if(e&&sc){var n=xc(oc(e));n&&(tn()?window.googletag.pubads().setPublisherProvidedId(n):(window.googletag=window.googletag||{},window.googletag.cmd=window.googletag.cmd||[],window.googletag.cmd.push((function(){window.googletag.pubads().setPublisherProvidedId(n)}))))}}function $c(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return Ac().fork().measureTime("userId.init.modules",(function(){if(!n.length)return[];if(n=n.filter((function(e){return(!e.config.storage||function(e){var n;switch(null===(n=e.config)||void 0===n||null===(n=n.storage)||void 0===n?void 0:n.type){case vc:if(e.storageMgr.localStorageIsEnabled())return!mc.getDataFromLocalStorage(hc)||(ke("".concat(pc," - opt-out localStorage found, storage disabled")),!1);break;case gc:if(e.storageMgr.cookiesAreEnabled())return!mc.getCookie(hc)||(ke("".concat(pc," - opt-out cookie found, storage disabled")),!1)}return!1}(e))&&yc.isAllowed(Wt,hr(ht,e.config.name))})),!n.length)return je("".concat(pc," - no ID module configured")),[];var r=n.reduce((function(e,r){return Tc(r.submodule.name).measureTime("init",(function(){try{(function(e,n,t){var r=ci.getConsentData();if(e.config.storage){var i,o=Sc(e),a=!1;if("number"==typeof e.config.storage.refreshInSeconds){var u=new Date(Sc(e,"last"));a=u&&Date.now()-u.getTime()>1e3*e.config.storage.refreshInSeconds}!o||a||n||function(e){var n=Sc(e,"cst");return!n||n!==Gc()}(e)?i=e.submodule.getId(e.config,r,o):"function"==typeof e.submodule.extendId&&(i=e.submodule.extendId(e.config,r,o)),Fe(i)&&(i.id&&(Oc(e,i.id),o=i.id),"function"==typeof i.callback&&(e.callback=i.callback)),o&&(e.idObj=e.submodule.decode(o,e.config))}else if(e.config.value)e.idObj=e.config.value;else{var c=e.submodule.getId(e.config,r,void 0);Fe(c)&&("function"==typeof c.callback&&(e.callback=c.callback),c.id&&(e.idObj=e.submodule.decode(c.id,e.config)))}Vc(jc(t))})(r,t,n),e.push(r)}catch(e){Re("Error in userID module '".concat(r.submodule.name,"':"),e)}return e}))}),[]);return r.length&&function(e){var n=ve.setEidPermissions;"function"==typeof n&&Ne(e)&&n(function(e){var n=[];return e.filter((function(e){return Fe(e.idObj)&&Object.keys(e.idObj).length})).forEach((function(e){Object.keys(e.idObj).forEach((function(t){var r=rc.get(t)||{};T(e,"config.bidders")&&Array.isArray(e.config.bidders)&&r.source&&n.push({source:r.source,bidders:e.config.bidders})}))})),n}(e))}(r),r.forEach(Kc.bind(null,e)),r}))}function Kc(e,n){for(var t=!1,r=0;r<e.length;r++)if(n.config.name.toLowerCase()===e[r].config.name.toLowerCase()){t=!0,e[r]=n;break}t||e.push(n)}var Jc=new Set([vc,gc]);function Yc(){!function(e){rc.clear(),Object.entries(Rc(e,(function(e){return e.eids}),(function(e){return e.name}))).forEach((function(e){var n=o(e,2),t=n[0],r=n[1];return rc.set(t,r)}))}(Cc);var e=function(e,n){return Array.isArray(e)?e.reduce((function(e,n){return!n||We(n.name)||(n.storage&&!We(n.storage.type)&&!We(n.storage.name)&&Jc.has(n.storage.type)||Fe(n.value)?e.push(n):n.storage||n.value||e.push(n)),e}),[]):[]}(_c);if(e.length){var n=Cc.filter((function(e){return!v(wc,(function(n){return n.name===e.name}))}));wc.splice(0,wc.length),n.map((function(n){var t=v(e,(function(e){return e.name&&(e.name.toLowerCase()===n.name.toLowerCase()||n.aliasName&&e.name.toLowerCase()===n.aliasName.toLowerCase())}));return t&&n.name!==t.name&&(t.name=n.name),n.findRootDomain=Pa,t?{submodule:n,config:t,callback:void 0,idObj:void 0,storageMgr:Qi({moduleType:ht,moduleName:t.name})}:null})).filter((function(e){return null!==e})).forEach((function(e){return wc.push(e)})),!bc&&wc.length&&(f().requestBids.before(Pc,40),Vi.callDataDeletionRequest.before(Qc),lc.after((function(e){return e(xc())})),ke("".concat(pc," - usersync config updated for ").concat(wc.length," submodules: "),wc.map((function(e){return e.submodule.name}))),bc=!0)}}function Qc(e){for(var n=arguments.length,t=new Array(n>1?n-1:0),r=1;r<n;r++)t[r-1]=arguments[r];ke("UserID: received data deletion request; deleting all stored IDs..."),wc.forEach((function(e){if("function"==typeof e.submodule.onDataDeletionRequest)try{var n;(n=e.submodule).onDataDeletionRequest.apply(n,[e.config,e.idObj].concat(t))}catch(n){Re("Error calling onDataDeletionRequest for ID submodule ".concat(e.submodule.name),n)}!function(e){var n,t,r;switch(null===(n=e.config)||void 0===n||null===(n=n.storage)||void 0===n?void 0:n.type){case gc:var i=Ec(e,mc),o=new Date(Date.now()-864e5).toUTCString();t=function(e){return i(e,"",o)},r=["","_last","_cst"];break;case vc:t=function(n){return mc.removeDataFromLocalStorage(e.config.storage.name+n)},r=["","_last","_exp","_cst"]}t&&r.forEach((function(e){try{t(e)}catch(e){Re(e)}}))}(e)})),e.apply(this,t)}function Zc(e){return function(){return Promise.resolve(e.apply(this,arguments))}}!function(e){var n=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).delay,t=void 0===n?J.timeout:n;sc=void 0,wc=[],_c=[],bc=!1,ac=[],Uc=function(){var e,n,t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).delay,r=void 0===t?J.timeout:t,i=Q(),o=Q(),a=!1;function u(t){return n=Ac().fork(),null!=e&&e.reject(Dc),e=Q(),J.race([t,e.promise]).finally(n.startTiming("userId.total"))}var c=ac,s=wc;function d(e){return function(){if(c===ac&&s===wc)return e.apply(void 0,arguments)}}function f(){return gi.promise.finally(n.startTiming("userId.init.consent"))}var l=u(J.all([It,i.promise]).then(f).then(d((function(){$c(c,s)}))).then((function(){return o.promise.finally(n.startTiming("userId.callbacks.pending"))})).then(d((function(){var e=c.filter((function(e){return Pe(e.callback)}));if(e.length)return new J((function(n){return kc(e,n,c)}))}))));return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.refresh,t=void 0!==n&&n,p=e.submoduleNames,g=void 0===p?null:p,v=e.ready;return void 0!==v&&v&&!a&&(a=!0,i.resolve(),cc>0?o.resolve():zn(E.FP.AUCTION_END,(function e(){Ln(E.FP.AUCTION_END,e),r(uc).then(o.resolve)}))),t&&a&&(l=u(l.catch((function(){return null})).then(f).then(d((function(){var e=$c(c,s.filter((function(e){return null==g||g.includes(e.submodule.name)})),!0).filter((function(e){return null!=e.callback}));if(e.length)return new J((function(n){return kc(e,n,c)}))}))))),l}}({delay:t}),null!=dc&&dc(),Cc=[],dc=e.getConfig("userSync",(function(e){var n=e.userSync;n&&(sc=n.ppid,n.userIds&&(_c=n.userIds,uc=Me(n.syncDelay)?n.syncDelay:500,cc=Me(n.auctionDelay)?n.auctionDelay:0,Yc(),function(e,n){if(e){var t={},r=new Map(n.map((function(e){return e.submodule.aliasName?[e.submodule.aliasName,e.submodule.name]:[]})));Object.keys(e).forEach((function(n){var i=Ne(e[n])?p(e[n]).reverse():[];t[n]=i.map((function(e){return r.has(e)?r.get(e):e}))})),Ic=t}else Ic={}}(n.idPriority,wc),Uc({ready:!0})))})),f().getUserIds=qc,f().getUserIdsAsEids=Nc,f().getEncryptedEidsForSource=Zc(Fc),f().registerSignalSources=Lc,f().refreshUserIds=Zc(Wc),f().getUserIdsAsync=Zc(Hc),f().getUserIdsAsEidBySource=Mc}(D),Tt("userId",(function(e){v(Cc,(function(n){return n.name===e.name}))||(Cc.push(e),li.register(ht,e.name,e.gvlid),Yc(),Uc({refresh:!0,submoduleNames:[e.name]}))})),zu({type:qu,name:"userExtEids",fn:function(e,n,t){var r=T(t,"bidRequests.0.userIdAsEids");r&&Object.keys(r).length>0&&kn(e,"user.ext.eids",r)}}),l("userId");var Xc=Qi({moduleType:ht,moduleName:"sharedId"}),es="cookie",ns="html5",ts="_pubcid_optout",rs="PublisherCommonId";function is(e,n){if(n===es)return Xc.getCookie(e);if(n===ns&&Xc.hasLocalStorage()){var t=Xc.getDataFromLocalStorage("".concat(e,"_exp"));if(!t)return Xc.getDataFromLocalStorage(e);if(new Date(t).getTime()-Date.now()>0)return Xc.getDataFromLocalStorage(e)}}function os(e,n){return function(t,r){n?as(n,e,(function(){t(r()||e)}))():t(e)}}function as(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",t=arguments.length>2?arguments[2]:void 0;if(e){var r=Cn(e);r.search.id=encodeURIComponent("pubcid:"+n);var i=An(r);return function(){Je(i,t)}}}function us(){return!!(Xc.cookiesAreEnabled()&&is(ts,es)||Xc.hasLocalStorage()&&is(ts,ns))}var cs={name:"sharedId",aliasName:"pubCommonId",gvlid:Vr,decode:function(e,n){if(!us())return ke(" Decoded value PubCommonId "+e),{pubcid:e};ke("PubCommonId decode: Has opted-out")},getId:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>2?arguments[2]:void 0;if(us())ke("PubCommonId: Has opted-out");else{if(!fi.getCoppa()){var t=e.params,r=void 0===t?{}:t,i=r.create,o=void 0===i||i,u=r.pixelUrl,c=n;if(!c){try{"object"===a(window[rs])&&(c=window[rs].getId())}catch(e){}c||(c=o&&pn()?we():void 0)}return{id:c,callback:os(c,u)}}ke("PubCommonId: IDs not provided for coppa requests, exiting PubCommonId")}},extendId:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>2?arguments[2]:void 0;if(us())return ke("PubCommonId: Has opted-out"),{id:void 0};if(fi.getCoppa())ke("PubCommonId: IDs not provided for coppa requests, exiting PubCommonId");else{var t=e.params,r=void 0===t?{}:t,i=r.extend,o=void 0!==i&&i,a=r.pixelUrl;if(o)return a?{callback:as(a,n)}:{id:n}}},domainOverride:function(e,n){return function(){for(var n,t,r=document.domain.split("."),i="_gd".concat(Date.now(),"_").concat("sharedId"),o=0;o<r.length;o++){var a=r.slice(o).join(".");if(e.setCookie(i,"1",void 0,void 0,a),t=e.getCookie(i),e.setCookie(i,"","Thu, 01 Jan 1970 00:00:01 GMT",void 0,a),"1"!==t)return n;n=a}}}(Xc),eids:{pubcid:{source:"pubcid.org",atype:1}}};Et("userId",cs),l("sharedIdSystem");var ss="adriverId",ds=Qi({moduleType:ht,moduleName:ss}),fs={name:ss,decode:function(e){return{adrcid:e}},getId:function(e){return Fe(e.params)||(e.params={}),{callback:function(e){var n=ds.getDataFromLocalStorage("adrcid_cd")||ds.getCookie("adrcid_cd"),t=ds.getDataFromLocalStorage("adrcid")||ds.getCookie("adrcid");if(t&&n&&(new Date).getTime()-n<864e5)e(t);else{var r={success:function(n){var t;if(n){try{t=JSON.parse(n).adrcid}catch(e){Re(e)}var r=new Date;r.setTime(r.getTime()+15768e7),ds.setCookie("adrcid",t,r.toUTCString(),"Lax"),ds.setDataInLocalStorage("adrcid",t),ds.setCookie("adrcid_cd",(new Date).getTime(),r.toUTCString(),"Lax"),ds.setDataInLocalStorage("adrcid_cd",(new Date).getTime())}e(t)},error:function(n){Re("".concat(ss,": ID fetch encountered an error"),n),e()}},i="https://ad.adriver.ru/cgi-bin/json.cgi?sid=1&ad=719473&bt=55&pid=3198680&bid=7189165&bn=7189165&tuid=1&cfa=1&cid="+(ds.getDataFromLocalStorage("adrcid")||ds.getCookie("adrcid"));Zn(i,r,void 0,{method:"GET"})}}}}};Et("userId",fs),l("adriverIdSystem");var ls="pairId",ps="pairId",gs=Qi({moduleType:ht,moduleName:ls});function vs(e){return gs.localStorageIsEnabled()?gs.getDataFromLocalStorage(e):null}function hs(e){return gs.cookiesAreEnabled()?gs.getCookie(e):null}var ms={name:ls,gvlid:755,decode:function(e){return e&&Array.isArray(e)?{pairId:e}:void 0},getId:function(e){var n=vs(ps)||hs(ps),t=[];if(n&&"string"==typeof n)try{t=t.concat(JSON.parse(atob(n)))}catch(e){ke(e)}var r=e&&e.params||{};if(r&&r.liveramp){var i=r.liveramp.storageKey||"_lr_pairId",o=vs(i)||hs(i);try{var a=JSON.parse(atob(o));t=t.concat(a.envelope)}catch(e){ke(e)}}if(0!=t.length)return{id:t};ke("PairId not found.")},eids:{pairId:{source:"google.com",atype:571187}}};function ys(e){return Object.assign({wp:!0,run:function(e,n,t,r,i){var o=t&&t.hasOwnProperty(r),u=o?t[r]:void 0,c=o&&null!=u&&"object"===a(u)?sn(u):u;return function(){var t=null==n?e:T(e,n),a=t&&Ii(t[r]),s=a?t[r]:void 0;!o&&a&&i()?delete t[r]:o===a&&s===u&&Tn(s,c)||!i()||kn(e,(null==n?[]:[n]).concat(r).join("."),c)}}},e)}Et("userId",ms),l("pairIdSystem");var bs=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Mt;return function(e){var n={},t=[];e.forEach((function(e){e.wp&&t.push(e),e.get&&e.paths.forEach((function(t){var r=n;t.split(".").forEach((function(e){r.children=r.children||{},r.children[e]=r.children[e]||{},r=r.children[e]})),r.rule=e}))}));var r=wi(t);function i(e,n,t){return new Proxy(e,{get:function(e,r,o){var u=Reflect.get(e,r,o);if(n.hasOwnProperty(r)){var c=n[r],s=c.children,d=c.rule;if(s&&null!=u&&"object"===a(u))return i(u,s,t);if(d&&Ii(u)&&t(d))return d.get(u)}return u}})}return function(e){for(var t,o={},a=arguments.length,u=new Array(a>1?a-1:0),c=1;c<a;c++)u[c-1]=arguments[c];return{obj:i(e,n.children||{},_i.apply(void 0,[o].concat(u))),verify:(t=r.apply(void 0,[o,e].concat(u)),function(){t.forEach((function(e){return e()}))})}}}(Ai(e).concat(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Mt;return[{name:Wt,paths:mi,applies:Ci(Wt,e)},{name:Lt,paths:hi,applies:Ci(Lt,e)}].map(ys)}(e)))}(),ws=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:bs;return function(n,t){n.global=n.global||{},n.bidder=n.bidder||{};var r=new Set(Object.keys(n.bidder)),i=[];function a(n){var r=e(n,t);return i.push(r.verify),r.obj}var u={global:a(n.global),bidder:Object.fromEntries(Object.entries(n.bidder).map((function(e){var n=o(e,2);return[n[0],a(n[1])]})))};return{obj:u,verify:function(){Object.entries(u.bidder).filter((function(e){var n=o(e,1)[0];return!r.has(n)})).forEach((function(r){var i=o(r,2),a=i[0],u=i[1],c={},s=e(c,t);En(s.obj,u),s.verify(),n.bidder[a]=c})),i.forEach((function(e){return e()}))}}}}();function _s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Is(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?_s(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):_s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var Cs,As,Ts,Es=Ut((function(e){return Vi.resolveAlias(e)})),Os=[],Ss=[],ks=[],js=(Ts=!1,function(){var e;Ts||(Object.entries((e={},c(e,E.FP.AUCTION_INIT,["onAuctionInitEvent"]),c(e,E.FP.AUCTION_END,["onAuctionEndEvent",Ds]),c(e,E.FP.BID_RESPONSE,["onBidResponseEvent"]),c(e,E.FP.BID_REQUESTED,["onBidRequestEvent"]),e)).forEach((function(e){var n=o(e,2),t=n[0],r=o(n[1],2),i=r[0],a=r[1];zn(t,(function(e){a&&a(e),Ss.forEach((function(n){try{n[i]&&n[i](e,n.config,As)}catch(e){Re("RTD provider '".concat(n.name,"': error in '").concat(i,"':"),e)}}))}))})),Ts=!0)});function Rs(){return{gdpr:ci.getConsentData(),usp:si.getConsentData(),gpp:di.getConsentData(),coppa:!!D.getConfig("coppa")}}function Bs(){As=Rs();var e=[];ks.forEach((function(n){var t=v(Os,(function(e){return e.name===n.name}));t&&t.init&&t.init(n,As)&&e.push(Object.assign(t,{config:n}))})),ke("Real time data module enabled, using submodules: ".concat((Ss=e).map((function(e){return e.name})).join(", ")))}var Us=gr("rtd",(function(e,n){As=Rs();var t=[],r=[];Ss.forEach((function(e){if("function"==typeof e.getBidRequestData){t.push(e);var n=e.config;n&&n.waitForIt&&r.push(e)}}));var i,o=r.length&&Cs.auctionDelay&&Cs.auctionDelay>0,a=r.length,u=!1,c=[];if(!t.length)return d();function s(){u||(this.config&&this.config.waitForIt&&a--,0===a&&setTimeout(d,0))}function d(){u||(u=!0,clearTimeout(i),c.forEach((function(e){return e()})),e.call(this,n))}i=setTimeout(d,o?Cs.auctionDelay:0),t.forEach((function(e){var t=ws(n.ortb2Fragments||{},Es("rtd",e.name));c.push(t.verify),e.getBidRequestData(Is(Is({},n),{},{ortb2Fragments:t.obj}),s.bind(e),e.config,As)}))}));function Ds(e){var n,t=Ss.filter((function(e){return"function"==typeof e.getTargetingData}));if(t.length){var r=e.adUnitCodes;if(r){for(var i=[],o=t.length-1;o>=0;o--){var u=t[o].getTargetingData(r,t[o].config,As,e);u&&"object"===a(u)?i.push(u):je("invalid getTargetingData response for sub module",t[o].name)}var c=(n=i,Array.isArray(n)&&n.length?n.reduce((function(e,n){for(var t in n)if(n.hasOwnProperty(t))if(e.hasOwnProperty(t)){var r=n[t];for(var i in r)r.hasOwnProperty(i)&&(e[t][i]=r[i])}else e[t]=n[t];return e}),{}):{});return e.adUnits.forEach((function(e){var n=e.code&&c[e.code];n&&(ke("RTD set ad unit targeting of",n,"for",e),e[E.k2.xn]=Object.assign(e[E.k2.xn]||{},n))})),e.adUnits}}}function xs(e){Ss.forEach((function(e){if("function"==typeof e.onDataDeletionRequest)try{e.onDataDeletionRequest(e.config)}catch(n){Re("Error executing ".concat(e.name,".onDataDeletionRequest"),n)}}));for(var n=arguments.length,t=new Array(n>1?n-1:0),r=1;r<n;r++)t[r-1]=arguments[r];e.apply(this,t)}Tt("realTimeData",(function(e){return Os.push(e),li.register("rtd",e.name,e.gvlid),function(){var n=Os.indexOf(e);n>=0&&(Os.splice(n,1),Bs())}})),function(e){var n=e.getConfig("realTimeData",(function(e){var t=e.realTimeData;t.dataProviders?(n(),Cs=t,ks=t.dataProviders,js(),Ct("startAuction").before(Us,20),Vi.callDataDeletionRequest.before(xs),Bs()):Re("missing parameters for real time module")}))}(D),l("rtdModule");var Ps=!0;function qs(e){return e?{left:e.left,top:e.top,right:e.right,bottom:e.bottom,width:e.width,height:e.height,x:e.x,y:e.y}:e}var Ns,Ms={name:"intersection",getBidRequestData:function(e,n,t,r){var i={},o={},a=!1;if(!Ps)return v();var u,c=new IntersectionObserver((function(e){for(var n=e.pop();n;){var t=n.target.getAttribute("id");if(t){var r=i[t];(!r||r.time<n.time)&&(i[t]={boundingClientRect:qs(n.boundingClientRect),intersectionRect:qs(n.intersectionRect),rootRect:qs(n.rootRect),intersectionRatio:n.intersectionRatio,isIntersecting:n.isIntersecting,time:n.time},p.every((function(e){return!!i[e.code]}))&&v())}n=e.pop()}}),{threshold:.5}),s=e.adUnitCodes||[],d=D.getConfig("realTimeData.auctionDelay")||0,l=t.waitForIt,p=e.adUnits||f().adUnits||[];function v(){a||(u&&clearTimeout(u),a=!0,u=null,c&&c.disconnect(),p&&p.forEach((function(e){var n=i[e.code];n&&e.bids&&e.bids.forEach((function(e){return e.intersection=n}))})),n())}s.length&&(p=p.filter((function(e){return g(s,e.code)}))),function e(){p.filter((function(e){var n=e.code;if(o[n])return!0;var t=document.getElementById(n);return t?(o[n]=t,c.observe(t),!0):void 0})).length===p.length||!l||d<=0||(u=setTimeout(e))}(),d>0&&setTimeout(v,d)},init:function(e){return Pe(window.IntersectionObserver)?Ps=!0:(Re("IntersectionObserver is not defined"),Ps=!1),Ps}};Et("realTimeData",Ms),l("intersectionRtdProvider"),Et("realTimeData",{name:"customGeolocation",getBidRequestData:function(e,n,t,r){Ns=T(t,"params.geo"),console.log("GEOLOCATION ",Ns),console.log(T(t,"params")),Ns?(kn(e,"ortb2Fragments.global.device.geo",{lat:Ns.coords.latitude,lon:Ns.coords.longitude,lastfix:Math.round((ln()-Ns.timestamp)/1e3),type:1}),ke("geolocation was successfully received ",e.ortb2Fragments.global.device.geo)):je("no custom geolocation object provided"),n()},init:function(e){return Ns=void 0,!0}}),l("customGeolocationRtdProvider");var Fs="adriver",zs=Qi({bidderCode:Fs}),Ls={code:Fs,isBidRequestValid:function(e){return!!e.params.siteid},buildRequests:function(e,n){var t,r=Oe(),i=Math.round(999999999*Math.random())+"-"+Math.round(new Date/1e3)+"-1-46-",o=_e("siteid",e[0].params)+"",u=_e("currency",e[0].params);u="RUB";var c=null;n&&(c=n.timeout);var s={at:1,cur:[u],tmax:c,site:{name:r.origin,domain:r.hostname,id:o,page:r.href},id:i,user:{buyerid:0,ext:{eids:Ws(e)}},device:{ip:"195.209.111.14",ua:window.navigator.userAgent},imp:[]};He(e,(function(e){He(e.sizes,(function(n){var t,r,i,o=function(e,n,t){var r=e.mediaTypes&&e.mediaTypes.video?"video":"banner",i=0,o="",u=!1;if("number"==typeof t[0]&&"number"==typeof t[1]&&(u=!0),"function"==typeof e.getFloor){var c=e.getFloor({currency:"RUB",mediaType:r,size:u?t:"*"});"object"!==a(c)||isNaN(parseFloat(c.floor))||(i=c.floor),"object"===a(c)&&c.currency&&(o=c.currency)}return o||(o="RUB"),null==i&&(i=0),{floor:i,currency:o}}(e,0,n),c=o.floor,d=_e("dealid",e.params);"number"==typeof n[0]&&"number"==typeof n[1]&&(t=n[0],r=n[1]),i={id:e.params.placementId,ext:{query:"bn=15&custom=111="+e.bidId},banner:{w:t||void 0,h:r||void 0},bidfloor:c||0,bidfloorcur:o.currency,secure:0},d&&(i.pmp={private_auction:1,deals:[{id:d,bidfloor:c||0,bidfloorcur:u}]}),ke("par",i),s.imp.push(i)}))}));var d=zs.getDataFromLocalStorage("adrcid")||(null===(t=e[0].userId)||void 0===t?void 0:t.adrcid);return d&&(s.user.buyerid=d),{method:"POST",url:"https://pb.adriver.ru/cgi-bin/bid.cgi",data:JSON.stringify(s)}},interpretResponse:function(e,n){ke("serverResponse.body.seatbid",e.body.seatbid);var t=[],r=0;return He(e.body.seatbid,(function(n){ke("_each",n);var i=n.bid[0];if(void 0!==i.nurl&&(r=i.nurl.split("://"),r=(r=window.location.protocol+"//"+r[1]).replace(/\$\{AUCTION_PRICE\}/,i.price)),i.price>=0&&void 0!==i.impid&&0!==r&&void 0===i.dealid){var o={requestId:i.ext||void 0,cpm:i.price,width:i.w,height:i.h,creativeId:i.impid||void 0,currency:e.body.cur,netRevenue:!0,ttl:3e3,meta:{advertiserDomains:i.adomain},ad:'<IFRAME SRC="'+i.nurl+'" FRAMEBORDER="0" SCROLLING="no" MARGINHEIGHT="0" MARGINWIDTH="0" TOPMARGIN="0" LEFTMARGIN="0" ALLOWTRANSPARENCY="true" STYLE ="WIDTH:'+i.w+"px; HEIGHT:"+i.h+'px"></IFRAME>'};ke("bidResponse",o),t.push(o)}})),t}};function Ws(e){return e&&e.length>0&&e[0].userIdAsEids&&e[0].userIdAsEids.length>0?e[0].userIdAsEids:[]}function Hs(e){var n=e.bidId,t=e.params,r=t.placementId,i=t.position,o=t.response,a=t.bidfloor,u={placementId:r,id:n,position:i||0,response:o||0};return void 0!==a&&(u.bidfloor=a),u}function Gs(e){var n=D.getConfig("mytarget.sitename");if(!n){var t=document.createElement("a");t.href=decodeURIComponent(e),n=t.hostname}return n}br(Ls),l("adriverBidAdapter"),br({code:"mytarget",isBidRequestValid:function(e){return!!e.params.placementId},buildRequests:function(e,n){var t="";return n&&n.refererInfo&&(t=n.refererInfo.page),{method:"POST",url:"//ad.mail.ru/hbid_prebid/",data:{places:Ve(e,Hs),site:{sitename:Gs(t),page:t},settings:{currency:"RUB",windowSize:{width:window.screen.width,height:window.screen.height}}}}},interpretResponse:function(e,n){var t=e.body;return t.bids?Ve(t.bids,(function(e){var n={requestId:e.id,cpm:e.price,width:e.size.width,height:e.size.height,ttl:e.ttl||180,currency:e.currency||"RUB",creativeId:e.creativeId||Math.random().toString(16).substring(2),netRevenue:!0,meta:{advertiserDomains:e.adomain&&e.adomain.length>0?e.adomain:[]}};return e.adm?n.ad=e.adm:n.adUrl=e.displayUrl,n})):[]}}),l("mytargetBidAdapter");var Vs={banner:1,video:2,inImage:3};function $s(e){return Ve(e,(function(e){var n,t=e.params;return{bidId:e.bidId,transactionId:null===(n=e.ortb2Imp)||void 0===n||null===(n=n.ext)||void 0===n?void 0:n.tid,sizes:e.sizes,placement:Vs[t.placement],placeId:t.placeId,imageUrl:t.imageUrl||""}}))}var Ks=function(e){e.renderer.push((function(){window.ANOutstreamVideo.renderAd({sizes:[e.width,e.height],targetId:e.adUnitCode,rendererOptions:{showBigPlayButton:!1,showProgressBar:"bar",showVolume:!1,allowFullscreen:!0,skippable:!1,content:e.vastXml}})}))};function Js(e){return e.mediaTypes&&Object.keys(e.mediaTypes)[0]}br({code:"hybrid",supportedMediaTypes:[ro,to],placementTypes:Vs,isBidRequestValid:function(e){return!!e.params.placeId&&!!e.params.placement&&(Js(e)===ro&&"banner"===e.params.placement||Js(e)===ro&&"inImage"===e.params.placement&&!!e.params.imageUrl||Js(e)===to&&"video"===e.params.placement&&(t=!!(n=e.mediaTypes).video&&("instream"===n.video.context||"outstream"===n.video.context),r=!!T(n,"video.playerSize")&&Ne(T(n,"video.playerSize")),t&&r));var n,t,r},buildRequests:function(e,n){var t={url:n.refererInfo.page,cmp:!!n.gdprConsent,trafficType:1,bidRequests:$s(e)};if(t.cmp){var r=n.gdprConsent.gdprApplies;void 0!==r&&(t.ga=r),t.cs=n.gdprConsent.consentString}return{method:"POST",url:"https://hbe198.hybrid.ai/prebidhb",data:JSON.stringify(t),options:{contentType:"application/json"}}},interpretResponse:function(e,n){var t=JSON.parse(n.data).bidRequests,r=e.body;return r&&r.bids&&Ne(r.bids)?Ve(r.bids,(function(e){var n=v(t,(function(n){return n.bidId===e.bidId}));return e.placement=n.placement,e.placeId=n.placeId,function(e){var n={requestId:e.bidId,cpm:e.price,width:e.width,height:e.height,creativeId:e.bidId,currency:e.currency,netRevenue:!0,ttl:60,meta:{advertiserDomains:e.advertiserDomains||[]}};if(2===e.placement){n.vastXml=e.content,n.mediaType=to;var t=v(No.getAdUnits(),(function(n){return n.transactionId===e.transactionId}));t&&(n.width=t.mediaTypes.video.playerSize[0][0],n.height=t.mediaTypes.video.playerSize[0][1],"outstream"===t.mediaTypes.video.context&&(n.renderer=function(e){var n=at.install({targetId:e.adUnitCode,url:"https://acdn.adnxs.com/video/outstream/ANOutstreamVideo.js",loaded:!1});try{n.setRender(Ks)}catch(e){je("Prebid Error calling setRender on renderer",e)}return n}(n)))}else if(3===e.placement){n.mediaType=ro,n.inImageContent={content:{content:e.content,actionUrls:{}}};var r=n.inImageContent.content.actionUrls;if(r.loadUrls=e.inImage.loadtrackers||[],r.impressionUrls=e.inImage.imptrackers||[],r.scrollActUrls=e.inImage.startvisibilitytrackers||[],r.viewUrls=e.inImage.viewtrackers||[],r.stopAnimationUrls=e.inImage.stopanimationtrackers||[],r.closeBannerUrls=e.inImage.closebannertrackers||[],e.inImage.but){var i=n.inImageContent.content.inImageOptions={};i.hasButton=!0,i.buttonLogoUrl=e.inImage.but_logo,i.buttonProductUrl=e.inImage.but_prod,i.buttonHead=e.inImage.but_head,i.buttonHeadColor=e.inImage.but_head_colour,i.dynparams=e.inImage.dynparams||{}}n.ad=function(e,n){return'<!DOCTYPE html>\n    <html lang="en">\n    <head>\n        <meta charset="UTF-8">\n        <title></title>\n        <script src="https://st.hybrid.ai/prebidrenderer.js"><\/script>\n        <style>html, body {width: 100%; height: 100%; margin: 0;}</style>\n    </head>\n    <body>\n        <div data-hyb-ssp-in-image-overlay="'.concat(n.placeId,'" style="width: 100%; height: 100%;"></div>\n        <script>\n            if (parent.window.frames[window.name]) {\n                var parentDocument = window.parent.document.getElementById(parent.window.frames[window.name].name);\n                parentDocument.style.height = "100%";\n                parentDocument.style.width = "100%";\n            }\n            var _content = "').concat(encodeURIComponent(JSON.stringify(e.inImageContent)),'";\n            window._hyb_prebid_ssp.registerInImage(JSON.parse(decodeURIComponent(_content)));\n        <\/script>\n    </body>\n  </html>')}(n,e)}else n.ad=e.content,n.mediaType=ro;return n}(e)})):[]}}),l("hybridBidAdapter");var Ys=["inpage","preroll","midroll","postroll"];function Qs(){try{var e=top.document.referrer}catch(e){return!1}return void 0!==e&&e.length>0?encodeURIComponent(e):void 0!==e&&""==e?"direct":void 0}function Zs(){if(void 0!==navigator.plugins&&null!==navigator.plugins&&void 0!==navigator.plugins["Shockwave Flash"]&&null!==navigator.plugins["Shockwave Flash"]&&"object"===a(navigator.plugins["Shockwave Flash"])){var e=navigator.plugins["Shockwave Flash"].description;if(e&&(void 0===navigator.mimeTypes||!navigator.mimeTypes["application/x-shockwave-flash"]||navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin))return e=e.replace(/^.*\s+(\S+\s+\S+$)/,"$1").replace(/^(.*)\..*$/,"$1"),parseInt(e,10)}return 0}function Xs(e){var n={};e.vastUrl&&(n.url=e.vastUrl),e.vastXml&&(n.xml=e.vastXml),e.renderer.push((function(){var t=window.sapeRtbPlayerHandler(e.adUnitCode,e.width,e.height,e.playerMuted,{singleton:!0});n.onComplete=function(){return t.destroy()},n.onError=function(){return t.destroy()},t.addSlot(n)}))}br({code:"between",aliases:["btw"],supportedMediaTypes:["banner","video"],isBidRequestValid:function(e){return Boolean(e.params.s)},buildRequests:function(e,n){var t=[],r=n&&n.gdprConsent,i=null==n?void 0:n.refererInfo;return e.forEach((function(e){var n,o,a,u,c=e.mediaTypes&&e.mediaTypes.video,s={eids:(o=e,a=o.userIdAsEids,a&&0!==a.length?a:[]),sizes:Ce(Ie(e)),jst:"hb",ord:1e16*Math.random(),tz:(new Date).getTimezoneOffset(),fl:Zs(),rr:Qs(),s:e.params&&e.params.s,bidid:e.bidId,transactionid:null===(n=e.ortb2Imp)||void 0===n||null===(n=n.ext)||void 0===n?void 0:n.tid,auctionid:e.auctionId};if(c&&(s.mediaType=2,s.maxd=c.maxd,s.mind=c.mind,s.pos="atf",s.jst="pvc",s.codeType=g(Ys,c.codeType)?c.codeType:"inpage"),void 0!==e.params.itu&&(s.itu=e.params.itu),s.cur=e.params.cur||"USD",void 0!==e.params.subid&&(s.subid=e.params.subid),void 0!==e.params.click3rd&&(s.click3rd=e.params.click3rd),void 0!==e.params.pubdata)for(var d in e.params.pubdata)s["pubside_macro["+d+"]"]=encodeURIComponent(e.params.pubdata[d]);e.schain&&(s.schain=(u=JSON.stringify(e.schain),btoa(u).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,""))),i&&i.page&&(s.ref=i.page),r&&(void 0!==r.gdprApplies&&(s.gdprApplies=!!r.gdprApplies),void 0!==r.consentString&&(s.consentString=r.consentString)),t.push({data:s})})),{method:"POST",url:"https://ads.betweendigital.com/adjson?t=prebid",data:JSON.stringify(t)}},interpretResponse:function(e,n){for(var t=[],r=0;r<e.body.length;r++){var i={requestId:e.body[r].bidid,cpm:e.body[r].cpm||0,width:e.body[r].w,height:e.body[r].h,vastXml:e.body[r].vastXml,mediaType:e.body[r].mediaType,ttl:e.body[r].ttl,creativeId:e.body[r].creativeid,currency:e.body[r].currency||"USD",netRevenue:e.body[r].netRevenue||!0,ad:e.body[r].ad,meta:{advertiserDomains:e.body[r].adomain?e.body[r].adomain:[]}};t.push(i)}return t},getUserSyncs:function(e,n){var t=[];return t.push({type:"iframe",url:"https://ads.betweendigital.com/sspmatch-iframe"},{type:"image",url:"https://ads.betweendigital.com/sspmatch"}),t}}),l("betweenBidAdapter"),br({code:"rtbsape",aliases:["sape"],supportedMediaTypes:[ro,to],isBidRequestValid:function(e){return!!(e&&e.mediaTypes&&(e.mediaTypes.banner||e.mediaTypes.video)&&e.params&&e.params.placeId)},buildRequests:function(e,n){var t=(new Date).getTimezoneOffset(),r=function(e){return e<10?"0"+e:""+e};return{url:"https://ssp-rtb.sape.ru/prebid",method:"POST",data:{auctionId:n.auctionId,requestId:n.bidderRequestId,bids:e,timezone:(t>0?"-":"+")+r(Math.floor(Math.abs(t)/60))+":"+r(Math.abs(t)%60),refererInfo:n.refererInfo.legacy}}},interpretResponse:function(e,n){if(!e.body||!Array.isArray(e.body.bids))return[];var t={};return n.data.bids.forEach((function(e){return t[e.bidId]=e})),e.body.bids.filter((function(e){return void 0!==(e.meta||{}).advertiserDomains})).map((function(e){var n=t[e.requestId];if(T(n,"mediaTypes.video.context")===Zt&&(e.vastUrl||e.vastXml)){var r=at.install({id:e.requestId,url:"https://cdn-rtb.sape.ru/js/player.js",loaded:!1}),i=T(n,"params.video.playerMuted");void 0===i&&(i=!0),e.playerMuted=i,e.renderer=r,r.setRender(Xs)}return e}))},getUserSyncs:function(e){var n=[];return e.iframeEnabled&&n.push({type:"iframe",url:"https://www.acint.net/mc/?dp=141"}),n},onBidWon:function(e){e.nurl&&Je(e.nurl)}}),l("rtbsapeBidAdapter");var ed={code:"buzzoola",aliases:["buzzoolaAdapter"],supportedMediaTypes:[ro,to,no],isBidRequestValid:function(e){var n=e.mediaTypes;return!!(e&&e.mediaTypes&&(n.banner||n.video||n.native)&&e.params&&e.params.placementId)},buildRequests:function(e,n){return n.bids=function(e){if(!e||!Ne(e))return e;if(!e.some((function(e){var n;return null===(n=((null==e?void 0:e.mediaTypes)||{})[no])||void 0===n?void 0:n.ortb})))return e;var n,t=sn(e),r=Mo(t);try{for(r.s();!(n=r.n()).done;){var i=n.value;i.mediaTypes&&i.mediaTypes[no]&&i.mediaTypes[no].ortb&&(i.mediaTypes[no]=Object.assign(wn(i.mediaTypes[no],Jo),oa(i.mediaTypes[no].ortb)),i.nativeParams=na(i.mediaTypes[no]))}}catch(e){r.e(e)}finally{r.f()}return t}(n.bids),{url:"https://exchange.buzzoola.com/ssp/prebidjs",method:"POST",data:n}},interpretResponse:function(e,n){var t,r=e.body,i=n.data,o={};try{t=JSON.parse(r)}catch(e){t=r}return Array.isArray(t)||(t=[]),i.bids.forEach((function(e){return o[e.bidId]=e})),t.map((function(e){var n=T(o[e.requestId],"mediaTypes.video.context"),t=sn(e);if(t.mediaType===to&&n===Zt){var r=at.install({id:t.requestId,url:"https://tube.buzzoola.com/new/build/buzzlibrary.js",loaded:!1});r.setRender(nd),t.renderer=r}return t}))}};function nd(e){var n=JSON.parse(e.ad),t=T(n,"placement.unit_settings"),r={width:""+e.width,height:""+e.height,container_height:""+e.height};n.placement=Object.assign({},n.placement),n.placement.unit_settings=Object.assign({},t,r),e.renderer.push((function(){window.Buzzoola.Core.install(document.querySelector("#".concat(e.adUnitCode)),{data:n})}))}br(ed),l("buzzoolaBidAdapter");var td="https://ssp.otm-r.com/adjson",rd="RUB";br({code:"otm",url:td,supportedMediaTypes:[ro],isBidRequestValid:function(e){return Boolean(e.params.tid)},buildRequests:function(e,n){var t,r;ke("validBidRequests",e);var i=[],o=(new Date).getTimezoneOffset(),a=(null==n||null===(t=n.refererInfo)||void 0===t?void 0:t.page)||"",u=(null==n||null===(r=n.refererInfo)||void 0===r?void 0:r.domain)||"";return He(e,(function(e){var n,t=qe(e.params.domain)?e.params.domain:u,r=en(e.params,"currency")||rd,c=_e("bidId",e),s=(null===(n=e.ortb2Imp)||void 0===n||null===(n=n.ext)||void 0===n?void 0:n.tid)||"",d=_e("auctionId",e),f=function(e){if(!Pe(e.getFloor))return e.params.bidfloor?e.params.bidfloor:0;var n=e.getFloor({currency:rd,mediaType:"*",size:"*"});return Fe(n)&&!isNaN(n.floor)&&n.currency===rd?n.floor:0}(e);He(e.sizes,(function(n){var u=Ne(n)&&Me(n[0])&&Me(n[1]),l=u?n[0]:0,p=u?n[1]:0;i.push({method:"GET",url:td,data:{tz:o,w:l,h:p,domain:t,l:a,s:e.params.tid,cur:r,bidid:c,transactionid:s,auctionid:d,bidfloor:f}})}))})),i},interpretResponse:function(e){ke("serverResponse",e.body);var n=e?e.body:{},t=[];try{if(0===n.length)return[];He(n,(function(e){e.ad&&t.push({requestId:e.bidid,cpm:e.cpm,width:e.w,height:e.h,creativeId:e.creativeid,currency:e.currency||rd,netRevenue:!0,ad:e.ad,ttl:e.ttl,meta:{advertiserDomains:e.adDomain?[e.adDomain]:[]}})}))}catch(e){Re(e)}return t}}),l("otmBidAdapter"),document.body.appendChild(function(){const e=document.createElement("div");return e.innerHTML=n().join(["Hello","webpack"]," "),e}()),window.adUnits=[{code:"div-gpt-ad-300x250_fs",mediaTypes:{banner:{sizes:[[300,250]]}},bids:[{bidder:"adriver",params:{siteid:"381",placementId:"63:kinorole_prebid_FS_v2"}},{bidder:"mytarget",params:{placementId:"1400508"}},{bidder:"hybrid",params:{placement:"banner",placeId:"64f88094b7ea06156069e73a"}},{bidder:"rtbsape",params:{placeId:860344}},{bidder:"buzzoola",params:{placementId:"1253680"}},{bidder:"between",params:{s:"4713708"}},{bidder:"otm",params:{tid:"48886"}}]},{code:"div-gpt-ad-300x250_rec",mediaTypes:{banner:{sizes:[[300,250]]}},bids:[{bidder:"adriver",params:{siteid:"381",placementId:"63:kinorole_prebid_rec_v2"}},{bidder:"mytarget",params:{placementId:"1400506"}},{bidder:"hybrid",params:{placement:"banner",placeId:"64f8807ab7ea06156069e739"}},{bidder:"rtbsape",params:{placeId:860345}},{bidder:"buzzoola",params:{placementId:"1253682"}},{bidder:"between",params:{s:"4713712"}},{bidder:"otm",params:{tid:"48887"}}]},{code:"div-gpt-ad-300x250_stat",mediaTypes:{banner:{sizes:[[300,250]]}},bids:[{bidder:"adriver",params:{siteid:"381",placementId:"63:kinorole_prebid_stat_v2"}},{bidder:"mytarget",params:{placementId:"1400510"}},{bidder:"hybrid",params:{placement:"banner",placeId:"64f880bab7ea06156069e73b"}},{bidder:"rtbsape",params:{placeId:860346}},{bidder:"buzzoola",params:{placementId:"1253679"}},{bidder:"between",params:{s:"4713710"}},{bidder:"otm",params:{tid:"48885"}}]},{code:"div-gpt-ad-300x250",mediaTypes:{banner:{sizes:[[300,250]]}},bids:[{bidder:"adriver",params:{siteid:"381",placementId:"63:kinorole_prebid_v2"}},{bidder:"mytarget",params:{placementId:"1400512"}},{bidder:"hybrid",params:{placement:"banner",placeId:"64f8801bb1ee915f243e34f1"}},{bidder:"rtbsape",params:{placeId:860343}},{bidder:"buzzoola",params:{placementId:"1253683"}},{bidder:"between",params:{s:"4713711"}},{bidder:"otm",params:{tid:"48884"}}]}],window.pbConfig={currency:{adServerCurrency:"RUB",granularityMultiplier:1,defaultRates:{USD:{RUB:98.308839595044},EUR:{RUB:105.29277544434}}},firstPartyData:{uaHints:["architecture","model","platform","platformVersion","fullVersionList"]},userSync:{userIds:[{name:"sharedId",storage:{type:"cookie",name:"_sharedid",expires:180}},{name:"adriverId"},{name:"pairId"}]},realTimeData:{auctionDelay:100,dataProviders:[{name:"customGeolocation",waitForIt:!0,params:{geo:{coords:{accuracy:1438.6037966300735,altitude:null,altitudeAccuracy:null,heading:null,latitude:47.235072,longitude:39.796736,speed:null},timestamp:1695021033029}}},{name:"intersection",waitForIt:!0}]},enableTIDs:!0,deviceAccess:!0,allowActivities:{syncUser:{default:!0,rules:[{allow:!0}]},accessDevice:{default:!0,rules:[{allow:!0}]}}};class id{adUnitId=null;parentContainer=null;bannerContainer=null;debug=1;timeout=2e3;adUnit=null;requestBidsObj=null;preferredCurrency="RUB";unsoldRefreshTimeout=1e3;maxFailedRequests=2;failedRequestsCount=0;pbConfig={currency:{adServerCurrency:"RUB",granularityMultiplier:1,defaultRates:{USD:{RUB:98.308839595044},EUR:{RUB:105.29277544434}}},firstPartyData:{uaHints:["architecture","model","platform","platformVersion","fullVersionList"]},userSync:{userIds:[{name:"sharedId",storage:{type:"cookie",name:"_sharedid",expires:180}},{name:"adriverId"},{name:"pairId"}]},realTimeData:{auctionDelay:100,dataProviders:[{name:"geolocation",waitForIt:!0,params:{requestPermission:!0}},{name:"intersection",waitForIt:!0}]},enableTIDs:!0,deviceAccess:!0,allowActivities:{syncUser:{default:!0,rules:[{allow:!0}]},accessDevice:{default:!0,rules:[{allow:!0}]}}};constructor(e,n){return e.id?(this.adUnitId=e.id,e.config?(this.adUnit=e.config,e&&e.pbConfig&&(this.pbConfig=e.pbConfig),e&&e.timeout&&(this.timeout=e.timeout),"true"==new URLSearchParams(window.location.search).get("pbjs_debug")&&(this.debug=1),this.requestBidsObj={timeout:this.timeout,bidsBackHandler:this.responseHandler.bind(this)},window.pbjs=window.pbjs||{},window.pbjs.que=window.pbjs.que||[],window.pbjs.que.push((()=>{window.pbjs.setConfig(this.pbConfig)})),void this.setEvents(n)):(this.l(this.adUnitId+" No Ad unit Prebid config found"),!1)):(this.l("No Ad unit ID set for Prebid driver"),!1)}setEvents=e=>{const n={onClose:()=>{},onStop:()=>{this.clearContainer()},onError:()=>{}};this.events={...n,...e}};show(e){if(e&&(this.parentContainer=e),!this.parentContainer)return console.log(this.adUnitId+" Container is not available for this banner, can't show"),!1;this.bannerContainer=document.createElement("div"),this.bannerContainer.id=this.adUnitId,this.parentContainer.append(this.bannerContainer),this.requestBids()}hide(){this.clearContainer()}clearContainer(){this.bannerContainer&&(this.bannerContainer.innerHTML="")}refresh(){this.requestBids()}requestBids(){this.l(this.adUnitId+" Requesting bids"),ju.processQueue(),window.pbjs.que.push((()=>{window.pbjs.addAdUnits([this.adUnit]),window.pbjs.requestBids(this.requestBidsObj),window.pbjs.removeAdUnit(this.adUnit.code)}))}addCode(e,n="beforeend"){this.l(this.adUnitId+" adding code");let t=document.createElement("iframe");if(t.frameBorder="0",t.scrolling="no",t.style="width:"+e.width+"px;height:"+e.height+"px;overflow:hidden",this.clearContainer(),e.ad){this.bannerContainer.appendChild(t);let r=t.contentWindow.document;r.body.style="margin: 0;",r.body.insertAdjacentHTML(n,e.ad);let i=r.body.querySelectorAll("script");i.length&&i.forEach((e=>{this.createScript(e)}))}else e.adUrl&&(t.src=e.adUrl,this.bannerContainer.appendChild(t))}copyAttributes(e,n){return Array.from(e.attributes).forEach((e=>{n.setAttribute(e.nodeName,e.nodeValue)}))}createScript(e){let n=document.createElement("script");this.copyAttributes(e,n),e.before(n),n.innerHTML=e.innerHTML,e.remove()}responseHandler(e){this.l(this.adUnitId+" Responses recieved:",e);let n=Object.keys(e);n.length?(this.failedRequestsCount=0,n.forEach((n=>{const t=e[n].bids.reduce(((e,n)=>e.cpm>n.cpm?e:n));if(this.l(this.adUnitId+" Winning bid:",t),!this.bannerContainer)return this.l(this.adUnitId+" No container with Ad unit ID in DOM"),!1;this.addCode(t)}))):(this.failedRequestsCount++,this.l(this.adUnitId+" No bids recieved"),this.l(this.adUnitId+" failedRequestsCount ",this.failedRequestsCount),this.l(this.adUnitId+" this.failedRequestsCount >= this.maxFailedRequests = ",this.failedRequestsCount>=this.maxFailedRequests),this.failedRequestsCount>=this.maxFailedRequests?(this.failedRequestsCount=0,this.l(this.adUnitId+" Already tried refresh. Failed again. Quit")):(this.l(this.adUnitId+" Will retry in "+this.unsoldRefreshTimeout/1e3+"sec"),setTimeout((()=>{this.l(this.adUnitId+" Refreshing now!"),this.refresh()}),this.unsoldRefreshTimeout)))}l(...e){this.debug&&console.log(...e)}}document.addEventListener("DOMContentLoaded",(function(){window.adUnits.forEach(((e,n)=>{let t=new id({id:e.code,config:e,pbConfig:window.pbConfig}),r=document.getElementById("banner-container-"+n);console.log("parentContainer: ",r),t.show(r);const i=[20],o=Math.floor(Math.random()*i.length);console.log(o,i[o]),setInterval((()=>{console.log("Interval fired"),t.refresh()}),1e3*i[o])}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNLEVBQVEsS0FDdEIsRUFBUSxLQUFNLEVBQVEsS0FDdEIsRUFBUSxLQUVSLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFDMUIsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3ZFLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3ZFLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFB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QU16QyxLQUFLeUQsU0FBV3FyRyxFQUFVOWpILFFBQ3BEZ0QsUUFBUXUxQyxJQUFJOS9CLEVBQVFxckcsRUFBVXJyRyxJQUM5QnNyRyxhQUFZLEtBQ1IvZ0gsUUFBUXUxQyxJQUFJLGtCQUNaa0MsRUFBT3VLLFNBQVMsR0FDRyxJQUFwQjgrRCxFQUFVcnJHLEdBQWUsR0FFcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvZnVuLWhvb2tzL25vLWV2YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL2p1c3QtY2xvbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3ByZWJpZF93cC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9wcmViaWRfd3Avd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3ByZWJpZF93cC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3ByZWJpZF93cC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3ByZWJpZF93cC93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Qcm9wZXJ0eUtleS5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9QcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL3ByZWJpZEdsb2JhbC5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL3BvbHlmaWxsLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL2NwbUJ1Y2tldE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL2Rsdi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9jb25maWcuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc1ByaXZhdGVGaWVsZEdldC5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NBcHBseURlc2NyaXB0b3JHZXQuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzUHJpdmF0ZUZpZWxkU2V0LmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0FwcGx5RGVzY3JpcHRvclNldC5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy91dGlscy9wcm9taXNlLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9kc2V0L2Rpc3QvaW5kZXgubWpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL3V0aWxzL3R0bENvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvZXZlbnRzLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL2FqYXguanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvdmlkZW9DYWNoZS5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9hZGxvYWRlci5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9SZW5kZXJlci5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9iaWRkZXJTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9hY3Rpdml0aWVzL21vZHVsZXMuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvaG9vay5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9hY3Rpdml0aWVzL3BhcmFtcy5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9hY3Rpdml0aWVzL3J1bGVzLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL2FjdGl2aXRpZXMvYWN0aXZpdGllcy5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9hZGFwdGVyLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL2JpZGZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvdmlkZW8uanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvdXRpbHMvcGVyZk1ldHJpY3MuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvYWN0aXZpdGllcy9hY3Rpdml0eVBhcmFtcy5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9hZGFwdGVycy9iaWRkZXJGYWN0b3J5LmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL25hdGl2ZS5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9hZFVuaXRzLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL3JlZmVyZXJEZXRlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9jb25zZW50SGFuZGxlci5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9hY3Rpdml0aWVzL3JlZGFjdG9yLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL2FkYXB0ZXJNYW5hZ2VyLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL3N0b3JhZ2VNYW5hZ2VyLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL3VzZXJTeW5jLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL21lZGlhVHlwZXMuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvYXVjdGlvbi5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy91dGlscy9jcG0uanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvYXVjdGlvbkluZGV4LmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL2JpZFRUTC5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9hdWN0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9hZFJlbmRlcmluZy5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9zZWN1cmVDcmVhdGl2ZXMuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvdGFyZ2V0aW5nLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL2RlYnVnZ2luZy5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9mcGQvcm9vdERvbWFpbi5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9mcGQvc3VhLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvc3JjL2ZwZC9vbmVDbGllbnQuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvZnBkL2VucmljaG1lbnQuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvcHJlYmlkLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvbW9kdWxlcy9hbGxvd0FjdGl2aXRpZXMuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9zcmMvcGJqc09SVEIuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9tb2R1bGVzL2N1cnJlbmN5LmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvbW9kdWxlcy9lbnJpY2htZW50RnBkTW9kdWxlLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvbW9kdWxlcy91c2VySWQvZWlkcy5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL3NyYy9hZHNlcnZlci5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL21vZHVsZXMvdXNlcklkL2luZGV4LmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvbW9kdWxlcy9zaGFyZWRJZFN5c3RlbS5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL2xpYnJhcmllcy9kb21haW5PdmVycmlkZVRvUm9vdERvbWFpbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL21vZHVsZXMvYWRyaXZlcklkU3lzdGVtLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvbW9kdWxlcy9wYWlySWRTeXN0ZW0uanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9saWJyYXJpZXMvb2JqZWN0R3VhcmQvb2JqZWN0R3VhcmQuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9saWJyYXJpZXMvb2JqZWN0R3VhcmQvb3J0Ykd1YXJkLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvbW9kdWxlcy9ydGRNb2R1bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9tb2R1bGVzL2ludGVyc2VjdGlvblJ0ZFByb3ZpZGVyLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvbW9kdWxlcy9jdXN0b21HZW9sb2NhdGlvblJ0ZFByb3ZpZGVyLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvbW9kdWxlcy9hZHJpdmVyQmlkQWRhcHRlci5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL21vZHVsZXMvbXl0YXJnZXRCaWRBZGFwdGVyLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvbW9kdWxlcy9oeWJyaWRCaWRBZGFwdGVyLmpzIiwid2VicGFjazovL3ByZWJpZF93cC8uL25vZGVfbW9kdWxlcy9wcmViaWQuanMvbW9kdWxlcy9iZXR3ZWVuQmlkQWRhcHRlci5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL21vZHVsZXMvcnRic2FwZUJpZEFkYXB0ZXIuanMiLCJ3ZWJwYWNrOi8vcHJlYmlkX3dwLy4vbm9kZV9tb2R1bGVzL3ByZWJpZC5qcy9tb2R1bGVzL2J1enpvb2xhQmlkQWRhcHRlci5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9ub2RlX21vZHVsZXMvcHJlYmlkLmpzL21vZHVsZXMvb3RtQmlkQWRhcHRlci5qcyIsIndlYnBhY2s6Ly9wcmViaWRfd3AvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiogQGxpY2Vuc2UgTUlUXG4qIEZ1biBIb29rcyB2MC45LjEwXG4qIChjKSBAc25hcHdpY2hcbiovXG5jcmVhdGUuU1lOQyA9IDE7XG5jcmVhdGUuQVNZTkMgPSAyO1xuY3JlYXRlLlFVRVVFID0gNDtcblxudmFyIHBhY2thZ2VOYW1lID0gXCJmdW4taG9va3NcIjtcblxuZnVuY3Rpb24gaGFzUHJveHkoKSB7XG4gIHJldHVybiAhISh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIiAmJiBQcm94eS5yZXZvY2FibGUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSBPYmplY3QuZnJlZXplKHtcbiAgdXNlUHJveHk6IHRydWUsXG4gIHJlYWR5OiAwXG59KTtcblxudmFyIGhvb2thYmxlTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuLy8gZGV0ZWN0IGluY29ycmVjdGx5IGltcGxlbWVudGVkIHJlZHVjZSBhbmQgaWYgZm91bmQgdXNlIHBvbHlmaWxsXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcHJlYmlkL1ByZWJpZC5qcy9pc3N1ZXMvMzU3NlxuLy8gcG9seWZpbGwgZnJvbTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvUmVkdWNlXG52YXIgcmVkdWNlID1cbiAgWzFdXG4gICAgLnJlZHVjZShmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gW2EsIGIsIGNdO1xuICAgIH0sIDIpXG4gICAgLnRvU3RyaW5nKCkgPT09IFwiMiwxLDBcIlxuICAgID8gQXJyYXkucHJvdG90eXBlLnJlZHVjZVxuICAgIDogZnVuY3Rpb24oY2FsbGJhY2ssIGluaXRpYWwpIHtcbiAgICAgICAgdmFyIG8gPSBPYmplY3QodGhpcyk7XG4gICAgICAgIHZhciBsZW4gPSBvLmxlbmd0aCA+Pj4gMDtcbiAgICAgICAgdmFyIGsgPSAwO1xuICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgIGlmIChpbml0aWFsKSB7XG4gICAgICAgICAgdmFsdWUgPSBpbml0aWFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdoaWxlIChrIDwgbGVuICYmICEoayBpbiBvKSkge1xuICAgICAgICAgICAgaysrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YWx1ZSA9IG9baysrXTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoayA8IGxlbikge1xuICAgICAgICAgIGlmIChrIGluIG8pIHtcbiAgICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2sodmFsdWUsIG9ba10sIGssIG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcblxuZnVuY3Rpb24gcmVzdChhcmdzLCBza2lwKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCBza2lwKTtcbn1cblxudmFyIGFzc2lnbiA9XG4gIE9iamVjdC5hc3NpZ24gfHxcbiAgZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgIHJldHVybiByZWR1Y2UuY2FsbChcbiAgICAgIHJlc3QoYXJndW1lbnRzLCAxKSxcbiAgICAgIGZ1bmN0aW9uKHRhcmdldCwgb2JqKSB7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gb2JqW3Byb3BdO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9LFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuZnVuY3Rpb24gcnVuQWxsKHF1ZXVlKSB7XG4gIHZhciBxdWV1ZWQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxuICB3aGlsZSAoKHF1ZXVlZCA9IHF1ZXVlLnNoaWZ0KCkpKSB7XG4gICAgcXVldWVkKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlKGNvbmZpZykge1xuICB2YXIgaG9va3MgPSB7fTtcbiAgdmFyIHBvc3RSZWFkeSA9IFtdO1xuXG4gIGNvbmZpZyA9IGFzc2lnbih7fSwgZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYXJnMSwgYXJnMikge1xuICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gaG9va0ZuLmNhbGwobnVsbCwgXCJzeW5jXCIsIGFyZzEsIGFyZzIpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGFyZzIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIGhvb2tGbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHJldHVybiBob29rT2JqLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlYWR5O1xuICBpZiAoY29uZmlnLnJlYWR5KSB7XG4gICAgZGlzcGF0Y2gucmVhZHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICAgIHJ1bkFsbChwb3N0UmVhZHkpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmVhZHkgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gaG9va09iaihvYmosIHByb3BzLCBvYmpOYW1lKSB7XG4gICAgdmFyIHdhbGsgPSB0cnVlO1xuICAgIGlmICh0eXBlb2YgcHJvcHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKTtcbiAgICAgIHdhbGsgPSBmYWxzZTtcbiAgICB9XG4gICAgdmFyIG9iakhvb2tzID0ge307XG4gICAgdmFyIGRvTm90SG9vayA9IFtcImNvbnN0cnVjdG9yXCJdO1xuICAgIGRvIHtcbiAgICAgIHByb3BzID0gcHJvcHMuZmlsdGVyKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICB0eXBlb2Ygb2JqW3Byb3BdID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgICAhKGRvTm90SG9vay5pbmRleE9mKHByb3ApICE9PSAtMSkgJiZcbiAgICAgICAgICAhcHJvcC5tYXRjaCgvXl8vKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgICBwcm9wcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgdmFyIHBhcnRzID0gcHJvcC5zcGxpdChcIjpcIik7XG4gICAgICAgIHZhciBuYW1lID0gcGFydHNbMF07XG4gICAgICAgIHZhciB0eXBlID0gcGFydHNbMV0gfHwgXCJzeW5jXCI7XG4gICAgICAgIGlmICghb2JqSG9va3NbbmFtZV0pIHtcbiAgICAgICAgICB2YXIgZm4gPSBvYmpbbmFtZV07XG4gICAgICAgICAgb2JqSG9va3NbbmFtZV0gPSBvYmpbbmFtZV0gPSBob29rRm4oXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgZm4sXG4gICAgICAgICAgICBvYmpOYW1lID8gW29iak5hbWUsIG5hbWVdIDogdW5kZWZpbmVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvYmogPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKTtcbiAgICB9IHdoaWxlICh3YWxrICYmIG9iaik7XG4gICAgcmV0dXJuIG9iakhvb2tzO1xuICB9XG5cbiAgLyoqXG4gICAqIE5hdmlnYXRlcyBhIHN0cmluZyBwYXRoIHRvIHJldHVybiBhIGhvb2thYmxlIGZ1bmN0aW9uLiAgSWYgbm90IGZvdW5kLCBjcmVhdGVzIGEgcGxhY2Vob2xkZXIgZm9yIGhvb2tzLlxuICAgKiBAcGFyYW0geyhBcnJheTxzdHJpbmc+IHwgc3RyaW5nKX0gcGF0aFxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0KHBhdGgpIHtcbiAgICB2YXIgcGFydHMgPSBBcnJheS5pc0FycmF5KHBhdGgpID8gcGF0aCA6IHBhdGguc3BsaXQoXCIuXCIpO1xuICAgIHJldHVybiByZWR1Y2UuY2FsbChcbiAgICAgIHBhcnRzLFxuICAgICAgZnVuY3Rpb24obWVtbywgcGFydCwgaSkge1xuICAgICAgICB2YXIgaXRlbSA9IG1lbW9bcGFydF07XG4gICAgICAgIHZhciBpbnN0YWxsZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfSBlbHNlIGlmIChpID09PSBwYXJ0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgaWYgKCFyZWFkeSkge1xuICAgICAgICAgICAgcG9zdFJlYWR5LnB1c2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmICghaW5zdGFsbGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICBwYWNrYWdlTmFtZSArXG4gICAgICAgICAgICAgICAgICAgIFwiOiByZWZlcmVuY2VkICdcIiArXG4gICAgICAgICAgICAgICAgICAgIHBhdGggK1xuICAgICAgICAgICAgICAgICAgICBcIicgYnV0IGl0IHdhcyBuZXZlciBjcmVhdGVkXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIChtZW1vW3BhcnRdID0gbmV3SG9va2FibGUoZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIG1lbW9bcGFydF0gPSBmbjtcbiAgICAgICAgICAgIGluc3RhbGxlZCA9IHRydWU7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAobWVtb1twYXJ0XSA9IHt9KTtcbiAgICAgIH0sXG4gICAgICBob29rc1xuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBuZXdIb29rYWJsZShvbkluc3RhbGwpIHtcbiAgICB2YXIgYmVmb3JlID0gW107XG4gICAgdmFyIGFmdGVyID0gW107XG4gICAgdmFyIGdlbmVyYXRlVHJhcCA9IGZ1bmN0aW9uKCkge307XG5cbiAgICB2YXIgYXBpID0ge1xuICAgICAgYmVmb3JlOiBmdW5jdGlvbihob29rLCBwcmlvcml0eSkge1xuICAgICAgICByZXR1cm4gYWRkLmNhbGwodGhpcywgYmVmb3JlLCBcImJlZm9yZVwiLCBob29rLCBwcmlvcml0eSk7XG4gICAgICB9LFxuICAgICAgYWZ0ZXI6IGZ1bmN0aW9uKGhvb2ssIHByaW9yaXR5KSB7XG4gICAgICAgIHJldHVybiBhZGQuY2FsbCh0aGlzLCBhZnRlciwgXCJhZnRlclwiLCBob29rLCBwcmlvcml0eSk7XG4gICAgICB9LFxuICAgICAgZ2V0SG9va3M6IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICAgIHZhciBob29rcyA9IGJlZm9yZS5jb25jYXQoYWZ0ZXIpO1xuICAgICAgICBpZiAodHlwZW9mIG1hdGNoID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgaG9va3MgPSBob29rcy5maWx0ZXIoZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXRjaCkuZXZlcnkoZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICAgICAgICByZXR1cm4gZW50cnlbcHJvcF0gPT09IG1hdGNoW3Byb3BdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhc3NpZ24oaG9va3MsIHtcbiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGhvb2tzLmZvckVhY2goZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICAgICAgICBlbnRyeS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIFwiZXJyb3IgYWRkaW5nIGByZW1vdmVgIHRvIGFycmF5LCBkaWQgeW91IG1vZGlmeSBBcnJheS5wcm90b3R5cGU/XCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBob29rcztcbiAgICAgIH0sXG4gICAgICByZW1vdmVBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRIb29rcygpLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbWV0YSA9IHtcbiAgICAgIGluc3RhbGw6IGZ1bmN0aW9uKHR5cGUsIGZuLCBnZW5lcmF0ZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICBnZW5lcmF0ZVRyYXAgPSBnZW5lcmF0ZTtcbiAgICAgICAgZ2VuZXJhdGUoYmVmb3JlLCBhZnRlcik7XG4gICAgICAgIG9uSW5zdGFsbCAmJiBvbkluc3RhbGwoZm4pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBzdG9yZSBtZXRhIGRhdGEgcmVsYXRlZCB0byBob29rYWJsZS4gdXNlIGBhcGkuYWZ0ZXJgIHNpbmNlIGBhcGlgIHJlZmVyZW5jZSBpcyBub3QgYXZhaWxhYmxlIG9uIG91ciBwcm94eS5cbiAgICBob29rYWJsZU1hcC5zZXQoYXBpLmFmdGVyLCBtZXRhKTtcblxuICAgIHJldHVybiBhcGk7XG5cbiAgICBmdW5jdGlvbiBhZGQoc3RvcmUsIHR5cGUsIGhvb2ssIHByaW9yaXR5KSB7XG4gICAgICB2YXIgZW50cnkgPSB7XG4gICAgICAgIGhvb2s6IGhvb2ssXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHByaW9yaXR5OiBwcmlvcml0eSB8fCAxMCxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBzdG9yZS5pbmRleE9mKGVudHJ5KTtcbiAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBzdG9yZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgZ2VuZXJhdGVUcmFwKGJlZm9yZSwgYWZ0ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHN0b3JlLnB1c2goZW50cnkpO1xuICAgICAgc3RvcmUuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLnByaW9yaXR5IC0gYS5wcmlvcml0eTtcbiAgICAgIH0pO1xuICAgICAgZ2VuZXJhdGVUcmFwKGJlZm9yZSwgYWZ0ZXIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaG9va0ZuKHR5cGUsIGZuLCBuYW1lKSB7XG4gICAgLy8gY2hlY2sgaWYgZnVuY3Rpb24gaGFzIGFscmVhZHkgYmVlbiB3cmFwcGVkXG4gICAgdmFyIG1ldGEgPSBmbi5hZnRlciAmJiBob29rYWJsZU1hcC5nZXQoZm4uYWZ0ZXIpO1xuICAgIGlmIChtZXRhKSB7XG4gICAgICBpZiAobWV0YS50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgIHRocm93IHBhY2thZ2VOYW1lICsgXCI6IHJlY3JlYXRlZCBob29rYWJsZSB3aXRoIGRpZmZlcmVudCB0eXBlXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhvb2thYmxlID0gbmFtZSA/IGdldChuYW1lKSA6IG5ld0hvb2thYmxlKCk7XG5cbiAgICB2YXIgdHJhcDtcbiAgICB2YXIgaG9va2VkRm47XG4gICAgdmFyIGhhbmRsZXJzID0ge1xuICAgICAgZ2V0OiBmdW5jdGlvbih0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgcmV0dXJuIGhvb2thYmxlW3Byb3BdIHx8IFJlZmxlY3QuZ2V0LmFwcGx5KFJlZmxlY3QsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghcmVhZHkpIHtcbiAgICAgIHBvc3RSZWFkeS5wdXNoKHNldFRyYXApO1xuICAgIH1cblxuICAgIGlmIChjb25maWcudXNlUHJveHkgJiYgaGFzUHJveHkoKSkge1xuICAgICAgaG9va2VkRm4gPSBuZXcgUHJveHkoZm4sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaG9va2VkRm4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXJzLmFwcGx5XG4gICAgICAgICAgPyBoYW5kbGVycy5hcHBseShmbiwgdGhpcywgcmVzdChhcmd1bWVudHMpKVxuICAgICAgICAgIDogZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBhc3NpZ24oaG9va2VkRm4sIGhvb2thYmxlKTtcbiAgICB9XG5cbiAgICBob29rYWJsZU1hcC5nZXQoaG9va2VkRm4uYWZ0ZXIpLmluc3RhbGwodHlwZSwgaG9va2VkRm4sIGdlbmVyYXRlVHJhcCk7XG5cbiAgICByZXR1cm4gaG9va2VkRm47XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVUcmFwKGJlZm9yZSwgYWZ0ZXIpIHtcbiAgICAgIHZhciBvcmRlciA9IFtdO1xuICAgICAgdmFyIHRhcmdldEluZGV4O1xuICAgICAgaWYgKGJlZm9yZS5sZW5ndGggfHwgYWZ0ZXIubGVuZ3RoKSB7XG4gICAgICAgIGJlZm9yZS5mb3JFYWNoKGFkZFRvT3JkZXIpO1xuICAgICAgICAvLyBwbGFjZWhvbGRlciBmb3IgdGFyZ2V0IGZ1bmN0aW9uIHdyYXBwZXJcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBvcmRlci5wdXNoKHVuZGVmaW5lZCkgLSAxO1xuICAgICAgICBhZnRlci5mb3JFYWNoKGFkZFRvT3JkZXIpO1xuICAgICAgICB0cmFwID0gZnVuY3Rpb24odGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSB7XG4gICAgICAgICAgdmFyIGN1cnIgPSAwO1xuICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrID1cbiAgICAgICAgICAgIHR5cGUgPT09IFwiYXN5bmNcIiAmJlxuICAgICAgICAgICAgdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICAgICBhcmdzLnBvcCgpO1xuICAgICAgICAgIGZ1bmN0aW9uIGJhaWwodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcInN5bmNcIikge1xuICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKG9yZGVyW2N1cnJdKSB7XG4gICAgICAgICAgICAgIHZhciBhcmdzID0gcmVzdChhcmd1bWVudHMpO1xuICAgICAgICAgICAgICBuZXh0LmJhaWwgPSBiYWlsO1xuICAgICAgICAgICAgICBhcmdzLnVuc2hpZnQobmV4dCk7XG4gICAgICAgICAgICAgIHJldHVybiBvcmRlcltjdXJyKytdLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwic3luY1wiKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBvcmRlclt0YXJnZXRJbmRleF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gcmVzdChhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiYXN5bmNcIiAmJiBjYWxsYmFjaykge1xuICAgICAgICAgICAgICBkZWxldGUgbmV4dC5iYWlsO1xuICAgICAgICAgICAgICBhcmdzLnB1c2gobmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwic3luY1wiKSB7XG4gICAgICAgICAgICAgIG5leHQocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIG5leHQuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYXAgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzZXRUcmFwKCk7XG5cbiAgICAgIGZ1bmN0aW9uIGFkZFRvT3JkZXIoZW50cnkpIHtcbiAgICAgICAgb3JkZXIucHVzaChlbnRyeS5ob29rKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRUcmFwKCkge1xuICAgICAgaWYgKFxuICAgICAgICByZWFkeSB8fFxuICAgICAgICAodHlwZSA9PT0gXCJzeW5jXCIgJiYgIShjb25maWcucmVhZHkgJiBjcmVhdGUuU1lOQykpIHx8XG4gICAgICAgICh0eXBlID09PSBcImFzeW5jXCIgJiYgIShjb25maWcucmVhZHkgJiBjcmVhdGUuQVNZTkMpKVxuICAgICAgKSB7XG4gICAgICAgIGhhbmRsZXJzLmFwcGx5ID0gdHJhcDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJzeW5jXCIgfHwgIShjb25maWcucmVhZHkgJiBjcmVhdGUuUVVFVUUpKSB7XG4gICAgICAgIGhhbmRsZXJzLmFwcGx5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhyb3cgcGFja2FnZU5hbWUgKyBcIjogaG9va2VkIGZ1bmN0aW9uIG5vdCByZWFkeVwiO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFuZGxlcnMuYXBwbHkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICBwb3N0UmVhZHkucHVzaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGhvb2tlZEZuLmFwcGx5KGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRpc3BhdGNoLmdldCA9IGdldDtcbiAgcmV0dXJuIGRpc3BhdGNoO1xufVxuXG4vKiBnbG9iYWwgbW9kdWxlICovXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gY2xvbmU7XG5cbi8qXG4gIElkZW50aWNhbCB0byBganVzdC1leHRlbmQodHJ1ZSwge30sIG9iajEpYFxuXG4gIHZhciBhcnIgPSBbMSwgMiwgM107XG4gIHZhciBzdWJPYmogPSB7YWE6IDF9O1xuICB2YXIgb2JqID0ge2E6IDMsIGI6IDUsIGM6IGFyciwgZDogc3ViT2JqfTtcbiAgdmFyIG9iakNsb25lID0gY2xvbmUob2JqKTtcbiAgYXJyLnB1c2goNCk7XG4gIHN1Yk9iai5iYiA9IDI7XG4gIG9iajsgLy8ge2E6IDMsIGI6IDUsIGM6IFsxLCAyLCAzLCA0XSwgZDoge2FhOiAxfX0gIFxuICBvYmpDbG9uZTsgLy8ge2E6IDMsIGI6IDUsIGM6IFsxLCAyLCAzXSwgZDoge2FhOiAxLCBiYjogMn19XG4qL1xuXG5mdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgdmFyIHJlc3VsdCA9IEFycmF5LmlzQXJyYXkob2JqKSA/IFtdIDoge307XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAvLyBpbmNsdWRlIHByb3RvdHlwZSBwcm9wZXJ0aWVzXG4gICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBjbG9uZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBMb2Rhc2ggPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9vcGVuanNmLm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cbjsoZnVuY3Rpb24oKSB7XG5cbiAgLyoqIFVzZWQgYXMgYSBzYWZlIHJlZmVyZW5jZSBmb3IgYHVuZGVmaW5lZGAgaW4gcHJlLUVTNSBlbnZpcm9ubWVudHMuICovXG4gIHZhciB1bmRlZmluZWQ7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLiAqL1xuICB2YXIgVkVSU0lPTiA9ICc0LjE3LjIxJztcblxuICAvKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbiAgdmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbiAgLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xuICB2YXIgQ09SRV9FUlJPUl9URVhUID0gJ1Vuc3VwcG9ydGVkIGNvcmUtanMgdXNlLiBUcnkgaHR0cHM6Ly9ucG1zLmlvL3NlYXJjaD9xPXBvbnlmaWxsLicsXG4gICAgICBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbicsXG4gICAgICBJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUID0gJ0ludmFsaWQgYHZhcmlhYmxlYCBvcHRpb24gcGFzc2VkIGludG8gYF8udGVtcGxhdGVgJztcblxuICAvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG4gIHZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuICAvKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG4gIHZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cbiAgdmFyIFBMQUNFSE9MREVSID0gJ19fbG9kYXNoX3BsYWNlaG9sZGVyX18nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG4gIHZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG4gIHZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgdmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgICBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcgPSA0LFxuICAgICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICAgIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgICAgV1JBUF9QQVJUSUFMX0ZMQUcgPSAzMixcbiAgICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQsXG4gICAgICBXUkFQX0FSWV9GTEFHID0gMTI4LFxuICAgICAgV1JBUF9SRUFSR19GTEFHID0gMjU2LFxuICAgICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbiAgLyoqIFVzZWQgYXMgZGVmYXVsdCBvcHRpb25zIGZvciBgXy50cnVuY2F0ZWAuICovXG4gIHZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgICAgREVGQVVMVF9UUlVOQ19PTUlTU0lPTiA9ICcuLi4nO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbiAgdmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICAgIEhPVF9TUEFOID0gMTY7XG5cbiAgLyoqIFVzZWQgdG8gaW5kaWNhdGUgdGhlIHR5cGUgb2YgbGF6eSBpdGVyYXRlZXMuICovXG4gIHZhciBMQVpZX0ZJTFRFUl9GTEFHID0gMSxcbiAgICAgIExBWllfTUFQX0ZMQUcgPSAyLFxuICAgICAgTEFaWV9XSElMRV9GTEFHID0gMztcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbiAgdmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MSxcbiAgICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgICBOQU4gPSAwIC8gMDtcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xuICB2YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTUsXG4gICAgICBNQVhfQVJSQVlfSU5ERVggPSBNQVhfQVJSQVlfTEVOR1RIIC0gMSxcbiAgICAgIEhBTEZfTUFYX0FSUkFZX0xFTkdUSCA9IE1BWF9BUlJBWV9MRU5HVEggPj4+IDE7XG5cbiAgLyoqIFVzZWQgdG8gYXNzb2NpYXRlIHdyYXAgbWV0aG9kcyB3aXRoIHRoZWlyIGJpdCBmbGFncy4gKi9cbiAgdmFyIHdyYXBGbGFncyA9IFtcbiAgICBbJ2FyeScsIFdSQVBfQVJZX0ZMQUddLFxuICAgIFsnYmluZCcsIFdSQVBfQklORF9GTEFHXSxcbiAgICBbJ2JpbmRLZXknLCBXUkFQX0JJTkRfS0VZX0ZMQUddLFxuICAgIFsnY3VycnknLCBXUkFQX0NVUlJZX0ZMQUddLFxuICAgIFsnY3VycnlSaWdodCcsIFdSQVBfQ1VSUllfUklHSFRfRkxBR10sXG4gICAgWydmbGlwJywgV1JBUF9GTElQX0ZMQUddLFxuICAgIFsncGFydGlhbCcsIFdSQVBfUEFSVElBTF9GTEFHXSxcbiAgICBbJ3BhcnRpYWxSaWdodCcsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHXSxcbiAgICBbJ3JlYXJnJywgV1JBUF9SRUFSR19GTEFHXVxuICBdO1xuXG4gIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBkb21FeGNUYWcgPSAnW29iamVjdCBET01FeGNlcHRpb25dJyxcbiAgICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXScsXG4gICAgICB3ZWFrU2V0VGFnID0gJ1tvYmplY3QgV2Vha1NldF0nO1xuXG4gIHZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZS4gKi9cbiAgdmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ01pZGRsZSA9IC9cXGIoX19wIFxcKz0pICcnIFxcKy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ1RyYWlsaW5nID0gLyhfX2VcXCguKj9cXCl8XFxiX190XFwpKSBcXCtcXG4nJzsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUVzY2FwZWRIdG1sID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzkpOy9nLFxuICAgICAgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2csXG4gICAgICByZUhhc0VzY2FwZWRIdG1sID0gUmVnRXhwKHJlRXNjYXBlZEh0bWwuc291cmNlKSxcbiAgICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC8sXG4gICAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gICAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICAgKi9cbiAgdmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcbiAgICAgIHJlSGFzUmVnRXhwQ2hhciA9IFJlZ0V4cChyZVJlZ0V4cENoYXIuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UuICovXG4gIHZhciByZVRyaW1TdGFydCA9IC9eXFxzKy87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYSBzaW5nbGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXIuICovXG4gIHZhciByZVdoaXRlc3BhY2UgPSAvXFxzLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3cmFwIGRldGFpbCBjb21tZW50cy4gKi9cbiAgdmFyIHJlV3JhcENvbW1lbnQgPSAvXFx7KD86XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAuK1xcXSBcXCpcXC8pP1xcbj8vLFxuICAgICAgcmVXcmFwRGV0YWlscyA9IC9cXHtcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoICguKylcXF0gXFwqLyxcbiAgICAgIHJlU3BsaXREZXRhaWxzID0gLyw/ICYgLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3b3JkcyBjb21wb3NlZCBvZiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlQXNjaWlXb3JkID0gL1teXFx4MDAtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2ZdKy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIHZhbGlkYXRlIHRoZSBgdmFsaWRhdGVgIG9wdGlvbiBpbiBgXy50ZW1wbGF0ZWAgdmFyaWFibGUuXG4gICAqXG4gICAqIEZvcmJpZHMgY2hhcmFjdGVycyB3aGljaCBjb3VsZCBwb3RlbnRpYWxseSBjaGFuZ2UgdGhlIG1lYW5pbmcgb2YgdGhlIGZ1bmN0aW9uIGFyZ3VtZW50IGRlZmluaXRpb246XG4gICAqIC0gXCIoKSxcIiAobW9kaWZpY2F0aW9uIG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMpXG4gICAqIC0gXCI9XCIgKGRlZmF1bHQgdmFsdWUpXG4gICAqIC0gXCJbXXt9XCIgKGRlc3RydWN0dXJpbmcgb2YgZnVuY3Rpb24gcGFyYW1ldGVycylcbiAgICogLSBcIi9cIiAoYmVnaW5uaW5nIG9mIGEgY29tbWVudClcbiAgICogLSB3aGl0ZXNwYWNlXG4gICAqL1xuICB2YXIgcmVGb3JiaWRkZW5JZGVudGlmaWVyQ2hhcnMgPSAvWygpPSx7fVxcW1xcXVxcL1xcc10vO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2hcbiAgICogW0VTIHRlbXBsYXRlIGRlbGltaXRlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRlbXBsYXRlLWxpdGVyYWwtbGV4aWNhbC1jb21wb25lbnRzKS5cbiAgICovXG4gIHZhciByZUVzVGVtcGxhdGUgPSAvXFwkXFx7KFteXFxcXH1dKig/OlxcXFwuW15cXFxcfV0qKSopXFx9L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUZsYWdzID0gL1xcdyokLztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xuICB2YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xuICB2YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIExhdGluIFVuaWNvZGUgbGV0dGVycyAoZXhjbHVkaW5nIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMpLiAqL1xuICB2YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlTm9NYXRjaCA9IC8oJF4pLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB1bmVzY2FwZWQgY2hhcmFjdGVycyBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciByZVVuZXNjYXBlZFN0cmluZyA9IC9bJ1xcblxcclxcdTIwMjhcXHUyMDI5XFxcXF0vZztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG4gIHZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgICByc0xvd2VyUmFuZ2UgPSAnYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmJyxcbiAgICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgICAgcnNQdW5jdHVhdGlvblJhbmdlID0gJ1xcXFx1MjAwMC1cXFxcdTIwNmYnLFxuICAgICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnLFxuICAgICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbiAgdmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiLFxuICAgICAgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgICByc0RpZ2l0cyA9ICdcXFxcZCsnLFxuICAgICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgICByc0xvd2VyID0gJ1snICsgcnNMb3dlclJhbmdlICsgJ10nLFxuICAgICAgcnNNaXNjID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyByc0JyZWFrUmFuZ2UgKyByc0RpZ2l0cyArIHJzRGluZ2JhdFJhbmdlICsgcnNMb3dlclJhbmdlICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgICByc1VwcGVyID0gJ1snICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbiAgdmFyIHJzTWlzY0xvd2VyID0gJyg/OicgKyByc0xvd2VyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc09wdENvbnRyTG93ZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpkfGxsfG18cmV8c3x0fHZlKSk/JyxcbiAgICAgIHJzT3B0Q29udHJVcHBlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OkR8TEx8TXxSRXxTfFR8VkUpKT8nLFxuICAgICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgICByc09yZFVwcGVyID0gJ1xcXFxkKig/OjFTVHwyTkR8M1JEfCg/IVsxMjNdKVxcXFxkVEgpKD89XFxcXGJ8W2Etel9dKScsXG4gICAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcSxcbiAgICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGFwb3N0cm9waGVzLiAqL1xuICB2YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpIGFuZFxuICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICAgKi9cbiAgdmFyIHJlQ29tYm9NYXJrID0gUmVnRXhwKHJzQ29tYm8sICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbiAgdmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGNvbXBsZXggb3IgY29tcG91bmQgd29yZHMuICovXG4gIHZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzTWlzY1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciArIHJzTWlzY0xvd2VyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gICAgcnNVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlcixcbiAgICByc09yZFVwcGVyLFxuICAgIHJzT3JkTG93ZXIsXG4gICAgcnNEaWdpdHMsXG4gICAgcnNFbW9qaVxuICBdLmpvaW4oJ3wnKSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3MgdGhhdCBuZWVkIGEgbW9yZSByb2J1c3QgcmVnZXhwIHRvIG1hdGNoIHdvcmRzLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezJ9W2Etel18WzAtOV1bYS16QS1aXXxbYS16QS1aXVswLTldfFteYS16QS1aMC05IF0vO1xuXG4gIC8qKiBVc2VkIHRvIGFzc2lnbiBkZWZhdWx0IGBjb250ZXh0YCBvYmplY3QgcHJvcGVydGllcy4gKi9cbiAgdmFyIGNvbnRleHRQcm9wcyA9IFtcbiAgICAnQXJyYXknLCAnQnVmZmVyJywgJ0RhdGFWaWV3JywgJ0RhdGUnLCAnRXJyb3InLCAnRmxvYXQzMkFycmF5JywgJ0Zsb2F0NjRBcnJheScsXG4gICAgJ0Z1bmN0aW9uJywgJ0ludDhBcnJheScsICdJbnQxNkFycmF5JywgJ0ludDMyQXJyYXknLCAnTWFwJywgJ01hdGgnLCAnT2JqZWN0JyxcbiAgICAnUHJvbWlzZScsICdSZWdFeHAnLCAnU2V0JywgJ1N0cmluZycsICdTeW1ib2wnLCAnVHlwZUVycm9yJywgJ1VpbnQ4QXJyYXknLFxuICAgICdVaW50OENsYW1wZWRBcnJheScsICdVaW50MTZBcnJheScsICdVaW50MzJBcnJheScsICdXZWFrTWFwJyxcbiAgICAnXycsICdjbGVhclRpbWVvdXQnLCAnaXNGaW5pdGUnLCAncGFyc2VJbnQnLCAnc2V0VGltZW91dCdcbiAgXTtcblxuICAvKiogVXNlZCB0byBtYWtlIHRlbXBsYXRlIHNvdXJjZVVSTHMgZWFzaWVyIHRvIGlkZW50aWZ5LiAqL1xuICB2YXIgdGVtcGxhdGVDb3VudGVyID0gLTE7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xuICB2YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbiAgdHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgdHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxuICB0eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG4gIHZhciBjbG9uZWFibGVUYWdzID0ge307XG4gIGNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIGNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBtYXAgTGF0aW4gVW5pY29kZSBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuICovXG4gIHZhciBkZWJ1cnJlZExldHRlcnMgPSB7XG4gICAgLy8gTGF0aW4tMSBTdXBwbGVtZW50IGJsb2NrLlxuICAgICdcXHhjMCc6ICdBJywgICdcXHhjMSc6ICdBJywgJ1xceGMyJzogJ0EnLCAnXFx4YzMnOiAnQScsICdcXHhjNCc6ICdBJywgJ1xceGM1JzogJ0EnLFxuICAgICdcXHhlMCc6ICdhJywgICdcXHhlMSc6ICdhJywgJ1xceGUyJzogJ2EnLCAnXFx4ZTMnOiAnYScsICdcXHhlNCc6ICdhJywgJ1xceGU1JzogJ2EnLFxuICAgICdcXHhjNyc6ICdDJywgICdcXHhlNyc6ICdjJyxcbiAgICAnXFx4ZDAnOiAnRCcsICAnXFx4ZjAnOiAnZCcsXG4gICAgJ1xceGM4JzogJ0UnLCAgJ1xceGM5JzogJ0UnLCAnXFx4Y2EnOiAnRScsICdcXHhjYic6ICdFJyxcbiAgICAnXFx4ZTgnOiAnZScsICAnXFx4ZTknOiAnZScsICdcXHhlYSc6ICdlJywgJ1xceGViJzogJ2UnLFxuICAgICdcXHhjYyc6ICdJJywgICdcXHhjZCc6ICdJJywgJ1xceGNlJzogJ0knLCAnXFx4Y2YnOiAnSScsXG4gICAgJ1xceGVjJzogJ2knLCAgJ1xceGVkJzogJ2knLCAnXFx4ZWUnOiAnaScsICdcXHhlZic6ICdpJyxcbiAgICAnXFx4ZDEnOiAnTicsICAnXFx4ZjEnOiAnbicsXG4gICAgJ1xceGQyJzogJ08nLCAgJ1xceGQzJzogJ08nLCAnXFx4ZDQnOiAnTycsICdcXHhkNSc6ICdPJywgJ1xceGQ2JzogJ08nLCAnXFx4ZDgnOiAnTycsXG4gICAgJ1xceGYyJzogJ28nLCAgJ1xceGYzJzogJ28nLCAnXFx4ZjQnOiAnbycsICdcXHhmNSc6ICdvJywgJ1xceGY2JzogJ28nLCAnXFx4ZjgnOiAnbycsXG4gICAgJ1xceGQ5JzogJ1UnLCAgJ1xceGRhJzogJ1UnLCAnXFx4ZGInOiAnVScsICdcXHhkYyc6ICdVJyxcbiAgICAnXFx4ZjknOiAndScsICAnXFx4ZmEnOiAndScsICdcXHhmYic6ICd1JywgJ1xceGZjJzogJ3UnLFxuICAgICdcXHhkZCc6ICdZJywgICdcXHhmZCc6ICd5JywgJ1xceGZmJzogJ3knLFxuICAgICdcXHhjNic6ICdBZScsICdcXHhlNic6ICdhZScsXG4gICAgJ1xceGRlJzogJ1RoJywgJ1xceGZlJzogJ3RoJyxcbiAgICAnXFx4ZGYnOiAnc3MnLFxuICAgIC8vIExhdGluIEV4dGVuZGVkLUEgYmxvY2suXG4gICAgJ1xcdTAxMDAnOiAnQScsICAnXFx1MDEwMic6ICdBJywgJ1xcdTAxMDQnOiAnQScsXG4gICAgJ1xcdTAxMDEnOiAnYScsICAnXFx1MDEwMyc6ICdhJywgJ1xcdTAxMDUnOiAnYScsXG4gICAgJ1xcdTAxMDYnOiAnQycsICAnXFx1MDEwOCc6ICdDJywgJ1xcdTAxMGEnOiAnQycsICdcXHUwMTBjJzogJ0MnLFxuICAgICdcXHUwMTA3JzogJ2MnLCAgJ1xcdTAxMDknOiAnYycsICdcXHUwMTBiJzogJ2MnLCAnXFx1MDEwZCc6ICdjJyxcbiAgICAnXFx1MDEwZSc6ICdEJywgICdcXHUwMTEwJzogJ0QnLCAnXFx1MDEwZic6ICdkJywgJ1xcdTAxMTEnOiAnZCcsXG4gICAgJ1xcdTAxMTInOiAnRScsICAnXFx1MDExNCc6ICdFJywgJ1xcdTAxMTYnOiAnRScsICdcXHUwMTE4JzogJ0UnLCAnXFx1MDExYSc6ICdFJyxcbiAgICAnXFx1MDExMyc6ICdlJywgICdcXHUwMTE1JzogJ2UnLCAnXFx1MDExNyc6ICdlJywgJ1xcdTAxMTknOiAnZScsICdcXHUwMTFiJzogJ2UnLFxuICAgICdcXHUwMTFjJzogJ0cnLCAgJ1xcdTAxMWUnOiAnRycsICdcXHUwMTIwJzogJ0cnLCAnXFx1MDEyMic6ICdHJyxcbiAgICAnXFx1MDExZCc6ICdnJywgICdcXHUwMTFmJzogJ2cnLCAnXFx1MDEyMSc6ICdnJywgJ1xcdTAxMjMnOiAnZycsXG4gICAgJ1xcdTAxMjQnOiAnSCcsICAnXFx1MDEyNic6ICdIJywgJ1xcdTAxMjUnOiAnaCcsICdcXHUwMTI3JzogJ2gnLFxuICAgICdcXHUwMTI4JzogJ0knLCAgJ1xcdTAxMmEnOiAnSScsICdcXHUwMTJjJzogJ0knLCAnXFx1MDEyZSc6ICdJJywgJ1xcdTAxMzAnOiAnSScsXG4gICAgJ1xcdTAxMjknOiAnaScsICAnXFx1MDEyYic6ICdpJywgJ1xcdTAxMmQnOiAnaScsICdcXHUwMTJmJzogJ2knLCAnXFx1MDEzMSc6ICdpJyxcbiAgICAnXFx1MDEzNCc6ICdKJywgICdcXHUwMTM1JzogJ2onLFxuICAgICdcXHUwMTM2JzogJ0snLCAgJ1xcdTAxMzcnOiAnaycsICdcXHUwMTM4JzogJ2snLFxuICAgICdcXHUwMTM5JzogJ0wnLCAgJ1xcdTAxM2InOiAnTCcsICdcXHUwMTNkJzogJ0wnLCAnXFx1MDEzZic6ICdMJywgJ1xcdTAxNDEnOiAnTCcsXG4gICAgJ1xcdTAxM2EnOiAnbCcsICAnXFx1MDEzYyc6ICdsJywgJ1xcdTAxM2UnOiAnbCcsICdcXHUwMTQwJzogJ2wnLCAnXFx1MDE0Mic6ICdsJyxcbiAgICAnXFx1MDE0Myc6ICdOJywgICdcXHUwMTQ1JzogJ04nLCAnXFx1MDE0Nyc6ICdOJywgJ1xcdTAxNGEnOiAnTicsXG4gICAgJ1xcdTAxNDQnOiAnbicsICAnXFx1MDE0Nic6ICduJywgJ1xcdTAxNDgnOiAnbicsICdcXHUwMTRiJzogJ24nLFxuICAgICdcXHUwMTRjJzogJ08nLCAgJ1xcdTAxNGUnOiAnTycsICdcXHUwMTUwJzogJ08nLFxuICAgICdcXHUwMTRkJzogJ28nLCAgJ1xcdTAxNGYnOiAnbycsICdcXHUwMTUxJzogJ28nLFxuICAgICdcXHUwMTU0JzogJ1InLCAgJ1xcdTAxNTYnOiAnUicsICdcXHUwMTU4JzogJ1InLFxuICAgICdcXHUwMTU1JzogJ3InLCAgJ1xcdTAxNTcnOiAncicsICdcXHUwMTU5JzogJ3InLFxuICAgICdcXHUwMTVhJzogJ1MnLCAgJ1xcdTAxNWMnOiAnUycsICdcXHUwMTVlJzogJ1MnLCAnXFx1MDE2MCc6ICdTJyxcbiAgICAnXFx1MDE1Yic6ICdzJywgICdcXHUwMTVkJzogJ3MnLCAnXFx1MDE1Zic6ICdzJywgJ1xcdTAxNjEnOiAncycsXG4gICAgJ1xcdTAxNjInOiAnVCcsICAnXFx1MDE2NCc6ICdUJywgJ1xcdTAxNjYnOiAnVCcsXG4gICAgJ1xcdTAxNjMnOiAndCcsICAnXFx1MDE2NSc6ICd0JywgJ1xcdTAxNjcnOiAndCcsXG4gICAgJ1xcdTAxNjgnOiAnVScsICAnXFx1MDE2YSc6ICdVJywgJ1xcdTAxNmMnOiAnVScsICdcXHUwMTZlJzogJ1UnLCAnXFx1MDE3MCc6ICdVJywgJ1xcdTAxNzInOiAnVScsXG4gICAgJ1xcdTAxNjknOiAndScsICAnXFx1MDE2Yic6ICd1JywgJ1xcdTAxNmQnOiAndScsICdcXHUwMTZmJzogJ3UnLCAnXFx1MDE3MSc6ICd1JywgJ1xcdTAxNzMnOiAndScsXG4gICAgJ1xcdTAxNzQnOiAnVycsICAnXFx1MDE3NSc6ICd3JyxcbiAgICAnXFx1MDE3Nic6ICdZJywgICdcXHUwMTc3JzogJ3knLCAnXFx1MDE3OCc6ICdZJyxcbiAgICAnXFx1MDE3OSc6ICdaJywgICdcXHUwMTdiJzogJ1onLCAnXFx1MDE3ZCc6ICdaJyxcbiAgICAnXFx1MDE3YSc6ICd6JywgICdcXHUwMTdjJzogJ3onLCAnXFx1MDE3ZSc6ICd6JyxcbiAgICAnXFx1MDEzMic6ICdJSicsICdcXHUwMTMzJzogJ2lqJyxcbiAgICAnXFx1MDE1Mic6ICdPZScsICdcXHUwMTUzJzogJ29lJyxcbiAgICAnXFx1MDE0OSc6IFwiJ25cIiwgJ1xcdTAxN2YnOiAncydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLiAqL1xuICB2YXIgaHRtbEVzY2FwZXMgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy4gKi9cbiAgdmFyIGh0bWxVbmVzY2FwZXMgPSB7XG4gICAgJyZhbXA7JzogJyYnLFxuICAgICcmbHQ7JzogJzwnLFxuICAgICcmZ3Q7JzogJz4nLFxuICAgICcmcXVvdDsnOiAnXCInLFxuICAgICcmIzM5Oyc6IFwiJ1wiXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciBzdHJpbmdFc2NhcGVzID0ge1xuICAgICdcXFxcJzogJ1xcXFwnLFxuICAgIFwiJ1wiOiBcIidcIixcbiAgICAnXFxuJzogJ24nLFxuICAgICdcXHInOiAncicsXG4gICAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ3UyMDI5J1xuICB9O1xuXG4gIC8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG4gIHZhciBmcmVlUGFyc2VGbG9hdCA9IHBhcnNlRmxvYXQsXG4gICAgICBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbiAgdmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbiAgLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG4gIHZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG4gIHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG4gIHZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbiAgLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbiAgdmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4gIC8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xuICB2YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICAgIGlmICh0eXBlcykge1xuICAgICAgICByZXR1cm4gdHlwZXM7XG4gICAgICB9XG5cbiAgICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSgpKTtcblxuICAvKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xuICB2YXIgbm9kZUlzQXJyYXlCdWZmZXIgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0FycmF5QnVmZmVyLFxuICAgICAgbm9kZUlzRGF0ZSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzRGF0ZSxcbiAgICAgIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwLFxuICAgICAgbm9kZUlzUmVnRXhwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNSZWdFeHAsXG4gICAgICBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldCxcbiAgICAgIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VBZ2dyZWdhdG9yYCBmb3IgYXJyYXlzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUFnZ3JlZ2F0b3IoYXJyYXksIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoUmlnaHQoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmV2ZXJ5YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUV2ZXJ5KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKCFwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhcnJheUluY2x1ZGVzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IodmFsdWUsIGFycmF5W2luZGV4XSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbKytpbmRleF07XG4gICAgfVxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlUmlnaHQoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5Wy0tbGVuZ3RoXTtcbiAgICB9XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGFuIEFTQ0lJIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICB2YXIgYXNjaWlTaXplID0gYmFzZVByb3BlcnR5KCdsZW5ndGgnKTtcblxuICAvKipcbiAgICogQ29udmVydHMgYW4gQVNDSUkgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnNwbGl0KCcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYW4gQVNDSUkgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVBc2NpaVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5maW5kS2V5YCBhbmQgYF8uZmluZExhc3RLZXlgLFxuICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gXG4gICAqIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZvdW5kIGVsZW1lbnQgb3IgaXRzIGtleSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kS2V5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZWFjaEZ1bmMpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGtleSwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmVzdWx0ID0ga2V5O1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgsIGZyb21SaWdodCkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mV2l0aChhcnJheSwgdmFsdWUsIGZyb21JbmRleCwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hTmAgd2l0aG91dCBzdXBwb3J0IGZvciBudW1iZXIgb2JqZWN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lYW5gIGFuZCBgXy5tZWFuQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VNZWFuKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gbGVuZ3RoID8gKGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSAvIGxlbmd0aCkgOiBOQU47XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZWR1Y2VgIGFuZCBgXy5yZWR1Y2VSaWdodGAsIHdpdGhvdXQgc3VwcG9ydFxuICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmAgdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaXRBY2N1bSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBvciBsYXN0IGVsZW1lbnQgb2ZcbiAgICogIGBjb2xsZWN0aW9uYCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VSZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGVhY2hGdW5jKSB7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGluaXRBY2N1bVxuICAgICAgICA/IChpbml0QWNjdW0gPSBmYWxzZSwgdmFsdWUpXG4gICAgICAgIDogaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRCeWAgd2hpY2ggdXNlcyBgY29tcGFyZXJgIHRvIGRlZmluZSB0aGVcbiAgICogc29ydCBvcmRlciBvZiBgYXJyYXlgIGFuZCByZXBsYWNlcyBjcml0ZXJpYSBvYmplY3RzIHdpdGggdGhlaXIgY29ycmVzcG9uZGluZ1xuICAgKiB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJlciBUaGUgZnVuY3Rpb24gdG8gZGVmaW5lIHNvcnQgb3JkZXIuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVNvcnRCeShhcnJheSwgY29tcGFyZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhcnJheVtsZW5ndGhdID0gYXJyYXlbbGVuZ3RoXS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnN1bWAgYW5kIGBfLnN1bUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIHJlc3VsdCxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdKTtcbiAgICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBjdXJyZW50IDogKHJlc3VsdCArIGN1cnJlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAgICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1BhaXJzYCBhbmQgYF8udG9QYWlyc0luYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5XG4gICAqIG9mIGtleS12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGAgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUb1BhaXJzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIFtrZXksIG9iamVjdFtrZXldXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50cmltYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRyaW0oc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZ1xuICAgICAgPyBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZEVuZEluZGV4KHN0cmluZykgKyAxKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJylcbiAgICAgIDogc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAgICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gICAqIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbVN0YXJ0YCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgYHBsYWNlaG9sZGVyYCBvY2N1cnJlbmNlcyBpbiBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgY291bnQuXG4gICAqL1xuICBmdW5jdGlvbiBjb3VudEhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gMDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGFycmF5W2xlbmd0aF0gPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICsrcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZGVidXJyYCB0byBjb252ZXJ0IExhdGluLTEgU3VwcGxlbWVudCBhbmQgTGF0aW4gRXh0ZW5kZWQtQVxuICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsZXR0ZXIgVGhlIG1hdGNoZWQgbGV0dGVyIHRvIGRlYnVyci5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICAgKi9cbiAgdmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy50ZW1wbGF0ZWAgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocikge1xuICAgIHJldHVybiAnXFxcXCcgKyBzdHJpbmdFc2NhcGVzW2Nocl07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGUudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBpdGVyYXRvcmAgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVyYXRvciBUaGUgaXRlcmF0b3IgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXRlcmF0b3IpIHtcbiAgICB2YXIgZGF0YSxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICByZXN1bHQucHVzaChkYXRhLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgYHBsYWNlaG9sZGVyYCBlbGVtZW50cyBpbiBgYXJyYXlgIHdpdGggYW4gaW50ZXJuYWwgcGxhY2Vob2xkZXJcbiAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlaXIgaW5kZXhlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHZhbHVlID09PSBwbGFjZWhvbGRlciB8fCB2YWx1ZSA9PT0gUExBQ0VIT0xERVIpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gUExBQ0VIT0xERVI7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGl0cyB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb1BhaXJzKHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW3ZhbHVlLCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubGFzdEluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ICsgMTtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIHN5bWJvbHMgaW4gYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlU2l6ZShzdHJpbmcpXG4gICAgICA6IGFzY2lpU2l6ZShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgICAgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlXG4gICAqIGNoYXJhY3RlciBvZiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJpbmcubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgcmVXaGl0ZXNwYWNlLnRlc3Qoc3RyaW5nLmNoYXJBdChpbmRleCkpKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnVuZXNjYXBlYCB0byBjb252ZXJ0IEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gdW5lc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgdW5lc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxVbmVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGEgVW5pY29kZSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVNpemUoc3RyaW5nKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICAgIHdoaWxlIChyZVVuaWNvZGUudGVzdChzdHJpbmcpKSB7XG4gICAgICArK3Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlV29yZCkgfHwgW107XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHVzaW5nIHRoZSBgY29udGV4dGAgb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAxLjEuMFxuICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHQ9cm9vdF0gVGhlIGNvbnRleHQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8ubWl4aW4oeyAnZm9vJzogXy5jb25zdGFudCgnZm9vJykgfSk7XG4gICAqXG4gICAqIHZhciBsb2Rhc2ggPSBfLnJ1bkluQ29udGV4dCgpO1xuICAgKiBsb2Rhc2gubWl4aW4oeyAnYmFyJzogbG9kYXNoLmNvbnN0YW50KCdiYXInKSB9KTtcbiAgICpcbiAgICogXy5pc0Z1bmN0aW9uKF8uZm9vKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKiBfLmlzRnVuY3Rpb24oXy5iYXIpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guZm9vKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmJhcik7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogLy8gQ3JlYXRlIGEgc3VwZWQtdXAgYGRlZmVyYCBpbiBOb2RlLmpzLlxuICAgKiB2YXIgZGVmZXIgPSBfLnJ1bkluQ29udGV4dCh7ICdzZXRUaW1lb3V0Jzogc2V0SW1tZWRpYXRlIH0pLmRlZmVyO1xuICAgKi9cbiAgdmFyIHJ1bkluQ29udGV4dCA9IChmdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBjb250ZXh0ID09IG51bGwgPyByb290IDogXy5kZWZhdWx0cyhyb290Lk9iamVjdCgpLCBjb250ZXh0LCBfLnBpY2socm9vdCwgY29udGV4dFByb3BzKSk7XG5cbiAgICAvKiogQnVpbHQtaW4gY29uc3RydWN0b3IgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQXJyYXkgPSBjb250ZXh0LkFycmF5LFxuICAgICAgICBEYXRlID0gY29udGV4dC5EYXRlLFxuICAgICAgICBFcnJvciA9IGNvbnRleHQuRXJyb3IsXG4gICAgICAgIEZ1bmN0aW9uID0gY29udGV4dC5GdW5jdGlvbixcbiAgICAgICAgTWF0aCA9IGNvbnRleHQuTWF0aCxcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsXG4gICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7XG5cbiAgICAvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xuICAgIHZhciBjb3JlSnNEYXRhID0gY29udGV4dFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbiAgICAvKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG4gICAgdmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4gICAgLyoqIFVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIElEcy4gKi9cbiAgICB2YXIgaWRDb3VudGVyID0gMDtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG4gICAgdmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICAgICAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gICAgICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gICAgICogb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIHZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xuICAgIHZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIGBfYCByZWZlcmVuY2UgaW4gYF8ubm9Db25mbGljdGAuICovXG4gICAgdmFyIG9sZERhc2ggPSByb290Ll87XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xuICAgIHZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gICAgICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4gICAgKTtcblxuICAgIC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gY29udGV4dC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIFN5bWJvbCA9IGNvbnRleHQuU3ltYm9sLFxuICAgICAgICBVaW50OEFycmF5ID0gY29udGV4dC5VaW50OEFycmF5LFxuICAgICAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgICAgIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG4gICAgICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgICAgICBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sID8gU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltSXRlcmF0b3IgPSBTeW1ib2wgPyBTeW1ib2wuaXRlcmF0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICAgICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0oKSk7XG5cbiAgICAvKiogTW9ja2VkIGJ1aWx0LWlucy4gKi9cbiAgICB2YXIgY3R4Q2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQgIT09IHJvb3QuY2xlYXJUaW1lb3V0ICYmIGNvbnRleHQuY2xlYXJUaW1lb3V0LFxuICAgICAgICBjdHhOb3cgPSBEYXRlICYmIERhdGUubm93ICE9PSByb290LkRhdGUubm93ICYmIERhdGUubm93LFxuICAgICAgICBjdHhTZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0ICE9PSByb290LnNldFRpbWVvdXQgJiYgY29udGV4dC5zZXRUaW1lb3V0O1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xuICAgIHZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsLFxuICAgICAgICBuYXRpdmVGbG9vciA9IE1hdGguZmxvb3IsXG4gICAgICAgIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICAgICAgICBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLFxuICAgICAgICBuYXRpdmVKb2luID0gYXJyYXlQcm90by5qb2luLFxuICAgICAgICBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KSxcbiAgICAgICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluLFxuICAgICAgICBuYXRpdmVOb3cgPSBEYXRlLm5vdyxcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbSxcbiAgICAgICAgbmF0aXZlUmV2ZXJzZSA9IGFycmF5UHJvdG8ucmV2ZXJzZTtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbiAgICB2YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUoY29udGV4dCwgJ0RhdGFWaWV3JyksXG4gICAgICAgIE1hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnTWFwJyksXG4gICAgICAgIFByb21pc2UgPSBnZXROYXRpdmUoY29udGV4dCwgJ1Byb21pc2UnKSxcbiAgICAgICAgU2V0ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdTZXQnKSxcbiAgICAgICAgV2Vha01hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnV2Vha01hcCcpLFxuICAgICAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbiAgICAvKiogVXNlZCB0byBzdG9yZSBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgICB2YXIgbWV0YU1hcCA9IFdlYWtNYXAgJiYgbmV3IFdlYWtNYXA7XG5cbiAgICAvKiogVXNlZCB0byBsb29rdXAgdW5taW5pZmllZCBmdW5jdGlvbiBuYW1lcy4gKi9cbiAgICB2YXIgcmVhbE5hbWVzID0ge307XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xuICAgIHZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgICAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgICAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICAgICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuICAgIC8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xuICAgIHZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgaW1wbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzLiBNZXRob2RzIHRoYXQgb3BlcmF0ZSBvbiBhbmQgcmV0dXJuIGFycmF5cywgY29sbGVjdGlvbnMsXG4gICAgICogYW5kIGZ1bmN0aW9ucyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlci4gTWV0aG9kcyB0aGF0IHJldHJpZXZlIGEgc2luZ2xlIHZhbHVlXG4gICAgICogb3IgbWF5IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZW5kIHRoZSBjaGFpbiBzZXF1ZW5jZVxuICAgICAqIGFuZCByZXR1cm4gdGhlIHVud3JhcHBlZCB2YWx1ZS4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEV4cGxpY2l0IGNoYWluIHNlcXVlbmNlcywgd2hpY2ggbXVzdCBiZSB1bndyYXBwZWQgd2l0aCBgXyN2YWx1ZWAsIG1heSBiZVxuICAgICAqIGVuYWJsZWQgdXNpbmcgYF8uY2hhaW5gLlxuICAgICAqXG4gICAgICogVGhlIGV4ZWN1dGlvbiBvZiBjaGFpbmVkIG1ldGhvZHMgaXMgbGF6eSwgdGhhdCBpcywgaXQncyBkZWZlcnJlZCB1bnRpbFxuICAgICAqIGBfI3ZhbHVlYCBpcyBpbXBsaWNpdGx5IG9yIGV4cGxpY2l0bHkgY2FsbGVkLlxuICAgICAqXG4gICAgICogTGF6eSBldmFsdWF0aW9uIGFsbG93cyBzZXZlcmFsIG1ldGhvZHMgdG8gc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24uXG4gICAgICogU2hvcnRjdXQgZnVzaW9uIGlzIGFuIG9wdGltaXphdGlvbiB0byBtZXJnZSBpdGVyYXRlZSBjYWxsczsgdGhpcyBhdm9pZHNcbiAgICAgKiB0aGUgY3JlYXRpb24gb2YgaW50ZXJtZWRpYXRlIGFycmF5cyBhbmQgY2FuIGdyZWF0bHkgcmVkdWNlIHRoZSBudW1iZXIgb2ZcbiAgICAgKiBpdGVyYXRlZSBleGVjdXRpb25zLiBTZWN0aW9ucyBvZiBhIGNoYWluIHNlcXVlbmNlIHF1YWxpZnkgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlmIHRoZSBzZWN0aW9uIGlzIGFwcGxpZWQgdG8gYW4gYXJyYXkgYW5kIGl0ZXJhdGVlcyBhY2NlcHQgb25seVxuICAgICAqIG9uZSBhcmd1bWVudC4gVGhlIGhldXJpc3RpYyBmb3Igd2hldGhlciBhIHNlY3Rpb24gcXVhbGlmaWVzIGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpcyBzdWJqZWN0IHRvIGNoYW5nZS5cbiAgICAgKlxuICAgICAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGBfI3ZhbHVlYCBtZXRob2QgaXNcbiAgICAgKiBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC5cbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uIHRvIGxvZGFzaCBtZXRob2RzLCB3cmFwcGVycyBoYXZlIGBBcnJheWAgYW5kIGBTdHJpbmdgIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgQXJyYXlgIG1ldGhvZHMgYXJlOlxuICAgICAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGBzaGlmdGAsIGBzb3J0YCwgYHNwbGljZWAsIGFuZCBgdW5zaGlmdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBTdHJpbmdgIG1ldGhvZHMgYXJlOlxuICAgICAqIGByZXBsYWNlYCBhbmQgYHNwbGl0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uIGFyZTpcbiAgICAgKiBgYXRgLCBgY29tcGFjdGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBkcm9wV2hpbGVgLCBgZmlsdGVyYCwgYGZpbmRgLFxuICAgICAqIGBmaW5kTGFzdGAsIGBoZWFkYCwgYGluaXRpYWxgLCBgbGFzdGAsIGBtYXBgLCBgcmVqZWN0YCwgYHJldmVyc2VgLCBgc2xpY2VgLFxuICAgICAqIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGFuZCBgdG9BcnJheWBcbiAgICAgKlxuICAgICAqIFRoZSBjaGFpbmFibGUgd3JhcHBlciBtZXRob2RzIGFyZTpcbiAgICAgKiBgYWZ0ZXJgLCBgYXJ5YCwgYGFzc2lnbmAsIGBhc3NpZ25JbmAsIGBhc3NpZ25JbldpdGhgLCBgYXNzaWduV2l0aGAsIGBhdGAsXG4gICAgICogYGJlZm9yZWAsIGBiaW5kYCwgYGJpbmRBbGxgLCBgYmluZEtleWAsIGBjYXN0QXJyYXlgLCBgY2hhaW5gLCBgY2h1bmtgLFxuICAgICAqIGBjb21taXRgLCBgY29tcGFjdGAsIGBjb25jYXRgLCBgY29uZm9ybXNgLCBgY29uc3RhbnRgLCBgY291bnRCeWAsIGBjcmVhdGVgLFxuICAgICAqIGBjdXJyeWAsIGBkZWJvdW5jZWAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgZGVmZXJgLCBgZGVsYXlgLFxuICAgICAqIGBkaWZmZXJlbmNlYCwgYGRpZmZlcmVuY2VCeWAsIGBkaWZmZXJlbmNlV2l0aGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsXG4gICAgICogYGRyb3BSaWdodFdoaWxlYCwgYGRyb3BXaGlsZWAsIGBleHRlbmRgLCBgZXh0ZW5kV2l0aGAsIGBmaWxsYCwgYGZpbHRlcmAsXG4gICAgICogYGZsYXRNYXBgLCBgZmxhdE1hcERlZXBgLCBgZmxhdE1hcERlcHRoYCwgYGZsYXR0ZW5gLCBgZmxhdHRlbkRlZXBgLFxuICAgICAqIGBmbGF0dGVuRGVwdGhgLCBgZmxpcGAsIGBmbG93YCwgYGZsb3dSaWdodGAsIGBmcm9tUGFpcnNgLCBgZnVuY3Rpb25zYCxcbiAgICAgKiBgZnVuY3Rpb25zSW5gLCBgZ3JvdXBCeWAsIGBpbml0aWFsYCwgYGludGVyc2VjdGlvbmAsIGBpbnRlcnNlY3Rpb25CeWAsXG4gICAgICogYGludGVyc2VjdGlvbldpdGhgLCBgaW52ZXJ0YCwgYGludmVydEJ5YCwgYGludm9rZU1hcGAsIGBpdGVyYXRlZWAsIGBrZXlCeWAsXG4gICAgICogYGtleXNgLCBga2V5c0luYCwgYG1hcGAsIGBtYXBLZXlzYCwgYG1hcFZhbHVlc2AsIGBtYXRjaGVzYCwgYG1hdGNoZXNQcm9wZXJ0eWAsXG4gICAgICogYG1lbW9pemVgLCBgbWVyZ2VgLCBgbWVyZ2VXaXRoYCwgYG1ldGhvZGAsIGBtZXRob2RPZmAsIGBtaXhpbmAsIGBuZWdhdGVgLFxuICAgICAqIGBudGhBcmdgLCBgb21pdGAsIGBvbWl0QnlgLCBgb25jZWAsIGBvcmRlckJ5YCwgYG92ZXJgLCBgb3ZlckFyZ3NgLFxuICAgICAqIGBvdmVyRXZlcnlgLCBgb3ZlclNvbWVgLCBgcGFydGlhbGAsIGBwYXJ0aWFsUmlnaHRgLCBgcGFydGl0aW9uYCwgYHBpY2tgLFxuICAgICAqIGBwaWNrQnlgLCBgcGxhbnRgLCBgcHJvcGVydHlgLCBgcHJvcGVydHlPZmAsIGBwdWxsYCwgYHB1bGxBbGxgLCBgcHVsbEFsbEJ5YCxcbiAgICAgKiBgcHVsbEFsbFdpdGhgLCBgcHVsbEF0YCwgYHB1c2hgLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZWFyZ2AsIGByZWplY3RgLFxuICAgICAqIGByZW1vdmVgLCBgcmVzdGAsIGByZXZlcnNlYCwgYHNhbXBsZVNpemVgLCBgc2V0YCwgYHNldFdpdGhgLCBgc2h1ZmZsZWAsXG4gICAgICogYHNsaWNlYCwgYHNvcnRgLCBgc29ydEJ5YCwgYHNwbGljZWAsIGBzcHJlYWRgLCBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGB0YXBgLCBgdGhyb3R0bGVgLCBgdGhydWAsIGB0b0FycmF5YCxcbiAgICAgKiBgdG9QYWlyc2AsIGB0b1BhaXJzSW5gLCBgdG9QYXRoYCwgYHRvUGxhaW5PYmplY3RgLCBgdHJhbnNmb3JtYCwgYHVuYXJ5YCxcbiAgICAgKiBgdW5pb25gLCBgdW5pb25CeWAsIGB1bmlvbldpdGhgLCBgdW5pcWAsIGB1bmlxQnlgLCBgdW5pcVdpdGhgLCBgdW5zZXRgLFxuICAgICAqIGB1bnNoaWZ0YCwgYHVuemlwYCwgYHVuemlwV2l0aGAsIGB1cGRhdGVgLCBgdXBkYXRlV2l0aGAsIGB2YWx1ZXNgLFxuICAgICAqIGB2YWx1ZXNJbmAsIGB3aXRob3V0YCwgYHdyYXBgLCBgeG9yYCwgYHhvckJ5YCwgYHhvcldpdGhgLCBgemlwYCxcbiAgICAgKiBgemlwT2JqZWN0YCwgYHppcE9iamVjdERlZXBgLCBhbmQgYHppcFdpdGhgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgYXJlICoqbm90KiogY2hhaW5hYmxlIGJ5IGRlZmF1bHQgYXJlOlxuICAgICAqIGBhZGRgLCBgYXR0ZW1wdGAsIGBjYW1lbENhc2VgLCBgY2FwaXRhbGl6ZWAsIGBjZWlsYCwgYGNsYW1wYCwgYGNsb25lYCxcbiAgICAgKiBgY2xvbmVEZWVwYCwgYGNsb25lRGVlcFdpdGhgLCBgY2xvbmVXaXRoYCwgYGNvbmZvcm1zVG9gLCBgZGVidXJyYCxcbiAgICAgKiBgZGVmYXVsdFRvYCwgYGRpdmlkZWAsIGBlYWNoYCwgYGVhY2hSaWdodGAsIGBlbmRzV2l0aGAsIGBlcWAsIGBlc2NhcGVgLFxuICAgICAqIGBlc2NhcGVSZWdFeHBgLCBgZXZlcnlgLCBgZmluZGAsIGBmaW5kSW5kZXhgLCBgZmluZEtleWAsIGBmaW5kTGFzdGAsXG4gICAgICogYGZpbmRMYXN0SW5kZXhgLCBgZmluZExhc3RLZXlgLCBgZmlyc3RgLCBgZmxvb3JgLCBgZm9yRWFjaGAsIGBmb3JFYWNoUmlnaHRgLFxuICAgICAqIGBmb3JJbmAsIGBmb3JJblJpZ2h0YCwgYGZvck93bmAsIGBmb3JPd25SaWdodGAsIGBnZXRgLCBgZ3RgLCBgZ3RlYCwgYGhhc2AsXG4gICAgICogYGhhc0luYCwgYGhlYWRgLCBgaWRlbnRpdHlgLCBgaW5jbHVkZXNgLCBgaW5kZXhPZmAsIGBpblJhbmdlYCwgYGludm9rZWAsXG4gICAgICogYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNBcnJheUJ1ZmZlcmAsIGBpc0FycmF5TGlrZWAsIGBpc0FycmF5TGlrZU9iamVjdGAsXG4gICAgICogYGlzQm9vbGVhbmAsIGBpc0J1ZmZlcmAsIGBpc0RhdGVgLCBgaXNFbGVtZW50YCwgYGlzRW1wdHlgLCBgaXNFcXVhbGAsXG4gICAgICogYGlzRXF1YWxXaXRoYCwgYGlzRXJyb3JgLCBgaXNGaW5pdGVgLCBgaXNGdW5jdGlvbmAsIGBpc0ludGVnZXJgLCBgaXNMZW5ndGhgLFxuICAgICAqIGBpc01hcGAsIGBpc01hdGNoYCwgYGlzTWF0Y2hXaXRoYCwgYGlzTmFOYCwgYGlzTmF0aXZlYCwgYGlzTmlsYCwgYGlzTnVsbGAsXG4gICAgICogYGlzTnVtYmVyYCwgYGlzT2JqZWN0YCwgYGlzT2JqZWN0TGlrZWAsIGBpc1BsYWluT2JqZWN0YCwgYGlzUmVnRXhwYCxcbiAgICAgKiBgaXNTYWZlSW50ZWdlcmAsIGBpc1NldGAsIGBpc1N0cmluZ2AsIGBpc1VuZGVmaW5lZGAsIGBpc1R5cGVkQXJyYXlgLFxuICAgICAqIGBpc1dlYWtNYXBgLCBgaXNXZWFrU2V0YCwgYGpvaW5gLCBga2ViYWJDYXNlYCwgYGxhc3RgLCBgbGFzdEluZGV4T2ZgLFxuICAgICAqIGBsb3dlckNhc2VgLCBgbG93ZXJGaXJzdGAsIGBsdGAsIGBsdGVgLCBgbWF4YCwgYG1heEJ5YCwgYG1lYW5gLCBgbWVhbkJ5YCxcbiAgICAgKiBgbWluYCwgYG1pbkJ5YCwgYG11bHRpcGx5YCwgYG5vQ29uZmxpY3RgLCBgbm9vcGAsIGBub3dgLCBgbnRoYCwgYHBhZGAsXG4gICAgICogYHBhZEVuZGAsIGBwYWRTdGFydGAsIGBwYXJzZUludGAsIGBwb3BgLCBgcmFuZG9tYCwgYHJlZHVjZWAsIGByZWR1Y2VSaWdodGAsXG4gICAgICogYHJlcGVhdGAsIGByZXN1bHRgLCBgcm91bmRgLCBgcnVuSW5Db250ZXh0YCwgYHNhbXBsZWAsIGBzaGlmdGAsIGBzaXplYCxcbiAgICAgKiBgc25ha2VDYXNlYCwgYHNvbWVgLCBgc29ydGVkSW5kZXhgLCBgc29ydGVkSW5kZXhCeWAsIGBzb3J0ZWRMYXN0SW5kZXhgLFxuICAgICAqIGBzb3J0ZWRMYXN0SW5kZXhCeWAsIGBzdGFydENhc2VgLCBgc3RhcnRzV2l0aGAsIGBzdHViQXJyYXlgLCBgc3R1YkZhbHNlYCxcbiAgICAgKiBgc3R1Yk9iamVjdGAsIGBzdHViU3RyaW5nYCwgYHN0dWJUcnVlYCwgYHN1YnRyYWN0YCwgYHN1bWAsIGBzdW1CeWAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRpbWVzYCwgYHRvRmluaXRlYCwgYHRvSW50ZWdlcmAsIGB0b0pTT05gLCBgdG9MZW5ndGhgLFxuICAgICAqIGB0b0xvd2VyYCwgYHRvTnVtYmVyYCwgYHRvU2FmZUludGVnZXJgLCBgdG9TdHJpbmdgLCBgdG9VcHBlcmAsIGB0cmltYCxcbiAgICAgKiBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBgdHJ1bmNhdGVgLCBgdW5lc2NhcGVgLCBgdW5pcXVlSWRgLCBgdXBwZXJDYXNlYCxcbiAgICAgKiBgdXBwZXJGaXJzdGAsIGB2YWx1ZWAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAbmFtZSBfXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDIsIDNdKTtcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYW4gdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIHdyYXBwZWQucmVkdWNlKF8uYWRkKTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB2YXIgc3F1YXJlcyA9IHdyYXBwZWQubWFwKHNxdWFyZSk7XG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExvZGFzaFdyYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdfX3dyYXBwZWRfXycpKSB7XG4gICAgICAgICAgcmV0dXJuIHdyYXBwZXJDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICAgICAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gd2hvc2UgcHJvdG90eXBlIGNoYWluIHNlcXVlbmNlIHdyYXBwZXJzIGluaGVyaXQgZnJvbS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUxvZGFzaCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjaGFpbkFsbF0gRW5hYmxlIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcbiAgICAgIHRoaXMuX19pbmRleF9fID0gMDtcbiAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IGxvZGFzaCBhcmUgbGlrZSB0aG9zZSBpblxuICAgICAqIGVtYmVkZGVkIFJ1YnkgKEVSQikgYXMgd2VsbCBhcyBFUzIwMTUgdGVtcGxhdGUgc3RyaW5ncy4gQ2hhbmdlIHRoZVxuICAgICAqIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2VzY2FwZSc6IHJlRXNjYXBlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGNvZGUgdG8gYmUgZXZhbHVhdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdldmFsdWF0ZSc6IHJlRXZhbHVhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2ludGVycG9sYXRlJzogcmVJbnRlcnBvbGF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBpbXBvcnQgdmFyaWFibGVzIGludG8gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgICdpbXBvcnRzJzoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c1xuICAgICAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICAnXyc6IGxvZGFzaFxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFbnN1cmUgd3JhcHBlcnMgYXJlIGluc3RhbmNlcyBvZiBgYmFzZUxvZGFzaGAuXG4gICAgbG9kYXNoLnByb3RvdHlwZSA9IGJhc2VMb2Rhc2gucHJvdG90eXBlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBsb2Rhc2g7XG5cbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTG9kYXNoV3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBsYXp5IHdyYXBwZXIgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGxhenkgZXZhbHVhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMYXp5V3JhcHBlcih2YWx1ZSkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2Rpcl9fID0gMTtcbiAgICAgIHRoaXMuX19maWx0ZXJlZF9fID0gZmFsc2U7XG4gICAgICB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXTtcbiAgICAgIHRoaXMuX190YWtlQ291bnRfXyA9IE1BWF9BUlJBWV9MRU5HVEg7XG4gICAgICB0aGlzLl9fdmlld3NfXyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgbGF6eSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xvbmVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eUNsb25lKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzLl9fd3JhcHBlZF9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2Rpcl9fID0gdGhpcy5fX2Rpcl9fO1xuICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRoaXMuX19maWx0ZXJlZF9fO1xuICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18gPSBjb3B5QXJyYXkodGhpcy5fX2l0ZXJhdGVlc19fKTtcbiAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gdGhpcy5fX3Rha2VDb3VudF9fO1xuICAgICAgcmVzdWx0Ll9fdmlld3NfXyA9IGNvcHlBcnJheSh0aGlzLl9fdmlld3NfXyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgbGF6eSBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgcmV2ZXJzZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVJldmVyc2UoKSB7XG4gICAgICBpZiAodGhpcy5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gPSAtMTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fICo9IC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgdW53cmFwcGVkIHZhbHVlIGZyb20gaXRzIGxhenkgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlWYWx1ZSgpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX193cmFwcGVkX18udmFsdWUoKSxcbiAgICAgICAgICBkaXIgPSB0aGlzLl9fZGlyX18sXG4gICAgICAgICAgaXNBcnIgPSBpc0FycmF5KGFycmF5KSxcbiAgICAgICAgICBpc1JpZ2h0ID0gZGlyIDwgMCxcbiAgICAgICAgICBhcnJMZW5ndGggPSBpc0FyciA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgdmlldyA9IGdldFZpZXcoMCwgYXJyTGVuZ3RoLCB0aGlzLl9fdmlld3NfXyksXG4gICAgICAgICAgc3RhcnQgPSB2aWV3LnN0YXJ0LFxuICAgICAgICAgIGVuZCA9IHZpZXcuZW5kLFxuICAgICAgICAgIGxlbmd0aCA9IGVuZCAtIHN0YXJ0LFxuICAgICAgICAgIGluZGV4ID0gaXNSaWdodCA/IGVuZCA6IChzdGFydCAtIDEpLFxuICAgICAgICAgIGl0ZXJhdGVlcyA9IHRoaXMuX19pdGVyYXRlZXNfXyxcbiAgICAgICAgICBpdGVyTGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgdGFrZUNvdW50ID0gbmF0aXZlTWluKGxlbmd0aCwgdGhpcy5fX3Rha2VDb3VudF9fKTtcblxuICAgICAgaWYgKCFpc0FyciB8fCAoIWlzUmlnaHQgJiYgYXJyTGVuZ3RoID09IGxlbmd0aCAmJiB0YWtlQ291bnQgPT0gbGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZShhcnJheSwgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKGxlbmd0aC0tICYmIHJlc0luZGV4IDwgdGFrZUNvdW50KSB7XG4gICAgICAgIGluZGV4ICs9IGRpcjtcblxuICAgICAgICB2YXIgaXRlckluZGV4ID0gLTEsXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTtcblxuICAgICAgICB3aGlsZSAoKytpdGVySW5kZXggPCBpdGVyTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBpdGVyYXRlZXNbaXRlckluZGV4XSxcbiAgICAgICAgICAgICAgaXRlcmF0ZWUgPSBkYXRhLml0ZXJhdGVlLFxuICAgICAgICAgICAgICB0eXBlID0gZGF0YS50eXBlLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICAgIGlmICh0eXBlID09IExBWllfTUFQX0ZMQUcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29tcHV0ZWQ7XG4gICAgICAgICAgfSBlbHNlIGlmICghY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09IExBWllfRklMVEVSX0ZMQUcpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSBgTGF6eVdyYXBwZXJgIGlzIGFuIGluc3RhbmNlIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXp5V3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgICAgIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuICAgIEhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuICAgIEhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG4gICAgSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbiAgICBIYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuICAgIEhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgZGF0YS5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIC0tdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICsrdGhpcy5zaXplO1xuICAgICAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAgICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAgICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuICAgIE1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGFkZFxuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBhbGlhcyBwdXNoXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgICAgIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICAgICAgfVxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuICAgIFN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG4gICAgU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuICAgIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcbiAgICBTdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG4gICAgU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgICAgICkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtiYXNlUmFuZG9tKDAsIGxlbmd0aCAtIDEpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlU2l6ZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZVNpemUoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpLCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2h1ZmZsZShhcnJheSkge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gICAgICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZ2dyZWdhdGVzIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBvbiBgYWNjdW11bGF0b3JgIHdpdGgga2V5cyB0cmFuc2Zvcm1lZFxuICAgICAqIGJ5IGBpdGVyYXRlZWAgYW5kIHZhbHVlcyBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBZ2dyZWdhdG9yKGNvbGxlY3Rpb24sIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAgICAgKiB2YWx1ZSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXQob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgc2tpcCA9IG9iamVjdCA9PSBudWxsO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gc2tpcCA/IHVuZGVmaW5lZCA6IGdldChvYmplY3QsIHBhdGhzW2luZGV4XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsYW1wYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmIChudW1iZXIgPT09IG51bWJlcikge1xuICAgICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyID49IGxvd2VyID8gbnVtYmVyIDogbG93ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICAgICAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBEZWVwIGNsb25lXG4gICAgICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gICAgICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgICAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQ7XG4gICAgICB9XG4gICAgICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgICAgIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgICAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgICAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICAgICAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gICAgICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXMoc291cmNlKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc1RvYCB3aGljaCBhY2NlcHRzIGBwcm9wc2AgdG8gY2hlY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF0sXG4gICAgICAgICAgICBwcmVkaWNhdGUgPSBzb3VyY2Vba2V5XSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKCh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHx8ICFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kZWxheWAgYW5kIGBfLmRlZmVyYCB3aGljaCBhY2NlcHRzIGBhcmdzYFxuICAgICAqIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURlbGF5KGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIHdhaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kaWZmZXJlbmNlYCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgZXhjbHVkaW5nIG11bHRpcGxlIGFycmF5cyBvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICB2YWx1ZXNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhbHVlcyA9IGFycmF5TWFwKHZhbHVlcywgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcyA9IG5ldyBTZXRDYWNoZSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID09IG51bGwgPyB2YWx1ZSA6IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciB2YWx1ZXNJbmRleCA9IHZhbHVlc0xlbmd0aDtcbiAgICAgICAgICB3aGlsZSAodmFsdWVzSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHZhbHVlcywgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoUmlnaHQgPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duUmlnaHQsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZXZlcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSAhIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5tYXhgIGFuZCBgXy5taW5gIHdoaWNoIGFjY2VwdHMgYVxuICAgICAqIGBjb21wYXJhdG9yYCB0byBkZXRlcm1pbmUgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgIT0gbnVsbCAmJiAoY29tcHV0ZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChjdXJyZW50ID09PSBjdXJyZW50ICYmICFpc1N5bWJvbChjdXJyZW50KSlcbiAgICAgICAgICAgICAgOiBjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHZhciBjb21wdXRlZCA9IGN1cnJlbnQsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbGxgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IGxlbmd0aCkgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbmQgPSBzdGFydCA+IGVuZCA/IDAgOiB0b0xlbmd0aChlbmQpO1xuICAgICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIGFycmF5W3N0YXJ0KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsdGVyYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVkaWNhdGU9aXNGbGF0dGVuYWJsZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICAgICAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGRlcHRoID4gMCAmJiBwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAgICAgKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VGb3JgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllc1xuICAgICAqIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvclJpZ2h0ID0gY3JlYXRlQmFzZUZvcih0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25SaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yUmlnaHQob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZnVuY3Rpb25zYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5IG9mXG4gICAgICogYG9iamVjdGAgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZmlsdGVyZWQgZnJvbSBgcHJvcHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZmlsdGVyLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZ1bmN0aW9ucyhvYmplY3QsIHByb3BzKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICAgICAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gICAgICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ndGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPiBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5SYW5nZWAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gbnVtYmVyID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiBudW1iZXIgPCBuYXRpdmVNYXgoc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmludGVyc2VjdGlvbmAsIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnRlcnNlY3Rpb24oYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheXNbMF0ubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICAgICAgY2FjaGVzID0gQXJyYXkob3RoTGVuZ3RoKSxcbiAgICAgICAgICBtYXhMZW5ndGggPSBJbmZpbml0eSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKG90aEluZGV4LS0pIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW290aEluZGV4XTtcbiAgICAgICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICAgICAgYXJyYXkgPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICAgICAgY2FjaGVzW290aEluZGV4XSA9ICFjb21wYXJhdG9yICYmIChpdGVyYXRlZSB8fCAobGVuZ3RoID49IDEyMCAmJiBhcnJheS5sZW5ndGggPj0gMTIwKSlcbiAgICAgICAgICA/IG5ldyBTZXRDYWNoZShvdGhJbmRleCAmJiBhcnJheSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFycmF5ID0gYXJyYXlzWzBdO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBzZWVuID0gY2FjaGVzWzBdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoIShzZWVuXG4gICAgICAgICAgICAgID8gY2FjaGVIYXMoc2VlbiwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzW290aEluZGV4XTtcbiAgICAgICAgICAgIGlmICghKGNhY2hlXG4gICAgICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgICAgIDogaW5jbHVkZXMoYXJyYXlzW290aEluZGV4XSwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZlcnRgIGFuZCBgXy5pbnZlcnRCeWAgd2hpY2ggaW52ZXJ0c1xuICAgICAqIGBvYmplY3RgIHdpdGggdmFsdWVzIHRyYW5zZm9ybWVkIGJ5IGBpdGVyYXRlZWAgYW5kIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgaXRlcmF0ZWUodmFsdWUpLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZva2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIG1ldGhvZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHZhciBmdW5jID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFwcGx5KGZ1bmMsIG9iamVjdCwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJyYXlCdWZmZXJgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJyYXlCdWZmZXJUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNEYXRlYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0RhdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGRhdGVUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICAgICAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICAgICAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgICAgIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICAgICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgICAgIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgICAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgICAgIG9iaklzT2JqID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICAgICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNSZWdFeHBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1JlZ0V4cCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gcmVnZXhwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgICAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgICAgIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgICAgIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5sdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPCBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICAgICAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIoc2FmZUdldChvYmplY3QsIGtleSksIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBtZXJnZUZ1bmMsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG5cbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lVHlwZWRBcnJheShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdChzcmNWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubnRoYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VOdGgoYXJyYXksIG4pIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuICs9IG4gPCAwID8gbGVuZ3RoIDogMDtcbiAgICAgIHJldHVybiBpc0luZGV4KG4sIGxlbmd0aCkgPyBhcnJheVtuXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5vcmRlckJ5YCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gaXRlcmF0ZWVzIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnMgVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICAgICAgaWYgKGl0ZXJhdGVlcy5sZW5ndGgpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIGlmIChpc0FycmF5KGl0ZXJhdGVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBiYXNlR2V0KHZhbHVlLCBpdGVyYXRlZS5sZW5ndGggPT09IDEgPyBpdGVyYXRlZVswXSA6IGl0ZXJhdGVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpZGVudGl0eV07XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICAgKiBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgc2VlbiA9IGFycmF5O1xuXG4gICAgICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMgPSBjb3B5QXJyYXkodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZyb21JbmRleCA9IDAsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVVuc2V0KGFycmF5LCBpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IHN1cHBvcnQgZm9yIHJldHVybmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlciBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gICAgICByZXR1cm4gbG93ZXIgKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqICh1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICAgICAqIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVwZWF0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmICghc3RyaW5nIHx8IG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYXJyYXlTYW1wbGUodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVTaXplYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4pIHtcbiAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihhcnJheSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSksXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nIHx8IGtleSA9PT0gJ2NvbnN0cnVjdG9yJyB8fCBrZXkgPT09ICdwcm90b3R5cGUnKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuZXN0ZWRba2V5XTtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpXG4gICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0RGF0YSA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhgIHdoaWNoXG4gICAgICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcbiAgICAgICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhCeWAgYW5kIGBfLnNvcnRlZExhc3RJbmRleEJ5YFxuICAgICAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICAgICAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChoaWdoID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgIHZhciB2YWxJc05hTiA9IHZhbHVlICE9PSB2YWx1ZSxcbiAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKSxcbiAgICAgICAgICB2YWxJc1VuZGVmaW5lZCA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIHZhciBtaWQgPSBuYXRpdmVGbG9vcigobG93ICsgaGlnaCkgLyAyKSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUoYXJyYXlbbWlkXSksXG4gICAgICAgICAgICBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gY29tcHV0ZWQgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IGNvbXB1dGVkID09PSBjb21wdXRlZCxcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2woY29tcHV0ZWQpO1xuXG4gICAgICAgIGlmICh2YWxJc05hTikge1xuICAgICAgICAgIHZhciBzZXRMb3cgPSByZXRIaWdoZXN0IHx8IG90aElzUmVmbGV4aXZlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgKHJldEhpZ2hlc3QgfHwgb3RoSXNEZWZpbmVkKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc051bGwpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgIW90aElzTnVsbCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNTeW1ib2wpO1xuICAgICAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXRMb3cpIHtcbiAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNaW4oaGlnaCwgTUFYX0FSUkFZX0lOREVYKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRVbmlxYCBhbmQgYF8uc29ydGVkVW5pcUJ5YCB3aXRob3V0XG4gICAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkVW5pcShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAoIWluZGV4IHx8ICFlcShjb21wdXRlZCwgc2VlbikpIHtcbiAgICAgICAgICB2YXIgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvTnVtYmVyYCB3aGljaCBkb2Vzbid0IGVuc3VyZSBjb3JyZWN0XG4gICAgICogY29udmVyc2lvbnMgb2YgYmluYXJ5LCBoZXhhZGVjaW1hbCwgb3Igb2N0YWwgc3RyaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIHJldHVybiArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gICAgICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHNlZW4gPSByZXN1bHQ7XG5cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICB2YXIgc2V0ID0gaXRlcmF0ZWUgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICAgICAgaWYgKHNldCkge1xuICAgICAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgc2VlbiA9IG5ldyBTZXRDYWNoZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWVuID0gaXRlcmF0ZWUgPyBbXSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgZGVsZXRlIG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICByZXR1cm4gYmFzZVNldChvYmplY3QsIHBhdGgsIHVwZGF0ZXIoYmFzZUdldChvYmplY3QsIHBhdGgpKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRyb3BXaGlsZWAgYW5kIGBfLnRha2VXaGlsZWBcbiAgICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Ryb3BdIFNwZWNpZnkgZHJvcHBpbmcgZWxlbWVudHMgaW5zdGVhZCBvZiB0YWtpbmcgdGhlbS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIGlzRHJvcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG5cbiAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpICYmXG4gICAgICAgIHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHt9XG5cbiAgICAgIHJldHVybiBpc0Ryb3BcbiAgICAgICAgPyBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyAwIDogaW5kZXgpLCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogbGVuZ3RoKSlcbiAgICAgICAgOiBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiAwKSwgKGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHdyYXBwZXJWYWx1ZWAgd2hpY2ggcmV0dXJucyB0aGUgcmVzdWx0IG9mXG4gICAgICogcGVyZm9ybWluZyBhIHNlcXVlbmNlIG9mIGFjdGlvbnMgb24gdGhlIHVud3JhcHBlZCBgdmFsdWVgLCB3aGVyZSBlYWNoXG4gICAgICogc3VjY2Vzc2l2ZSBhY3Rpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhY3Rpb25zIEFjdGlvbnMgdG8gcGVyZm9ybSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXcmFwcGVyVmFsdWUodmFsdWUsIGFjdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVJlZHVjZShhY3Rpb25zLCBmdW5jdGlvbihyZXN1bHQsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsIGFycmF5UHVzaChbcmVzdWx0XSwgYWN0aW9uLmFyZ3MpKTtcbiAgICAgIH0sIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLnhvcmAsIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVhvcihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlVW5pcShhcnJheXNbMF0pIDogW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbaW5kZXhdLFxuICAgICAgICAgICAgb3RoSW5kZXggPSAtMTtcblxuICAgICAgICB3aGlsZSAoKytvdGhJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChvdGhJbmRleCAhPSBpbmRleCkge1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGJhc2VEaWZmZXJlbmNlKHJlc3VsdFtpbmRleF0gfHwgYXJyYXksIGFycmF5c1tvdGhJbmRleF0sIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihyZXN1bHQsIDEpLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnppcE9iamVjdGAgd2hpY2ggYXNzaWducyB2YWx1ZXMgdXNpbmcgYGFzc2lnbkZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduRnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VaaXBPYmplY3QocHJvcHMsIHZhbHVlcywgYXNzaWduRnVuYykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHZhbHNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpbmRleCA8IHZhbHNMZW5ndGggPyB2YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICBhc3NpZ25GdW5jKHJlc3VsdCwgcHJvcHNbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpID8gdmFsdWUgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGBiYXNlUmVzdGAgYWxpYXMgd2hpY2ggY2FuIGJlIHJlcGxhY2VkIHdpdGggYGlkZW50aXR5YCBieSBtb2R1bGVcbiAgICAgKiByZXBsYWNlbWVudCBwbHVnaW5zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgY2FzdFJlc3QgPSBiYXNlUmVzdDtcblxuICAgIC8qKlxuICAgICAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kO1xuICAgICAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYGNsZWFyVGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL2NsZWFyVGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gaWQgVGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0IG9mIHRoZSB0aW1lciB0byBjbGVhci5cbiAgICAgKi9cbiAgICB2YXIgY2xlYXJUaW1lb3V0ID0gY3R4Q2xlYXJUaW1lb3V0IHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcm9vdC5jbGVhclRpbWVvdXQoaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICAgICAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgdmFsdWVzIHRvIHNvcnQgdGhlbSBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICAgICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgICB2YXIgdmFsSXNEZWZpbmVkID0gdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKTtcblxuICAgICAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXIsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgICAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAgICAgKHZhbElzU3ltYm9sICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSAmJiAhb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhdmFsSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sICYmICFvdGhJc1N5bWJvbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCFvdGhJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICAgICAqIGFuZCBzdGFibGUgc29ydCB0aGVtLlxuICAgICAqXG4gICAgICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAgICAgKiBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvciBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyXG4gICAgICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFuW118c3RyaW5nW119IG9yZGVycyBUaGUgb3JkZXIgdG8gc29ydCBieSBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICAgICAgb3RoQ3JpdGVyaWEgPSBvdGhlci5jcml0ZXJpYSxcbiAgICAgICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG9yZGVyID0gb3JkZXJzW2luZGV4XTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAgIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgICAvLyBgb2JqZWN0YCBhbmQgYG90aGVyYC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBhbHNvIGVuc3VyZXMgYSBzdGFibGUgc29ydCBpbiBWOCBhbmQgb3RoZXIgZW5naW5lcy5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLFxuICAgICAqIHBsYWNlaG9sZGVycywgYW5kIHByb3ZpZGVkIGFyZ3VtZW50cyBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVmdExlbmd0aCArIHJhbmdlTGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAocmFuZ2VMZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAgICAgKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0luZGV4ID0gLTEsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIHJpZ2h0SW5kZXggPSAtMSxcbiAgICAgICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkocmFuZ2VMZW5ndGggKyByaWdodExlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCByYW5nZUxlbmd0aCkge1xuICAgICAgICByZXN1bHRbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXQgPSBhcmdzSW5kZXg7XG4gICAgICB3aGlsZSAoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgICAgIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gICAgICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXcpIHtcbiAgICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uZ3JvdXBCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaW5pdGlhbGl6ZXJdIFRoZSBhY2N1bXVsYXRvciBvYmplY3QgaW5pdGlhbGl6ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdG9yKHNldHRlciwgaW5pdGlhbGl6ZXIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUFnZ3JlZ2F0b3IgOiBiYXNlQWdncmVnYXRvcixcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gaW5pdGlhbGl6ZXIgPyBpbml0aWFsaXplcigpIDoge307XG5cbiAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgc2V0dGVyLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGFjY3VtdWxhdG9yKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ubG93ZXJGaXJzdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgU3RyaW5nYCBjYXNlIG1ldGhvZCB0byB1c2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgY2hyID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgICAgIDogc3RyaW5nLmNoYXJBdCgwKTtcblxuICAgICAgICB2YXIgdHJhaWxpbmcgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgICAgICA6IHN0cmluZy5zbGljZSgxKTtcblxuICAgICAgICByZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGluc3RhbmNlIG9mIGBDdG9yYCByZWdhcmRsZXNzIG9mXG4gICAgICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN0b3IoQ3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBVc2UgYSBgc3dpdGNoYCBzdGF0ZW1lbnQgdG8gd29yayB3aXRoIGNsYXNzIGNvbnN0cnVjdG9ycy4gU2VlXG4gICAgICAgIC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtZnVuY3Rpb24tb2JqZWN0cy1jYWxsLXRoaXNhcmd1bWVudC1hcmd1bWVudHNsaXN0XG4gICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEN0b3I7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgY2FzZSA3OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSksXG4gICAgICAgICAgICByZXN1bHQgPSBDdG9yLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcblxuICAgICAgICAvLyBNaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvci5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IHRoaXNCaW5kaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gZW5hYmxlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFyaXR5IFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSkge1xuICAgICAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKTtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaG9sZGVycyA9IChsZW5ndGggPCAzICYmIGFyZ3NbMF0gIT09IHBsYWNlaG9sZGVyICYmIGFyZ3NbbGVuZ3RoIC0gMV0gIT09IHBsYWNlaG9sZGVyKVxuICAgICAgICAgID8gW11cbiAgICAgICAgICA6IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcblxuICAgICAgICBsZW5ndGggLT0gaG9sZGVycy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBhcmdzLCBob2xkZXJzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkgLSBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmluZGAgb3IgYF8uZmluZExhc3RgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5kSW5kZXhGdW5jIFRoZSBmdW5jdGlvbiB0byBmaW5kIHRoZSBjb2xsZWN0aW9uIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZChmaW5kSW5kZXhGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgICAgICBjb2xsZWN0aW9uID0ga2V5cyhjb2xsZWN0aW9uKTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleEZ1bmMoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5mbG93YCBvciBgXy5mbG93UmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oZnVuY3MpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcblxuICAgICAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICAgICAgZnVuY3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jc1tpbmRleF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByZXJlcSAmJiAhd3JhcHBlciAmJiBnZXRGdW5jTmFtZShmdW5jKSA9PSAnd3JhcHBlcicpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuXG4gICAgICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgICAgIGRhdGEgPSBmdW5jTmFtZSA9PSAnd3JhcHBlcicgPyBnZXREYXRhKGZ1bmMpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJlxuICAgICAgICAgICAgICAgIGRhdGFbMV0gPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykgJiZcbiAgICAgICAgICAgICAgICAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gKGZ1bmMubGVuZ3RoID09IDEgJiYgaXNMYXppYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpXG4gICAgICAgICAgICAgIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcblxuICAgICAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgICByZXN1bHQgPSBsZW5ndGggPyBmdW5jc1tpbmRleF0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcblxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jc1tpbmRleF0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLCBwYXJ0aWFsIGFwcGxpY2F0aW9uLCBhbmQgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc1JpZ2h0XSBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZFxuICAgICAqICB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVIeWJyaWQoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNBcnkgPSBiaXRtYXNrICYgV1JBUF9BUllfRkxBRyxcbiAgICAgICAgICBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRyxcbiAgICAgICAgICBpc0N1cnJpZWQgPSBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyksXG4gICAgICAgICAgaXNGbGlwID0gYml0bWFzayAmIFdSQVBfRkxJUF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKSxcbiAgICAgICAgICAgICAgaG9sZGVyc0NvdW50ID0gY291bnRIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHMpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnNDb3VudDtcbiAgICAgICAgaWYgKGlzQ3VycmllZCAmJiBsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB0aGlzQXJnLFxuICAgICAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgICAgIGZuID0gaXNCaW5kS2V5ID8gdGhpc0JpbmRpbmdbZnVuY10gOiBmdW5jO1xuXG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICBpZiAoYXJnUG9zKSB7XG4gICAgICAgICAgYXJncyA9IHJlb3JkZXIoYXJncywgYXJnUG9zKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZsaXAgJiYgbGVuZ3RoID4gMSkge1xuICAgICAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FyeSAmJiBhcnkgPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSB7XG4gICAgICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5pbnZlcnRCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0b0l0ZXJhdGVlIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZlcnRlcihzZXR0ZXIsIHRvSXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIHRvSXRlcmF0ZWUoaXRlcmF0ZWUpLCB7fSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgdXNlZCBmb3IgYHVuZGVmaW5lZGAgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlTWF0aE9wZXJhdGlvbihvcGVyYXRvciwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvU3RyaW5nKG90aGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9OdW1iZXIob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLm92ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcnJheUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgb3ZlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVPdmVyKGFycmF5RnVuYykge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGl0ZXJhdGVlcykge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG4gICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgdmFyIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBhcnJheUZ1bmMoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYCBiYXNlZCBvbiBgbGVuZ3RoYC4gVGhlIGBjaGFyc2Agc3RyaW5nXG4gICAgICogaXMgdHJ1bmNhdGVkIGlmIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBleGNlZWRzIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFkZGluZyhsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBjaGFycyA9IGNoYXJzID09PSB1bmRlZmluZWQgPyAnICcgOiBiYXNlVG9TdHJpbmcoY2hhcnMpO1xuXG4gICAgICB2YXIgY2hhcnNMZW5ndGggPSBjaGFycy5sZW5ndGg7XG4gICAgICBpZiAoY2hhcnNMZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBjaGFyc0xlbmd0aCA/IGJhc2VSZXBlYXQoY2hhcnMsIGxlbmd0aCkgOiBjaGFycztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlUmVwZWF0KGNoYXJzLCBuYXRpdmVDZWlsKGxlbmd0aCAvIHN0cmluZ1NpemUoY2hhcnMpKSk7XG4gICAgICByZXR1cm4gaGFzVW5pY29kZShjaGFycylcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShyZXN1bHQpLCAwLCBsZW5ndGgpLmpvaW4oJycpXG4gICAgICAgIDogcmVzdWx0LnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZ1xuICAgICAqIG9mIGB0aGlzQXJnYCBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVmdExlbmd0aCArIGFyZ3NMZW5ndGgpLFxuICAgICAgICAgICAgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuXG4gICAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChhcmdzTGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1srK2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8ucmFuZ2VgIG9yIGBfLnJhbmdlUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByYW5nZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSYW5nZShmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICAgICAgZW5kID0gc3RlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBzdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkID8gKHN0YXJ0IDwgZW5kID8gMSA6IC0xKSA6IHRvRmluaXRlKHN0ZXApO1xuICAgICAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcmVsYXRpb25hbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZWxhdGlvbmFsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKG9wZXJhdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIGlmICghKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgb3RoZXIgPSB0b051bWJlcihvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBjb250aW51ZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBGdW5jIFRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGBmdW5jYCB3cmFwcGVyLlxuICAgICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQ3VycnkgPSBiaXRtYXNrICYgV1JBUF9DVVJSWV9GTEFHLFxuICAgICAgICAgIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdIb2xkZXJzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogaG9sZGVycyxcbiAgICAgICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBwYXJ0aWFscyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IHBhcnRpYWxzO1xuXG4gICAgICBiaXRtYXNrIHw9IChpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX0ZMQUcgOiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICBiaXRtYXNrICY9IH4oaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHIDogV1JBUF9QQVJUSUFMX0ZMQUcpO1xuXG4gICAgICBpZiAoIShiaXRtYXNrICYgV1JBUF9DVVJSWV9CT1VORF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIG5ld1BhcnRpYWxzLCBuZXdIb2xkZXJzLCBuZXdQYXJ0aWFsc1JpZ2h0LFxuICAgICAgICBuZXdIb2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHdyYXBGdW5jLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgICAgICBzZXREYXRhKHJlc3VsdCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5yb3VuZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgTWF0aGAgbWV0aG9kIHRvIHVzZSB3aGVuIHJvdW5kaW5nLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJvdW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJvdW5kKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gTWF0aFttZXRob2ROYW1lXTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihudW1iZXIsIHByZWNpc2lvbikge1xuICAgICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDAgOiBuYXRpdmVNaW4odG9JbnRlZ2VyKHByZWNpc2lvbiksIDI5Mik7XG4gICAgICAgIGlmIChwcmVjaXNpb24gJiYgbmF0aXZlSXNGaW5pdGUobnVtYmVyKSkge1xuICAgICAgICAgIC8vIFNoaWZ0IHdpdGggZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYXZvaWQgZmxvYXRpbmctcG9pbnQgaXNzdWVzLlxuICAgICAgICAgIC8vIFNlZSBbTUROXShodHRwczovL21kbi5pby9yb3VuZCNFeGFtcGxlcykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICB2YXIgcGFpciA9ICh0b1N0cmluZyhudW1iZXIpICsgJ2UnKS5zcGxpdCgnZScpLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGZ1bmMocGFpclswXSArICdlJyArICgrcGFpclsxXSArIHByZWNpc2lvbikpO1xuXG4gICAgICAgICAgcGFpciA9ICh0b1N0cmluZyh2YWx1ZSkgKyAnZScpLnNwbGl0KCdlJyk7XG4gICAgICAgICAgcmV0dXJuICsocGFpclswXSArICdlJyArICgrcGFpclsxXSAtIHByZWNpc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jKG51bWJlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzZXQgb2JqZWN0IG9mIGB2YWx1ZXNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhZGQgdG8gdGhlIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICAgICAqL1xuICAgIHZhciBjcmVhdGVTZXQgPSAhKFNldCAmJiAoMSAvIHNldFRvQXJyYXkobmV3IFNldChbLC0wXSkpWzFdKSA9PSBJTkZJTklUWSkgPyBub29wIDogZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8udG9QYWlyc2Agb3IgYF8udG9QYWlyc0luYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYWlycyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVUb1BhaXJzKGtleXNGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcob2JqZWN0KTtcbiAgICAgICAgaWYgKHRhZyA9PSBtYXBUYWcpIHtcbiAgICAgICAgICByZXR1cm4gbWFwVG9BcnJheShvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvUGFpcnMob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZVRvUGFpcnMob2JqZWN0LCBrZXlzRnVuYyhvYmplY3QpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZWl0aGVyIGN1cnJpZXMgb3IgaW52b2tlcyBgZnVuY2Agd2l0aCBvcHRpb25hbFxuICAgICAqIGB0aGlzYCBiaW5kaW5nIGFuZCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAgIDEgLSBgXy5iaW5kYFxuICAgICAqICAgIDIgLSBgXy5iaW5kS2V5YFxuICAgICAqICAgIDQgLSBgXy5jdXJyeWAgb3IgYF8uY3VycnlSaWdodGAgb2YgYSBib3VuZCBmdW5jdGlvblxuICAgICAqICAgIDggLSBgXy5jdXJyeWBcbiAgICAgKiAgIDE2IC0gYF8uY3VycnlSaWdodGBcbiAgICAgKiAgIDMyIC0gYF8ucGFydGlhbGBcbiAgICAgKiAgIDY0IC0gYF8ucGFydGlhbFJpZ2h0YFxuICAgICAqICAxMjggLSBgXy5yZWFyZ2BcbiAgICAgKiAgMjU2IC0gYF8uYXJ5YFxuICAgICAqICA1MTIgLSBgXy5mbGlwYFxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAoIWlzQmluZEtleSAmJiB0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXJ0aWFscyA/IHBhcnRpYWxzLmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFyeSA9IGFyeSA9PT0gdW5kZWZpbmVkID8gYXJ5IDogbmF0aXZlTWF4KHRvSW50ZWdlcihhcnkpLCAwKTtcbiAgICAgIGFyaXR5ID0gYXJpdHkgPT09IHVuZGVmaW5lZCA/IGFyaXR5IDogdG9JbnRlZ2VyKGFyaXR5KTtcbiAgICAgIGxlbmd0aCAtPSBob2xkZXJzID8gaG9sZGVycy5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAoYml0bWFzayAmIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsc1JpZ2h0ID0gcGFydGlhbHMsXG4gICAgICAgICAgICBob2xkZXJzUmlnaHQgPSBob2xkZXJzO1xuXG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogZ2V0RGF0YShmdW5jKTtcblxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsXG4gICAgICAgIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgbWVyZ2VEYXRhKG5ld0RhdGEsIGRhdGEpO1xuICAgICAgfVxuICAgICAgZnVuYyA9IG5ld0RhdGFbMF07XG4gICAgICBiaXRtYXNrID0gbmV3RGF0YVsxXTtcbiAgICAgIHRoaXNBcmcgPSBuZXdEYXRhWzJdO1xuICAgICAgcGFydGlhbHMgPSBuZXdEYXRhWzNdO1xuICAgICAgaG9sZGVycyA9IG5ld0RhdGFbNF07XG4gICAgICBhcml0eSA9IG5ld0RhdGFbOV0gPSBuZXdEYXRhWzldID09PSB1bmRlZmluZWRcbiAgICAgICAgPyAoaXNCaW5kS2V5ID8gMCA6IGZ1bmMubGVuZ3RoKVxuICAgICAgICA6IG5hdGl2ZU1heChuZXdEYXRhWzldIC0gbGVuZ3RoLCAwKTtcblxuICAgICAgaWYgKCFhcml0eSAmJiBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyk7XG4gICAgICB9XG4gICAgICBpZiAoIWJpdG1hc2sgfHwgYml0bWFzayA9PSBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKTtcbiAgICAgIH0gZWxzZSBpZiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcgfHwgYml0bWFzayA9PSBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpO1xuICAgICAgfSBlbHNlIGlmICgoYml0bWFzayA9PSBXUkFQX1BBUlRJQUxfRkxBRyB8fCBiaXRtYXNrID09IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHKSkgJiYgIWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlSHlicmlkLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICB2YXIgc2V0dGVyID0gZGF0YSA/IGJhc2VTZXREYXRhIDogc2V0RGF0YTtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcoc2V0dGVyKHJlc3VsdCwgbmV3RGF0YSksIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uYXNzaWduSW5gIHVzZSB0byBhc3NpZ24gcHJvcGVydGllc1xuICAgICAqIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzXG4gICAgICogdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNBc3NpZ25JbihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgIChlcShvYmpWYWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICByZXR1cm4gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c0RlZXBgIHRvIGN1c3RvbWl6ZSBpdHMgYF8ubWVyZ2VgIHVzZSB0byBtZXJnZSBzb3VyY2VcbiAgICAgKiBvYmplY3RzIGludG8gZGVzdGluYXRpb24gb2JqZWN0cyB0aGF0IGFyZSBwYXNzZWQgdGhydS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHBhcmVudCBvYmplY3Qgb2YgYHNyY1ZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c01lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spIHtcbiAgICAgIGlmIChpc09iamVjdChvYmpWYWx1ZSkgJiYgaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG9ialZhbHVlKTtcbiAgICAgICAgYmFzZU1lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwgdW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vbWl0YCB0byBjdXN0b21pemUgaXRzIGBfLmNsb25lRGVlcGAgdXNlIHRvIG9ubHkgY2xvbmUgcGxhaW5cbiAgICAgKiBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW5jbG9uZWQgdmFsdWUgb3IgYHVuZGVmaW5lZGAgdG8gZGVmZXIgY2xvbmluZyB0byBgXy5jbG9uZURlZXBgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbU9taXRDbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsdWUpID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICAgICAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKGFyclN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICAgICAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAgICAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICAgICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAgICAgKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICAgICAgY2FzZSBlcnJvclRhZzpcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gICAgICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgIGlmIChvYmpTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIENvbWJpbmluZyBzZXZlcmFsIHByZWRpY2F0ZXMgdXNpbmcgYF8ub3ZlckV2ZXJ5YCBvciBgXy5vdmVyU29tZWAuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8ub3ZlclNvbWUoW3sgJ2FnZSc6IDM2IH0sIFsnYWdlJywgNDBdXSkpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKi9cbiAgICB2YXIgZmluZCA9IGNyZWF0ZUZpbmQoZmluZEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWNvbGxlY3Rpb24ubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0KFsxLCAyLCAzLCA0XSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDE7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIHZhciBmaW5kTGFzdCA9IGNyZWF0ZUZpbmQoZmluZExhc3RJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmxhdHRlbmVkIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aHJ1IGBpdGVyYXRlZWAgYW5kIGZsYXR0ZW5pbmcgdGhlIG1hcHBlZCByZXN1bHRzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW24sIG5dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZWVwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVlcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIElORklOSVRZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZXB0aChbMSwgMl0sIGR1cGxpY2F0ZSwgMik7XG4gICAgICogLy8gPT4gW1sxLCAxXSwgWzIsIDJdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZXB0aChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgZGVwdGgpIHtcbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2UgYF8uZm9ySW5gXG4gICAgICogb3IgYF8uZm9yT3duYCBmb3Igb2JqZWN0IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBlYWNoXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2ggOiBiYXNlRWFjaDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JFYWNoYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBhbGlhcyBlYWNoUmlnaHRcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2hSaWdodChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMmAgdGhlbiBgMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaFJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2hSaWdodCA6IGJhc2VFYWNoUmlnaHQ7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgb3JkZXIgb2YgZ3JvdXBlZCB2YWx1ZXNcbiAgICAgKiBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIGBjb2xsZWN0aW9uYC4gVGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiB2YWx1ZSBvZiBlYWNoIGtleSBpcyBhbiBhcnJheSBvZiBlbGVtZW50cyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGVcbiAgICAgKiBrZXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmdyb3VwQnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogWzQuMl0sICc2JzogWzYuMSwgNi4zXSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmdyb3VwQnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogWydvbmUnLCAndHdvJ10sICc1JzogWyd0aHJlZSddIH1cbiAgICAgKi9cbiAgICB2YXIgZ3JvdXBCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNvbGxlY3Rpb25gLiBJZiBgY29sbGVjdGlvbmAgaXMgYSBzdHJpbmcsIGl0J3NcbiAgICAgKiBjaGVja2VkIGZvciBhIHN1YnN0cmluZyBvZiBgdmFsdWVgLCBvdGhlcndpc2VcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGlzIHVzZWQgZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzXG4gICAgICogdGhlIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoeyAnYSc6IDEsICdiJzogMiB9LCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKCdhYmNkJywgJ2JjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluY2x1ZGVzKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgICBjb2xsZWN0aW9uID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uIDogdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgZnJvbUluZGV4ID0gKGZyb21JbmRleCAmJiAhZ3VhcmQpID8gdG9JbnRlZ2VyKGZyb21JbmRleCkgOiAwO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgICAgICBmcm9tSW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgZnJvbUluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKVxuICAgICAgICA/IChmcm9tSW5kZXggPD0gbGVuZ3RoICYmIGNvbGxlY3Rpb24uaW5kZXhPZih2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKVxuICAgICAgICA6ICghIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAsIHJldHVybmluZ1xuICAgICAqIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mIGVhY2ggaW52b2tlZCBtZXRob2QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAqIGFyZSBwcm92aWRlZCB0byBlYWNoIGludm9rZWQgbWV0aG9kLiBJZiBgcGF0aGAgaXMgYSBmdW5jdGlvbiwgaXQncyBpbnZva2VkXG4gICAgICogZm9yLCBhbmQgYHRoaXNgIGJvdW5kIHRvLCBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbnxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2Ugb3JcbiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBlYWNoIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoW1s1LCAxLCA3XSwgWzMsIDIsIDFdXSwgJ3NvcnQnKTtcbiAgICAgKiAvLyA9PiBbWzEsIDUsIDddLCBbMSwgMiwgM11dXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbMTIzLCA0NTZdLCBTdHJpbmcucHJvdG90eXBlLnNwbGl0LCAnJyk7XG4gICAgICogLy8gPT4gW1snMScsICcyJywgJzMnXSwgWyc0JywgJzUnLCAnNiddXVxuICAgICAqL1xuICAgIHZhciBpbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBwYXRoLCBhcmdzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc0Z1bmMgPSB0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGlzRnVuYyA/IGFwcGx5KHBhdGgsIHZhbHVlLCBhcmdzKSA6IGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIGxhc3QgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbXG4gICAgICogICB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSxcbiAgICAgKiAgIHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgZnVuY3Rpb24obykge1xuICAgICAqICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoby5jb2RlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdkJzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCAnZGlyJyk7XG4gICAgICogLy8gPT4geyAnbGVmdCc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAncmlnaHQnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKi9cbiAgICB2YXIga2V5QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFyeWAsIGBjaHVua2AsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCxcbiAgICAgKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAgICAgKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWFwKFs0LCA4XSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XVxuICAgICAqXG4gICAgICogXy5tYXAoeyAnYSc6IDQsICdiJzogOCB9LCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0QnlgIGV4Y2VwdCB0aGF0IGl0IGFsbG93cyBzcGVjaWZ5aW5nIHRoZSBzb3J0XG4gICAgICogb3JkZXJzIG9mIHRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS4gSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXNcbiAgICAgKiBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLCBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvclxuICAgICAqIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXIgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5W118RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3JkZXJzXSBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gU29ydCBieSBgdXNlcmAgaW4gYXNjZW5kaW5nIG9yZGVyIGFuZCBieSBgYWdlYCBpbiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqIF8ub3JkZXJCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddLCBbJ2FzYycsICdkZXNjJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDBdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMsIGd1YXJkKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBcnJheShpdGVyYXRlZXMpKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGl0ZXJhdGVlcyA9PSBudWxsID8gW10gOiBbaXRlcmF0ZWVzXTtcbiAgICAgIH1cbiAgICAgIG9yZGVycyA9IGd1YXJkID8gdW5kZWZpbmVkIDogb3JkZXJzO1xuICAgICAgaWYgKCFpc0FycmF5KG9yZGVycykpIHtcbiAgICAgICAgb3JkZXJzID0gb3JkZXJzID09IG51bGwgPyBbXSA6IFtvcmRlcnNdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gdHdvIGdyb3VwcywgdGhlIGZpcnN0IG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLCB0aGUgc2Vjb25kIG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkgZm9yLiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1sncGViYmxlcyddLCBbJ2Jhcm5leScsICdmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAncGViYmxlcyddLCBbJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICovXG4gICAgdmFyIHBhcnRpdGlvbiA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5ID8gMCA6IDFdLnB1c2godmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gW1tdLCBbXV07IH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVkdWNlcyBgY29sbGVjdGlvbmAgdG8gYSB2YWx1ZSB3aGljaCBpcyB0aGUgYWNjdW11bGF0ZWQgcmVzdWx0IG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYCwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy4gSWYgYGFjY3VtdWxhdG9yYFxuICAgICAqIGlzIG5vdCBnaXZlbiwgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIGlzIHVzZWQgYXMgdGhlIGluaXRpYWxcbiAgICAgKiB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czpcbiAgICAgKiAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8ucmVkdWNlYCwgYF8ucmVkdWNlUmlnaHRgLCBhbmQgYF8udHJhbnNmb3JtYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhc3NpZ25gLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGluY2x1ZGVzYCwgYG1lcmdlYCwgYG9yZGVyQnlgLFxuICAgICAqIGFuZCBgc29ydEJ5YFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZWR1Y2UoWzEsIDJdLCBmdW5jdGlvbihzdW0sIG4pIHtcbiAgICAgKiAgIHJldHVybiBzdW0gKyBuO1xuICAgICAqIH0sIDApO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogICByZXR1cm4gcmVzdWx0O1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2UgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJlZHVjZWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1swLCAxXSwgWzIsIDNdLCBbNCwgNV1dO1xuICAgICAqXG4gICAgICogXy5yZWR1Y2VSaWdodChhcnJheSwgZnVuY3Rpb24oZmxhdHRlbmVkLCBvdGhlcikge1xuICAgICAqICAgcmV0dXJuIGZsYXR0ZW5lZC5jb25jYXQob3RoZXIpO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgNSwgMiwgMywgMCwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2VSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlUmlnaHQgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5maWx0ZXJgOyB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aGF0IGBwcmVkaWNhdGVgIGRvZXMgKipub3QqKiByZXR1cm4gdHJ1dGh5IGZvci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8uZmlsdGVyXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlamVjdChjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHJhbmRvbSBlbGVtZW50IGZyb20gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGUgOiBiYXNlU2FtcGxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBgbmAgcmFuZG9tIGVsZW1lbnRzIGF0IHVuaXF1ZSBrZXlzIGZyb20gYGNvbGxlY3Rpb25gIHVwIHRvIHRoZVxuICAgICAqIHNpemUgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszLCAxXVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgNCk7XG4gICAgICogLy8gPT4gWzIsIDMsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGVTaXplIDogYmFzZVNhbXBsZVNpemU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHNodWZmbGVkIHZhbHVlcywgdXNpbmcgYSB2ZXJzaW9uIG9mIHRoZVxuICAgICAqIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyLVlhdGVzX3NodWZmbGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNodWZmbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiBbNCwgMSwgMywgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2h1ZmZsZSA6IGJhc2VTaHVmZmxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc2l6ZSBvZiBgY29sbGVjdGlvbmAgYnkgcmV0dXJuaW5nIGl0cyBsZW5ndGggZm9yIGFycmF5LWxpa2VcbiAgICAgKiB2YWx1ZXMgb3IgdGhlIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBmb3Igb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29sbGVjdGlvbiBzaXplLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNpemUoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnNpemUoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiA3XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKSA/IHN0cmluZ1NpemUoY29sbGVjdGlvbikgOiBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcoY29sbGVjdGlvbik7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uLnNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUtleXMoY29sbGVjdGlvbikubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbnkqKiBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29tZShbbnVsbCwgMCwgJ3llcycsIGZhbHNlXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNvbWUgOiBiYXNlU29tZTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzLCBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyIGJ5IHRoZSByZXN1bHRzIG9mXG4gICAgICogcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uIHRocnUgZWFjaCBpdGVyYXRlZS4gVGhpcyBtZXRob2RcbiAgICAgKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIHNvcnQgb3JkZXIgb2ZcbiAgICAgKiBlcXVhbCBlbGVtZW50cy4gVGhlIGl0ZXJhdGVlcyBhcmUgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiAzMCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgW2Z1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlcjsgfV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgMzBdXVxuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzRdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgMzBdLCBbJ2ZyZWQnLCA0OF1dXG4gICAgICovXG4gICAgdmFyIHNvcnRCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcykge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPiAxICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID4gMiAmJiBpc0l0ZXJhdGVlQ2FsbChpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSwgaXRlcmF0ZWVzWzJdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaXRlcmF0ZWVzWzBdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBiYXNlRmxhdHRlbihpdGVyYXRlZXMsIDEpLCBbXSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAgICAgKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBEYXRlXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICAgICAqIH0sIF8ubm93KCkpO1xuICAgICAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gICAgICovXG4gICAgdmFyIG5vdyA9IGN0eE5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByb290LkRhdGUubm93KCk7XG4gICAgfTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5iZWZvcmVgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogYGZ1bmNgIG9uY2UgaXQncyBjYWxsZWQgYG5gIG9yIG1vcmUgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGJlZm9yZSBgZnVuY2AgaXMgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F2ZXMgPSBbJ3Byb2ZpbGUnLCAnc2V0dGluZ3MnXTtcbiAgICAgKlxuICAgICAqIHZhciBkb25lID0gXy5hZnRlcihzYXZlcy5sZW5ndGgsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ2RvbmUgc2F2aW5nIScpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHNhdmVzLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICogICBhc3luY1NhdmUoeyAndHlwZSc6IHR5cGUsICdjb21wbGV0ZSc6IGRvbmUgfSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnZG9uZSBzYXZpbmchJyBhZnRlciB0aGUgdHdvIGFzeW5jIHNhdmVzIGhhdmUgY29tcGxldGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyKG4sIGZ1bmMpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPCAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB1cCB0byBgbmAgYXJndW1lbnRzLFxuICAgICAqIGlnbm9yaW5nIGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IGNhcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy5hcnkocGFyc2VJbnQsIDEpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJ5KGZ1bmMsIG4sIGd1YXJkKSB7XG4gICAgICBuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBuO1xuICAgICAgbiA9IChmdW5jICYmIG4gPT0gbnVsbCkgPyBmdW5jLmxlbmd0aCA6IG47XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0FSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzXG4gICAgICogb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoaWxlIGl0J3MgY2FsbGVkIGxlc3MgdGhhbiBgbmAgdGltZXMuIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYXQgd2hpY2ggYGZ1bmNgIGlzIG5vIGxvbmdlciBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmJlZm9yZSg1LCBhZGRDb250YWN0VG9MaXN0KSk7XG4gICAgICogLy8gPT4gQWxsb3dzIGFkZGluZyB1cCB0byA0IGNvbnRhY3RzIHRvIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJlZm9yZShuLCBmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA+IDApIHtcbiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4gPD0gMSkge1xuICAgICAgICAgIGZ1bmMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgXG4gICAgICogYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIG5hdGl2ZSBgRnVuY3Rpb24jYmluZGAsIHRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYmluZC5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kKSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYG9iamVjdFtrZXldYCB3aXRoIGBwYXJ0aWFsc2BcbiAgICAgKiBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgXy5iaW5kYCBieSBhbGxvd2luZyBib3VuZCBmdW5jdGlvbnMgdG8gcmVmZXJlbmNlXG4gICAgICogbWV0aG9kcyB0aGF0IG1heSBiZSByZWRlZmluZWQgb3IgZG9uJ3QgeWV0IGV4aXN0LiBTZWVcbiAgICAgKiBbUGV0ZXIgTWljaGF1eCdzIGFydGljbGVdKGh0dHA6Ly9wZXRlci5taWNoYXV4LmNhL2FydGljbGVzL2xhenktZnVuY3Rpb24tZGVmaW5pdGlvbi1wYXR0ZXJuKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZEtleS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludm9rZSB0aGUgbWV0aG9kIG9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ3VzZXInOiAnZnJlZCcsXG4gICAgICogICAnZ3JlZXQnOiBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogb2JqZWN0LmdyZWV0ID0gZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAneWEgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZEtleSA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwga2V5LCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmRLZXkpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGtleSwgYml0bWFzaywgb2JqZWN0LCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGFyZ3VtZW50cyBvZiBgZnVuY2AgYW5kIGVpdGhlciBpbnZva2VzXG4gICAgICogYGZ1bmNgIHJldHVybmluZyBpdHMgcmVzdWx0LCBpZiBhdCBsZWFzdCBgYXJpdHlgIG51bWJlciBvZiBhcmd1bWVudHMgaGF2ZVxuICAgICAqIGJlZW4gcHJvdmlkZWQsIG9yIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGhlIHJlbWFpbmluZyBgZnVuY2BcbiAgICAgKiBhcmd1bWVudHMsIGFuZCBzbyBvbi4gVGhlIGFyaXR5IG9mIGBmdW5jYCBtYXkgYmUgc3BlY2lmaWVkIGlmIGBmdW5jLmxlbmd0aGBcbiAgICAgKiBpcyBub3Qgc3VmZmljaWVudC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgxKSgyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDEpKF8sIDMpKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnkucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY3VycnlgIGV4Y2VwdCB0aGF0IGFyZ3VtZW50cyBhcmUgYXBwbGllZCB0byBgZnVuY2BcbiAgICAgKiBpbiB0aGUgbWFubmVyIG9mIGBfLnBhcnRpYWxSaWdodGAgaW5zdGVhZCBvZiBgXy5wYXJ0aWFsYC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeVJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5UmlnaHQoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMykoMikoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDIsIDMpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgzKSgxLCBfKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeVJpZ2h0KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnlSaWdodC5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gICAgICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gICAgICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICAgICAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICAgICAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICAgICAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAgICAgKiBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAgICAgKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICAgICAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICAgICAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAgICAgKiB9KSk7XG4gICAgICpcbiAgICAgKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICAgICAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICAgICAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAgICAgKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsYXN0QXJncyxcbiAgICAgICAgICBsYXN0VGhpcyxcbiAgICAgICAgICBtYXhXYWl0LFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICB0aW1lcklkLFxuICAgICAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICAgICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICAgICAgcmV0dXJuIG1heGluZ1xuICAgICAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgICAgICA6IHRpbWVXYWl0aW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgICAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgICAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgICAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgICAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgICAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgICAgIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICAgICAgcmV0dXJuIGRlYm91bmNlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZlcnMgaW52b2tpbmcgdGhlIGBmdW5jYCB1bnRpbCB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhcyBjbGVhcmVkLiBBbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgJ2RlZmVycmVkJyk7XG4gICAgICogLy8gPT4gTG9ncyAnZGVmZXJyZWQnIGFmdGVyIG9uZSBtaWxsaXNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVmZXIgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIDEsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyBgZnVuY2AgYWZ0ZXIgYHdhaXRgIG1pbGxpc2Vjb25kcy4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVsYXkoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgMTAwMCwgJ2xhdGVyJyk7XG4gICAgICogLy8gPT4gTG9ncyAnbGF0ZXInIGFmdGVyIG9uZSBzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlbGF5ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCB0b051bWJlcih3YWl0KSB8fCAwLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIHJldmVyc2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZmxpcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsaXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmbGlwcGVkID0gXy5mbGlwKGZ1bmN0aW9uKCkge1xuICAgICAqICAgcmV0dXJuIF8udG9BcnJheShhcmd1bWVudHMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogZmxpcHBlZCgnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+IFsnZCcsICdjJywgJ2InLCAnYSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxpcChmdW5jKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0ZMSVBfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAgICAgKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gICAgICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gICAgICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAgICAgKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAgICAgKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICAgICAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gICAgICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAgICAgKlxuICAgICAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogdmFsdWVzKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKlxuICAgICAqIG9iamVjdC5hID0gMjtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICAgICAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICpcbiAgICAgKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICAgICAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgICAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gICAgICByZXR1cm4gbWVtb2l6ZWQ7XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG4gICAgbWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbmVnYXRlcyB0aGUgcmVzdWx0IG9mIHRoZSBwcmVkaWNhdGUgYGZ1bmNgLiBUaGVcbiAgICAgKiBgZnVuY2AgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBwcmVkaWNhdGUgdG8gbmVnYXRlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG5lZ2F0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzRXZlbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbMSwgMiwgMywgNCwgNSwgNl0sIF8ubmVnYXRlKGlzRXZlbikpO1xuICAgICAqIC8vID0+IFsxLCAzLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5lZ2F0ZShwcmVkaWNhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXMgcmVzdHJpY3RlZCB0byBpbnZva2luZyBgZnVuY2Agb25jZS4gUmVwZWF0IGNhbGxzXG4gICAgICogdG8gdGhlIGZ1bmN0aW9uIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGludm9jYXRpb24uIFRoZSBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgaW5pdGlhbGl6ZSA9IF8ub25jZShjcmVhdGVBcHBsaWNhdGlvbik7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiAvLyA9PiBgY3JlYXRlQXBwbGljYXRpb25gIGlzIGludm9rZWQgb25jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uY2UoZnVuYykge1xuICAgICAgcmV0dXJuIGJlZm9yZSgyLCBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudHMgdHJhbnNmb3JtZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbdHJhbnNmb3Jtcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm1zLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkb3VibGVkKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyQXJncyhmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4gW3gsIHldO1xuICAgICAqIH0sIFtzcXVhcmUsIGRvdWJsZWRdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoOSwgMyk7XG4gICAgICogLy8gPT4gWzgxLCA2XVxuICAgICAqXG4gICAgICogZnVuYygxMCwgNSk7XG4gICAgICogLy8gPT4gWzEwMCwgMTBdXG4gICAgICovXG4gICAgdmFyIG92ZXJBcmdzID0gY2FzdFJlc3QoZnVuY3Rpb24oZnVuYywgdHJhbnNmb3Jtcykge1xuICAgICAgdHJhbnNmb3JtcyA9ICh0cmFuc2Zvcm1zLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodHJhbnNmb3Jtc1swXSkpXG4gICAgICAgID8gYXJyYXlNYXAodHJhbnNmb3Jtc1swXSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKVxuICAgICAgICA6IGFycmF5TWFwKGJhc2VGbGF0dGVuKHRyYW5zZm9ybXMsIDEpLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgZnVuY3NMZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGFyZ3MubGVuZ3RoLCBmdW5jc0xlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IHRyYW5zZm9ybXNbaW5kZXhdLmNhbGwodGhpcywgYXJnc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGVcbiAgICAgKiBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYmluZGAgZXhjZXB0IGl0IGRvZXMgKipub3QqKlxuICAgICAqIGFsdGVyIHRoZSBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsKGdyZWV0LCAnaGVsbG8nKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsKGdyZWV0LCBfLCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wYXJ0aWFsYCBleGNlcHQgdGhhdCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHNcbiAgICAgKiBhcmUgYXBwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsUmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdoZWxsbycsIF8pO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbFJpZ2h0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsUmlnaHQpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIGFycmFuZ2VkIGFjY29yZGluZ1xuICAgICAqIHRvIHRoZSBzcGVjaWZpZWQgYGluZGV4ZXNgIHdoZXJlIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgZmlyc3QgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgc2Vjb25kIGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVhcnJhbmdlIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJndW1lbnQgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHJlYXJnZWQgPSBfLnJlYXJnKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfSwgWzIsIDAsIDFdKTtcbiAgICAgKlxuICAgICAqIHJlYXJnZWQoJ2InLCAnYycsICdhJylcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICB2YXIgcmVhcmcgPSBmbGF0UmVzdChmdW5jdGlvbihmdW5jLCBpbmRleGVzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1JFQVJHX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGluZGV4ZXMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiBhbmQgYXJndW1lbnRzIGZyb20gYHN0YXJ0YCBhbmQgYmV5b25kIHByb3ZpZGVkIGFzXG4gICAgICogYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3Jlc3QgcGFyYW1ldGVyXShodHRwczovL21kbi5pby9yZXN0X3BhcmFtZXRlcnMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnJlc3QoZnVuY3Rpb24od2hhdCwgbmFtZXMpIHtcbiAgICAgKiAgIHJldHVybiB3aGF0ICsgJyAnICsgXy5pbml0aWFsKG5hbWVzKS5qb2luKCcsICcpICtcbiAgICAgKiAgICAgKF8uc2l6ZShuYW1lcykgPiAxID8gJywgJiAnIDogJycpICsgXy5sYXN0KG5hbWVzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheSgnaGVsbG8nLCAnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcycpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09PSB1bmRlZmluZWQgPyBzdGFydCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuYywgc3RhcnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZSBmdW5jdGlvbiBhbmQgYW4gYXJyYXkgb2YgYXJndW1lbnRzIG11Y2ggbGlrZVxuICAgICAqIFtgRnVuY3Rpb24jYXBwbHlgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3ByZWFkIG9wZXJhdG9yXShodHRwczovL21kbi5pby9zcHJlYWRfb3BlcmF0b3IpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gc3ByZWFkIGFyZ3VtZW50cyBvdmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzcHJlYWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnNwcmVhZChmdW5jdGlvbih3aG8sIHdoYXQpIHtcbiAgICAgKiAgIHJldHVybiB3aG8gKyAnIHNheXMgJyArIHdoYXQ7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoWydmcmVkJywgJ2hlbGxvJ10pO1xuICAgICAqIC8vID0+ICdmcmVkIHNheXMgaGVsbG8nXG4gICAgICpcbiAgICAgKiB2YXIgbnVtYmVycyA9IFByb21pc2UuYWxsKFtcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSg0MCksXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoMzYpXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBudW1iZXJzLnRoZW4oXy5zcHJlYWQoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIHggKyB5O1xuICAgICAqIH0pKTtcbiAgICAgKiAvLyA9PiBhIFByb21pc2Ugb2YgNzZcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcHJlYWQoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKHN0YXJ0KSwgMCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcmdzW3N0YXJ0XSxcbiAgICAgICAgICAgIG90aGVyQXJncyA9IGNhc3RTbGljZShhcmdzLCAwLCBzdGFydCk7XG5cbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgYXJyYXlQdXNoKG90aGVyQXJncywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICAgICAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gICAgICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICAgICAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICAgICAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAgICAgKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gICAgICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICAgICAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICAgICAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAgICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB1cCB0byBvbmUgYXJndW1lbnQsIGlnbm9yaW5nIGFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLnVuYXJ5KHBhcnNlSW50KSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuYXJ5KGZ1bmMpIHtcbiAgICAgIHJldHVybiBhcnkoZnVuYywgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYHZhbHVlYCB0byBgd3JhcHBlcmAgYXMgaXRzIGZpcnN0XG4gICAgICogYXJndW1lbnQuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZnVuY3Rpb24gYXJlIGFwcGVuZGVkXG4gICAgICogdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIGB3cmFwcGVyYC4gVGhlIHdyYXBwZXIgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbd3JhcHBlcj1pZGVudGl0eV0gVGhlIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBwID0gXy53cmFwKF8uZXNjYXBlLCBmdW5jdGlvbihmdW5jLCB0ZXh0KSB7XG4gICAgICogICByZXR1cm4gJzxwPicgKyBmdW5jKHRleHQpICsgJzwvcD4nO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogcCgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnPHA+ZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzPC9wPidcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGFydGlhbChjYXN0RnVuY3Rpb24od3JhcHBlciksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIGFzIGFuIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KDEpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW251bGxdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWRdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICogY29uc29sZS5sb2coXy5jYXN0QXJyYXkoYXJyYXkpID09PSBhcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheSgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMF07XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICAgICAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cHM6Ly9tZG4uaW8vU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG0pXG4gICAgICogYW5kIHN1cHBvcnRzIGNsb25pbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucywgZGF0ZSBvYmplY3RzLCBtYXBzLFxuICAgICAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICAgICAqIGFycmF5cy4gVGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgY2xvbmVkXG4gICAgICogYXMgcGxhaW4gb2JqZWN0cy4gQW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkIGZvciB1bmNsb25lYWJsZSB2YWx1ZXMgc3VjaFxuICAgICAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhzaGFsbG93WzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGNsb25lZCB2YWx1ZS4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsXG4gICAgICogY2xvbmluZyBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB1cCB0byBmb3VyIGFyZ3VtZW50czsgKHZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZVdpdGhgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lRGVlcFdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG9iamVjdGAgY29uZm9ybXMgdG8gYHNvdXJjZWAgYnkgaW52b2tpbmcgdGhlIHByZWRpY2F0ZVxuICAgICAqIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDI7IH0gfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtc1RvKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlID09IG51bGwgfHwgYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcShOYU4sIE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZ3QoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3QgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VHdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID49IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlCdWZmZXJgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXlCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXlCdWZmZXIgPSBub2RlSXNBcnJheUJ1ZmZlciA/IGJhc2VVbmFyeShub2RlSXNBcnJheUJ1ZmZlcikgOiBiYXNlSXNBcnJheUJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAgICAgKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gICAgICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICAgICAqIGlzIGFuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGJvb2xlYW4gcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBib29sZWFuLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKGZhbHNlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZSB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBib29sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRGF0ZWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZSgnTW9uIEFwcmlsIDIzIDIwMTInKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0RhdGUgPSBub2RlSXNEYXRlID8gYmFzZVVuYXJ5KG5vZGVJc0RhdGUpIDogYmFzZUlzRGF0ZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KCc8Ym9keT4nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDEgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IG9iamVjdCwgY29sbGVjdGlvbiwgbWFwLCBvciBzZXQuXG4gICAgICpcbiAgICAgKiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBubyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWRcbiAgICAgKiBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQXJyYXktbGlrZSB2YWx1ZXMgc3VjaCBhcyBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIGJ1ZmZlcnMsIHN0cmluZ3MsIG9yXG4gICAgICogalF1ZXJ5LWxpa2UgY29sbGVjdGlvbnMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYGxlbmd0aGAgb2YgYDBgLlxuICAgICAqIFNpbWlsYXJseSwgbWFwcyBhbmQgc2V0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgc2l6ZWAgb2YgYDBgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHRydWUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSgxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3BsaWNlID09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgIGlzQnVmZmVyKHZhbHVlKSB8fCBpc1R5cGVkQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5zaXplO1xuICAgICAgfVxuICAgICAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gIWJhc2VLZXlzKHZhbHVlKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAgICAgKiBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICAgICAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAgICAgKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICAgICAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICAgICAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIG9iamVjdCA9PT0gb3RoZXI7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0VxdWFsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggdXAgdG9cbiAgICAgKiBzaXggYXJndW1lbnRzOiAob2JqVmFsdWUsIG90aFZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKG90aFZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2hlbGxvJywgJ2dvb2RieWUnXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBbJ2hpJywgJ2dvb2RieWUnXTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbFdpdGgoYXJyYXksIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbFdpdGgodmFsdWUsIG90aGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIodmFsdWUsIG90aGVyKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgdW5kZWZpbmVkLCBjdXN0b21pemVyKSA6ICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGBFcnJvcmAsIGBFdmFsRXJyb3JgLCBgUmFuZ2VFcnJvcmAsIGBSZWZlcmVuY2VFcnJvcmAsXG4gICAgICogYFN5bnRheEVycm9yYCwgYFR5cGVFcnJvcmAsIG9yIGBVUklFcnJvcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBlcnJvciBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKG5ldyBFcnJvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKEVycm9yKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXJyb3IodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGVycm9yVGFnIHx8IHRhZyA9PSBkb21FeGNUYWcgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZS5tZXNzYWdlID09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZS5uYW1lID09ICdzdHJpbmcnICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgcHJpbWl0aXZlIG51bWJlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzRmluaXRlYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzRmluaXRlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgbmF0aXZlSXNGaW5pdGUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oXyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAgICAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0ludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09IHRvSW50ZWdlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICAgICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICAgICAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAgICAgKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICAgICAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2Uoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYG9iamVjdGAgYW5kIGBzb3VyY2VgIHRvXG4gICAgICogZGV0ZXJtaW5lIGlmIGBvYmplY3RgIGNvbnRhaW5zIGVxdWl2YWxlbnQgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8ubWF0Y2hlc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2gob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNNYXRjaGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIGZpdmVcbiAgICAgKiBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGluZGV4fGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKHNyY1ZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnZ3JlZXRpbmcnOiAnaGVsbG8nIH07XG4gICAgICogdmFyIHNvdXJjZSA9IHsgJ2dyZWV0aW5nJzogJ2hpJyB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgTmFOYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzTmFOKSBhbmQgaXMgbm90IHRoZSBzYW1lIGFzXG4gICAgICogZ2xvYmFsIFtgaXNOYU5gXShodHRwczovL21kbi5pby9pc05hTikgd2hpY2ggcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogYHVuZGVmaW5lZGAgYW5kIG90aGVyIG5vbi1udW1iZXIgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTihuZXcgTnVtYmVyKE5hTikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgICAgIC8vIEFuIGBOYU5gIHByaW1pdGl2ZSBpcyB0aGUgb25seSB2YWx1ZSB0aGF0IGlzIG5vdCBlcXVhbCB0byBpdHNlbGYuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBgdG9TdHJpbmdUYWdgIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGVycm9ycyB3aXRoIHNvbWVcbiAgICAgIC8vIEFjdGl2ZVggb2JqZWN0cyBpbiBJRS5cbiAgICAgIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgdmFsdWUgIT0gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJpc3RpbmUgbmF0aXZlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGNhbid0IHJlbGlhYmx5IGRldGVjdCBuYXRpdmUgZnVuY3Rpb25zIGluIHRoZSBwcmVzZW5jZVxuICAgICAqIG9mIHRoZSBjb3JlLWpzIHBhY2thZ2UgYmVjYXVzZSBjb3JlLWpzIGNpcmN1bXZlbnRzIHRoaXMga2luZCBvZiBkZXRlY3Rpb24uXG4gICAgICogRGVzcGl0ZSBtdWx0aXBsZSByZXF1ZXN0cywgdGhlIGNvcmUtanMgbWFpbnRhaW5lciBoYXMgbWFkZSBpdCBjbGVhcjogYW55XG4gICAgICogYXR0ZW1wdCB0byBmaXggdGhlIGRldGVjdGlvbiB3aWxsIGJlIG9ic3RydWN0ZWQuIEFzIGEgcmVzdWx0LCB3ZSdyZSBsZWZ0XG4gICAgICogd2l0aCBsaXR0bGUgY2hvaWNlIGJ1dCB0byB0aHJvdyBhbiBlcnJvci4gVW5mb3J0dW5hdGVseSwgdGhpcyBhbHNvIGFmZmVjdHNcbiAgICAgKiBwYWNrYWdlcywgbGlrZSBbYmFiZWwtcG9seWZpbGxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2JhYmVsLXBvbHlmaWxsKSxcbiAgICAgKiB3aGljaCByZWx5IG9uIGNvcmUtanMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoXyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKGlzTWFza2FibGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihDT1JFX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgbnVsbGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bGwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bGwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbnVsbGlzaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05pbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBOdW1iZXJgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmVcbiAgICAgKiBjbGFzc2lmaWVkIGFzIG51bWJlcnMsIHVzZSB0aGUgYF8uaXNGaW5pdGVgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IG51bWJlclRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICAgICAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjguMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgICAgIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gICAgICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgICAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgUmVnRXhwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoL2FiYy8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoJy9hYmMvJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNSZWdFeHAgPSBub2RlSXNSZWdFeHAgPyBiYXNlVW5hcnkobm9kZUlzUmVnRXhwKSA6IGJhc2VJc1JlZ0V4cDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLiBBbiBpbnRlZ2VyIGlzIHNhZmUgaWYgaXQncyBhbiBJRUVFLTc1NFxuICAgICAqIGRvdWJsZSBwcmVjaXNpb24gbnVtYmVyIHdoaWNoIGlzbid0IHRoZSByZXN1bHQgb2YgYSByb3VuZGVkIHVuc2FmZSBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNTYWZlSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc1NhZmVJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJbnRlZ2VyKHZhbHVlKSAmJiB2YWx1ZSA+PSAtTUFYX1NBRkVfSU5URUdFUiAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHdlYWtNYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSB3ZWFrU2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdCgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlTHQpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdGUoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHRlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9BcnJheSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyBzdHJpbmdUb0FycmF5KHZhbHVlKSA6IGNvcHlBcnJheSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3ltSXRlcmF0b3IgJiYgdmFsdWVbc3ltSXRlcmF0b3JdKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclRvQXJyYXkodmFsdWVbc3ltSXRlcmF0b3JdKCkpO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgZnVuYyA9IHRhZyA9PSBtYXBUYWcgPyBtYXBUb0FycmF5IDogKHRhZyA9PSBzZXRUYWcgPyBzZXRUb0FycmF5IDogdmFsdWVzKTtcblxuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTIuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgICAgIHJldHVybiByZXN1bHQgPT09IHJlc3VsdCA/IChyZW1haW5kZXIgPyByZXN1bHQgLSByZW1haW5kZXIgOiByZXN1bHQpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIgc3VpdGFibGUgZm9yIHVzZSBhcyB0aGUgbGVuZ3RoIG9mIGFuXG4gICAgICogYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA0Mjk0OTY3Mjk1XG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAwLCBNQVhfQVJSQVlfTEVOR1RIKSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBJbmZpbml0eVxuICAgICAqXG4gICAgICogXy50b051bWJlcignMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBiYXNlVHJpbSh2YWx1ZSk7XG4gICAgICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgICAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gICAgICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzYWZlIGludGVnZXIuIEEgc2FmZSBpbnRlZ2VyIGNhbiBiZSBjb21wYXJlZCBhbmRcbiAgICAgKiByZXByZXNlbnRlZCBjb3JyZWN0bHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDkwMDcxOTkyNTQ3NDA5OTFcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUilcbiAgICAgICAgOiAodmFsdWUgPT09IDAgPyB2YWx1ZSA6IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gICAgICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1N0cmluZyhudWxsKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZygtMCk7XG4gICAgICogLy8gPT4gJy0wJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHBzOi8vbWRuLmlvL09iamVjdC9hc3NpZ24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgaWYgKGlzUHJvdG90eXBlKHNvdXJjZSkgfHwgaXNBcnJheUxpa2Uoc291cmNlKSkge1xuICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgc291cmNlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ25Jbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMsICdkJzogNCB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduSW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGBwYXRoc2Agb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8uYXQob2JqZWN0LCBbJ2FbMF0uYi5jJywgJ2FbMV0nXSk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIGF0ID0gZmxhdFJlc3QoYmFzZUF0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBnaXZlbiwgaXRzIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIGFzc2lnbmVkIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gVGhlIHByb3BlcnRpZXMgdG8gYXNzaWduIHRvIHRoZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHtcbiAgICAgKiAgICdjb25zdHJ1Y3Rvcic6IENpcmNsZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBDaXJjbGU7XG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgQ2lyY2xlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIFNoYXBlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMgPT0gbnVsbCA/IHJlc3VsdCA6IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gICAgICogb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0XG4gICAgICogcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICAgICAgdmFyIHByb3BzSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgIChlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGFzc2lnbnNcbiAgICAgKiBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHNEZWVwKHsgJ2EnOiB7ICdiJzogMiB9IH0sIHsgJ2EnOiB7ICdiJzogMSwgJ2MnOiAzIH0gfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiAyLCAnYyc6IDMgfSB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzRGVlcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGFyZ3MucHVzaCh1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UpO1xuICAgICAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUga2V5IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRLZXlgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBhIGNvbGxlY3Rpb24gaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gcmV0dXJucyAncGViYmxlcycgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd25SaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuXG4gICAgICogb2JqZWN0IGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXRcbiAgICAgKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJywgJ2InLCB0aGVuICdjJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdjJywgJ2InLCB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JJbmAgbG9ncyAnYScsICdiJywgdGhlbiAnYycuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gICAgICogaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvblxuICAgICAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd24obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvck93bmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93blJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYicgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICdhJyB0aGVuICdiJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgKiBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBhbmQgaW5oZXJpdGVkXG4gICAgICogZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICAgICAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gICAgICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob3RoZXIsICdhJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgaW52ZXJ0ZWQga2V5cyBhbmQgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqIElmIGBvYmplY3RgIGNvbnRhaW5zIGR1cGxpY2F0ZSB2YWx1ZXMsIHN1YnNlcXVlbnQgdmFsdWVzIG92ZXJ3cml0ZVxuICAgICAqIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6ICdjJywgJzInOiAnYicgfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W3ZhbHVlXSA9IGtleTtcbiAgICB9LCBjb25zdGFudChpZGVudGl0eSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnZlcnRgIGV4Y2VwdCB0aGF0IHRoZSBpbnZlcnRlZCBvYmplY3QgaXMgZ2VuZXJhdGVkXG4gICAgICogZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nIGVhY2ggZWxlbWVudCBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgaW52ZXJ0ZWQgdmFsdWUgb2YgZWFjaCBpbnZlcnRlZCBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5c1xuICAgICAqIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBpbnZlcnRlZCB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gJ2dyb3VwJyArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2dyb3VwMSc6IFsnYScsICdjJ10sICdncm91cDInOiBbJ2InXSB9XG4gICAgICovXG4gICAgdmFyIGludmVydEJ5ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgfVxuICAgIH0sIGdldEl0ZXJhdGVlKTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiBbMSwgMiwgMywgNF0gfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy5rZXlzKCdoaScpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gICAgICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwS2V5c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAgICAgKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICAgICAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICAgICAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lcmdlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICAgICAqIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIGlzIGhhbmRsZWQgYnkgdGhlXG4gICAgICogbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHNpeCBhcmd1bWVudHM6XG4gICAgICogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gb2JqVmFsdWUuY29uY2F0KHNyY1ZhbHVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogWzNdLCAnYic6IFs0XSB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4geyAnYSc6IFsxLCAzXSwgJ2InOiBbMiwgNF0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGVcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGNvbnNpZGVyYWJseSBzbG93ZXIgdGhhbiBgXy5waWNrYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0pO1xuICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQpO1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGJhc2VVbnNldChyZXN1bHQsIHBhdGhzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrQnlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZlxuICAgICAqIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXRcbiAgICAgKiBgcHJlZGljYXRlYCBkb2Vzbid0IHJldHVybiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0Qnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBwaWNrQnkob2JqZWN0LCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gICAgICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2tCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZ2V0YCBleGNlcHQgdGhhdCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYVxuICAgICAqIGZ1bmN0aW9uIGl0J3MgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MxJzogMywgJ2MyJzogXy5jb25zdGFudCg0KSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzEnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzInKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBsb29wIGlzIGVudGVyZWQgd2hlbiBwYXRoIGlzIGVtcHR5LlxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgb2JqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGAgZG9lc24ndCBleGlzdCxcbiAgICAgKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAgICAgKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICAgICAqIGBwYXRoYCBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy5zZXRXaXRoKG9iamVjdCwgJ1swXVsxXScsICdhJywgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgXG4gICAgICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gICAgICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzXG4gICAgICogZm9yIGBvYmplY3RgIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcFxuICAgICAqIG9yIHNldCwgaXRzIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNJblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlyc0luID0gY3JlYXRlVG9QYWlycyhrZXlzSW4pO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAgICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gICAgICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDldXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3BlcnR5IGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDcgfSB9XSB9O1xuICAgICAqIF8udW5zZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgYWNjZXB0cyBgdXBkYXRlcmAgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiB2YWx1ZSB0byBzZXQuIFVzZSBgXy51cGRhdGVXaXRoYCB0byBjdXN0b21pemUgYHBhdGhgIGNyZWF0aW9uLiBUaGUgYHVwZGF0ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICdhWzBdLmIuYycsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiBuOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ3hbMF0ueS56JywgZnVuY3Rpb24obikgeyByZXR1cm4gbiA/IG4gKyAxIDogMDsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51cGRhdGVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZVdpdGgob2JqZWN0LCAnWzBdWzFdJywgXy5jb25zdGFudCgnYScpLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpdGgob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcygnaGknKTtcbiAgICAgKiAvLyA9PiBbJ2gnLCAnaSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiAtNVxuICAgICAqXG4gICAgICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICAgICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCwgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqIElmIGBzdGFydGAgaXMgZ3JlYXRlciB0aGFuIGBlbmRgIHRoZSBwYXJhbXMgYXJlIHN3YXBwZWQgdG8gc3VwcG9ydFxuICAgICAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjMuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5yYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgIH1cbiAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICByZXR1cm4gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAgICogaXMgcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgYHRydWVgLCBvciBlaXRoZXIgYGxvd2VyYCBvciBgdXBwZXJgIGFyZVxuICAgICAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1cHBlcj0xXSBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmddIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgIHVwcGVyID0gZmxvYXRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgdXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkICYmIHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB1cHBlciA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG93ZXIgPSB0b0Zpbml0ZShsb3dlcik7XG4gICAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgIHVwcGVyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obG93ZXIgKyAocmFuZCAqICh1cHBlciAtIGxvd2VyICsgZnJlZVBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIHVwcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqL1xuICAgIHZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gICAgICogdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gICAgICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICAgICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAgICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAgICAgKiAvLyA9PiAnZGVqYSB2dSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggdXAgdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxlbmd0aFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAgICAgKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICAgICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICAgKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gICAgICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gICAgICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAgICAgKiBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXlwiLCBcIiRcIiwgXCJcXFwiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLFxuICAgICAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6Ly9sb2Rhc2hcXC5jb20vXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICovXG4gICAgdmFyIGxvd2VyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRnJlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ2ZSRUQnXG4gICAgICovXG4gICAgdmFyIGxvd2VyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvTG93ZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC5cbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGNhbid0IGJlIGV2ZW5seSBkaXZpZGVkIGJ5IGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4KTtcbiAgICAgKiAvLyA9PiAnICBhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUZsb29yKG1pZCksIGNoYXJzKSArXG4gICAgICAgIHN0cmluZyArXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlQ2VpbChtaWQpLCBjaGFycylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkRW5kKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoc3RyaW5nICsgY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSlcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1fYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhXG4gICAgICogaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGVcbiAgICAgKiBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuMikgb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4PTEwXSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnMDgnLCAnMTAnXSwgXy5wYXJzZUludCk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgfHwgcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgJycpLCByYWRpeCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBlYXQoJyonLCAzKTtcbiAgICAgKiAvLyA9PiAnKioqJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDIpO1xuICAgICAqIC8vID0+ICdhYmNhYmMnXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJlcGVhdCh0b1N0cmluZyhzdHJpbmcpLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBtYXRjaGVzIGZvciBgcGF0dGVybmAgaW4gYHN0cmluZ2Agd2l0aCBgcmVwbGFjZW1lbnRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjcmVwbGFjZWBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9yZXBsYWNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBwYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBtYXRjaCByZXBsYWNlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwbGFjZSgnSGkgRnJlZCcsICdGcmVkJywgJ0Jhcm5leScpO1xuICAgICAqIC8vID0+ICdIaSBCYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKGFyZ3NbMF0pO1xuXG4gICAgICByZXR1cm4gYXJncy5sZW5ndGggPCAzID8gc3RyaW5nIDogc3RyaW5nLnJlcGxhY2UoYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKi9cbiAgICB2YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjc3BsaXRgXShodHRwczovL21kbi5pby9TdHJpbmcvc3BsaXQpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gc2VwYXJhdG9yIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byBzcGxpdCBieS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3BsaXQoJ2EtYi1jJywgJy0nLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgJiYgdHlwZW9mIGxpbWl0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfQVJSQVlfTEVOR1RIIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChcbiAgICAgICAgICAgIHR5cGVvZiBzZXBhcmF0b3IgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3N0YXJ0IGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1N0eWxpc3RpY19vcl9zcGVjaWFsaXNlZF91c2FnZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249MF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgICAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICAgICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAgICAgKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgICAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW25dJ11cbiAgICAgKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgICAqICBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGV4ZWN1dGUgSmF2YVNjcmlwdCBhbmQgZ2VuZXJhdGUgSFRNTC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyB1c2VyKTsgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gJHsgdXNlciB9IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYC5cbiAgICAgKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBGaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yLlxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBzdGFjayB0cmFjZXMuXG4gICAgICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIC8vIFRoZSBzb3VyY2VVUkwgZ2V0cyBpbmplY3RlZCBpbnRvIHRoZSBzb3VyY2UgdGhhdCdzIGV2YWwtZWQsIHNvIGJlIGNhcmVmdWxcbiAgICAgIC8vIHRvIG5vcm1hbGl6ZSBhbGwga2luZHMgb2Ygd2hpdGVzcGFjZSwgc28gZS5nLiBuZXdsaW5lcyAoYW5kIHVuaWNvZGUgdmVyc2lvbnMgb2YgaXQpIGNhbid0IHNuZWFrIGluXG4gICAgICAvLyBhbmQgZXNjYXBlIHRoZSBjb21tZW50LCB0aHVzIGluamVjdGluZyBjb2RlIHRoYXQgZ2V0cyBldmFsZWQuXG4gICAgICB2YXIgc291cmNlVVJMID0gJy8vIyBzb3VyY2VVUkw9JyArXG4gICAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICdzb3VyY2VVUkwnKVxuICAgICAgICAgID8gKG9wdGlvbnMuc291cmNlVVJMICsgJycpLnJlcGxhY2UoL1xccy9nLCAnICcpXG4gICAgICAgICAgOiAoJ2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbJyArICgrK3RlbXBsYXRlQ291bnRlcikgKyAnXScpXG4gICAgICAgICkgKyAnXFxuJztcblxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAgICAgLy8gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7XG5cbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAgIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgICAgIHZhciB2YXJpYWJsZSA9IGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3ZhcmlhYmxlJykgJiYgb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBUaHJvdyBhbiBlcnJvciBpZiBhIGZvcmJpZGRlbiBjaGFyYWN0ZXIgd2FzIGZvdW5kIGluIGB2YXJpYWJsZWAsIHRvIHByZXZlbnRcbiAgICAgIC8vIHBvdGVudGlhbCBjb21tYW5kIGluamVjdGlvbiBhdHRhY2tzLlxuICAgICAgZWxzZSBpZiAocmVGb3JiaWRkZW5JZGVudGlmaWVyQ2hhcnMudGVzdCh2YXJpYWJsZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfVEVNUExfVkFSX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuXG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIGxvd2VyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b0xvd2VyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9Mb3dlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tZm9vLWJhci0tJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vYmFyJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdfX2Zvb19iYXJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xvd2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIHVwcGVyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9VcHBlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tRk9PLUJBUi0tJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PQkFSJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdfX0ZPT19CQVJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1VwcGVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gICAgICogLy8gPT4gWydmb28nLCAnYmFyJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VUcmltKHN0cmluZyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGNoclN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KGNoYXJzKSxcbiAgICAgICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1FbmQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW1FbmQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICctXy1hYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbUVuZChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZEVuZEluZGV4KHN0cmluZykgKyAxKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBzdHJpbmdUb0FycmF5KGNoYXJzKSkgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMgICdcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjLV8tJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1TdGFydChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW1TdGFydCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBzdHJpbmdUb0FycmF5KGNoYXJzKSk7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRydW5jYXRlcyBgc3RyaW5nYCBpZiBpdCdzIGxvbmdlciB0aGFuIHRoZSBnaXZlbiBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogVGhlIGxhc3QgY2hhcmFjdGVycyBvZiB0aGUgdHJ1bmNhdGVkIHN0cmluZyBhcmUgcmVwbGFjZWQgd2l0aCB0aGUgb21pc3Npb25cbiAgICAgKiBzdHJpbmcgd2hpY2ggZGVmYXVsdHMgdG8gXCIuLi5cIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cnVuY2F0ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubGVuZ3RoPTMwXSBUaGUgbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vbWlzc2lvbj0nLi4uJ10gVGhlIHN0cmluZyB0byBpbmRpY2F0ZSB0ZXh0IGlzIG9taXR0ZWQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbb3B0aW9ucy5zZXBhcmF0b3JdIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byB0cnVuY2F0ZSB0by5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cnVuY2F0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJyk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hiby4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogJyAnXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwuLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6IC8sPyArL1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUuLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ29taXNzaW9uJzogJyBbLi4uXSdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnIFsuLi5dJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRydW5jYXRlKHN0cmluZywgb3B0aW9ucykge1xuICAgICAgdmFyIGxlbmd0aCA9IERFRkFVTFRfVFJVTkNfTEVOR1RILFxuICAgICAgICAgIG9taXNzaW9uID0gREVGQVVMVF9UUlVOQ19PTUlTU0lPTjtcblxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSAnc2VwYXJhdG9yJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zZXBhcmF0b3IgOiBzZXBhcmF0b3I7XG4gICAgICAgIGxlbmd0aCA9ICdsZW5ndGgnIGluIG9wdGlvbnMgPyB0b0ludGVnZXIob3B0aW9ucy5sZW5ndGgpIDogbGVuZ3RoO1xuICAgICAgICBvbWlzc2lvbiA9ICdvbWlzc2lvbicgaW4gb3B0aW9ucyA/IGJhc2VUb1N0cmluZyhvcHRpb25zLm9taXNzaW9uKSA6IG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBpZiAoaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpO1xuICAgICAgICBzdHJMZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChsZW5ndGggPj0gc3RyTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgZW5kID0gbGVuZ3RoIC0gc3RyaW5nU2l6ZShvbWlzc2lvbik7XG4gICAgICBpZiAoZW5kIDwgMSkge1xuICAgICAgICByZXR1cm4gb21pc3Npb247XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gc3RyU3ltYm9sc1xuICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpXG4gICAgICAgIDogc3RyaW5nLnNsaWNlKDAsIGVuZCk7XG5cbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgICB9XG4gICAgICBpZiAoc3RyU3ltYm9scykge1xuICAgICAgICBlbmQgKz0gKHJlc3VsdC5sZW5ndGggLSBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgaWYgKHN0cmluZy5zbGljZShlbmQpLnNlYXJjaChzZXBhcmF0b3IpKSB7XG4gICAgICAgICAgdmFyIG1hdGNoLFxuICAgICAgICAgICAgICBzdWJzdHJpbmcgPSByZXN1bHQ7XG5cbiAgICAgICAgICBpZiAoIXNlcGFyYXRvci5nbG9iYWwpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCB0b1N0cmluZyhyZUZsYWdzLmV4ZWMoc2VwYXJhdG9yKSkgKyAnZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXBhcmF0b3IubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3Vic3RyaW5nKSkpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbmQgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIG5ld0VuZCA9PT0gdW5kZWZpbmVkID8gZW5kIDogbmV3RW5kKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdHJpbmcuaW5kZXhPZihiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKSwgZW5kKSAhPSBlbmQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gcmVzdWx0Lmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLmVzY2FwZWA7IHRoaXMgbWV0aG9kIGNvbnZlcnRzIHRoZSBIVE1MIGVudGl0aWVzXG4gICAgICogYCZhbXA7YCwgYCZsdDtgLCBgJmd0O2AsIGAmcXVvdDtgLCBhbmQgYCYjMzk7YCBpbiBgc3RyaW5nYCB0b1xuICAgICAqIHRoZWlyIGNvcnJlc3BvbmRpbmcgY2hhcmFjdGVycy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBIVE1MIGVudGl0aWVzIGFyZSB1bmVzY2FwZWQuIFRvIHVuZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBIVE1MIGVudGl0aWVzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjYuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB1bmVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuZXNjYXBlKCdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNFc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVFc2NhcGVkSHRtbCwgdW5lc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJy0tZm9vLWJhcicpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHVwcGVyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnZnJlZCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZSRUQnXG4gICAgICovXG4gICAgdmFyIHVwcGVyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvVXBwZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBhdHRlcm4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IHBhdHRlcm47XG5cbiAgICAgIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gaW52b2tlIGBmdW5jYCwgcmV0dXJuaW5nIGVpdGhlciB0aGUgcmVzdWx0IG9yIHRoZSBjYXVnaHQgZXJyb3JcbiAgICAgKiBvYmplY3QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhdHRlbXB0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBgZnVuY2AgcmVzdWx0IG9yIGVycm9yIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgdGhyb3dpbmcgZXJyb3JzIGZvciBpbnZhbGlkIHNlbGVjdG9ycy5cbiAgICAgKiB2YXIgZWxlbWVudHMgPSBfLmF0dGVtcHQoZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgKiAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgKiB9LCAnPl8+Jyk7XG4gICAgICpcbiAgICAgKiBpZiAoXy5pc0Vycm9yKGVsZW1lbnRzKSkge1xuICAgICAqICAgZWxlbWVudHMgPSBbXTtcbiAgICAgKiB9XG4gICAgICovXG4gICAgdmFyIGF0dGVtcHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGlzRXJyb3IoZSkgPyBlIDogbmV3IEVycm9yKGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQmluZHMgbWV0aG9kcyBvZiBhbiBvYmplY3QgdG8gdGhlIG9iamVjdCBpdHNlbGYsIG92ZXJ3cml0aW5nIHRoZSBleGlzdGluZ1xuICAgICAqIG1ldGhvZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBiaW5kIGFuZCBhc3NpZ24gdGhlIGJvdW5kIG1ldGhvZHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gbWV0aG9kTmFtZXMgVGhlIG9iamVjdCBtZXRob2QgbmFtZXMgdG8gYmluZC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdmlldyA9IHtcbiAgICAgKiAgICdsYWJlbCc6ICdkb2NzJyxcbiAgICAgKiAgICdjbGljayc6IGZ1bmN0aW9uKCkge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnY2xpY2tlZCAnICsgdGhpcy5sYWJlbCk7XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uYmluZEFsbCh2aWV3LCBbJ2NsaWNrJ10pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB2aWV3LmNsaWNrKTtcbiAgICAgKiAvLyA9PiBMb2dzICdjbGlja2VkIGRvY3MnIHdoZW4gY2xpY2tlZC5cbiAgICAgKi9cbiAgICB2YXIgYmluZEFsbCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgbWV0aG9kTmFtZXMpIHtcbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGtleSA9IHRvS2V5KGtleSk7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgYmluZChvYmplY3Rba2V5XSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpdGVyYXRlcyBvdmVyIGBwYWlyc2AgYW5kIGludm9rZXMgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiBmdW5jdGlvbiBvZiB0aGUgZmlyc3QgcHJlZGljYXRlIHRvIHJldHVybiB0cnV0aHkuIFRoZSBwcmVkaWNhdGUtZnVuY3Rpb25cbiAgICAgKiBwYWlycyBhcmUgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBwcmVkaWNhdGUtZnVuY3Rpb24gcGFpcnMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8uY29uZChbXG4gICAgICogICBbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCAgICAgICAgICAgXy5jb25zdGFudCgnbWF0Y2hlcyBBJyldLFxuICAgICAqICAgW18uY29uZm9ybXMoeyAnYic6IF8uaXNOdW1iZXIgfSksIF8uY29uc3RhbnQoJ21hdGNoZXMgQicpXSxcbiAgICAgKiAgIFtfLnN0dWJUcnVlLCAgICAgICAgICAgICAgICAgICAgICBfLmNvbnN0YW50KCdubyBtYXRjaCcpXVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEEnXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAwLCAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQidcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6ICcxJywgJ2InOiAnMicgfSk7XG4gICAgICogLy8gPT4gJ25vIG1hdGNoJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmQocGFpcnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICB0b0l0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoKTtcblxuICAgICAgcGFpcnMgPSAhbGVuZ3RoID8gW10gOiBhcnJheU1hcChwYWlycywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICBpZiAodHlwZW9mIHBhaXJbMV0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3RvSXRlcmF0ZWUocGFpclswXSksIHBhaXJbMV1dO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICAgIGlmIChhcHBseShwYWlyWzBdLCB0aGlzLCBhcmdzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KHBhaXJbMV0sIHRoaXMsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgcHJlZGljYXRlIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aFxuICAgICAqIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBhIGdpdmVuIG9iamVjdCwgcmV0dXJuaW5nIGB0cnVlYCBpZlxuICAgICAqIGFsbCBwcmVkaWNhdGVzIHJldHVybiB0cnV0aHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zVG9gIHdpdGhcbiAgICAgKiBgc291cmNlYCBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAyLCAnYic6IDEgfSxcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLmNvbmZvcm1zKHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlQ29uZm9ybXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBgdmFsdWVgIHRvIGRldGVybWluZSB3aGV0aGVyIGEgZGVmYXVsdCB2YWx1ZSBzaG91bGQgYmUgcmV0dXJuZWQgaW5cbiAgICAgKiBpdHMgcGxhY2UuIFRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBgbnVsbGAsXG4gICAgICogb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSBUaGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKDEsIDEwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbyh1bmRlZmluZWQsIDEwKTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlZmF1bHRUbyh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gKHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBpbnZva2luZyB0aGUgZ2l2ZW4gZnVuY3Rpb25zXG4gICAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1JpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvdyhbXy5hZGQsIHNxdWFyZV0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3cgPSBjcmVhdGVGbG93KCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsb3dgIGV4Y2VwdCB0aGF0IGl0IGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0XG4gICAgICogaW52b2tlcyB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvd1JpZ2h0KFtzcXVhcmUsIF8uYWRkXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvd1JpZ2h0ID0gY3JlYXRlRmxvdyh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi4gSWYgYGZ1bmNgIGlzIGEgcHJvcGVydHkgbmFtZSwgdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyB0aGVcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZSBmb3IgYSBnaXZlbiBlbGVtZW50LiBJZiBgZnVuY2AgaXMgYW4gYXJyYXkgb3Igb2JqZWN0LCB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGNvbnRhaW4gdGhlIGVxdWl2YWxlbnRcbiAgICAgKiBzb3VyY2UgcHJvcGVydGllcywgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSBbZnVuYz1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIGNhbGxiYWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2FsbGJhY2suXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKFsndXNlcicsICdmcmVkJ10pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgXy5pdGVyYXRlZSgndXNlcicpKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIENyZWF0ZSBjdXN0b20gaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKiBfLml0ZXJhdGVlID0gXy53cmFwKF8uaXRlcmF0ZWUsIGZ1bmN0aW9uKGl0ZXJhdGVlLCBmdW5jKSB7XG4gICAgICogICByZXR1cm4gIV8uaXNSZWdFeHAoZnVuYykgPyBpdGVyYXRlZShmdW5jKSA6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAqICAgICByZXR1cm4gZnVuYy50ZXN0KHN0cmluZyk7XG4gICAgICogICB9O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIoWydhYmMnLCAnZGVmJ10sIC9lZi8pO1xuICAgICAqIC8vID0+IFsnZGVmJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpdGVyYXRlZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmFzZUl0ZXJhdGVlKHR5cGVvZiBmdW5jID09ICdmdW5jdGlvbicgPyBmdW5jIDogYmFzZUNsb25lKGZ1bmMsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBhIGdpdmVuXG4gICAgICogb2JqZWN0IGFuZCBgc291cmNlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGhhcyBlcXVpdmFsZW50XG4gICAgICogcHJvcGVydHkgdmFsdWVzLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5pc01hdGNoYCB3aXRoIGBzb3VyY2VgXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTXVsdGlwbGUgdmFsdWVzIGNhbiBiZSBjaGVja2VkIGJ5IGNvbWJpbmluZyBzZXZlcmFsIG1hdGNoZXJzXG4gICAgICogdXNpbmcgYF8ub3ZlclNvbWVgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ubWF0Y2hlcyh7ICdhJzogNCwgJ2MnOiA2IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICpcbiAgICAgKiAvLyBDaGVja2luZyBmb3Igc2V2ZXJhbCBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm92ZXJTb21lKFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksIF8ubWF0Y2hlcyh7ICdhJzogNCB9KV0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZVxuICAgICAqIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdCB0byBgc3JjVmFsdWVgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZVxuICAgICAqIG9iamVjdCB2YWx1ZSBpcyBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3RcbiAgICAgKiBgc3JjVmFsdWVgIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlXG4gICAgICogYF8uaXNFcXVhbGAgZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTXVsdGlwbGUgdmFsdWVzIGNhbiBiZSBjaGVja2VkIGJ5IGNvbWJpbmluZyBzZXZlcmFsIG1hdGNoZXJzXG4gICAgICogdXNpbmcgYF8ub3ZlclNvbWVgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZChvYmplY3RzLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5vdmVyU29tZShbXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCAxKSwgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KV0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgYmFzZUNsb25lKHNyY1ZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMikgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDEpIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZCgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoWydhJywgJ2InXSkpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciBtZXRob2QgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1ldGhvZGA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiB0aGUgbWV0aG9kIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBfLnRpbWVzKDMsIF8uY29uc3RhbnQpLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZE9mID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlXG4gICAgICogb2JqZWN0IHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24sIHRoZW4gbWV0aG9kc1xuICAgICAqIGFyZSBhZGRlZCB0byBpdHMgcHJvdG90eXBlIGFzIHdlbGwuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVXNlIGBfLnJ1bkluQ29udGV4dGAgdG8gY3JlYXRlIGEgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdG9cbiAgICAgKiBhdm9pZCBjb25mbGljdHMgY2F1c2VkIGJ5IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBbb2JqZWN0PWxvZGFzaF0gVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgZnVuY3Rpb25zIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoYWluPXRydWVdIFNwZWNpZnkgd2hldGhlciBtaXhpbnMgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiB2b3dlbHMoc3RyaW5nKSB7XG4gICAgICogICByZXR1cm4gXy5maWx0ZXIoc3RyaW5nLCBmdW5jdGlvbih2KSB7XG4gICAgICogICAgIHJldHVybiAvW2FlaW91XS9pLnRlc3Qodik7XG4gICAgICogICB9KTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9KTtcbiAgICAgKiBfLnZvd2VscygnZnJlZCcpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaXhpbihvYmplY3QsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpLFxuICAgICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIHByb3BzKTtcblxuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCAmJlxuICAgICAgICAgICEoaXNPYmplY3Qoc291cmNlKSAmJiAobWV0aG9kTmFtZXMubGVuZ3RoIHx8ICFwcm9wcy5sZW5ndGgpKSkge1xuICAgICAgICBvcHRpb25zID0gc291cmNlO1xuICAgICAgICBzb3VyY2UgPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdCA9IHRoaXM7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgICB9XG4gICAgICB2YXIgY2hhaW4gPSAhKGlzT2JqZWN0KG9wdGlvbnMpICYmICdjaGFpbicgaW4gb3B0aW9ucykgfHwgISFvcHRpb25zLmNoYWluLFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24ob2JqZWN0KTtcblxuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBmdW5jID0gc291cmNlW21ldGhvZE5hbWVdO1xuICAgICAgICBvYmplY3RbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICBpZiAoaXNGdW5jKSB7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX187XG4gICAgICAgICAgICBpZiAoY2hhaW4gfHwgY2hhaW5BbGwpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCh0aGlzLl9fd3JhcHBlZF9fKSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnMgPSByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG5cbiAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHsgJ2Z1bmMnOiBmdW5jLCAnYXJncyc6IGFyZ3VtZW50cywgJ3RoaXNBcmcnOiBvYmplY3QgfSk7XG4gICAgICAgICAgICAgIHJlc3VsdC5fX2NoYWluX18gPSBjaGFpbkFsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9iamVjdCwgYXJyYXlQdXNoKFt0aGlzLnZhbHVlKCldLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvXG4gICAgICogdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgbG9kYXNoID0gXy5ub0NvbmZsaWN0KCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgIGlmIChyb290Ll8gPT09IHRoaXMpIHtcbiAgICAgICAgcm9vdC5fID0gb2xkRGFzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIGFyZ3VtZW50IGF0IGluZGV4IGBuYC4gSWYgYG5gIGlzIG5lZ2F0aXZlLFxuICAgICAqIHRoZSBudGggYXJndW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFzcy10aHJ1IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKDEpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoLTIpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGhBcmcobikge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHJldHVybiBiYXNlTnRoKGFyZ3MsIG4pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgaXRlcmF0ZWVzYCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXNcbiAgICAgKiBhbmQgcmV0dXJucyB0aGVpciByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlcihbTWF0aC5tYXgsIE1hdGgubWluXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDEsIDIsIDMsIDQpO1xuICAgICAqIC8vID0+IFs0LCAxXVxuICAgICAqL1xuICAgIHZhciBvdmVyID0gY3JlYXRlT3ZlcihhcnJheU1hcCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbGwqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogRm9sbG93aW5nIHNob3J0aGFuZHMgYXJlIHBvc3NpYmxlIGZvciBwcm92aWRpbmcgcHJlZGljYXRlcy5cbiAgICAgKiBQYXNzIGFuIGBPYmplY3RgIGFuZCBpdCB3aWxsIGJlIHVzZWQgYXMgYW4gcGFyYW1ldGVyIGZvciBgXy5tYXRjaGVzYCB0byBjcmVhdGUgdGhlIHByZWRpY2F0ZS5cbiAgICAgKiBQYXNzIGFuIGBBcnJheWAgb2YgcGFyYW1ldGVycyBmb3IgYF8ubWF0Y2hlc1Byb3BlcnR5YCBhbmQgdGhlIHByZWRpY2F0ZSB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyRXZlcnkoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJFdmVyeSA9IGNyZWF0ZU92ZXIoYXJyYXlFdmVyeSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbnkqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogRm9sbG93aW5nIHNob3J0aGFuZHMgYXJlIHBvc3NpYmxlIGZvciBwcm92aWRpbmcgcHJlZGljYXRlcy5cbiAgICAgKiBQYXNzIGFuIGBPYmplY3RgIGFuZCBpdCB3aWxsIGJlIHVzZWQgYXMgYW4gcGFyYW1ldGVyIGZvciBgXy5tYXRjaGVzYCB0byBjcmVhdGUgdGhlIHByZWRpY2F0ZS5cbiAgICAgKiBQYXNzIGFuIGBBcnJheWAgb2YgcGFyYW1ldGVycyBmb3IgYF8ubWF0Y2hlc1Byb3BlcnR5YCBhbmQgdGhlIHByZWRpY2F0ZSB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyU29tZShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIG1hdGNoZXNGdW5jID0gXy5vdmVyU29tZShbeyAnYSc6IDEgfSwgeyAnYSc6IDIgfV0pXG4gICAgICogdmFyIG1hdGNoZXNQcm9wZXJ0eUZ1bmMgPSBfLm92ZXJTb21lKFtbJ2EnLCAxXSwgWydhJywgMl1dKVxuICAgICAqL1xuICAgIHZhciBvdmVyU29tZSA9IGNyZWF0ZU92ZXIoYXJyYXlTb21lKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgICAgIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5wcm9wZXJ0eWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdmFsdWUgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFswLCAxLCAyXSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbVxuICAgICAqIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gQSBzdGVwIG9mIGAtMWAgaXMgdXNlZCBpZiBhIG5lZ2F0aXZlXG4gICAgICogYHN0YXJ0YCBpcyBzcGVjaWZpZWQgd2l0aG91dCBhbiBgZW5kYCBvciBgc3RlcGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsXG4gICAgICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDQpO1xuICAgICAqIC8vID0+IFswLCAxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgtNCk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzAsIDUsIDEwLCAxNV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlID0gY3JlYXRlUmFuZ2UoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmFuZ2VgIGV4Y2VwdCB0aGF0IGl0IHBvcHVsYXRlcyB2YWx1ZXMgaW5cbiAgICAgKiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCg0KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgtNCk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNSk7XG4gICAgICogLy8gPT4gWzQsIDMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFsxNSwgMTAsIDUsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZVJpZ2h0ID0gY3JlYXRlUmFuZ2UodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gICAgICogLy8gPT4gW1tdLCBbXV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAgICAgKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLnN0dWJPYmplY3QpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3t9LCB7fV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1Yk9iamVjdCgpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVtcHR5IHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnJywgJyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlN0cmluZygpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJUcnVlKTtcbiAgICAgKiAvLyA9PiBbdHJ1ZSwgdHJ1ZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViVHJ1ZSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIGl0ZXJhdGVlIGBuYCB0aW1lcywgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mXG4gICAgICogZWFjaCBpbnZvY2F0aW9uLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKGluZGV4KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMywgU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMScsICcyJ11cbiAgICAgKlxuICAgICAqICBfLnRpbWVzKDQsIF8uY29uc3RhbnQoMCkpO1xuICAgICAqIC8vID0+IFswLCAwLCAwLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgaWYgKG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IE1BWF9BUlJBWV9MRU5HVEgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlKTtcbiAgICAgIG4gLT0gTUFYX0FSUkFZX0xFTkdUSDtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VUaW1lcyhsZW5ndGgsIGl0ZXJhdGVlKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgICBpdGVyYXRlZShpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJzAnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BhdGgodmFsdWUpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIHRvS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N5bWJvbCh2YWx1ZSkgPyBbdmFsdWVdIDogY29weUFycmF5KHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIGdpdmVuLCB0aGUgSUQgaXMgYXBwZW5kZWQgdG8gaXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4PScnXSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuaXF1ZSBJRC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgnY29udGFjdF8nKTtcbiAgICAgKiAvLyA9PiAnY29udGFjdF8xMDQnXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCk7XG4gICAgICogLy8gPT4gJzEwNSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgICAgIHZhciBpZCA9ICsraWRDb3VudGVyO1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXVnZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFkZGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0b3RhbC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hZGQoNiwgNCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICB2YXIgYWRkID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihhdWdlbmQsIGFkZGVuZCkge1xuICAgICAgcmV0dXJuIGF1Z2VuZCArIGFkZGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdXAgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgdXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIHVwIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jZWlsKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiBfLmNlaWwoNi4wMDQsIDIpO1xuICAgICAqIC8vID0+IDYuMDFcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2MDQwLCAtMik7XG4gICAgICogLy8gPT4gNjEwMFxuICAgICAqL1xuICAgIHZhciBjZWlsID0gY3JlYXRlUm91bmQoJ2NlaWwnKTtcblxuICAgIC8qKlxuICAgICAqIERpdmlkZSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlkZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aXNvciBUaGUgc2Vjb25kIG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHF1b3RpZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpdmlkZSg2LCA0KTtcbiAgICAgKiAvLyA9PiAxLjVcbiAgICAgKi9cbiAgICB2YXIgZGl2aWRlID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgcmV0dXJuIGRpdmlkZW5kIC8gZGl2aXNvcjtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgZG93biB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCBkb3duLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgZG93biB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIGRvd24gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDAuMDQ2LCAyKTtcbiAgICAgKiAvLyA9PiAwLjA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MDAwXG4gICAgICovXG4gICAgdmFyIGZsb29yID0gY3JlYXRlUm91bmQoJ2Zsb29yJyk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWF4aW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXgoWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1heChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4KGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWF4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heEJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1lYW4gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWVhbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuKGFycmF5KSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGlkZW50aXR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lYW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBhdmVyYWdlZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWluaW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5taW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLm1pbihbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWVyIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGljYW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcHJvZHVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tdWx0aXBseSg2LCA0KTtcbiAgICAgKiAvLyA9PiAyNFxuICAgICAqL1xuICAgIHZhciBtdWx0aXBseSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obXVsdGlwbGllciwgbXVsdGlwbGljYW5kKSB7XG4gICAgICByZXR1cm4gbXVsdGlwbGllciAqIG11bHRpcGxpY2FuZDtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNiwgMik7XG4gICAgICogLy8gPT4gNC4wMVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDEwMFxuICAgICAqL1xuICAgIHZhciByb3VuZCA9IGNyZWF0ZVJvdW5kKCdyb3VuZCcpO1xuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3QgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW51ZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3VidHJhaGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGRpZmZlcmVuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VidHJhY3QoNiwgNCk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIHZhciBzdWJ0cmFjdCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obWludWVuZCwgc3VidHJhaGVuZCkge1xuICAgICAgcmV0dXJuIG1pbnVlbmQgLSBzdWJ0cmFoZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIHN1bSBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1bShbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBpZGVudGl0eSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc3VtYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgc3VtbWVkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5zdW1CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW1CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWZ0ZXIgPSBhZnRlcjtcbiAgICBsb2Rhc2guYXJ5ID0gYXJ5O1xuICAgIGxvZGFzaC5hc3NpZ24gPSBhc3NpZ247XG4gICAgbG9kYXNoLmFzc2lnbkluID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmFzc2lnbkluV2l0aCA9IGFzc2lnbkluV2l0aDtcbiAgICBsb2Rhc2guYXNzaWduV2l0aCA9IGFzc2lnbldpdGg7XG4gICAgbG9kYXNoLmF0ID0gYXQ7XG4gICAgbG9kYXNoLmJlZm9yZSA9IGJlZm9yZTtcbiAgICBsb2Rhc2guYmluZCA9IGJpbmQ7XG4gICAgbG9kYXNoLmJpbmRBbGwgPSBiaW5kQWxsO1xuICAgIGxvZGFzaC5iaW5kS2V5ID0gYmluZEtleTtcbiAgICBsb2Rhc2guY2FzdEFycmF5ID0gY2FzdEFycmF5O1xuICAgIGxvZGFzaC5jaGFpbiA9IGNoYWluO1xuICAgIGxvZGFzaC5jaHVuayA9IGNodW5rO1xuICAgIGxvZGFzaC5jb21wYWN0ID0gY29tcGFjdDtcbiAgICBsb2Rhc2guY29uY2F0ID0gY29uY2F0O1xuICAgIGxvZGFzaC5jb25kID0gY29uZDtcbiAgICBsb2Rhc2guY29uZm9ybXMgPSBjb25mb3JtcztcbiAgICBsb2Rhc2guY29uc3RhbnQgPSBjb25zdGFudDtcbiAgICBsb2Rhc2guY291bnRCeSA9IGNvdW50Qnk7XG4gICAgbG9kYXNoLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBsb2Rhc2guY3VycnkgPSBjdXJyeTtcbiAgICBsb2Rhc2guY3VycnlSaWdodCA9IGN1cnJ5UmlnaHQ7XG4gICAgbG9kYXNoLmRlYm91bmNlID0gZGVib3VuY2U7XG4gICAgbG9kYXNoLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgbG9kYXNoLmRlZmF1bHRzRGVlcCA9IGRlZmF1bHRzRGVlcDtcbiAgICBsb2Rhc2guZGVmZXIgPSBkZWZlcjtcbiAgICBsb2Rhc2guZGVsYXkgPSBkZWxheTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VCeSA9IGRpZmZlcmVuY2VCeTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZVdpdGggPSBkaWZmZXJlbmNlV2l0aDtcbiAgICBsb2Rhc2guZHJvcCA9IGRyb3A7XG4gICAgbG9kYXNoLmRyb3BSaWdodCA9IGRyb3BSaWdodDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0V2hpbGUgPSBkcm9wUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2guZHJvcFdoaWxlID0gZHJvcFdoaWxlO1xuICAgIGxvZGFzaC5maWxsID0gZmlsbDtcbiAgICBsb2Rhc2guZmlsdGVyID0gZmlsdGVyO1xuICAgIGxvZGFzaC5mbGF0TWFwID0gZmxhdE1hcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlZXAgPSBmbGF0TWFwRGVlcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlcHRoID0gZmxhdE1hcERlcHRoO1xuICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjtcbiAgICBsb2Rhc2guZmxhdHRlbkRlZXAgPSBmbGF0dGVuRGVlcDtcbiAgICBsb2Rhc2guZmxhdHRlbkRlcHRoID0gZmxhdHRlbkRlcHRoO1xuICAgIGxvZGFzaC5mbGlwID0gZmxpcDtcbiAgICBsb2Rhc2guZmxvdyA9IGZsb3c7XG4gICAgbG9kYXNoLmZsb3dSaWdodCA9IGZsb3dSaWdodDtcbiAgICBsb2Rhc2guZnJvbVBhaXJzID0gZnJvbVBhaXJzO1xuICAgIGxvZGFzaC5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9uc0luID0gZnVuY3Rpb25zSW47XG4gICAgbG9kYXNoLmdyb3VwQnkgPSBncm91cEJ5O1xuICAgIGxvZGFzaC5pbml0aWFsID0gaW5pdGlhbDtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25CeSA9IGludGVyc2VjdGlvbkJ5O1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25XaXRoID0gaW50ZXJzZWN0aW9uV2l0aDtcbiAgICBsb2Rhc2guaW52ZXJ0ID0gaW52ZXJ0O1xuICAgIGxvZGFzaC5pbnZlcnRCeSA9IGludmVydEJ5O1xuICAgIGxvZGFzaC5pbnZva2VNYXAgPSBpbnZva2VNYXA7XG4gICAgbG9kYXNoLml0ZXJhdGVlID0gaXRlcmF0ZWU7XG4gICAgbG9kYXNoLmtleUJ5ID0ga2V5Qnk7XG4gICAgbG9kYXNoLmtleXMgPSBrZXlzO1xuICAgIGxvZGFzaC5rZXlzSW4gPSBrZXlzSW47XG4gICAgbG9kYXNoLm1hcCA9IG1hcDtcbiAgICBsb2Rhc2gubWFwS2V5cyA9IG1hcEtleXM7XG4gICAgbG9kYXNoLm1hcFZhbHVlcyA9IG1hcFZhbHVlcztcbiAgICBsb2Rhc2gubWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgbG9kYXNoLm1hdGNoZXNQcm9wZXJ0eSA9IG1hdGNoZXNQcm9wZXJ0eTtcbiAgICBsb2Rhc2gubWVtb2l6ZSA9IG1lbW9pemU7XG4gICAgbG9kYXNoLm1lcmdlID0gbWVyZ2U7XG4gICAgbG9kYXNoLm1lcmdlV2l0aCA9IG1lcmdlV2l0aDtcbiAgICBsb2Rhc2gubWV0aG9kID0gbWV0aG9kO1xuICAgIGxvZGFzaC5tZXRob2RPZiA9IG1ldGhvZE9mO1xuICAgIGxvZGFzaC5taXhpbiA9IG1peGluO1xuICAgIGxvZGFzaC5uZWdhdGUgPSBuZWdhdGU7XG4gICAgbG9kYXNoLm50aEFyZyA9IG50aEFyZztcbiAgICBsb2Rhc2gub21pdCA9IG9taXQ7XG4gICAgbG9kYXNoLm9taXRCeSA9IG9taXRCeTtcbiAgICBsb2Rhc2gub25jZSA9IG9uY2U7XG4gICAgbG9kYXNoLm9yZGVyQnkgPSBvcmRlckJ5O1xuICAgIGxvZGFzaC5vdmVyID0gb3ZlcjtcbiAgICBsb2Rhc2gub3ZlckFyZ3MgPSBvdmVyQXJncztcbiAgICBsb2Rhc2gub3ZlckV2ZXJ5ID0gb3ZlckV2ZXJ5O1xuICAgIGxvZGFzaC5vdmVyU29tZSA9IG92ZXJTb21lO1xuICAgIGxvZGFzaC5wYXJ0aWFsID0gcGFydGlhbDtcbiAgICBsb2Rhc2gucGFydGlhbFJpZ2h0ID0gcGFydGlhbFJpZ2h0O1xuICAgIGxvZGFzaC5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4gICAgbG9kYXNoLnBpY2sgPSBwaWNrO1xuICAgIGxvZGFzaC5waWNrQnkgPSBwaWNrQnk7XG4gICAgbG9kYXNoLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgbG9kYXNoLnByb3BlcnR5T2YgPSBwcm9wZXJ0eU9mO1xuICAgIGxvZGFzaC5wdWxsID0gcHVsbDtcbiAgICBsb2Rhc2gucHVsbEFsbCA9IHB1bGxBbGw7XG4gICAgbG9kYXNoLnB1bGxBbGxCeSA9IHB1bGxBbGxCeTtcbiAgICBsb2Rhc2gucHVsbEFsbFdpdGggPSBwdWxsQWxsV2l0aDtcbiAgICBsb2Rhc2gucHVsbEF0ID0gcHVsbEF0O1xuICAgIGxvZGFzaC5yYW5nZSA9IHJhbmdlO1xuICAgIGxvZGFzaC5yYW5nZVJpZ2h0ID0gcmFuZ2VSaWdodDtcbiAgICBsb2Rhc2gucmVhcmcgPSByZWFyZztcbiAgICBsb2Rhc2gucmVqZWN0ID0gcmVqZWN0O1xuICAgIGxvZGFzaC5yZW1vdmUgPSByZW1vdmU7XG4gICAgbG9kYXNoLnJlc3QgPSByZXN0O1xuICAgIGxvZGFzaC5yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICBsb2Rhc2guc2FtcGxlU2l6ZSA9IHNhbXBsZVNpemU7XG4gICAgbG9kYXNoLnNldCA9IHNldDtcbiAgICBsb2Rhc2guc2V0V2l0aCA9IHNldFdpdGg7XG4gICAgbG9kYXNoLnNodWZmbGUgPSBzaHVmZmxlO1xuICAgIGxvZGFzaC5zbGljZSA9IHNsaWNlO1xuICAgIGxvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXEgPSBzb3J0ZWRVbmlxO1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxQnkgPSBzb3J0ZWRVbmlxQnk7XG4gICAgbG9kYXNoLnNwbGl0ID0gc3BsaXQ7XG4gICAgbG9kYXNoLnNwcmVhZCA9IHNwcmVhZDtcbiAgICBsb2Rhc2gudGFpbCA9IHRhaWw7XG4gICAgbG9kYXNoLnRha2UgPSB0YWtlO1xuICAgIGxvZGFzaC50YWtlUmlnaHQgPSB0YWtlUmlnaHQ7XG4gICAgbG9kYXNoLnRha2VSaWdodFdoaWxlID0gdGFrZVJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLnRha2VXaGlsZSA9IHRha2VXaGlsZTtcbiAgICBsb2Rhc2gudGFwID0gdGFwO1xuICAgIGxvZGFzaC50aHJvdHRsZSA9IHRocm90dGxlO1xuICAgIGxvZGFzaC50aHJ1ID0gdGhydTtcbiAgICBsb2Rhc2gudG9BcnJheSA9IHRvQXJyYXk7XG4gICAgbG9kYXNoLnRvUGFpcnMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC50b1BhaXJzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLnRvUGF0aCA9IHRvUGF0aDtcbiAgICBsb2Rhc2gudG9QbGFpbk9iamVjdCA9IHRvUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBsb2Rhc2gudW5hcnkgPSB1bmFyeTtcbiAgICBsb2Rhc2gudW5pb24gPSB1bmlvbjtcbiAgICBsb2Rhc2gudW5pb25CeSA9IHVuaW9uQnk7XG4gICAgbG9kYXNoLnVuaW9uV2l0aCA9IHVuaW9uV2l0aDtcbiAgICBsb2Rhc2gudW5pcSA9IHVuaXE7XG4gICAgbG9kYXNoLnVuaXFCeSA9IHVuaXFCeTtcbiAgICBsb2Rhc2gudW5pcVdpdGggPSB1bmlxV2l0aDtcbiAgICBsb2Rhc2gudW5zZXQgPSB1bnNldDtcbiAgICBsb2Rhc2gudW56aXAgPSB1bnppcDtcbiAgICBsb2Rhc2gudW56aXBXaXRoID0gdW56aXBXaXRoO1xuICAgIGxvZGFzaC51cGRhdGUgPSB1cGRhdGU7XG4gICAgbG9kYXNoLnVwZGF0ZVdpdGggPSB1cGRhdGVXaXRoO1xuICAgIGxvZGFzaC52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgbG9kYXNoLnZhbHVlc0luID0gdmFsdWVzSW47XG4gICAgbG9kYXNoLndpdGhvdXQgPSB3aXRob3V0O1xuICAgIGxvZGFzaC53b3JkcyA9IHdvcmRzO1xuICAgIGxvZGFzaC53cmFwID0gd3JhcDtcbiAgICBsb2Rhc2gueG9yID0geG9yO1xuICAgIGxvZGFzaC54b3JCeSA9IHhvckJ5O1xuICAgIGxvZGFzaC54b3JXaXRoID0geG9yV2l0aDtcbiAgICBsb2Rhc2guemlwID0gemlwO1xuICAgIGxvZGFzaC56aXBPYmplY3QgPSB6aXBPYmplY3Q7XG4gICAgbG9kYXNoLnppcE9iamVjdERlZXAgPSB6aXBPYmplY3REZWVwO1xuICAgIGxvZGFzaC56aXBXaXRoID0gemlwV2l0aDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lbnRyaWVzID0gdG9QYWlycztcbiAgICBsb2Rhc2guZW50cmllc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC5leHRlbmQgPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guZXh0ZW5kV2l0aCA9IGFzc2lnbkluV2l0aDtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBtaXhpbihsb2Rhc2gsIGxvZGFzaCk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB1bndyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWRkID0gYWRkO1xuICAgIGxvZGFzaC5hdHRlbXB0ID0gYXR0ZW1wdDtcbiAgICBsb2Rhc2guY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xuICAgIGxvZGFzaC5jYXBpdGFsaXplID0gY2FwaXRhbGl6ZTtcbiAgICBsb2Rhc2guY2VpbCA9IGNlaWw7XG4gICAgbG9kYXNoLmNsYW1wID0gY2xhbXA7XG4gICAgbG9kYXNoLmNsb25lID0gY2xvbmU7XG4gICAgbG9kYXNoLmNsb25lRGVlcCA9IGNsb25lRGVlcDtcbiAgICBsb2Rhc2guY2xvbmVEZWVwV2l0aCA9IGNsb25lRGVlcFdpdGg7XG4gICAgbG9kYXNoLmNsb25lV2l0aCA9IGNsb25lV2l0aDtcbiAgICBsb2Rhc2guY29uZm9ybXNUbyA9IGNvbmZvcm1zVG87XG4gICAgbG9kYXNoLmRlYnVyciA9IGRlYnVycjtcbiAgICBsb2Rhc2guZGVmYXVsdFRvID0gZGVmYXVsdFRvO1xuICAgIGxvZGFzaC5kaXZpZGUgPSBkaXZpZGU7XG4gICAgbG9kYXNoLmVuZHNXaXRoID0gZW5kc1dpdGg7XG4gICAgbG9kYXNoLmVxID0gZXE7XG4gICAgbG9kYXNoLmVzY2FwZSA9IGVzY2FwZTtcbiAgICBsb2Rhc2guZXNjYXBlUmVnRXhwID0gZXNjYXBlUmVnRXhwO1xuICAgIGxvZGFzaC5ldmVyeSA9IGV2ZXJ5O1xuICAgIGxvZGFzaC5maW5kID0gZmluZDtcbiAgICBsb2Rhc2guZmluZEluZGV4ID0gZmluZEluZGV4O1xuICAgIGxvZGFzaC5maW5kS2V5ID0gZmluZEtleTtcbiAgICBsb2Rhc2guZmluZExhc3QgPSBmaW5kTGFzdDtcbiAgICBsb2Rhc2guZmluZExhc3RJbmRleCA9IGZpbmRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLmZpbmRMYXN0S2V5ID0gZmluZExhc3RLZXk7XG4gICAgbG9kYXNoLmZsb29yID0gZmxvb3I7XG4gICAgbG9kYXNoLmZvckVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5mb3JFYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZvckluID0gZm9ySW47XG4gICAgbG9kYXNoLmZvckluUmlnaHQgPSBmb3JJblJpZ2h0O1xuICAgIGxvZGFzaC5mb3JPd24gPSBmb3JPd247XG4gICAgbG9kYXNoLmZvck93blJpZ2h0ID0gZm9yT3duUmlnaHQ7XG4gICAgbG9kYXNoLmdldCA9IGdldDtcbiAgICBsb2Rhc2guZ3QgPSBndDtcbiAgICBsb2Rhc2guZ3RlID0gZ3RlO1xuICAgIGxvZGFzaC5oYXMgPSBoYXM7XG4gICAgbG9kYXNoLmhhc0luID0gaGFzSW47XG4gICAgbG9kYXNoLmhlYWQgPSBoZWFkO1xuICAgIGxvZGFzaC5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgIGxvZGFzaC5pbmNsdWRlcyA9IGluY2x1ZGVzO1xuICAgIGxvZGFzaC5pbmRleE9mID0gaW5kZXhPZjtcbiAgICBsb2Rhc2guaW5SYW5nZSA9IGluUmFuZ2U7XG4gICAgbG9kYXNoLmludm9rZSA9IGludm9rZTtcbiAgICBsb2Rhc2guaXNBcmd1bWVudHMgPSBpc0FyZ3VtZW50cztcbiAgICBsb2Rhc2guaXNBcnJheSA9IGlzQXJyYXk7XG4gICAgbG9kYXNoLmlzQXJyYXlCdWZmZXIgPSBpc0FycmF5QnVmZmVyO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZSA9IGlzQXJyYXlMaWtlO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZU9iamVjdCA9IGlzQXJyYXlMaWtlT2JqZWN0O1xuICAgIGxvZGFzaC5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgbG9kYXNoLmlzQnVmZmVyID0gaXNCdWZmZXI7XG4gICAgbG9kYXNoLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBsb2Rhc2guaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuICAgIGxvZGFzaC5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICBsb2Rhc2guaXNFcXVhbCA9IGlzRXF1YWw7XG4gICAgbG9kYXNoLmlzRXF1YWxXaXRoID0gaXNFcXVhbFdpdGg7XG4gICAgbG9kYXNoLmlzRXJyb3IgPSBpc0Vycm9yO1xuICAgIGxvZGFzaC5pc0Zpbml0ZSA9IGlzRmluaXRlO1xuICAgIGxvZGFzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbiAgICBsb2Rhc2guaXNJbnRlZ2VyID0gaXNJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc0xlbmd0aCA9IGlzTGVuZ3RoO1xuICAgIGxvZGFzaC5pc01hcCA9IGlzTWFwO1xuICAgIGxvZGFzaC5pc01hdGNoID0gaXNNYXRjaDtcbiAgICBsb2Rhc2guaXNNYXRjaFdpdGggPSBpc01hdGNoV2l0aDtcbiAgICBsb2Rhc2guaXNOYU4gPSBpc05hTjtcbiAgICBsb2Rhc2guaXNOYXRpdmUgPSBpc05hdGl2ZTtcbiAgICBsb2Rhc2guaXNOaWwgPSBpc05pbDtcbiAgICBsb2Rhc2guaXNOdWxsID0gaXNOdWxsO1xuICAgIGxvZGFzaC5pc051bWJlciA9IGlzTnVtYmVyO1xuICAgIGxvZGFzaC5pc09iamVjdCA9IGlzT2JqZWN0O1xuICAgIGxvZGFzaC5pc09iamVjdExpa2UgPSBpc09iamVjdExpa2U7XG4gICAgbG9kYXNoLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuICAgIGxvZGFzaC5pc1NhZmVJbnRlZ2VyID0gaXNTYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNTZXQgPSBpc1NldDtcbiAgICBsb2Rhc2guaXNTdHJpbmcgPSBpc1N0cmluZztcbiAgICBsb2Rhc2guaXNTeW1ib2wgPSBpc1N5bWJvbDtcbiAgICBsb2Rhc2guaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuICAgIGxvZGFzaC5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuICAgIGxvZGFzaC5pc1dlYWtNYXAgPSBpc1dlYWtNYXA7XG4gICAgbG9kYXNoLmlzV2Vha1NldCA9IGlzV2Vha1NldDtcbiAgICBsb2Rhc2guam9pbiA9IGpvaW47XG4gICAgbG9kYXNoLmtlYmFiQ2FzZSA9IGtlYmFiQ2FzZTtcbiAgICBsb2Rhc2gubGFzdCA9IGxhc3Q7XG4gICAgbG9kYXNoLmxhc3RJbmRleE9mID0gbGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLmxvd2VyQ2FzZSA9IGxvd2VyQ2FzZTtcbiAgICBsb2Rhc2gubG93ZXJGaXJzdCA9IGxvd2VyRmlyc3Q7XG4gICAgbG9kYXNoLmx0ID0gbHQ7XG4gICAgbG9kYXNoLmx0ZSA9IGx0ZTtcbiAgICBsb2Rhc2gubWF4ID0gbWF4O1xuICAgIGxvZGFzaC5tYXhCeSA9IG1heEJ5O1xuICAgIGxvZGFzaC5tZWFuID0gbWVhbjtcbiAgICBsb2Rhc2gubWVhbkJ5ID0gbWVhbkJ5O1xuICAgIGxvZGFzaC5taW4gPSBtaW47XG4gICAgbG9kYXNoLm1pbkJ5ID0gbWluQnk7XG4gICAgbG9kYXNoLnN0dWJBcnJheSA9IHN0dWJBcnJheTtcbiAgICBsb2Rhc2guc3R1YkZhbHNlID0gc3R1YkZhbHNlO1xuICAgIGxvZGFzaC5zdHViT2JqZWN0ID0gc3R1Yk9iamVjdDtcbiAgICBsb2Rhc2guc3R1YlN0cmluZyA9IHN0dWJTdHJpbmc7XG4gICAgbG9kYXNoLnN0dWJUcnVlID0gc3R1YlRydWU7XG4gICAgbG9kYXNoLm11bHRpcGx5ID0gbXVsdGlwbHk7XG4gICAgbG9kYXNoLm50aCA9IG50aDtcbiAgICBsb2Rhc2gubm9Db25mbGljdCA9IG5vQ29uZmxpY3Q7XG4gICAgbG9kYXNoLm5vb3AgPSBub29wO1xuICAgIGxvZGFzaC5ub3cgPSBub3c7XG4gICAgbG9kYXNoLnBhZCA9IHBhZDtcbiAgICBsb2Rhc2gucGFkRW5kID0gcGFkRW5kO1xuICAgIGxvZGFzaC5wYWRTdGFydCA9IHBhZFN0YXJ0O1xuICAgIGxvZGFzaC5wYXJzZUludCA9IHBhcnNlSW50O1xuICAgIGxvZGFzaC5yYW5kb20gPSByYW5kb207XG4gICAgbG9kYXNoLnJlZHVjZSA9IHJlZHVjZTtcbiAgICBsb2Rhc2gucmVkdWNlUmlnaHQgPSByZWR1Y2VSaWdodDtcbiAgICBsb2Rhc2gucmVwZWF0ID0gcmVwZWF0O1xuICAgIGxvZGFzaC5yZXBsYWNlID0gcmVwbGFjZTtcbiAgICBsb2Rhc2gucmVzdWx0ID0gcmVzdWx0O1xuICAgIGxvZGFzaC5yb3VuZCA9IHJvdW5kO1xuICAgIGxvZGFzaC5ydW5JbkNvbnRleHQgPSBydW5JbkNvbnRleHQ7XG4gICAgbG9kYXNoLnNhbXBsZSA9IHNhbXBsZTtcbiAgICBsb2Rhc2guc2l6ZSA9IHNpemU7XG4gICAgbG9kYXNoLnNuYWtlQ2FzZSA9IHNuYWtlQ2FzZTtcbiAgICBsb2Rhc2guc29tZSA9IHNvbWU7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4ID0gc29ydGVkSW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4QnkgPSBzb3J0ZWRJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleE9mID0gc29ydGVkSW5kZXhPZjtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4ID0gc29ydGVkTGFzdEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhCeSA9IHNvcnRlZExhc3RJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhPZiA9IHNvcnRlZExhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5zdGFydENhc2UgPSBzdGFydENhc2U7XG4gICAgbG9kYXNoLnN0YXJ0c1dpdGggPSBzdGFydHNXaXRoO1xuICAgIGxvZGFzaC5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIGxvZGFzaC5zdW0gPSBzdW07XG4gICAgbG9kYXNoLnN1bUJ5ID0gc3VtQnk7XG4gICAgbG9kYXNoLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgbG9kYXNoLnRpbWVzID0gdGltZXM7XG4gICAgbG9kYXNoLnRvRmluaXRlID0gdG9GaW5pdGU7XG4gICAgbG9kYXNoLnRvSW50ZWdlciA9IHRvSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9MZW5ndGggPSB0b0xlbmd0aDtcbiAgICBsb2Rhc2gudG9Mb3dlciA9IHRvTG93ZXI7XG4gICAgbG9kYXNoLnRvTnVtYmVyID0gdG9OdW1iZXI7XG4gICAgbG9kYXNoLnRvU2FmZUludGVnZXIgPSB0b1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIGxvZGFzaC50b1VwcGVyID0gdG9VcHBlcjtcbiAgICBsb2Rhc2gudHJpbSA9IHRyaW07XG4gICAgbG9kYXNoLnRyaW1FbmQgPSB0cmltRW5kO1xuICAgIGxvZGFzaC50cmltU3RhcnQgPSB0cmltU3RhcnQ7XG4gICAgbG9kYXNoLnRydW5jYXRlID0gdHJ1bmNhdGU7XG4gICAgbG9kYXNoLnVuZXNjYXBlID0gdW5lc2NhcGU7XG4gICAgbG9kYXNoLnVuaXF1ZUlkID0gdW5pcXVlSWQ7XG4gICAgbG9kYXNoLnVwcGVyQ2FzZSA9IHVwcGVyQ2FzZTtcbiAgICBsb2Rhc2gudXBwZXJGaXJzdCA9IHVwcGVyRmlyc3Q7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZmlyc3QgPSBoZWFkO1xuXG4gICAgbWl4aW4obG9kYXNoLCAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0ge307XG4gICAgICBiYXNlRm9yT3duKGxvZGFzaCwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLnByb3RvdHlwZSwgbWV0aG9kTmFtZSkpIHtcbiAgICAgICAgICBzb3VyY2VbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfSgpKSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgbG9kYXNoLlZFUlNJT04gPSBWRVJTSU9OO1xuXG4gICAgLy8gQXNzaWduIGRlZmF1bHQgcGxhY2Vob2xkZXJzLlxuICAgIGFycmF5RWFjaChbJ2JpbmQnLCAnYmluZEtleScsICdjdXJyeScsICdjdXJyeVJpZ2h0JywgJ3BhcnRpYWwnLCAncGFydGlhbFJpZ2h0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIGxvZGFzaFttZXRob2ROYW1lXS5wbGFjZWhvbGRlciA9IGxvZGFzaDtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmRyb3BgIGFuZCBgXy50YWtlYCB2YXJpYW50cy5cbiAgICBhcnJheUVhY2goWydkcm9wJywgJ3Rha2UnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgbiA9IG4gPT09IHVuZGVmaW5lZCA/IDEgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKG4pLCAwKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gKHRoaXMuX19maWx0ZXJlZF9fICYmICFpbmRleClcbiAgICAgICAgICA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKVxuICAgICAgICAgIDogdGhpcy5jbG9uZSgpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSBuYXRpdmVNaW4obiwgcmVzdWx0Ll9fdGFrZUNvdW50X18pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5fX3ZpZXdzX18ucHVzaCh7XG4gICAgICAgICAgICAnc2l6ZSc6IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKSxcbiAgICAgICAgICAgICd0eXBlJzogbWV0aG9kTmFtZSArIChyZXN1bHQuX19kaXJfXyA8IDAgPyAnUmlnaHQnIDogJycpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lICsgJ1JpZ2h0J10gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKVttZXRob2ROYW1lXShuKS5yZXZlcnNlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0aGF0IGFjY2VwdCBhbiBgaXRlcmF0ZWVgIHZhbHVlLlxuICAgIGFycmF5RWFjaChbJ2ZpbHRlcicsICdtYXAnLCAndGFrZVdoaWxlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdHlwZSA9IGluZGV4ICsgMSxcbiAgICAgICAgICBpc0ZpbHRlciA9IHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRyB8fCB0eXBlID09IExBWllfV0hJTEVfRkxBRztcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18ucHVzaCh7XG4gICAgICAgICAgJ2l0ZXJhdGVlJzogZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLFxuICAgICAgICAgICd0eXBlJzogdHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHJlc3VsdC5fX2ZpbHRlcmVkX18gfHwgaXNGaWx0ZXI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaGVhZGAgYW5kIGBfLmxhc3RgLlxuICAgIGFycmF5RWFjaChbJ2hlYWQnLCAnbGFzdCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHRha2VOYW1lID0gJ3Rha2UnICsgKGluZGV4ID8gJ1JpZ2h0JyA6ICcnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3Rha2VOYW1lXSgxKS52YWx1ZSgpWzBdO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmluaXRpYWxgIGFuZCBgXy50YWlsYC5cbiAgICBhcnJheUVhY2goWydpbml0aWFsJywgJ3RhaWwnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBkcm9wTmFtZSA9ICdkcm9wJyArIChpbmRleCA/ICcnIDogJ1JpZ2h0Jyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2ZpbHRlcmVkX18gPyBuZXcgTGF6eVdyYXBwZXIodGhpcykgOiB0aGlzW2Ryb3BOYW1lXSgxKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29tcGFjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGlkZW50aXR5KTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihwcmVkaWNhdGUpLmhlYWQoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmRMYXN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuZmluZChwcmVkaWNhdGUpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB0aGlzO1xuICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18gJiYgKHN0YXJ0ID4gMCB8fCBlbmQgPCAwKSkge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC50YWtlUmlnaHQoLXN0YXJ0KTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmRyb3Aoc3RhcnQpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHRvSW50ZWdlcihlbmQpO1xuICAgICAgICByZXN1bHQgPSBlbmQgPCAwID8gcmVzdWx0LmRyb3BSaWdodCgtZW5kKSA6IHJlc3VsdC50YWtlKGVuZCAtIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50YWtlUmlnaHRXaGlsZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLnRha2VXaGlsZShwcmVkaWNhdGUpLnJldmVyc2UoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRha2UoTUFYX0FSUkFZX0xFTkdUSCk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgY2hlY2tJdGVyYXRlZSA9IC9eKD86ZmlsdGVyfGZpbmR8bWFwfHJlamVjdCl8V2hpbGUkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGlzVGFrZXIgPSAvXig/OmhlYWR8bGFzdCkkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbaXNUYWtlciA/ICgndGFrZScgKyAobWV0aG9kTmFtZSA9PSAnbGFzdCcgPyAnUmlnaHQnIDogJycpKSA6IG1ldGhvZE5hbWVdLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IGlzVGFrZXIgfHwgL15maW5kLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBpZiAoIWxvZGFzaEZ1bmMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgICAgYXJncyA9IGlzVGFrZXIgPyBbMV0gOiBhcmd1bWVudHMsXG4gICAgICAgICAgICBpc0xhenkgPSB2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyLFxuICAgICAgICAgICAgaXRlcmF0ZWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgdXNlTGF6eSA9IGlzTGF6eSB8fCBpc0FycmF5KHZhbHVlKTtcblxuICAgICAgICB2YXIgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2hGdW5jLmFwcGx5KGxvZGFzaCwgYXJyYXlQdXNoKFt2YWx1ZV0sIGFyZ3MpKTtcbiAgICAgICAgICByZXR1cm4gKGlzVGFrZXIgJiYgY2hhaW5BbGwpID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh1c2VMYXp5ICYmIGNoZWNrSXRlcmF0ZWUgJiYgdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgJiYgaXRlcmF0ZWUubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICAvLyBBdm9pZCBsYXp5IHVzZSBpZiB0aGUgaXRlcmF0ZWUgaGFzIGEgXCJsZW5ndGhcIiB2YWx1ZSBvdGhlciB0aGFuIGAxYC5cbiAgICAgICAgICBpc0xhenkgPSB1c2VMYXp5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICBpc0h5YnJpZCA9ICEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsXG4gICAgICAgICAgICBpc1Vud3JhcHBlZCA9IHJldFVud3JhcHBlZCAmJiAhY2hhaW5BbGwsXG4gICAgICAgICAgICBvbmx5TGF6eSA9IGlzTGF6eSAmJiAhaXNIeWJyaWQ7XG5cbiAgICAgICAgaWYgKCFyZXRVbndyYXBwZWQgJiYgdXNlTGF6eSkge1xuICAgICAgICAgIHZhbHVlID0gb25seUxhenkgPyB2YWx1ZSA6IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fLnB1c2goeyAnZnVuYyc6IHRocnUsICdhcmdzJzogW2ludGVyY2VwdG9yXSwgJ3RoaXNBcmcnOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vud3JhcHBlZCAmJiBvbmx5TGF6eSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICAgIHJldHVybiBpc1Vud3JhcHBlZCA/IChpc1Rha2VyID8gcmVzdWx0LnZhbHVlKClbMF0gOiByZXN1bHQudmFsdWUoKSkgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBBcnJheWAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYXJyYXlFYWNoKFsncG9wJywgJ3B1c2gnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IGFycmF5UHJvdG9bbWV0aG9kTmFtZV0sXG4gICAgICAgICAgY2hhaW5OYW1lID0gL14oPzpwdXNofHNvcnR8dW5zaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpID8gJ3RhcCcgOiAndGhydScsXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gL14oPzpwb3B8c2hpZnQpJC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgaWYgKHJldFVud3JhcHBlZCAmJiAhdGhpcy5fX2NoYWluX18pIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1tjaGFpbk5hbWVdKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gTWFwIG1pbmlmaWVkIG1ldGhvZCBuYW1lcyB0byB0aGVpciByZWFsIG5hbWVzLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgbG9kYXNoRnVuYyA9IGxvZGFzaFttZXRob2ROYW1lXTtcbiAgICAgIGlmIChsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHZhciBrZXkgPSBsb2Rhc2hGdW5jLm5hbWUgKyAnJztcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywga2V5KSkge1xuICAgICAgICAgIHJlYWxOYW1lc1trZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmVhbE5hbWVzW2tleV0ucHVzaCh7ICduYW1lJzogbWV0aG9kTmFtZSwgJ2Z1bmMnOiBsb2Rhc2hGdW5jIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVhbE5hbWVzW2NyZWF0ZUh5YnJpZCh1bmRlZmluZWQsIFdSQVBfQklORF9LRVlfRkxBRykubmFtZV0gPSBbe1xuICAgICAgJ25hbWUnOiAnd3JhcHBlcicsXG4gICAgICAnZnVuYyc6IHVuZGVmaW5lZFxuICAgIH1dO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExhenlXcmFwcGVyYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY2xvbmUgPSBsYXp5Q2xvbmU7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJldmVyc2UgPSBsYXp5UmV2ZXJzZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudmFsdWUgPSBsYXp5VmFsdWU7XG5cbiAgICAvLyBBZGQgY2hhaW4gc2VxdWVuY2UgbWV0aG9kcyB0byB0aGUgYGxvZGFzaGAgd3JhcHBlci5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmF0ID0gd3JhcHBlckF0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY2hhaW4gPSB3cmFwcGVyQ2hhaW47XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb21taXQgPSB3cmFwcGVyQ29tbWl0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUubmV4dCA9IHdyYXBwZXJOZXh0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucGxhbnQgPSB3cmFwcGVyUGxhbnQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5yZXZlcnNlID0gd3JhcHBlclJldmVyc2U7XG4gICAgbG9kYXNoLnByb3RvdHlwZS50b0pTT04gPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlT2YgPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlID0gd3JhcHBlclZhbHVlO1xuXG4gICAgLy8gQWRkIGxhenkgYWxpYXNlcy5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmZpcnN0ID0gbG9kYXNoLnByb3RvdHlwZS5oZWFkO1xuXG4gICAgaWYgKHN5bUl0ZXJhdG9yKSB7XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW3N5bUl0ZXJhdG9yXSA9IHdyYXBwZXJUb0l0ZXJhdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbG9kYXNoO1xuICB9KTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBFeHBvcnQgbG9kYXNoLlxuICB2YXIgXyA9IHJ1bkluQ29udGV4dCgpO1xuXG4gIC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIGNvbmRpdGlvbiBwYXR0ZXJucyBsaWtlOlxuICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBFeHBvc2UgTG9kYXNoIG9uIHRoZSBnbG9iYWwgb2JqZWN0IHRvIHByZXZlbnQgZXJyb3JzIHdoZW4gTG9kYXNoIGlzXG4gICAgLy8gbG9hZGVkIGJ5IGEgc2NyaXB0IHRhZyBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gQU1EIGxvYWRlci5cbiAgICAvLyBTZWUgaHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9lcnJvcnMuaHRtbCNtaXNtYXRjaCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIC8vIFVzZSBgXy5ub0NvbmZsaWN0YCB0byByZW1vdmUgTG9kYXNoIGZyb20gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcblxuICAgIC8vIERlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvLCB0aHJvdWdoIHBhdGggbWFwcGluZywgaXQgY2FuIGJlXG4gICAgLy8gcmVmZXJlbmNlZCBhcyB0aGUgXCJ1bmRlcnNjb3JlXCIgbW9kdWxlLlxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG4gIC8vIENoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGl0LlxuICBlbHNlIGlmIChmcmVlTW9kdWxlKSB7XG4gICAgLy8gRXhwb3J0IGZvciBOb2RlLmpzLlxuICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXztcbiAgICAvLyBFeHBvcnQgZm9yIENvbW1vbkpTIHN1cHBvcnQuXG4gICAgZnJlZUV4cG9ydHMuXyA9IF87XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gRXhwb3J0IHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheUxpbWl0IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQociwgbCkge1xuICB2YXIgdCA9IG51bGwgPT0gciA/IG51bGwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgcltTeW1ib2wuaXRlcmF0b3JdIHx8IHJbXCJAQGl0ZXJhdG9yXCJdO1xuICBpZiAobnVsbCAhPSB0KSB7XG4gICAgdmFyIGUsXG4gICAgICBuLFxuICAgICAgaSxcbiAgICAgIHUsXG4gICAgICBhID0gW10sXG4gICAgICBmID0gITAsXG4gICAgICBvID0gITE7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpID0gKHQgPSB0LmNhbGwocikpLm5leHQsIDAgPT09IGwpIHtcbiAgICAgICAgaWYgKE9iamVjdCh0KSAhPT0gdCkgcmV0dXJuO1xuICAgICAgICBmID0gITE7XG4gICAgICB9IGVsc2UgZm9yICg7ICEoZiA9IChlID0gaS5jYWxsKHQpKS5kb25lKSAmJiAoYS5wdXNoKGUudmFsdWUpLCBhLmxlbmd0aCAhPT0gbCk7IGYgPSAhMCk7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgbyA9ICEwLCBuID0gcjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFmICYmIG51bGwgIT0gdFtcInJldHVyblwiXSAmJiAodSA9IHRbXCJyZXR1cm5cIl0oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKG8pIHRocm93IG47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCIuL3R5cGVvZi5qc1wiO1xuaW1wb3J0IHRvUHJpbWl0aXZlIGZyb20gXCIuL3RvUHJpbWl0aXZlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7XG4gIHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkge1xuICBpZiAoX3R5cGVvZihpbnB1dCkgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDtcbiAgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdO1xuICBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7XG4gICAgaWYgKF90eXBlb2YocmVzKSAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7XG59IiwiaW1wb3J0IHRvUHJvcGVydHlLZXkgZnJvbSBcIi4vdG9Qcm9wZXJ0eUtleS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBrZXkgPSB0b1Byb3BlcnR5S2V5KGtleSk7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBvYmo7XG59IiwiLy8gaWYgJCRQUkVCSURfR0xPQkFMJCQgYWxyZWFkeSBleGlzdHMgaW4gZ2xvYmFsIGRvY3VtZW50IHNjb3BlLCB1c2UgaXQsIGlmIG5vdCwgY3JlYXRlIHRoZSBvYmplY3Rcbi8vIGdsb2JhbCBkZWZpbmF0aW9uIHNob3VsZCBoYXBwZW4gQkVGT1JFIGltcG9ydHMgdG8gYXZvaWQgZ2xvYmFsIHVuZGVmaW5lZCBlcnJvcnMuXG4vKiBnbG9iYWwgJCRERUZJTkVfUFJFQklEX0dMT0JBTCQkICovXG5jb25zdCBzY29wZSA9ICEkJERFRklORV9QUkVCSURfR0xPQkFMJCQgPyB7fSA6IHdpbmRvdztcbmNvbnN0IGdsb2JhbCA9IHNjb3BlLiQkUFJFQklEX0dMT0JBTCQkID0gc2NvcGUuJCRQUkVCSURfR0xPQkFMJCQgfHwge307XG5nbG9iYWwuY21kID0gZ2xvYmFsLmNtZCB8fCBbXTtcbmdsb2JhbC5xdWUgPSBnbG9iYWwucXVlIHx8IFtdO1xuXG4vLyBjcmVhdGUgYSBwYmpzIGdsb2JhbCBwb2ludGVyXG5pZiAoc2NvcGUgPT09IHdpbmRvdykge1xuICBzY29wZS5fcGJqc0dsb2JhbHMgPSBzY29wZS5fcGJqc0dsb2JhbHMgfHwgW107XG4gIHNjb3BlLl9wYmpzR2xvYmFscy5wdXNoKCckJFBSRUJJRF9HTE9CQUwkJCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsKCkge1xuICByZXR1cm4gZ2xvYmFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJNb2R1bGUobmFtZSkge1xuICBnbG9iYWwuaW5zdGFsbGVkTW9kdWxlcy5wdXNoKG5hbWUpO1xufVxuIiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSBcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCIvLyBUaGVzZSBzdHVicyBhcmUgaGVyZSB0byBoZWxwIHRyYW5zaXRpb24gYXdheSBmcm9tIGNvcmUtanMgcG9seWZpbGxzIGZvciBicm93c2VycyB3ZSBhcmUgbm8gbG9uZ2VyIHN1cHBvcnRpbmcuXG4vLyBZb3Ugc2hvdWxkIG5vdCBuZWVkIHRoZXNlIGZvciBuZXcgY29kZTsgdXNlIHN0b2NrIEpTIGluc3RlYWQhXG5cbmV4cG9ydCBmdW5jdGlvbiBpbmNsdWRlcyh0YXJnZXQsIGVsZW0sIHN0YXJ0KSB7XG4gIHJldHVybiAodGFyZ2V0ICYmIHRhcmdldC5pbmNsdWRlcyhlbGVtLCBzdGFydCkpIHx8IGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlGcm9tKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbS5hcHBseShBcnJheSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmQoYXJyLCBwcmVkLCB0aGlzQXJnKSB7XG4gIHJldHVybiBhcnIgJiYgYXJyLmZpbmQocHJlZCwgdGhpc0FyZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcmVkLCB0aGlzQXJnKSB7XG4gIHJldHVybiBhcnIgJiYgYXJyLmZpbmRJbmRleChwcmVkLCB0aGlzQXJnKTtcbn1cbiIsImltcG9ydCB7ZmluZH0gZnJvbSAnLi9wb2x5ZmlsbC5qcyc7XG5pbXBvcnQgeyBpc0VtcHR5LCBsb2dXYXJuIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZy5qcyc7XG5cbmNvbnN0IF9kZWZhdWx0UHJlY2lzaW9uID0gMjtcbmNvbnN0IF9sZ1ByaWNlQ29uZmlnID0ge1xuICAnYnVja2V0cyc6IFt7XG4gICAgJ21heCc6IDUsXG4gICAgJ2luY3JlbWVudCc6IDAuNVxuICB9XVxufTtcbmNvbnN0IF9tZ1ByaWNlQ29uZmlnID0ge1xuICAnYnVja2V0cyc6IFt7XG4gICAgJ21heCc6IDIwLFxuICAgICdpbmNyZW1lbnQnOiAwLjFcbiAgfV1cbn07XG5jb25zdCBfaGdQcmljZUNvbmZpZyA9IHtcbiAgJ2J1Y2tldHMnOiBbe1xuICAgICdtYXgnOiAyMCxcbiAgICAnaW5jcmVtZW50JzogMC4wMVxuICB9XVxufTtcbmNvbnN0IF9kZW5zZVByaWNlQ29uZmlnID0ge1xuICAnYnVja2V0cyc6IFt7XG4gICAgJ21heCc6IDMsXG4gICAgJ2luY3JlbWVudCc6IDAuMDFcbiAgfSxcbiAge1xuICAgICdtYXgnOiA4LFxuICAgICdpbmNyZW1lbnQnOiAwLjA1XG4gIH0sXG4gIHtcbiAgICAnbWF4JzogMjAsXG4gICAgJ2luY3JlbWVudCc6IDAuNVxuICB9XVxufTtcbmNvbnN0IF9hdXRvUHJpY2VDb25maWcgPSB7XG4gICdidWNrZXRzJzogW3tcbiAgICAnbWF4JzogNSxcbiAgICAnaW5jcmVtZW50JzogMC4wNVxuICB9LFxuICB7XG4gICAgJ21heCc6IDEwLFxuICAgICdpbmNyZW1lbnQnOiAwLjFcbiAgfSxcbiAge1xuICAgICdtYXgnOiAyMCxcbiAgICAnaW5jcmVtZW50JzogMC41XG4gIH1dXG59O1xuXG5mdW5jdGlvbiBnZXRQcmljZUJ1Y2tldFN0cmluZyhjcG0sIGN1c3RvbUNvbmZpZywgZ3JhbnVsYXJpdHlNdWx0aXBsaWVyID0gMSkge1xuICBsZXQgY3BtRmxvYXQgPSBwYXJzZUZsb2F0KGNwbSk7XG4gIGlmIChpc05hTihjcG1GbG9hdCkpIHtcbiAgICBjcG1GbG9hdCA9ICcnO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsb3c6IChjcG1GbG9hdCA9PT0gJycpID8gJycgOiBnZXRDcG1TdHJpbmdWYWx1ZShjcG0sIF9sZ1ByaWNlQ29uZmlnLCBncmFudWxhcml0eU11bHRpcGxpZXIpLFxuICAgIG1lZDogKGNwbUZsb2F0ID09PSAnJykgPyAnJyA6IGdldENwbVN0cmluZ1ZhbHVlKGNwbSwgX21nUHJpY2VDb25maWcsIGdyYW51bGFyaXR5TXVsdGlwbGllciksXG4gICAgaGlnaDogKGNwbUZsb2F0ID09PSAnJykgPyAnJyA6IGdldENwbVN0cmluZ1ZhbHVlKGNwbSwgX2hnUHJpY2VDb25maWcsIGdyYW51bGFyaXR5TXVsdGlwbGllciksXG4gICAgYXV0bzogKGNwbUZsb2F0ID09PSAnJykgPyAnJyA6IGdldENwbVN0cmluZ1ZhbHVlKGNwbSwgX2F1dG9QcmljZUNvbmZpZywgZ3JhbnVsYXJpdHlNdWx0aXBsaWVyKSxcbiAgICBkZW5zZTogKGNwbUZsb2F0ID09PSAnJykgPyAnJyA6IGdldENwbVN0cmluZ1ZhbHVlKGNwbSwgX2RlbnNlUHJpY2VDb25maWcsIGdyYW51bGFyaXR5TXVsdGlwbGllciksXG4gICAgY3VzdG9tOiAoY3BtRmxvYXQgPT09ICcnKSA/ICcnIDogZ2V0Q3BtU3RyaW5nVmFsdWUoY3BtLCBjdXN0b21Db25maWcsIGdyYW51bGFyaXR5TXVsdGlwbGllcilcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q3BtU3RyaW5nVmFsdWUoY3BtLCBjb25maWcsIGdyYW51bGFyaXR5TXVsdGlwbGllcikge1xuICBsZXQgY3BtU3RyID0gJyc7XG4gIGlmICghaXNWYWxpZFByaWNlQ29uZmlnKGNvbmZpZykpIHtcbiAgICByZXR1cm4gY3BtU3RyO1xuICB9XG4gIGNvbnN0IGNhcCA9IGNvbmZpZy5idWNrZXRzLnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xuICAgIGlmIChwcmV2Lm1heCA+IGN1cnIubWF4KSB7XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnI7XG4gIH0sIHtcbiAgICAnbWF4JzogMCxcbiAgfSk7XG5cbiAgbGV0IGJ1Y2tldEZsb29yID0gMDtcbiAgbGV0IGJ1Y2tldCA9IGZpbmQoY29uZmlnLmJ1Y2tldHMsIGJ1Y2tldCA9PiB7XG4gICAgaWYgKGNwbSA+IGNhcC5tYXggKiBncmFudWxhcml0eU11bHRpcGxpZXIpIHtcbiAgICAgIC8vIGNwbSBleGNlZWRzIGNhcCwganVzdCByZXR1cm4gdGhlIGNhcC5cbiAgICAgIGxldCBwcmVjaXNpb24gPSBidWNrZXQucHJlY2lzaW9uO1xuICAgICAgaWYgKHR5cGVvZiBwcmVjaXNpb24gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByZWNpc2lvbiA9IF9kZWZhdWx0UHJlY2lzaW9uO1xuICAgICAgfVxuICAgICAgY3BtU3RyID0gKGJ1Y2tldC5tYXggKiBncmFudWxhcml0eU11bHRpcGxpZXIpLnRvRml4ZWQocHJlY2lzaW9uKTtcbiAgICB9IGVsc2UgaWYgKGNwbSA8PSBidWNrZXQubWF4ICogZ3JhbnVsYXJpdHlNdWx0aXBsaWVyICYmIGNwbSA+PSBidWNrZXRGbG9vciAqIGdyYW51bGFyaXR5TXVsdGlwbGllcikge1xuICAgICAgYnVja2V0Lm1pbiA9IGJ1Y2tldEZsb29yO1xuICAgICAgcmV0dXJuIGJ1Y2tldDtcbiAgICB9IGVsc2Uge1xuICAgICAgYnVja2V0Rmxvb3IgPSBidWNrZXQubWF4O1xuICAgIH1cbiAgfSk7XG4gIGlmIChidWNrZXQpIHtcbiAgICBjcG1TdHIgPSBnZXRDcG1UYXJnZXQoY3BtLCBidWNrZXQsIGdyYW51bGFyaXR5TXVsdGlwbGllcik7XG4gIH1cbiAgcmV0dXJuIGNwbVN0cjtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZFByaWNlQ29uZmlnKGNvbmZpZykge1xuICBpZiAoaXNFbXB0eShjb25maWcpIHx8ICFjb25maWcuYnVja2V0cyB8fCAhQXJyYXkuaXNBcnJheShjb25maWcuYnVja2V0cykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuICBjb25maWcuYnVja2V0cy5mb3JFYWNoKGJ1Y2tldCA9PiB7XG4gICAgaWYgKCFidWNrZXQubWF4IHx8ICFidWNrZXQuaW5jcmVtZW50KSB7XG4gICAgICBpc1ZhbGlkID0gZmFsc2U7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGlzVmFsaWQ7XG59XG5cbmZ1bmN0aW9uIGdldENwbVRhcmdldChjcG0sIGJ1Y2tldCwgZ3JhbnVsYXJpdHlNdWx0aXBsaWVyKSB7XG4gIGNvbnN0IHByZWNpc2lvbiA9IHR5cGVvZiBidWNrZXQucHJlY2lzaW9uICE9PSAndW5kZWZpbmVkJyA/IGJ1Y2tldC5wcmVjaXNpb24gOiBfZGVmYXVsdFByZWNpc2lvbjtcbiAgY29uc3QgaW5jcmVtZW50ID0gYnVja2V0LmluY3JlbWVudCAqIGdyYW51bGFyaXR5TXVsdGlwbGllcjtcbiAgY29uc3QgYnVja2V0TWluID0gYnVja2V0Lm1pbiAqIGdyYW51bGFyaXR5TXVsdGlwbGllcjtcbiAgbGV0IHJvdW5kaW5nRnVuY3Rpb24gPSBNYXRoLmZsb29yO1xuICBsZXQgY3VzdG9tUm91bmRpbmdGdW5jdGlvbiA9IGNvbmZpZy5nZXRDb25maWcoJ2NwbVJvdW5kaW5nRnVuY3Rpb24nKTtcbiAgaWYgKHR5cGVvZiBjdXN0b21Sb3VuZGluZ0Z1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcm91bmRpbmdGdW5jdGlvbiA9IGN1c3RvbVJvdW5kaW5nRnVuY3Rpb247XG4gIH1cblxuICAvLyBzdGFydCBpbmNyZW1lbnRzIGF0IHRoZSBidWNrZXQgbWluIGFuZCB0aGVuIGFkZCBidWNrZXQgbWluIGJhY2sgdG8gYXJyaXZlIGF0IHRoZSBjb3JyZWN0IHJvdW5kaW5nXG4gIC8vIG5vdGUgLSB3ZSdyZSBwYWRkaW5nIHRoZSB2YWx1ZXMgdG8gYXZvaWQgdXNpbmcgZGVjaW1hbHMgaW4gdGhlIG1hdGggcHJpb3IgdG8gZmxvb3JpbmdcbiAgLy8gdGhpcyBpcyBkb25lIGFzIEpTIGNhbiByZXR1cm4gdmFsdWVzIHNsaWdodGx5IGJlbG93IHRoZSBleHBlY3RlZCBtYXJrIHdoaWNoIHdvdWxkIHNrZXcgdGhlIHByaWNlIGJ1Y2tldCB0YXJnZXRcbiAgLy8gICAoZWcgNC4wMSAvIDAuMDEgPSA0MDAuOTk5OTk5OTk5OTk5OTQpXG4gIC8vIG1pbiBwcmVjaXNvbiBzaG91bGQgYmUgMiB0byBtb3ZlIGRlY2ltYWwgcGxhY2Ugb3Zlci5cbiAgbGV0IHBvdyA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24gKyAyKTtcbiAgbGV0IGNwbVRvUm91bmQgPSAoKGNwbSAqIHBvdykgLSAoYnVja2V0TWluICogcG93KSkgLyAoaW5jcmVtZW50ICogcG93KTtcbiAgbGV0IGNwbVRhcmdldDtcbiAgbGV0IGludmFsaWRSb3VuZGluZztcbiAgLy8gSXQgaXMgbGlrZWx5IHRoYXQgd2Ugd2lsbCBiZSBwYXNzZWQge2NwbVJvdW5kaW5nRnVuY3Rpb246IHJvdW5kaW5nRnVuY3Rpb24oKX1cbiAgLy8gcmF0aGVyIHRoYW4gdGhlIGV4cGVjdGVkIHtjcG1Sb3VuZGluZ0Z1bmN0aW9uOiByb3VuZGluZ0Z1bmN0aW9ufS4gRGVmYXVsdCBiYWNrIHRvIGZsb29yIGluIHRoYXQgY2FzZVxuICB0cnkge1xuICAgIGNwbVRhcmdldCA9IChyb3VuZGluZ0Z1bmN0aW9uKGNwbVRvUm91bmQpICogaW5jcmVtZW50KSArIGJ1Y2tldE1pbjtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaW52YWxpZFJvdW5kaW5nID0gdHJ1ZTtcbiAgfVxuICBpZiAoaW52YWxpZFJvdW5kaW5nIHx8IHR5cGVvZiBjcG1UYXJnZXQgIT09ICdudW1iZXInKSB7XG4gICAgbG9nV2FybignSW52YWxpZCByb3VuZGluZyBmdW5jdGlvbiBwYXNzZWQgaW4gY29uZmlnJyk7XG4gICAgY3BtVGFyZ2V0ID0gKE1hdGguZmxvb3IoY3BtVG9Sb3VuZCkgKiBpbmNyZW1lbnQpICsgYnVja2V0TWluO1xuICB9XG4gIC8vIGZvcmNlIHRvIDEwIGRlY2ltYWwgcGxhY2VzIHRvIGRlYWwgd2l0aCBpbXByZWNpc2UgZGVjaW1hbC9iaW5hcnkgY29udmVyc2lvbnNcbiAgLy8gICAgKGZvciBleGFtcGxlIDAuMSAqIDMgPSAwLjMwMDAwMDAwMDAwMDAwMDA0KVxuXG4gIGNwbVRhcmdldCA9IE51bWJlcihjcG1UYXJnZXQudG9GaXhlZCgxMCkpO1xuICByZXR1cm4gY3BtVGFyZ2V0LnRvRml4ZWQocHJlY2lzaW9uKTtcbn1cblxuZXhwb3J0IHsgZ2V0UHJpY2VCdWNrZXRTdHJpbmcsIGlzVmFsaWRQcmljZUNvbmZpZyB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGx2KG9iaiwga2V5LCBkZWYsIHAsIHVuZGVmKSB7XG5cdGtleSA9IGtleS5zcGxpdCA/IGtleS5zcGxpdCgnLicpIDoga2V5O1xuXHRmb3IgKHAgPSAwOyBwIDwga2V5Lmxlbmd0aDsgcCsrKSB7XG5cdFx0b2JqID0gb2JqID8gb2JqW2tleVtwXV0gOiB1bmRlZjtcblx0fVxuXHRyZXR1cm4gb2JqID09PSB1bmRlZiA/IGRlZiA6IG9iajtcbn1cbiIsIi8qXG4gKiBNb2R1bGUgZm9yIGdldHRpbmcgYW5kIHNldHRpbmcgUHJlYmlkIGNvbmZpZ3VyYXRpb24uXG4qL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE1lZGlhVHlwZVByaWNlR3JhbnVsYXJpdHlcbiAqXG4gKiBAcHJvcGVydHkgeyhzdHJpbmd8T2JqZWN0KX0gW2Jhbm5lcl1cbiAqIEBwcm9wZXJ0eSB7KHN0cmluZ3xPYmplY3QpfSBbbmF0aXZlXVxuICogQHByb3BlcnR5IHsoc3RyaW5nfE9iamVjdCl9IFt2aWRlb11cbiAqIEBwcm9wZXJ0eSB7KHN0cmluZ3xPYmplY3QpfSBbdmlkZW8taW5zdHJlYW1dXG4gKiBAcHJvcGVydHkgeyhzdHJpbmd8T2JqZWN0KX0gW3ZpZGVvLW91dHN0cmVhbV1cbiAqL1xuXG5pbXBvcnQgeyBpc1ZhbGlkUHJpY2VDb25maWcgfSBmcm9tICcuL2NwbUJ1Y2tldE1hbmFnZXIuanMnO1xuaW1wb3J0IHtmaW5kLCBpbmNsdWRlcywgYXJyYXlGcm9tIGFzIGZyb219IGZyb20gJy4vcG9seWZpbGwuanMnO1xuaW1wb3J0IHtcbiAgbWVyZ2VEZWVwLCBkZWVwQ2xvbmUsIGdldFBhcmFtZXRlckJ5TmFtZSwgaXNQbGFpbk9iamVjdCwgbG9nTWVzc2FnZSwgbG9nV2FybiwgbG9nRXJyb3IsXG4gIGlzQXJyYXksIGlzU3RyLCBpc0Jvb2xlYW4sIGRlZXBBY2Nlc3MsIGJpbmRcbn0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgQ09OU1RBTlRTIGZyb20gJy4vY29uc3RhbnRzLmpzb24nO1xuXG5jb25zdCBERUZBVUxUX0RFQlVHID0gZ2V0UGFyYW1ldGVyQnlOYW1lKENPTlNUQU5UUy5ERUJVR19NT0RFKS50b1VwcGVyQ2FzZSgpID09PSAnVFJVRSc7XG5jb25zdCBERUZBVUxUX0JJRERFUl9USU1FT1VUID0gMzAwMDtcbmNvbnN0IERFRkFVTFRfRU5BQkxFX1NFTkRfQUxMX0JJRFMgPSB0cnVlO1xuY29uc3QgREVGQVVMVF9ESVNBQkxFX0FKQVhfVElNRU9VVCA9IGZhbHNlO1xuY29uc3QgREVGQVVMVF9CSURfQ0FDSEUgPSBmYWxzZTtcbmNvbnN0IERFRkFVTFRfREVWSUNFX0FDQ0VTUyA9IHRydWU7XG5jb25zdCBERUZBVUxUX01BWF9ORVNURURfSUZSQU1FUyA9IDEwO1xuXG5jb25zdCBERUZBVUxUX1RJTUVPVVRCVUZGRVIgPSA0MDA7XG5cbmV4cG9ydCBjb25zdCBSQU5ET00gPSAncmFuZG9tJztcbmNvbnN0IEZJWEVEID0gJ2ZpeGVkJztcblxuY29uc3QgVkFMSURfT1JERVJTID0ge307XG5WQUxJRF9PUkRFUlNbUkFORE9NXSA9IHRydWU7XG5WQUxJRF9PUkRFUlNbRklYRURdID0gdHJ1ZTtcblxuY29uc3QgREVGQVVMVF9CSURERVJfU0VRVUVOQ0UgPSBSQU5ET007XG5cbmNvbnN0IEdSQU5VTEFSSVRZX09QVElPTlMgPSB7XG4gIExPVzogJ2xvdycsXG4gIE1FRElVTTogJ21lZGl1bScsXG4gIEhJR0g6ICdoaWdoJyxcbiAgQVVUTzogJ2F1dG8nLFxuICBERU5TRTogJ2RlbnNlJyxcbiAgQ1VTVE9NOiAnY3VzdG9tJ1xufTtcblxuY29uc3QgQUxMX1RPUElDUyA9ICcqJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBQcmViaWRDb25maWdcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY2FjaGUudXJsIFNldCBhIHVybCBpZiB3ZSBzaG91bGQgdXNlIHByZWJpZC1jYWNoZSB0byBzdG9yZSB2aWRlbyBiaWRzIGJlZm9yZSBhZGRpbmdcbiAqICAgYmlkcyB0byB0aGUgYXVjdGlvbi4gKipOT1RFKiogVGhpcyBtdXN0IGJlIHNldCBpZiB5b3Ugd2FudCB0byB1c2UgdGhlIGRmcEFkU2VydmVyVmlkZW8gbW9kdWxlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdDb25maWcoKSB7XG4gIGxldCBsaXN0ZW5lcnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRzO1xuICBsZXQgY29uZmlnO1xuICBsZXQgYmlkZGVyQ29uZmlnO1xuICBsZXQgY3VyckJpZGRlciA9IG51bGw7XG5cbiAgZnVuY3Rpb24gcmVzZXRDb25maWcoKSB7XG4gICAgZGVmYXVsdHMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGdldFByb3AobmFtZSkge1xuICAgICAgcmV0dXJuIHByb3BzW25hbWVdLnZhbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRQcm9wKG5hbWUsIHZhbCkge1xuICAgICAgcHJvcHNbbmFtZV0udmFsID0gdmFsO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgcHVibGlzaGVyRG9tYWluOiB7XG4gICAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgICBpZiAodmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxvZ1dhcm4oJ3B1Ymxpc2hlckRvbWFpbiBpcyBkZXByZWNhdGVkIGFuZCBoYXMgbm8gZWZmZWN0IHNpbmNlIHY3IC0gdXNlIHBhZ2VVcmwgaW5zdGVhZCcpXG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFByb3AoJ3B1Ymxpc2hlckRvbWFpbicsIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcmljZUdyYW51bGFyaXR5OiB7XG4gICAgICAgIHZhbDogR1JBTlVMQVJJVFlfT1BUSU9OUy5NRURJVU0sXG4gICAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgICBpZiAodmFsaWRhdGVQcmljZUdyYW51bGFyaXR5KHZhbCkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBzZXRQcm9wKCdwcmljZUdyYW51bGFyaXR5JywgKGhhc0dyYW51bGFyaXR5KHZhbCkpID8gdmFsIDogR1JBTlVMQVJJVFlfT1BUSU9OUy5NRURJVU0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICAgICAgc2V0UHJvcCgnY3VzdG9tUHJpY2VCdWNrZXQnLCB2YWwpO1xuICAgICAgICAgICAgICBzZXRQcm9wKCdwcmljZUdyYW51bGFyaXR5JywgR1JBTlVMQVJJVFlfT1BUSU9OUy5DVVNUT00pXG4gICAgICAgICAgICAgIGxvZ01lc3NhZ2UoJ1VzaW5nIGN1c3RvbSBwcmljZSBncmFudWxhcml0eScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGN1c3RvbVByaWNlQnVja2V0OiB7XG4gICAgICAgIHZhbDoge30sXG4gICAgICAgIHNldCgpIHt9XG4gICAgICB9LFxuICAgICAgbWVkaWFUeXBlUHJpY2VHcmFudWxhcml0eToge1xuICAgICAgICB2YWw6IHt9LFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgdmFsICE9IG51bGwgJiYgc2V0UHJvcCgnbWVkaWFUeXBlUHJpY2VHcmFudWxhcml0eScsIE9iamVjdC5rZXlzKHZhbCkucmVkdWNlKChhZ2dyZWdhdGUsIGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZVByaWNlR3JhbnVsYXJpdHkodmFsW2l0ZW1dKSkge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGVbaXRlbV0gPSAoaGFzR3JhbnVsYXJpdHkodmFsW2l0ZW1dKSkgPyB2YWxbaXRlbV0gOiBnZXRQcm9wKCdwcmljZUdyYW51bGFyaXR5Jyk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgYWdncmVnYXRlW2l0ZW1dID0gdmFsW2l0ZW1dO1xuICAgICAgICAgICAgICAgIGxvZ01lc3NhZ2UoYFVzaW5nIGN1c3RvbSBwcmljZSBncmFudWxhcml0eSBmb3IgJHtpdGVtfWApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsb2dXYXJuKGBJbnZhbGlkIHByaWNlIGdyYW51bGFyaXR5IGZvciBtZWRpYSB0eXBlOiAke2l0ZW19YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWdncmVnYXRlO1xuICAgICAgICAgIH0sIHt9KSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBiaWRkZXJTZXF1ZW5jZToge1xuICAgICAgICB2YWw6IERFRkFVTFRfQklEREVSX1NFUVVFTkNFLFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgaWYgKFZBTElEX09SREVSU1t2YWxdKSB7XG4gICAgICAgICAgICBzZXRQcm9wKCdiaWRkZXJTZXF1ZW5jZScsIHZhbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZ1dhcm4oYEludmFsaWQgb3JkZXI6ICR7dmFsfS4gQmlkZGVyIFNlcXVlbmNlIHdhcyBub3Qgc2V0LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGF1Y3Rpb25PcHRpb25zOiB7XG4gICAgICAgIHZhbDoge30sXG4gICAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgICBpZiAodmFsaWRhdGVhdWN0aW9uT3B0aW9ucyh2YWwpKSB7XG4gICAgICAgICAgICBzZXRQcm9wKCdhdWN0aW9uT3B0aW9ucycsIHZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBuZXdDb25maWcgPSB7XG4gICAgICAvLyBgZGVidWdgIGlzIGVxdWl2YWxlbnQgdG8gbGVnYWN5IGBwYmpzLmxvZ2dpbmdgIHByb3BlcnR5XG4gICAgICBkZWJ1ZzogREVGQVVMVF9ERUJVRyxcbiAgICAgIGJpZGRlclRpbWVvdXQ6IERFRkFVTFRfQklEREVSX1RJTUVPVVQsXG4gICAgICBlbmFibGVTZW5kQWxsQmlkczogREVGQVVMVF9FTkFCTEVfU0VORF9BTExfQklEUyxcbiAgICAgIHVzZUJpZENhY2hlOiBERUZBVUxUX0JJRF9DQUNIRSxcblxuICAgICAgLyoqXG4gICAgICAgKiBkZXZpY2VBY2Nlc3Mgc2V0IHRvIGZhbHNlIHdpbGwgZGlzYWJsZSBzZXRDb29raWUsIGdldENvb2tpZSwgaGFzTG9jYWxTdG9yYWdlXG4gICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgZGV2aWNlQWNjZXNzOiBERUZBVUxUX0RFVklDRV9BQ0NFU1MsXG5cbiAgICAgIC8vIHRpbWVvdXQgYnVmZmVyIHRvIGFkanVzdCBmb3IgYmlkZGVyIENETiBsYXRlbmN5XG4gICAgICB0aW1lb3V0QnVmZmVyOiBERUZBVUxUX1RJTUVPVVRCVUZGRVIsXG4gICAgICBkaXNhYmxlQWpheFRpbWVvdXQ6IERFRkFVTFRfRElTQUJMRV9BSkFYX1RJTUVPVVQsXG5cbiAgICAgIC8vIGRlZmF1bHQgbWF4IG5lc3RlZCBpZnJhbWVzIGZvciByZWZlcmVyIGRldGVjdGlvblxuICAgICAgbWF4TmVzdGVkSWZyYW1lczogREVGQVVMVF9NQVhfTkVTVEVEX0lGUkFNRVMsXG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG5ld0NvbmZpZyxcbiAgICAgIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhwcm9wcylcbiAgICAgICAgLm1hcCgoW2ssIGRlZl0pID0+IFtrLCBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICBnZXQ6IGdldFByb3AuYmluZChudWxsLCBrKSxcbiAgICAgICAgICBzZXQ6IHNldFByb3AuYmluZChudWxsLCBrKSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB9LCBkZWYpXSkpXG4gICAgKTtcblxuICAgIGlmIChjb25maWcpIHtcbiAgICAgIGNhbGxTdWJzY3JpYmVycyhcbiAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnKS5yZWR1Y2UoKG1lbW8sIHRvcGljKSA9PiB7XG4gICAgICAgICAgaWYgKGNvbmZpZ1t0b3BpY10gIT09IG5ld0NvbmZpZ1t0b3BpY10pIHtcbiAgICAgICAgICAgIG1lbW9bdG9waWNdID0gbmV3Q29uZmlnW3RvcGljXSB8fCB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgIH0sXG4gICAgICAgIHt9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25maWcgPSBuZXdDb25maWc7XG4gICAgYmlkZGVyQ29uZmlnID0ge307XG5cbiAgICBmdW5jdGlvbiBoYXNHcmFudWxhcml0eSh2YWwpIHtcbiAgICAgIHJldHVybiBmaW5kKE9iamVjdC5rZXlzKEdSQU5VTEFSSVRZX09QVElPTlMpLCBvcHRpb24gPT4gdmFsID09PSBHUkFOVUxBUklUWV9PUFRJT05TW29wdGlvbl0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlUHJpY2VHcmFudWxhcml0eSh2YWwpIHtcbiAgICAgIGlmICghdmFsKSB7XG4gICAgICAgIGxvZ0Vycm9yKCdQcmViaWQgRXJyb3I6IG5vIHZhbHVlIHBhc3NlZCB0byBgc2V0UHJpY2VHcmFudWxhcml0eSgpYCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKCFoYXNHcmFudWxhcml0eSh2YWwpKSB7XG4gICAgICAgICAgbG9nV2FybignUHJlYmlkIFdhcm5pbmc6IHNldFByaWNlR3JhbnVsYXJpdHkgd2FzIGNhbGxlZCB3aXRoIGludmFsaWQgc2V0dGluZywgdXNpbmcgYG1lZGl1bWAgYXMgZGVmYXVsdC4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkUHJpY2VDb25maWcodmFsKSkge1xuICAgICAgICAgIGxvZ0Vycm9yKCdJbnZhbGlkIGN1c3RvbSBwcmljZSB2YWx1ZSBwYXNzZWQgdG8gYHNldFByaWNlR3JhbnVsYXJpdHkoKWAnKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlYXVjdGlvbk9wdGlvbnModmFsKSB7XG4gICAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgICBsb2dXYXJuKCdBdWN0aW9uIE9wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgayBvZiBPYmplY3Qua2V5cyh2YWwpKSB7XG4gICAgICAgIGlmIChrICE9PSAnc2Vjb25kYXJ5QmlkZGVycycgJiYgayAhPT0gJ3N1cHByZXNzU3RhbGVSZW5kZXInKSB7XG4gICAgICAgICAgbG9nV2FybihgQXVjdGlvbiBPcHRpb25zIGdpdmVuIGFuIGluY29ycmVjdCBwYXJhbTogJHtrfWApXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGsgPT09ICdzZWNvbmRhcnlCaWRkZXJzJykge1xuICAgICAgICAgIGlmICghaXNBcnJheSh2YWxba10pKSB7XG4gICAgICAgICAgICBsb2dXYXJuKGBBdWN0aW9uIE9wdGlvbnMgJHtrfSBtdXN0IGJlIG9mIHR5cGUgQXJyYXlgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbFtrXS5ldmVyeShpc1N0cikpIHtcbiAgICAgICAgICAgIGxvZ1dhcm4oYEF1Y3Rpb24gT3B0aW9ucyAke2t9IG11c3QgYmUgb25seSBzdHJpbmdgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChrID09PSAnc3VwcHJlc3NTdGFsZVJlbmRlcicpIHtcbiAgICAgICAgICBpZiAoIWlzQm9vbGVhbih2YWxba10pKSB7XG4gICAgICAgICAgICBsb2dXYXJuKGBBdWN0aW9uIE9wdGlvbnMgJHtrfSBtdXN0IGJlIG9mIHR5cGUgYm9vbGVhbmApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYmFzZSBjb25maWcgd2l0aCBiaWRkZXIgb3ZlcnJpZGVzIChpZiB0aGVyZSBpcyBjdXJyZW50bHkgYSBiaWRkZXIpXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBfZ2V0Q29uZmlnKCkge1xuICAgIGlmIChjdXJyQmlkZGVyICYmIGJpZGRlckNvbmZpZyAmJiBpc1BsYWluT2JqZWN0KGJpZGRlckNvbmZpZ1tjdXJyQmlkZGVyXSkpIHtcbiAgICAgIGxldCBjdXJyQmlkZGVyQ29uZmlnID0gYmlkZGVyQ29uZmlnW2N1cnJCaWRkZXJdO1xuICAgICAgY29uc3QgY29uZmlnVG9waWNTZXQgPSBuZXcgU2V0KE9iamVjdC5rZXlzKGNvbmZpZykuY29uY2F0KE9iamVjdC5rZXlzKGN1cnJCaWRkZXJDb25maWcpKSk7XG5cbiAgICAgIHJldHVybiBmcm9tKGNvbmZpZ1RvcGljU2V0KS5yZWR1Y2UoKG1lbW8sIHRvcGljKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgY3VyckJpZGRlckNvbmZpZ1t0b3BpY10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgbWVtb1t0b3BpY10gPSBjb25maWdbdG9waWNdO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWdbdG9waWNdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIG1lbW9bdG9waWNdID0gY3VyckJpZGRlckNvbmZpZ1t0b3BpY107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGlzUGxhaW5PYmplY3QoY3VyckJpZGRlckNvbmZpZ1t0b3BpY10pKSB7XG4gICAgICAgICAgICBtZW1vW3RvcGljXSA9IG1lcmdlRGVlcCh7fSwgY29uZmlnW3RvcGljXSwgY3VyckJpZGRlckNvbmZpZ1t0b3BpY10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZW1vW3RvcGljXSA9IGN1cnJCaWRkZXJDb25maWdbdG9waWNdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZyk7XG4gIH1cblxuICBmdW5jdGlvbiBfZ2V0UmVzdHJpY3RlZENvbmZpZygpIHtcbiAgICAvLyBUaGlzIGNhdXNlcyByZWFkaW5nICdvcnRiMicgdG8gdGhyb3cgYW4gZXJyb3I7IHdpdGggcHJlYmlkIDcsIHRoYXQgd2lsbCBhbG1vc3RcbiAgICAvLyBhbHdheXMgYmUgdGhlIGluY29ycmVjdCB3YXkgdG8gYWNjZXNzIEZQRCBjb25maWd1cmF0aW9uIChodHRwczovL2dpdGh1Yi5jb20vcHJlYmlkL1ByZWJpZC5qcy9pc3N1ZXMvNzY1MSlcbiAgICAvLyBjb2RlIHRoYXQgbmVlZHMgdGhlIG9ydGIyIGNvbmZpZyBzaG91bGQgZXhwbGljaXRseSB1c2UgYGdldEFueUNvbmZpZ2BcbiAgICAvLyBUT0RPOiB0aGlzIGlzIG1lYW50IGFzIGEgdGVtcG9yYXJ5IHRyaXB3aXJlIHRvIGNhdGNoIGluYWR2ZXJ0ZW50IHVzZSBvZiBgZ2V0Q29uZmlnKCdvcnRiJylgIGFzIHdlIHRyYW5zaXRpb24uXG4gICAgLy8gSXQgc2hvdWxkIGJlIHJlbW92ZWQgb25jZSB0aGUgcmlzayBvZiB0aGF0IGhhcHBlbmluZyBpcyBsb3cgZW5vdWdoLlxuICAgIGNvbnN0IGNvbmYgPSBfZ2V0Q29uZmlnKCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbmYsICdvcnRiMicsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgYWNjZXNzIHRvIFxcJ29yYnQyXFwnIGNvbmZpZyAtIHVzZSByZXF1ZXN0IHBhcmFtZXRlcnMgaW5zdGVhZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjb25mO1xuICB9XG5cbiAgY29uc3QgW2dldEFueUNvbmZpZywgZ2V0Q29uZmlnXSA9IFtfZ2V0Q29uZmlnLCBfZ2V0UmVzdHJpY3RlZENvbmZpZ10ubWFwKGFjY2Vzc29yID0+IHtcbiAgICAvKlxuICAgICAqIFJldHVybnMgY29uZmlndXJhdGlvbiBvYmplY3QgaWYgY2FsbGVkIHdpdGhvdXQgcGFyYW1ldGVycyxcbiAgICAgKiBvciBzaW5nbGUgY29uZmlndXJhdGlvbiBwcm9wZXJ0eSBpZiBnaXZlbiBhIHN0cmluZyBtYXRjaGluZyBhIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBwcm9wZXJ0eSBuYW1lLiAgQWxsb3dzIGRlZXAgYWNjZXNzIGUuZy4gZ2V0Q29uZmlnKCdjdXJyZW5jeS5hZFNlcnZlckN1cnJlbmN5JylcbiAgICAgKlxuICAgICAqIElmIGNhbGxlZCB3aXRoIGNhbGxiYWNrIHBhcmFtZXRlciwgb3IgYSBzdHJpbmcgYW5kIGEgY2FsbGJhY2sgcGFyYW1ldGVyLFxuICAgICAqIHN1YnNjcmliZXMgdG8gY29uZmlndXJhdGlvbiB1cGRhdGVzLiBTZWUgYHN1YnNjcmliZWAgZnVuY3Rpb24gZm9yIHVzYWdlLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBnZXRDb25maWcoLi4uYXJncykge1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoIDw9IDEgJiYgdHlwZW9mIGFyZ3NbMF0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gYXJnc1swXTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbiA/IGRlZXBBY2Nlc3MoYWNjZXNzb3IoKSwgb3B0aW9uKSA6IF9nZXRDb25maWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1YnNjcmliZSguLi5hcmdzKTtcbiAgICB9XG4gIH0pXG5cbiAgY29uc3QgW3JlYWRDb25maWcsIHJlYWRBbnlDb25maWddID0gW2dldENvbmZpZywgZ2V0QW55Q29uZmlnXS5tYXAod3JhcGVlID0+IHtcbiAgICAvKlxuICAgICAqIExpa2UgZ2V0Q29uZmlnLCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIGEgZGVlcENsb25lIG9mIHRoZSByZXN1bHQuXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlYWRDb25maWcoLi4uYXJncykge1xuICAgICAgbGV0IHJlcyA9IHdyYXBlZSguLi5hcmdzKTtcbiAgICAgIGlmIChyZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmVzID0gZGVlcENsb25lKHJlcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgfSlcblxuICAvKipcbiAgICogSW50ZXJuYWwgQVBJIGZvciBtb2R1bGVzIChzdWNoIGFzIHByZWJpZC1zZXJ2ZXIpIHRoYXQgbWlnaHQgbmVlZCBhY2Nlc3MgdG8gYWxsIGJpZGRlciBjb25maWdcbiAgICovXG4gIGZ1bmN0aW9uIGdldEJpZGRlckNvbmZpZygpIHtcbiAgICByZXR1cm4gYmlkZGVyQ29uZmlnO1xuICB9XG5cbiAgLypcbiAgICogU2V0cyBjb25maWd1cmF0aW9uIGdpdmVuIGFuIG9iamVjdCBjb250YWluaW5nIGtleS12YWx1ZSBwYWlycyBhbmQgY2FsbHNcbiAgICogbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZCBieSB0aGUgYHN1YnNjcmliZWAgZnVuY3Rpb25cbiAgICovXG4gIGZ1bmN0aW9uIHNldENvbmZpZyhvcHRpb25zKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICBsb2dFcnJvcignc2V0Q29uZmlnIG9wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdG9waWNzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gICAgbGV0IHRvcGljYWxDb25maWcgPSB7fTtcblxuICAgIHRvcGljcy5mb3JFYWNoKHRvcGljID0+IHtcbiAgICAgIGxldCBvcHRpb24gPSBvcHRpb25zW3RvcGljXTtcblxuICAgICAgaWYgKGlzUGxhaW5PYmplY3QoZGVmYXVsdHNbdG9waWNdKSAmJiBpc1BsYWluT2JqZWN0KG9wdGlvbikpIHtcbiAgICAgICAgb3B0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHNbdG9waWNdLCBvcHRpb24pO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICB0b3BpY2FsQ29uZmlnW3RvcGljXSA9IGNvbmZpZ1t0b3BpY10gPSBvcHRpb247XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZ1dhcm4oYENhbm5vdCBzZXQgY29uZmlnIGZvciBwcm9wZXJ0eSAke3RvcGljfSA6IGAsIGUpXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjYWxsU3Vic2NyaWJlcnModG9waWNhbENvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBjb25maWd1cmF0aW9uIGRlZmF1bHRzIHdoaWNoIHNldENvbmZpZyB2YWx1ZXMgY2FuIGJlIGFwcGxpZWQgb24gdG9wIG9mXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqL1xuICBmdW5jdGlvbiBzZXREZWZhdWx0cyhvcHRpb25zKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGRlZmF1bHRzKSkge1xuICAgICAgbG9nRXJyb3IoJ2RlZmF1bHRzIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgLy8gQWRkIGRlZmF1bHQgdmFsdWVzIHRvIGNvbmZpZyBhcyB3ZWxsXG4gICAgT2JqZWN0LmFzc2lnbihjb25maWcsIG9wdGlvbnMpO1xuICB9XG5cbiAgLypcbiAgICogQWRkcyBhIGZ1bmN0aW9uIHRvIGEgc2V0IG9mIGxpc3RlbmVycyB0aGF0IGFyZSBpbnZva2VkIHdoZW5ldmVyIGBzZXRDb25maWdgXG4gICAqIGlzIGNhbGxlZC4gVGhlIHN1YnNjcmliZWQgZnVuY3Rpb24gd2lsbCBiZSBwYXNzZWQgdGhlIG9wdGlvbnMgb2JqZWN0IHRoYXRcbiAgICogd2FzIHVzZWQgaW4gdGhlIGBzZXRDb25maWdgIGNhbGwuIFRvcGljcyBjYW4gYmUgc3Vic2NyaWJlZCB0byB0byBvbmx5IGdldFxuICAgKiB1cGRhdGVzIHdoZW4gc3BlY2lmaWMgcHJvcGVydGllcyBhcmUgdXBkYXRlZCBieSBwYXNzaW5nIGEgdG9waWMgc3RyaW5nIGFzXG4gICAqIHRoZSBmaXJzdCBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIElmIGBvcHRpb25zLmluaXRgIGlzIHRydWUsIHRoZSBsaXN0ZW5lciB3aWxsIGJlIGltbWVkaWF0ZWx5IGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IG9wdGlvbnMuXG4gICAqXG4gICAqIFJldHVybnMgYW4gYHVuc3Vic2NyaWJlYCBmdW5jdGlvbiBmb3IgcmVtb3ZpbmcgdGhlIHN1YnNjcmliZXIgZnJvbSB0aGVcbiAgICogc2V0IG9mIGxpc3RlbmVyc1xuICAgKlxuICAgKiBFeGFtcGxlIHVzZTpcbiAgICogLy8gc3Vic2NyaWJlIHRvIGFsbCBjb25maWd1cmF0aW9uIGNoYW5nZXNcbiAgICogc3Vic2NyaWJlKChjb25maWcpID0+IGNvbnNvbGUubG9nKCdjb25maWcgc2V0OicsIGNvbmZpZykpO1xuICAgKlxuICAgKiAvLyBzdWJzY3JpYmUgdG8gb25seSAnbG9nZ2luZycgY2hhbmdlc1xuICAgKiBzdWJzY3JpYmUoJ2xvZ2dpbmcnLCAoY29uZmlnKSA9PiBjb25zb2xlLmxvZygnbG9nZ2luZyBzZXQ6JywgY29uZmlnKSk7XG4gICAqXG4gICAqIC8vIHVuc3Vic2NyaWJlXG4gICAqIGNvbnN0IHVuc3Vic2NyaWJlID0gc3Vic2NyaWJlKC4uLik7XG4gICAqIHVuc3Vic2NyaWJlKCk7IC8vIG5vIGxvbmdlciBsaXN0ZW5pbmdcbiAgICpcbiAgICovXG4gIGZ1bmN0aW9uIHN1YnNjcmliZSh0b3BpYywgbGlzdGVuZXIsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBjYWxsYmFjayA9IGxpc3RlbmVyO1xuXG4gICAgaWYgKHR5cGVvZiB0b3BpYyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGZpcnN0IHBhcmFtIHNob3VsZCBiZSBjYWxsYmFjayBmdW5jdGlvbiBpbiB0aGlzIGNhc2UsXG4gICAgICAvLyBtZWFuaW5nIGl0IGdldHMgY2FsbGVkIGZvciBhbnkgY29uZmlnIGNoYW5nZVxuICAgICAgY2FsbGJhY2sgPSB0b3BpYztcbiAgICAgIHRvcGljID0gQUxMX1RPUElDUztcbiAgICAgIG9wdGlvbnMgPSBsaXN0ZW5lciB8fCB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBsb2dFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbmwgPSB7IHRvcGljLCBjYWxsYmFjayB9O1xuICAgIGxpc3RlbmVycy5wdXNoKG5sKTtcblxuICAgIGlmIChvcHRpb25zLmluaXQpIHtcbiAgICAgIGlmICh0b3BpYyA9PT0gQUxMX1RPUElDUykge1xuICAgICAgICBjYWxsYmFjayhnZXRDb25maWcoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RhbmRhcmQvbm8tY2FsbGJhY2stbGl0ZXJhbFxuICAgICAgICBjYWxsYmFjayh7W3RvcGljXTogZ2V0Q29uZmlnKHRvcGljKX0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNhdmUgYW5kIGNhbGwgdGhpcyBmdW5jdGlvbiB0byByZW1vdmUgdGhlIGxpc3RlbmVyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgbGlzdGVuZXJzLnNwbGljZShsaXN0ZW5lcnMuaW5kZXhPZihubCksIDEpO1xuICAgIH07XG4gIH1cblxuICAvKlxuICAgKiBDYWxscyBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkIGJ5IHRoZSBgc3Vic2NyaWJlYCBmdW5jdGlvblxuICAgKi9cbiAgZnVuY3Rpb24gY2FsbFN1YnNjcmliZXJzKG9wdGlvbnMpIHtcbiAgICBjb25zdCBUT1BJQ1MgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcblxuICAgIC8vIGNhbGwgc3Vic2NyaWJlcnMgb2YgYSBzcGVjaWZpYyB0b3BpYywgcGFzc2luZyBvbmx5IHRoYXQgY29uZmlndXJhdGlvblxuICAgIGxpc3RlbmVyc1xuICAgICAgLmZpbHRlcihsaXN0ZW5lciA9PiBpbmNsdWRlcyhUT1BJQ1MsIGxpc3RlbmVyLnRvcGljKSlcbiAgICAgIC5mb3JFYWNoKGxpc3RlbmVyID0+IHtcbiAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soeyBbbGlzdGVuZXIudG9waWNdOiBvcHRpb25zW2xpc3RlbmVyLnRvcGljXSB9KTtcbiAgICAgIH0pO1xuXG4gICAgLy8gY2FsbCBzdWJzY3JpYmVycyB0aGF0IGRpZG4ndCBnaXZlIGEgdG9waWMsIHBhc3NpbmcgZXZlcnl0aGluZyB0aGF0IHdhcyBzZXRcbiAgICBsaXN0ZW5lcnNcbiAgICAgIC5maWx0ZXIobGlzdGVuZXIgPT4gbGlzdGVuZXIudG9waWMgPT09IEFMTF9UT1BJQ1MpXG4gICAgICAuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lci5jYWxsYmFjayhvcHRpb25zKSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRCaWRkZXJDb25maWcoY29uZmlnLCBtZXJnZUZsYWcgPSBmYWxzZSkge1xuICAgIHRyeSB7XG4gICAgICBjaGVjayhjb25maWcpO1xuICAgICAgY29uZmlnLmJpZGRlcnMuZm9yRWFjaChiaWRkZXIgPT4ge1xuICAgICAgICBpZiAoIWJpZGRlckNvbmZpZ1tiaWRkZXJdKSB7XG4gICAgICAgICAgYmlkZGVyQ29uZmlnW2JpZGRlcl0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyhjb25maWcuY29uZmlnKS5mb3JFYWNoKHRvcGljID0+IHtcbiAgICAgICAgICBsZXQgb3B0aW9uID0gY29uZmlnLmNvbmZpZ1t0b3BpY107XG5cbiAgICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChvcHRpb24pKSB7XG4gICAgICAgICAgICBjb25zdCBmdW5jID0gbWVyZ2VGbGFnID8gbWVyZ2VEZWVwIDogT2JqZWN0LmFzc2lnbjtcbiAgICAgICAgICAgIGJpZGRlckNvbmZpZ1tiaWRkZXJdW3RvcGljXSA9IGZ1bmMoe30sIGJpZGRlckNvbmZpZ1tiaWRkZXJdW3RvcGljXSB8fCB7fSwgb3B0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmlkZGVyQ29uZmlnW2JpZGRlcl1bdG9waWNdID0gb3B0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dFcnJvcihlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVjayhvYmopIHtcbiAgICAgIGlmICghaXNQbGFpbk9iamVjdChvYmopKSB7XG4gICAgICAgIHRocm93ICdzZXRCaWRkZXJDb25maWcgYmlkZGVyIG9wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnO1xuICAgICAgfVxuICAgICAgaWYgKCEoQXJyYXkuaXNBcnJheShvYmouYmlkZGVycykgJiYgb2JqLmJpZGRlcnMubGVuZ3RoKSkge1xuICAgICAgICB0aHJvdyAnc2V0QmlkZGVyQ29uZmlnIGJpZGRlciBvcHRpb25zIG11c3QgY29udGFpbiBhIGJpZGRlcnMgbGlzdCB3aXRoIGF0IGxlYXN0IDEgYmlkZGVyJztcbiAgICAgIH1cbiAgICAgIGlmICghaXNQbGFpbk9iamVjdChvYmouY29uZmlnKSkge1xuICAgICAgICB0aHJvdyAnc2V0QmlkZGVyQ29uZmlnIGJpZGRlciBvcHRpb25zIG11c3QgY29udGFpbiBhIGNvbmZpZyBvYmplY3QnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlQ29uZmlnKG9iaikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChvYmopKSB7XG4gICAgICBsb2dFcnJvcignbWVyZ2VDb25maWcgaW5wdXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBtZXJnZWRDb25maWcgPSBtZXJnZURlZXAoX2dldENvbmZpZygpLCBvYmopO1xuXG4gICAgc2V0Q29uZmlnKHsgLi4ubWVyZ2VkQ29uZmlnIH0pO1xuICAgIHJldHVybiBtZXJnZWRDb25maWc7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZUJpZGRlckNvbmZpZyhvYmopIHtcbiAgICByZXR1cm4gc2V0QmlkZGVyQ29uZmlnKG9iaiwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJuYWwgZnVuY3Rpb25zIGZvciBjb3JlIHRvIGV4ZWN1dGUgc29tZSBzeW5jaHJvbm91cyBjb2RlIHdoaWxlIGhhdmluZyBhbiBhY3RpdmUgYmlkZGVyIHNldC5cbiAgICovXG4gIGZ1bmN0aW9uIHJ1bldpdGhCaWRkZXIoYmlkZGVyLCBmbikge1xuICAgIGN1cnJCaWRkZXIgPSBiaWRkZXI7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmbigpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICByZXNldEJpZGRlcigpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjYWxsYmFja1dpdGhCaWRkZXIoYmlkZGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGNiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIHJ1bldpdGhCaWRkZXIoYmlkZGVyLCBiaW5kLmNhbGwoY2IsIHRoaXMsIC4uLmFyZ3MpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ1dhcm4oJ2NvbmZpZy5jYWxsYmFja1dpdGhCaWRkZXIgY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRCaWRkZXIoKSB7XG4gICAgcmV0dXJuIGN1cnJCaWRkZXI7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldEJpZGRlcigpIHtcbiAgICBjdXJyQmlkZGVyID0gbnVsbDtcbiAgfVxuXG4gIHJlc2V0Q29uZmlnKCk7XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRDdXJyZW50QmlkZGVyLFxuICAgIHJlc2V0QmlkZGVyLFxuICAgIGdldENvbmZpZyxcbiAgICBnZXRBbnlDb25maWcsXG4gICAgcmVhZENvbmZpZyxcbiAgICByZWFkQW55Q29uZmlnLFxuICAgIHNldENvbmZpZyxcbiAgICBtZXJnZUNvbmZpZyxcbiAgICBzZXREZWZhdWx0cyxcbiAgICByZXNldENvbmZpZyxcbiAgICBydW5XaXRoQmlkZGVyLFxuICAgIGNhbGxiYWNrV2l0aEJpZGRlcixcbiAgICBzZXRCaWRkZXJDb25maWcsXG4gICAgZ2V0QmlkZGVyQ29uZmlnLFxuICAgIG1lcmdlQmlkZGVyQ29uZmlnLFxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgY29uZmlnID0gbmV3Q29uZmlnKCk7XG4iLCJpbXBvcnQge2NvbmZpZ30gZnJvbSAnLi9jb25maWcuanMnO1xuaW1wb3J0IGNsb25lIGZyb20gJ2p1c3QtY2xvbmUnO1xuaW1wb3J0IHtmaW5kLCBpbmNsdWRlc30gZnJvbSAnLi9wb2x5ZmlsbC5qcyc7XG5pbXBvcnQgQ09OU1RBTlRTIGZyb20gJy4vY29uc3RhbnRzLmpzb24nO1xuaW1wb3J0IHtHcmVlZHlQcm9taXNlfSBmcm9tICcuL3V0aWxzL3Byb21pc2UuanMnO1xuaW1wb3J0IHtnZXRHbG9iYWx9IGZyb20gJy4vcHJlYmlkR2xvYmFsLmpzJztcblxuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZWVwQWNjZXNzIH0gZnJvbSAnZGx2L2luZGV4LmpzJztcbmV4cG9ydCB7IGRzZXQgYXMgZGVlcFNldFZhbHVlIH0gZnJvbSAnZHNldCc7XG5cbnZhciB0QXJyID0gJ0FycmF5JztcbnZhciB0U3RyID0gJ1N0cmluZyc7XG52YXIgdEZuID0gJ0Z1bmN0aW9uJztcbnZhciB0TnVtYiA9ICdOdW1iZXInO1xudmFyIHRPYmplY3QgPSAnT2JqZWN0JztcbnZhciB0Qm9vbGVhbiA9ICdCb29sZWFuJztcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5sZXQgY29uc29sZUV4aXN0cyA9IEJvb2xlYW4od2luZG93LmNvbnNvbGUpO1xubGV0IGNvbnNvbGVMb2dFeGlzdHMgPSBCb29sZWFuKGNvbnNvbGVFeGlzdHMgJiYgd2luZG93LmNvbnNvbGUubG9nKTtcbmxldCBjb25zb2xlSW5mb0V4aXN0cyA9IEJvb2xlYW4oY29uc29sZUV4aXN0cyAmJiB3aW5kb3cuY29uc29sZS5pbmZvKTtcbmxldCBjb25zb2xlV2FybkV4aXN0cyA9IEJvb2xlYW4oY29uc29sZUV4aXN0cyAmJiB3aW5kb3cuY29uc29sZS53YXJuKTtcbmxldCBjb25zb2xlRXJyb3JFeGlzdHMgPSBCb29sZWFuKGNvbnNvbGVFeGlzdHMgJiYgd2luZG93LmNvbnNvbGUuZXJyb3IpO1xuXG5sZXQgZXZlbnRFbWl0dGVyO1xuXG5jb25zdCBwYmpzSW5zdGFuY2UgPSBnZXRHbG9iYWwoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9zZXRFdmVudEVtaXR0ZXIoZW1pdEZuKSB7XG4gIC8vIGNhbGxlZCBmcm9tIGV2ZW50cy5qcyAtIHRoaXMgaG9vcCBpcyB0byBhdm9pZCBjaXJjdWxhciBpbXBvcnRzXG4gIGV2ZW50RW1pdHRlciA9IGVtaXRGbjtcbn1cblxuZnVuY3Rpb24gZW1pdEV2ZW50KC4uLmFyZ3MpIHtcbiAgaWYgKGV2ZW50RW1pdHRlciAhPSBudWxsKSB7XG4gICAgZXZlbnRFbWl0dGVyKC4uLmFyZ3MpO1xuICB9XG59XG5cbi8vIHRoaXMgYWxsb3dzIHN0dWJiaW5nIG9mIHV0aWxpdHkgZnVuY3Rpb25zIHRoYXQgYXJlIHVzZWQgaW50ZXJuYWxseSBieSBvdGhlciB1dGlsaXR5IGZ1bmN0aW9uc1xuZXhwb3J0IGNvbnN0IGludGVybmFsID0ge1xuICBjaGVja0Nvb2tpZVN1cHBvcnQsXG4gIGNyZWF0ZVRyYWNrUGl4ZWxJZnJhbWVIdG1sLFxuICBnZXRXaW5kb3dTZWxmLFxuICBnZXRXaW5kb3dUb3AsXG4gIGdldFdpbmRvd0xvY2F0aW9uLFxuICBpbnNlcnRVc2VyU3luY0lmcmFtZSxcbiAgaW5zZXJ0RWxlbWVudCxcbiAgaXNGbixcbiAgdHJpZ2dlclBpeGVsLFxuICBsb2dFcnJvcixcbiAgbG9nV2FybixcbiAgbG9nTWVzc2FnZSxcbiAgbG9nSW5mbyxcbiAgcGFyc2VRUyxcbiAgZm9ybWF0UVMsXG4gIGRlZXBFcXVhbFxufTtcblxubGV0IHByZWJpZEludGVybmFsID0ge307XG4vKipcbiAqIFJldHVybnMgb2JqZWN0IHRoYXQgaXMgdXNlZCBhcyBpbnRlcm5hbCBwcmViaWQgbmFtZXNwYWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmViaWRJbnRlcm5hbCgpIHtcbiAgcmV0dXJuIHByZWJpZEludGVybmFsO1xufVxuXG52YXIgdW5pcXVlUmVmID0ge307XG5leHBvcnQgbGV0IGJpbmQgPSBmdW5jdGlvbihhLCBiKSB7IHJldHVybiBiOyB9LmJpbmQobnVsbCwgMSwgdW5pcXVlUmVmKSgpID09PSB1bmlxdWVSZWZcbiAgPyBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuICA6IGZ1bmN0aW9uKGJpbmQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzZWxmLmFwcGx5KGJpbmQsIGFyZ3MuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICB9O1xuICB9O1xuXG4vKiB1dGlsaXR5IG1ldGhvZCB0byBnZXQgaW5jcmVtZW50YWwgaW50ZWdlciBzdGFydGluZyBmcm9tIDEgKi9cbnZhciBnZXRJbmNyZW1lbnRhbEludGVnZXIgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgY291bnQgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50Kys7XG4gICAgcmV0dXJuIGNvdW50O1xuICB9O1xufSkoKTtcblxuLy8gZ2VuZXJhdGUgYSByYW5kb20gc3RyaW5nICh0byBiZSB1c2VkIGFzIGEgZHluYW1pYyBKU09OUCBjYWxsYmFjaylcbmV4cG9ydCBmdW5jdGlvbiBnZXRVbmlxdWVJZGVudGlmaWVyU3RyKCkge1xuICByZXR1cm4gZ2V0SW5jcmVtZW50YWxJbnRlZ2VyKCkgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zdWJzdHIoMik7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHJhbmRvbSB2NCBVVUlEIG9mIHRoZSBmb3JtIHh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCxcbiAqIHdoZXJlIGVhY2ggeCBpcyByZXBsYWNlZCB3aXRoIGEgcmFuZG9tIGhleGFkZWNpbWFsIGRpZ2l0IGZyb20gMCB0byBmLFxuICogYW5kIHkgaXMgcmVwbGFjZWQgd2l0aCBhIHJhbmRvbSBoZXhhZGVjaW1hbCBkaWdpdCBmcm9tIDggdG8gYi5cbiAqIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2plZC85ODI4ODMgdmlhIG5vZGUtdXVpZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHBsYWNlaG9sZGVyKSB7XG4gIHJldHVybiBwbGFjZWhvbGRlclxuICAgID8gKHBsYWNlaG9sZGVyIF4gX2dldFJhbmRvbURhdGEoKSA+PiBwbGFjZWhvbGRlciAvIDQpLnRvU3RyaW5nKDE2KVxuICAgIDogKFsxZTddICsgLTFlMyArIC00ZTMgKyAtOGUzICsgLTFlMTEpLnJlcGxhY2UoL1swMThdL2csIGdlbmVyYXRlVVVJRCk7XG59XG5cbi8qKlxuICogUmV0dXJucyByYW5kb20gZGF0YSB1c2luZyB0aGUgQ3J5cHRvIEFQSSBpZiBhdmFpbGFibGUgYW5kIE1hdGgucmFuZG9tIGlmIG5vdFxuICogTWV0aG9kIGlzIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vamVkLzk4Mjg4MyBsaWtlIGdlbmVyYXRlVVVJRCwgZGlyZWN0IGxpbmsgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vamVkLzk4Mjg4MyNnaXN0Y29tbWVudC00NTEwNFxuICovXG5mdW5jdGlvbiBfZ2V0UmFuZG9tRGF0YSgpIHtcbiAgaWYgKHdpbmRvdyAmJiB3aW5kb3cuY3J5cHRvICYmIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgcmV0dXJuIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMSkpWzBdICUgMTY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiAxNjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmlkSWRQYXJhbWV0ZXIoa2V5LCBwYXJhbXNPYmopIHtcbiAgaWYgKHBhcmFtc09iaiAmJiBwYXJhbXNPYmpba2V5XSkge1xuICAgIHJldHVybiBwYXJhbXNPYmpba2V5XTtcbiAgfVxuXG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyeUFwcGVuZFF1ZXJ5U3RyaW5nKGV4aXN0aW5nVXJsLCBrZXksIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIHJldHVybiBleGlzdGluZ1VybCArIGtleSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgKyAnJic7XG4gIH1cblxuICByZXR1cm4gZXhpc3RpbmdVcmw7XG59XG5cbi8vIHBhcnNlIGEgcXVlcnkgc3RyaW5nIG9iamVjdCBwYXNzZWQgaW4gYmlkIHBhcmFtc1xuLy8gYmlkIHBhcmFtcyBzaG91bGQgYmUgYW4gb2JqZWN0IHN1Y2ggYXMge2tleTogXCJ2YWx1ZVwiLCBrZXkxIDogXCJ2YWx1ZTFcIn1cbi8vIGFsaWFzZXMgdG8gZm9ybWF0UVNcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nUGFyYW1ldGVycyhxdWVyeU9iaikge1xuICBsZXQgcmVzdWx0ID0gJyc7XG4gIGZvciAodmFyIGsgaW4gcXVlcnlPYmopIHtcbiAgICBpZiAocXVlcnlPYmouaGFzT3duUHJvcGVydHkoaykpIHsgcmVzdWx0ICs9IGsgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQocXVlcnlPYmpba10pICsgJyYnOyB9XG4gIH1cbiAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoLyYkLywgJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyB0cmFuc2Zvcm0gYW4gQWRTZXJ2ZXIgdGFyZ2V0aW5nIGJpZHMgaW50byBhIHF1ZXJ5IHN0cmluZyB0byBzZW5kIHRvIHRoZSBhZHNlcnZlclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUFkU2VydmVyVGFyZ2V0aW5nT2JqKHRhcmdldGluZykge1xuICAvLyB3ZSBleHBlY3QgdG8gcmVjZWl2ZSB0YXJnZXRpbmcgZm9yIGEgc2luZ2xlIHNsb3QgYXQgYSB0aW1lXG4gIGlmICh0YXJnZXRpbmcgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0aW5nKS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGdldEtleXModGFyZ2V0aW5nKVxuICAgICAgLm1hcChrZXkgPT4gYCR7a2V5fT0ke2VuY29kZVVSSUNvbXBvbmVudChnZXRWYWx1ZSh0YXJnZXRpbmcsIGtleSkpfWApLmpvaW4oJyYnKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuLyoqXG4gKiBSZWFkIGFuIGFkVW5pdCBvYmplY3QgYW5kIHJldHVybiB0aGUgc2l6ZXMgdXNlZCBpbiBhbiBbWzcyOCwgOTBdXSBmb3JtYXQgKGV2ZW4gaWYgdGhleSBoYWQgWzcyOCwgOTBdIGRlZmluZWQpXG4gKiBQcmVmZXJlbmNlIGlzIGdpdmVuIHRvIHRoZSBgYWRVbml0Lm1lZGlhVHlwZXMuYmFubmVyLnNpemVzYCBvYmplY3Qgb3ZlciB0aGUgYGFkVW5pdC5zaXplc2BcbiAqIEBwYXJhbSB7b2JqZWN0fSBhZFVuaXQgb25lIGFkVW5pdCBvYmplY3QgZnJvbSB0aGUgbm9ybWFsIGxpc3Qgb2YgYWRVbml0c1xuICogQHJldHVybnMge0FycmF5LjxudW1iZXJbXT59IGFycmF5IG9mIGFycmF5cyBjb250YWluaW5nIG51bWVyaWMgc2l6ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFkVW5pdFNpemVzKGFkVW5pdCkge1xuICBpZiAoIWFkVW5pdCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBzaXplcyA9IFtdO1xuICBpZiAoYWRVbml0Lm1lZGlhVHlwZXMgJiYgYWRVbml0Lm1lZGlhVHlwZXMuYmFubmVyICYmIEFycmF5LmlzQXJyYXkoYWRVbml0Lm1lZGlhVHlwZXMuYmFubmVyLnNpemVzKSkge1xuICAgIGxldCBiYW5uZXJTaXplcyA9IGFkVW5pdC5tZWRpYVR5cGVzLmJhbm5lci5zaXplcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShiYW5uZXJTaXplc1swXSkpIHtcbiAgICAgIHNpemVzID0gYmFubmVyU2l6ZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemVzLnB1c2goYmFubmVyU2l6ZXMpO1xuICAgIH1cbiAgLy8gVE9ETyAtIHJlbW92ZSB0aGlzIGVsc2UgYmxvY2sgd2hlbiB3ZSdyZSByZWFkeSB0byBkZXByZWNhdGUgYWRVbml0LnNpemVzIGZvciBiaWRkZXJzXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhZFVuaXQuc2l6ZXMpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWRVbml0LnNpemVzWzBdKSkge1xuICAgICAgc2l6ZXMgPSBhZFVuaXQuc2l6ZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemVzLnB1c2goYWRVbml0LnNpemVzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNpemVzO1xufVxuXG4vKipcbiAqIFBhcnNlIGEgR1BULVN0eWxlIGdlbmVyYWwgc2l6ZSBBcnJheSBsaWtlIGBbWzMwMCwgMjUwXV1gIG9yIGBcIjMwMHgyNTAsOTcweDkwXCJgIGludG8gYW4gYXJyYXkgb2Ygc2l6ZXMgYFtcIjMwMHgyNTBcIl1gIG9yICdbJzMwMHgyNTAnLCAnOTcweDkwJ10nXG4gKiBAcGFyYW0gIHsoQXJyYXkuPG51bWJlcltdPnxBcnJheS48bnVtYmVyPil9IHNpemVPYmogSW5wdXQgYXJyYXkgb3IgZG91YmxlIGFycmF5IFszMDAsMjUwXSBvciBbWzMwMCwyNTBdLCBbNzI4LDkwXV1cbiAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fSAgQXJyYXkgb2Ygc3RyaW5ncyBsaWtlIGBbXCIzMDB4MjUwXCJdYCBvciBgW1wiMzAweDI1MFwiLCBcIjcyOHg5MFwiXWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU2l6ZXNJbnB1dChzaXplT2JqKSB7XG4gIHZhciBwYXJzZWRTaXplcyA9IFtdO1xuXG4gIC8vIGlmIGEgc3RyaW5nIGZvciBub3cgd2UgY2FuIGFzc3VtZSBpdCBpcyBhIHNpbmdsZSBzaXplLCBsaWtlIFwiMzAweDI1MFwiXG4gIGlmICh0eXBlb2Ygc2l6ZU9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBtdWx0aXBsZSBzaXplcyB3aWxsIGJlIGNvbW1hLXNlcGFyYXRlZFxuICAgIHZhciBzaXplcyA9IHNpemVPYmouc3BsaXQoJywnKTtcblxuICAgIC8vIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBzdHJpZ25zIGxpa2UgMzAweDI1MFxuICAgIC8vIHN0YXJ0IG9mIGxpbmUsIGF0IGxlYXN0IDEgbnVtYmVyLCBhbiBcInhcIiAsIHRoZW4gYXQgbGVhc3QgMSBudW1iZXIsIGFuZCB0aGUgdGhlbiBlbmQgb2YgdGhlIGxpbmVcbiAgICB2YXIgc2l6ZVJlZ2V4ID0gL14oXFxkKSt4KFxcZCkrJC9pO1xuICAgIGlmIChzaXplcykge1xuICAgICAgZm9yICh2YXIgY3VyU2l6ZVBvcyBpbiBzaXplcykge1xuICAgICAgICBpZiAoaGFzT3duKHNpemVzLCBjdXJTaXplUG9zKSAmJiBzaXplc1tjdXJTaXplUG9zXS5tYXRjaChzaXplUmVnZXgpKSB7XG4gICAgICAgICAgcGFyc2VkU2l6ZXMucHVzaChzaXplc1tjdXJTaXplUG9zXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNpemVPYmogPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHNpemVBcnJheUxlbmd0aCA9IHNpemVPYmoubGVuZ3RoO1xuXG4gICAgLy8gZG9uJ3QgcHJvY2VzcyBlbXB0eSBhcnJheVxuICAgIGlmIChzaXplQXJyYXlMZW5ndGggPiAwKSB7XG4gICAgICAvLyBpZiB3ZSBhcmUgYSAyIGl0ZW0gYXJyYXkgb2YgMiBudW1iZXJzLCB3ZSBtdXN0IGJlIGEgU2luZ2xlU2l6ZSBhcnJheVxuICAgICAgaWYgKHNpemVBcnJheUxlbmd0aCA9PT0gMiAmJiB0eXBlb2Ygc2l6ZU9ialswXSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHNpemVPYmpbMV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHBhcnNlZFNpemVzLnB1c2gocGFyc2VHUFRTaW5nbGVTaXplQXJyYXkoc2l6ZU9iaikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gb3RoZXJ3aXNlLCB3ZSBtdXN0IGJlIGEgTXVsdGlTaXplIGFycmF5XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZUFycmF5TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBwYXJzZWRTaXplcy5wdXNoKHBhcnNlR1BUU2luZ2xlU2l6ZUFycmF5KHNpemVPYmpbaV0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJzZWRTaXplcztcbn1cblxuLy8gUGFyc2UgYSBHUFQgc3R5bGUgc2luZ2xlIHNpemUgYXJyYXksIChpLmUgWzMwMCwgMjUwXSlcbi8vIGludG8gYW4gQXBwTmV4dXMgc3R5bGUgc3RyaW5nLCAoaS5lLiAzMDB4MjUwKVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR1BUU2luZ2xlU2l6ZUFycmF5KHNpbmdsZVNpemUpIHtcbiAgaWYgKGlzVmFsaWRHUFRTaW5nbGVTaXplKHNpbmdsZVNpemUpKSB7XG4gICAgcmV0dXJuIHNpbmdsZVNpemVbMF0gKyAneCcgKyBzaW5nbGVTaXplWzFdO1xuICB9XG59XG5cbi8vIFBhcnNlIGEgR1BUIHN0eWxlIHNpbmdsZSBzaXplIGFycmF5LCAoaS5lIFszMDAsIDI1MF0pXG4vLyBpbnRvIE9wZW5SVEItY29tcGF0aWJsZSAoaW1wLmJhbm5lci53L2gsIGltcC5iYW5uZXIuZm9ybWF0LncvaCwgaW1wLnZpZGVvLncvaCkgb2JqZWN0KGkuZS4ge3c6MzAwLCBoOjI1MH0pXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHUFRTaW5nbGVTaXplQXJyYXlUb1J0YlNpemUoc2luZ2xlU2l6ZSkge1xuICBpZiAoaXNWYWxpZEdQVFNpbmdsZVNpemUoc2luZ2xlU2l6ZSkpIHtcbiAgICByZXR1cm4ge3c6IHNpbmdsZVNpemVbMF0sIGg6IHNpbmdsZVNpemVbMV19O1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRHUFRTaW5nbGVTaXplKHNpbmdsZVNpemUpIHtcbiAgLy8gaWYgd2UgYXJlbid0IGV4YWN0bHkgMiBpdGVtcyBpbiB0aGlzIGFycmF5LCBpdCBpcyBpbnZhbGlkXG4gIHJldHVybiBpc0FycmF5KHNpbmdsZVNpemUpICYmIHNpbmdsZVNpemUubGVuZ3RoID09PSAyICYmICghaXNOYU4oc2luZ2xlU2l6ZVswXSkgJiYgIWlzTmFOKHNpbmdsZVNpemVbMV0pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdpbmRvd1RvcCgpIHtcbiAgcmV0dXJuIHdpbmRvdy50b3A7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXaW5kb3dTZWxmKCkge1xuICByZXR1cm4gd2luZG93LnNlbGY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXaW5kb3dMb2NhdGlvbigpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbjtcbn1cblxuLyoqXG4gKiBXcmFwcGVycyB0byBjb25zb2xlLihsb2cgfCBpbmZvIHwgd2FybiB8IGVycm9yKS4gVGFrZXMgTiBhcmd1bWVudHMsIHRoZSBzYW1lIGFzIHRoZSBuYXRpdmUgbWV0aG9kc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbG9nTWVzc2FnZSgpIHtcbiAgaWYgKGRlYnVnVHVybmVkT24oKSAmJiBjb25zb2xlTG9nRXhpc3RzKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBkZWNvcmF0ZUxvZyhhcmd1bWVudHMsICdNRVNTQUdFOicpKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9nSW5mbygpIHtcbiAgaWYgKGRlYnVnVHVybmVkT24oKSAmJiBjb25zb2xlSW5mb0V4aXN0cykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIGRlY29yYXRlTG9nKGFyZ3VtZW50cywgJ0lORk86JykpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2dXYXJuKCkge1xuICBpZiAoZGVidWdUdXJuZWRPbigpICYmIGNvbnNvbGVXYXJuRXhpc3RzKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgZGVjb3JhdGVMb2coYXJndW1lbnRzLCAnV0FSTklORzonKSk7XG4gIH1cbiAgZW1pdEV2ZW50KENPTlNUQU5UUy5FVkVOVFMuQVVDVElPTl9ERUJVRywge3R5cGU6ICdXQVJOSU5HJywgYXJndW1lbnRzOiBhcmd1bWVudHN9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ0Vycm9yKCkge1xuICBpZiAoZGVidWdUdXJuZWRPbigpICYmIGNvbnNvbGVFcnJvckV4aXN0cykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBkZWNvcmF0ZUxvZyhhcmd1bWVudHMsICdFUlJPUjonKSk7XG4gIH1cbiAgZW1pdEV2ZW50KENPTlNUQU5UUy5FVkVOVFMuQVVDVElPTl9ERUJVRywge3R5cGU6ICdFUlJPUicsIGFyZ3VtZW50czogYXJndW1lbnRzfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXhMb2cocHJlZml4KSB7XG4gIGZ1bmN0aW9uIGRlY29yYXRlKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICBmbihwcmVmaXgsIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGxvZ0Vycm9yOiBkZWNvcmF0ZShsb2dFcnJvciksXG4gICAgbG9nV2FybjogZGVjb3JhdGUobG9nV2FybiksXG4gICAgbG9nTWVzc2FnZTogZGVjb3JhdGUobG9nTWVzc2FnZSksXG4gICAgbG9nSW5mbzogZGVjb3JhdGUobG9nSW5mbyksXG4gIH1cbn1cblxuZnVuY3Rpb24gZGVjb3JhdGVMb2coYXJncywgcHJlZml4KSB7XG4gIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3MpO1xuICBsZXQgYmlkZGVyID0gY29uZmlnLmdldEN1cnJlbnRCaWRkZXIoKTtcblxuICBwcmVmaXggJiYgYXJncy51bnNoaWZ0KHByZWZpeCk7XG4gIGlmIChiaWRkZXIpIHtcbiAgICBhcmdzLnVuc2hpZnQobGFiZWwoJyNhYWEnKSk7XG4gIH1cbiAgYXJncy51bnNoaWZ0KGxhYmVsKCcjM2I4OGMzJykpO1xuICBhcmdzLnVuc2hpZnQoJyVjUHJlYmlkJyArIChiaWRkZXIgPyBgJWMke2JpZGRlcn1gIDogJycpKTtcbiAgcmV0dXJuIGFyZ3M7XG5cbiAgZnVuY3Rpb24gbGFiZWwoY29sb3IpIHtcbiAgICByZXR1cm4gYGRpc3BsYXk6IGlubGluZS1ibG9jazsgY29sb3I6ICNmZmY7IGJhY2tncm91bmQ6ICR7Y29sb3J9OyBwYWRkaW5nOiAxcHggNHB4OyBib3JkZXItcmFkaXVzOiAzcHg7YFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNDb25zb2xlTG9nZ2VyKCkge1xuICByZXR1cm4gY29uc29sZUxvZ0V4aXN0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnVHVybmVkT24oKSB7XG4gIHJldHVybiAhIWNvbmZpZy5nZXRDb25maWcoJ2RlYnVnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnZpc2libGVJZnJhbWUoKSB7XG4gIHZhciBmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIGYuaWQgPSBnZXRVbmlxdWVJZGVudGlmaWVyU3RyKCk7XG4gIGYuaGVpZ2h0ID0gMDtcbiAgZi53aWR0aCA9IDA7XG4gIGYuYm9yZGVyID0gJzBweCc7XG4gIGYuaHNwYWNlID0gJzAnO1xuICBmLnZzcGFjZSA9ICcwJztcbiAgZi5tYXJnaW5XaWR0aCA9ICcwJztcbiAgZi5tYXJnaW5IZWlnaHQgPSAnMCc7XG4gIGYuc3R5bGUuYm9yZGVyID0gJzAnO1xuICBmLnNjcm9sbGluZyA9ICdubyc7XG4gIGYuZnJhbWVCb3JkZXIgPSAnMCc7XG4gIGYuc3JjID0gJ2Fib3V0OmJsYW5rJztcbiAgZi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXR1cm4gZjtcbn1cblxuLypcbiAqICAgQ2hlY2sgaWYgYSBnaXZlbiBwYXJhbWV0ZXIgbmFtZSBleGlzdHMgaW4gcXVlcnkgc3RyaW5nXG4gKiAgIGFuZCBpZiBpdCBkb2VzIHJldHVybiB0aGUgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmFtZXRlckJ5TmFtZShuYW1lKSB7XG4gIHJldHVybiBwYXJzZVFTKGdldFdpbmRvd0xvY2F0aW9uKCkuc2VhcmNoKVtuYW1lXSB8fCAnJztcbn1cblxuLyoqXG4gKiBSZXR1cm4gaWYgdGhlIG9iamVjdCBpcyBvZiB0aGVcbiAqIGdpdmVuIHR5cGUuXG4gKiBAcGFyYW0geyp9IG9iamVjdCB0byB0ZXN0XG4gKiBAcGFyYW0ge1N0cmluZ30gX3QgdHlwZSBzdHJpbmcgKGUuZy4sIEFycmF5KVxuICogQHJldHVybiB7Qm9vbGVhbn0gaWYgb2JqZWN0IGlzIG9mIHR5cGUgX3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQShvYmplY3QsIF90KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0ICcgKyBfdCArICddJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRm4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0Eob2JqZWN0LCB0Rm4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHIob2JqZWN0KSB7XG4gIHJldHVybiBpc0Eob2JqZWN0LCB0U3RyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXkob2JqZWN0KSB7XG4gIHJldHVybiBpc0Eob2JqZWN0LCB0QXJyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKG9iamVjdCkge1xuICByZXR1cm4gaXNBKG9iamVjdCwgdE51bWIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuIGlzQShvYmplY3QsIHRPYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKG9iamVjdCkge1xuICByZXR1cm4gaXNBKG9iamVjdCwgdEJvb2xlYW4pO1xufVxuXG4vKipcbiAqIFJldHVybiBpZiB0aGUgb2JqZWN0IGlzIFwiZW1wdHlcIjtcbiAqIHRoaXMgaW5jbHVkZXMgZmFsc2V5LCBubyBrZXlzLCBvciBubyBpdGVtcyBhdCBpbmRpY2VzXG4gKiBAcGFyYW0geyp9IG9iamVjdCBvYmplY3QgdG8gdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gaWYgb2JqZWN0IGlzIGVtcHR5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KG9iamVjdCkge1xuICBpZiAoIW9iamVjdCkgcmV0dXJuIHRydWU7XG4gIGlmIChpc0FycmF5KG9iamVjdCkgfHwgaXNTdHIob2JqZWN0KSkge1xuICAgIHJldHVybiAhKG9iamVjdC5sZW5ndGggPiAwKTtcbiAgfVxuXG4gIGZvciAodmFyIGsgaW4gb2JqZWN0KSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrKSkgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogUmV0dXJuIGlmIHN0cmluZyBpcyBlbXB0eSwgbnVsbCwgb3IgdW5kZWZpbmVkXG4gKiBAcGFyYW0gc3RyIHN0cmluZyB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gaWYgc3RyaW5nIGlzIGVtcHR5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5U3RyKHN0cikge1xuICByZXR1cm4gaXNTdHIoc3RyKSAmJiAoIXN0ciB8fCBzdHIubGVuZ3RoID09PSAwKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG9iamVjdCB3aXRoIHRoZSBmdW5jdGlvblxuICogZmFsbHMgYmFjayB0byBlczUgYGZvckVhY2hgXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCl9IGZuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfZWFjaChvYmplY3QsIGZuKSB7XG4gIGlmIChpc0VtcHR5KG9iamVjdCkpIHJldHVybjtcbiAgaWYgKGlzRm4ob2JqZWN0LmZvckVhY2gpKSByZXR1cm4gb2JqZWN0LmZvckVhY2goZm4sIHRoaXMpO1xuXG4gIHZhciBrID0gMDtcbiAgdmFyIGwgPSBvYmplY3QubGVuZ3RoO1xuXG4gIGlmIChsID4gMCkge1xuICAgIGZvciAoOyBrIDwgbDsgaysrKSBmbihvYmplY3Rba10sIGssIG9iamVjdCk7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChrIGluIG9iamVjdCkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrKSkgZm4uY2FsbCh0aGlzLCBvYmplY3Rba10sIGspO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnMoYSwgb2JqKSB7XG4gIGlmIChpc0VtcHR5KGEpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzRm4oYS5pbmRleE9mKSkge1xuICAgIHJldHVybiBhLmluZGV4T2Yob2JqKSAhPT0gLTE7XG4gIH1cblxuICB2YXIgaSA9IGEubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKGFbaV0gPT09IG9iaikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIE1hcCBhbiBhcnJheSBvciBvYmplY3QgaW50byBhbm90aGVyIGFycmF5XG4gKiBnaXZlbiBhIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCl9IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9tYXAob2JqZWN0LCBjYWxsYmFjaykge1xuICBpZiAoaXNFbXB0eShvYmplY3QpKSByZXR1cm4gW107XG4gIGlmIChpc0ZuKG9iamVjdC5tYXApKSByZXR1cm4gb2JqZWN0Lm1hcChjYWxsYmFjayk7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgX2VhY2gob2JqZWN0LCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIG91dHB1dC5wdXNoKGNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICB9KTtcblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzT3duKG9iamVjdFRvQ2hlY2ssIHByb3BlcnR5VG9DaGVja0Zvcikge1xuICBpZiAob2JqZWN0VG9DaGVjay5oYXNPd25Qcm9wZXJ0eSkge1xuICAgIHJldHVybiBvYmplY3RUb0NoZWNrLmhhc093blByb3BlcnR5KHByb3BlcnR5VG9DaGVja0Zvcik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0VG9DaGVja1twcm9wZXJ0eVRvQ2hlY2tGb3JdICE9PSAndW5kZWZpbmVkJykgJiYgKG9iamVjdFRvQ2hlY2suY29uc3RydWN0b3IucHJvdG90eXBlW3Byb3BlcnR5VG9DaGVja0Zvcl0gIT09IG9iamVjdFRvQ2hlY2tbcHJvcGVydHlUb0NoZWNrRm9yXSk7XG4gIH1cbn07XG5cbi8qXG4qIEluc2VydHMgYW4gZWxlbWVudChlbG0pIGFzIHRhcmdldHMgY2hpbGQsIGJ5IGRlZmF1bHQgYXMgZmlyc3QgY2hpbGRcbiogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxtXG4qIEBwYXJhbSB7SFRNTEVsZW1lbnR9IFtkb2NdXG4qIEBwYXJhbSB7SFRNTEVsZW1lbnR9IFt0YXJnZXRdXG4qIEBwYXJhbSB7Qm9vbGVhbn0gW2FzTGFzdENoaWxkQ2hpbGRdXG4qIEByZXR1cm4ge0hUTUwgRWxlbWVudH1cbiovXG5leHBvcnQgZnVuY3Rpb24gaW5zZXJ0RWxlbWVudChlbG0sIGRvYywgdGFyZ2V0LCBhc0xhc3RDaGlsZENoaWxkKSB7XG4gIGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcbiAgbGV0IHBhcmVudEVsO1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcGFyZW50RWwgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFyZ2V0KTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnRFbCA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpO1xuICB9XG4gIHRyeSB7XG4gICAgcGFyZW50RWwgPSBwYXJlbnRFbC5sZW5ndGggPyBwYXJlbnRFbCA6IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpO1xuICAgIGlmIChwYXJlbnRFbC5sZW5ndGgpIHtcbiAgICAgIHBhcmVudEVsID0gcGFyZW50RWxbMF07XG4gICAgICBsZXQgaW5zZXJ0QmVmb3JlRWwgPSBhc0xhc3RDaGlsZENoaWxkID8gbnVsbCA6IHBhcmVudEVsLmZpcnN0Q2hpbGQ7XG4gICAgICByZXR1cm4gcGFyZW50RWwuaW5zZXJ0QmVmb3JlKGVsbSwgaW5zZXJ0QmVmb3JlRWwpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGNvbXBsZXRlcyB3aGVuIHRoZSBnaXZlbiBlbGVtZW50IHRyaWdnZXJzIGEgJ2xvYWQnIG9yICdlcnJvcicgRE9NIGV2ZW50LCBvciB3aGVuXG4gKiBgdGltZW91dGAgbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZC5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge051bWJlcn0gW3RpbWVvdXRdXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdhaXRGb3JFbGVtZW50VG9Mb2FkKGVsZW1lbnQsIHRpbWVvdXQpIHtcbiAgbGV0IHRpbWVyID0gbnVsbDtcbiAgcmV0dXJuIG5ldyBHcmVlZHlQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgY29uc3Qgb25Mb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkxvYWQpO1xuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIG9uTG9hZCk7XG4gICAgICBpZiAodGltZXIgIT0gbnVsbCkge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9O1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZCk7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIG9uTG9hZCk7XG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgdGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChvbkxvYWQsIHRpbWVvdXQpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogSW5zZXJ0cyBhbiBpbWFnZSBwaXhlbCB3aXRoIHRoZSBzcGVjaWZpZWQgYHVybGAgZm9yIGNvb2tpZSBzeW5jXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTCBzdHJpbmcgb2YgdGhlIGltYWdlIHBpeGVsIHRvIGxvYWRcbiAqIEBwYXJhbSAge2Z1bmN0aW9ufSBbZG9uZV0gYW4gb3B0aW9uYWwgZXhpdCBjYWxsYmFjaywgdXNlZCB3aGVuIHRoaXMgdXNlcnN5bmMgcGl4ZWwgaXMgYWRkZWQgZHVyaW5nIGFuIGFzeW5jIHByb2Nlc3NcbiAqIEBwYXJhbSAge051bWJlcn0gW3RpbWVvdXRdIGFuIG9wdGlvbmFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgaW1hZ2UgdG8gbG9hZCBiZWZvcmUgY2FsbGluZyBgZG9uZWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXJQaXhlbCh1cmwsIGRvbmUsIHRpbWVvdXQpIHtcbiAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gIGlmIChkb25lICYmIGludGVybmFsLmlzRm4oZG9uZSkpIHtcbiAgICB3YWl0Rm9yRWxlbWVudFRvTG9hZChpbWcsIHRpbWVvdXQpLnRoZW4oZG9uZSk7XG4gIH1cbiAgaW1nLnNyYyA9IHVybDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGxCdXJsKHsgc291cmNlLCBidXJsIH0pIHtcbiAgaWYgKHNvdXJjZSA9PT0gQ09OU1RBTlRTLlMyUy5TUkMgJiYgYnVybCkge1xuICAgIGludGVybmFsLnRyaWdnZXJQaXhlbChidXJsKTtcbiAgfVxufVxuXG4vKipcbiAqIEluc2VydHMgYW4gZW1wdHkgaWZyYW1lIHdpdGggdGhlIHNwZWNpZmllZCBgaHRtbGAsIHByaW1hcmlseSB1c2VkIGZvciB0cmFja2luZyBwdXJwb3Nlc1xuICogKHRob3VnaCBjb3VsZCBiZSBmb3Igb3RoZXIgcHVycG9zZXMpXG4gKiBAcGFyYW0ge3N0cmluZ30gaHRtbENvZGUgc25pcHBldCBvZiBIVE1MIGNvZGUgdXNlZCBmb3IgdHJhY2tpbmcgcHVycG9zZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc2VydEh0bWxJbnRvSWZyYW1lKGh0bWxDb2RlKSB7XG4gIGlmICghaHRtbENvZGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIGlmcmFtZS5pZCA9IGdldFVuaXF1ZUlkZW50aWZpZXJTdHIoKTtcbiAgaWZyYW1lLndpZHRoID0gMDtcbiAgaWZyYW1lLmhlaWdodCA9IDA7XG4gIGlmcmFtZS5oc3BhY2UgPSAnMCc7XG4gIGlmcmFtZS52c3BhY2UgPSAnMCc7XG4gIGlmcmFtZS5tYXJnaW5XaWR0aCA9ICcwJztcbiAgaWZyYW1lLm1hcmdpbkhlaWdodCA9ICcwJztcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGlmcmFtZS5zdHlsZS5oZWlnaHQgPSAnMHB4JztcbiAgaWZyYW1lLnN0eWxlLndpZHRoID0gJzBweCc7XG4gIGlmcmFtZS5zY3JvbGxpbmcgPSAnbm8nO1xuICBpZnJhbWUuZnJhbWVCb3JkZXIgPSAnMCc7XG4gIGlmcmFtZS5hbGxvd3RyYW5zcGFyZW5jeSA9ICd0cnVlJztcblxuICBpbnRlcm5hbC5pbnNlcnRFbGVtZW50KGlmcmFtZSwgZG9jdW1lbnQsICdib2R5Jyk7XG5cbiAgaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudC53cml0ZShodG1sQ29kZSk7XG4gIGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50LmNsb3NlKCk7XG59XG5cbi8qKlxuICogSW5zZXJ0cyBlbXB0eSBpZnJhbWUgd2l0aCB0aGUgc3BlY2lmaWVkIGB1cmxgIGZvciBjb29raWUgc3luY1xuICogQHBhcmFtICB7c3RyaW5nfSB1cmwgVVJMIHRvIGJlIHJlcXVlc3RlZFxuICogQHBhcmFtICB7c3RyaW5nfSBlbmNvZGVVcmkgYm9vbGVhbiBpZiBVUkwgc2hvdWxkIGJlIGVuY29kZWQgYmVmb3JlIGluc2VydGVkLiBEZWZhdWx0cyB0byB0cnVlXG4gKiBAcGFyYW0gIHtmdW5jdGlvbn0gW2RvbmVdIGFuIG9wdGlvbmFsIGV4aXQgY2FsbGJhY2ssIHVzZWQgd2hlbiB0aGlzIHVzZXJzeW5jIHBpeGVsIGlzIGFkZGVkIGR1cmluZyBhbiBhc3luYyBwcm9jZXNzXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IFt0aW1lb3V0XSBhbiBvcHRpb25hbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIGlmcmFtZSB0byBsb2FkIGJlZm9yZSBjYWxsaW5nIGBkb25lYFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zZXJ0VXNlclN5bmNJZnJhbWUodXJsLCBkb25lLCB0aW1lb3V0KSB7XG4gIGxldCBpZnJhbWVIdG1sID0gaW50ZXJuYWwuY3JlYXRlVHJhY2tQaXhlbElmcmFtZUh0bWwodXJsLCBmYWxzZSwgJ2FsbG93LXNjcmlwdHMgYWxsb3ctc2FtZS1vcmlnaW4nKTtcbiAgbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gaWZyYW1lSHRtbDtcbiAgbGV0IGlmcmFtZSA9IGRpdi5maXJzdENoaWxkO1xuICBpZiAoZG9uZSAmJiBpbnRlcm5hbC5pc0ZuKGRvbmUpKSB7XG4gICAgd2FpdEZvckVsZW1lbnRUb0xvYWQoaWZyYW1lLCB0aW1lb3V0KS50aGVuKGRvbmUpO1xuICB9XG4gIGludGVybmFsLmluc2VydEVsZW1lbnQoaWZyYW1lLCBkb2N1bWVudCwgJ2h0bWwnLCB0cnVlKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc25pcHBldCBvZiBIVE1MIHRoYXQgcmV0cmlldmVzIHRoZSBzcGVjaWZpZWQgYHVybGBcbiAqIEBwYXJhbSAge3N0cmluZ30gdXJsIFVSTCB0byBiZSByZXF1ZXN0ZWRcbiAqIEByZXR1cm4ge3N0cmluZ30gICAgIEhUTUwgc25pcHBldCB0aGF0IGNvbnRhaW5zIHRoZSBpbWcgc3JjID0gc2V0IHRvIGB1cmxgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUcmFja1BpeGVsSHRtbCh1cmwpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBsZXQgZXNjYXBlZFVybCA9IGVuY29kZVVSSSh1cmwpO1xuICBsZXQgaW1nID0gJzxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjBweDt0b3A6MHB4O3Zpc2liaWxpdHk6aGlkZGVuO1wiPic7XG4gIGltZyArPSAnPGltZyBzcmM9XCInICsgZXNjYXBlZFVybCArICdcIj48L2Rpdj4nO1xuICByZXR1cm4gaW1nO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc25pcHBldCBvZiBJZnJhbWUgSFRNTCB0aGF0IHJldHJpZXZlcyB0aGUgc3BlY2lmaWVkIGB1cmxgXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHVybCBwbGFpbiBVUkwgdG8gYmUgcmVxdWVzdGVkXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGVuY29kZVVyaSBib29sZWFuIGlmIFVSTCBzaG91bGQgYmUgZW5jb2RlZCBiZWZvcmUgaW5zZXJ0ZWQuIERlZmF1bHRzIHRvIHRydWVcbiAqIEBwYXJhbSAge3N0cmluZ30gc2FuZGJveCBzdHJpbmcgaWYgcHJvdmlkZWQgdGhlIHNhbmRib3ggYXR0cmlidXRlIHdpbGwgYmUgaW5jbHVkZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ30gICAgIEhUTUwgc25pcHBldCB0aGF0IGNvbnRhaW5zIHRoZSBpZnJhbWUgc3JjID0gc2V0IHRvIGB1cmxgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUcmFja1BpeGVsSWZyYW1lSHRtbCh1cmwsIGVuY29kZVVyaSA9IHRydWUsIHNhbmRib3ggPSAnJykge1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBpZiAoZW5jb2RlVXJpKSB7XG4gICAgdXJsID0gZW5jb2RlVVJJKHVybCk7XG4gIH1cbiAgaWYgKHNhbmRib3gpIHtcbiAgICBzYW5kYm94ID0gYHNhbmRib3g9XCIke3NhbmRib3h9XCJgO1xuICB9XG5cbiAgcmV0dXJuIGA8aWZyYW1lICR7c2FuZGJveH0gaWQ9XCIke2dldFVuaXF1ZUlkZW50aWZpZXJTdHIoKX1cIlxuICAgICAgZnJhbWVib3JkZXI9XCIwXCJcbiAgICAgIGFsbG93dHJhbnNwYXJlbmN5PVwidHJ1ZVwiXG4gICAgICBtYXJnaW5oZWlnaHQ9XCIwXCIgbWFyZ2lud2lkdGg9XCIwXCJcbiAgICAgIHdpZHRoPVwiMFwiIGhzcGFjZT1cIjBcIiB2c3BhY2U9XCIwXCIgaGVpZ2h0PVwiMFwiXG4gICAgICBzdHlsZT1cImhlaWdodDowcHg7d2lkdGg6MHB4O2Rpc3BsYXk6bm9uZTtcIlxuICAgICAgc2Nyb2xsaW5nPVwibm9cIlxuICAgICAgc3JjPVwiJHt1cmx9XCI+XG4gICAgPC9pZnJhbWU+YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlU3RyaW5nKHBhcmFtLCB2YWwsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAodmFsID09PSB1bmRlZmluZWQgfHwgdmFsID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuICBpZiAoaXNTdHIodmFsKSkge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbCkpIHtcbiAgICByZXR1cm4gdmFsLnRvU3RyaW5nKCk7XG4gIH1cbiAgaW50ZXJuYWwubG9nV2FybignVW5zdXBvcnRlZCB0eXBlIGZvciBwYXJhbTogJyArIHBhcmFtICsgJyByZXF1aXJlZCB0eXBlOiBTdHJpbmcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuaXF1ZXModmFsdWUsIGluZGV4LCBhcnJ5KSB7XG4gIHJldHVybiBhcnJ5LmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW4oYSwgYikge1xuICByZXR1cm4gYS5jb25jYXQoYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCaWRSZXF1ZXN0KGlkLCBiaWRkZXJSZXF1ZXN0cykge1xuICBpZiAoIWlkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBiaWRSZXF1ZXN0O1xuICBiaWRkZXJSZXF1ZXN0cy5zb21lKGJpZGRlclJlcXVlc3QgPT4ge1xuICAgIGxldCByZXN1bHQgPSBmaW5kKGJpZGRlclJlcXVlc3QuYmlkcywgYmlkID0+IFsnYmlkSWQnLCAnYWRJZCcsICdiaWRfaWQnXS5zb21lKHR5cGUgPT4gYmlkW3R5cGVdID09PSBpZCkpO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGJpZFJlcXVlc3QgPSByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xuICByZXR1cm4gYmlkUmVxdWVzdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleXMob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWUob2JqLCBrZXkpIHtcbiAgcmV0dXJuIG9ialtrZXldO1xufVxuXG4vKipcbiAqIEdldCB0aGUga2V5IG9mIGFuIG9iamVjdCBmb3IgYSBnaXZlbiB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5QnlWYWx1ZShvYmosIHZhbHVlKSB7XG4gIGZvciAobGV0IHByb3AgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgaWYgKG9ialtwcm9wXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCaWRkZXJDb2RlcyhhZFVuaXRzID0gcGJqc0luc3RhbmNlLmFkVW5pdHMpIHtcbiAgLy8gdGhpcyBjb3VsZCBtZW1vaXplIGFkVW5pdHNcbiAgcmV0dXJuIGFkVW5pdHMubWFwKHVuaXQgPT4gdW5pdC5iaWRzLm1hcChiaWQgPT4gYmlkLmJpZGRlcilcbiAgICAucmVkdWNlKGZsYXR0ZW4sIFtdKSkucmVkdWNlKGZsYXR0ZW4sIFtdKS5maWx0ZXIoKGJpZGRlcikgPT4gdHlwZW9mIGJpZGRlciAhPT0gJ3VuZGVmaW5lZCcpLmZpbHRlcih1bmlxdWVzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzR3B0UHViYWRzRGVmaW5lZCgpIHtcbiAgaWYgKHdpbmRvdy5nb29nbGV0YWcgJiYgaXNGbih3aW5kb3cuZ29vZ2xldGFnLnB1YmFkcykgJiYgaXNGbih3aW5kb3cuZ29vZ2xldGFnLnB1YmFkcygpLmdldFNsb3RzKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FwbkdldFRhZ0RlZmluZWQoKSB7XG4gIGlmICh3aW5kb3cuYXBudGFnICYmIGlzRm4od2luZG93LmFwbnRhZy5nZXRUYWcpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGdldCBoaWdoZXN0IGNwbSB2YWx1ZSBiaWQsIGluIGNhc2Ugb2YgdGllIGl0IHdpbGwgcmV0dXJuIHRoZSBiaWQgd2l0aCBsb3dlc3QgdGltZVRvUmVzcG9uZFxuZXhwb3J0IGNvbnN0IGdldEhpZ2hlc3RDcG0gPSBnZXRIaWdoZXN0Q3BtQ2FsbGJhY2soJ3RpbWVUb1Jlc3BvbmQnLCAocHJldmlvdXMsIGN1cnJlbnQpID0+IHByZXZpb3VzID4gY3VycmVudCk7XG5cbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBnZXQgdGhlIG9sZGVzdCBoaWdodGVzdCBjcG0gdmFsdWUgYmlkLCBpbiBjYXNlIG9mIHRpZSBpdCB3aWxsIHJldHVybiB0aGUgYmlkIHdoaWNoIGNhbWUgaW4gZmlyc3Rcbi8vIFVzZSBjYXNlIGZvciB0aWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9wcmViaWQvUHJlYmlkLmpzL2lzc3Vlcy8yNDQ4XG5leHBvcnQgY29uc3QgZ2V0T2xkZXN0SGlnaGVzdENwbUJpZCA9IGdldEhpZ2hlc3RDcG1DYWxsYmFjaygncmVzcG9uc2VUaW1lc3RhbXAnLCAocHJldmlvdXMsIGN1cnJlbnQpID0+IHByZXZpb3VzID4gY3VycmVudCk7XG5cbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBnZXQgdGhlIGxhdGVzdCBoaWdodGVzdCBjcG0gdmFsdWUgYmlkLCBpbiBjYXNlIG9mIHRpZSBpdCB3aWxsIHJldHVybiB0aGUgYmlkIHdoaWNoIGNhbWUgaW4gbGFzdFxuLy8gVXNlIGNhc2UgZm9yIHRpZTogaHR0cHM6Ly9naXRodWIuY29tL3ByZWJpZC9QcmViaWQuanMvaXNzdWVzLzI1MzlcbmV4cG9ydCBjb25zdCBnZXRMYXRlc3RIaWdoZXN0Q3BtQmlkID0gZ2V0SGlnaGVzdENwbUNhbGxiYWNrKCdyZXNwb25zZVRpbWVzdGFtcCcsIChwcmV2aW91cywgY3VycmVudCkgPT4gcHJldmlvdXMgPCBjdXJyZW50KTtcblxuZnVuY3Rpb24gZ2V0SGlnaGVzdENwbUNhbGxiYWNrKHVzZVRpZUJyZWFrZXJQcm9wZXJ0eSwgdGllQnJlYWtlckNhbGxiYWNrKSB7XG4gIHJldHVybiAocHJldmlvdXMsIGN1cnJlbnQpID0+IHtcbiAgICBpZiAocHJldmlvdXMuY3BtID09PSBjdXJyZW50LmNwbSkge1xuICAgICAgcmV0dXJuIHRpZUJyZWFrZXJDYWxsYmFjayhwcmV2aW91c1t1c2VUaWVCcmVha2VyUHJvcGVydHldLCBjdXJyZW50W3VzZVRpZUJyZWFrZXJQcm9wZXJ0eV0pID8gY3VycmVudCA6IHByZXZpb3VzO1xuICAgIH1cbiAgICByZXR1cm4gcHJldmlvdXMuY3BtIDwgY3VycmVudC5jcG0gPyBjdXJyZW50IDogcHJldmlvdXM7XG4gIH1cbn1cblxuLyoqXG4gKiBGaXNoZXLigJNZYXRlcyBzaHVmZmxlXG4gKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS82Mjc0Mzk4XG4gKiBodHRwczovL2Jvc3Qub2Nrcy5vcmcvbWlrZS9zaHVmZmxlL1xuICogaXN0YW5idWwgaWdub3JlIG5leHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcbiAgbGV0IGNvdW50ZXIgPSBhcnJheS5sZW5ndGg7XG5cbiAgLy8gd2hpbGUgdGhlcmUgYXJlIGVsZW1lbnRzIGluIHRoZSBhcnJheVxuICB3aGlsZSAoY291bnRlciA+IDApIHtcbiAgICAvLyBwaWNrIGEgcmFuZG9tIGluZGV4XG4gICAgbGV0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY291bnRlcik7XG5cbiAgICAvLyBkZWNyZWFzZSBjb3VudGVyIGJ5IDFcbiAgICBjb3VudGVyLS07XG5cbiAgICAvLyBhbmQgc3dhcCB0aGUgbGFzdCBlbGVtZW50IHdpdGggaXRcbiAgICBsZXQgdGVtcCA9IGFycmF5W2NvdW50ZXJdO1xuICAgIGFycmF5W2NvdW50ZXJdID0gYXJyYXlbaW5kZXhdO1xuICAgIGFycmF5W2luZGV4XSA9IHRlbXA7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZFVuaXRzRmlsdGVyKGZpbHRlciwgYmlkKSB7XG4gIHJldHVybiBpbmNsdWRlcyhmaWx0ZXIsIGJpZCAmJiBiaWQuYWRVbml0Q29kZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ2xvbmUob2JqKSB7XG4gIHJldHVybiBjbG9uZShvYmopO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5JZnJhbWUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGludGVybmFsLmdldFdpbmRvd1NlbGYoKSAhPT0gaW50ZXJuYWwuZ2V0V2luZG93VG9wKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTYWZhcmlCcm93c2VyKCkge1xuICByZXR1cm4gL14oKD8hY2hyb21lfGFuZHJvaWR8Y3Jpb3N8Znhpb3MpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VBdWN0aW9uUHJpY2Uoc3RyLCBjcG0pIHtcbiAgaWYgKCFzdHIpIHJldHVybjtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXCRcXHtBVUNUSU9OX1BSSUNFXFx9L2csIGNwbSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlQ2xpY2tUaHJvdWdoKHN0ciwgY2xpY2t0YWcpIHtcbiAgaWYgKCFzdHIgfHwgIWNsaWNrdGFnIHx8IHR5cGVvZiBjbGlja3RhZyAhPT0gJ3N0cmluZycpIHJldHVybjtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXCR7Q0xJQ0tUSFJPVUdIfS9nLCBjbGlja3RhZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbn1cblxuLyoqXG4gKiBUaGUgcmV0dXJuZWQgdmFsdWUgcmVwcmVzZW50cyB0aGUgdGltZSBlbGFwc2VkIHNpbmNlIHRoZSB0aW1lIG9yaWdpbi4gQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUGVyZm9ybWFuY2Uvbm93XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGVyZm9ybWFuY2VOb3coKSB7XG4gIHJldHVybiAod2luZG93LnBlcmZvcm1hbmNlICYmIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vdygpKSB8fCAwO1xufVxuXG4vKipcbiAqIFdoZW4gdGhlIGRldmljZUFjY2VzcyBmbGFnIGNvbmZpZyBvcHRpb24gaXMgZmFsc2UsIG5vIGNvb2tpZXMgc2hvdWxkIGJlIHJlYWQgb3Igc2V0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0RldmljZUFjY2VzcygpIHtcbiAgcmV0dXJuIGNvbmZpZy5nZXRDb25maWcoJ2RldmljZUFjY2VzcycpICE9PSBmYWxzZTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7KGJvb2xlYW58dW5kZWZpbmVkKX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQ29va2llU3VwcG9ydCgpIHtcbiAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IuY29va2llRW5hYmxlZCB8fCAhIWRvY3VtZW50LmNvb2tpZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGEgZnVuY3Rpb24sIHJldHVybiBhIGZ1bmN0aW9uIHdoaWNoIG9ubHkgZXhlY3V0ZXMgdGhlIG9yaWdpbmFsIGFmdGVyXG4gKiBpdCdzIGJlZW4gY2FsbGVkIG51bVJlcXVpcmVkQ2FsbHMgdGltZXMuXG4gKlxuICogTm90ZSB0aGF0IHRoZSBhcmd1bWVudHMgZnJvbSB0aGUgcHJldmlvdXMgY2FsbHMgd2lsbCAqbm90KiBiZSBmb3J3YXJkZWQgdG8gdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuICogT25seSB0aGUgZmluYWwgY2FsbCdzIGFyZ3VtZW50cyBtYXR0ZXIuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gd2hpY2ggc2hvdWxkIGJlIGV4ZWN1dGVkLCBvbmNlIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBoYXMgYmVlbiBleGVjdXRlZFxuICogICBudW1SZXF1aXJlZENhbGxzIHRpbWVzLlxuICogQHBhcmFtIHtpbnR9IG51bVJlcXVpcmVkQ2FsbHMgVGhlIG51bWJlciBvZiB0aW1lcyB3aGljaCB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gbmVlZHMgdG8gYmUgY2FsbGVkIGJlZm9yZVxuICogICBmdW5jIGlzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsYXlFeGVjdXRpb24oZnVuYywgbnVtUmVxdWlyZWRDYWxscykge1xuICBpZiAobnVtUmVxdWlyZWRDYWxscyA8IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYG51bVJlcXVpcmVkQ2FsbHMgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlci4gR290ICR7bnVtUmVxdWlyZWRDYWxsc31gKTtcbiAgfVxuICBsZXQgbnVtQ2FsbHMgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIG51bUNhbGxzKys7XG4gICAgaWYgKG51bUNhbGxzID09PSBudW1SZXF1aXJlZENhbGxzKSB7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM0ODkwMjc2LzQyODcwNFxuICogQGV4cG9ydFxuICogQHBhcmFtIHthcnJheX0geHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEByZXR1cm5zIHtPYmplY3R9IHske2tleV92YWx1ZX06ICR7Z3JvdXBCeUFycmF5fSwga2V5X3ZhbHVlOiB7Z3JvdXBCeUFycmF5fX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnkoeHMsIGtleSkge1xuICByZXR1cm4geHMucmVkdWNlKGZ1bmN0aW9uKHJ2LCB4KSB7XG4gICAgKHJ2W3hba2V5XV0gPSBydlt4W2tleV1dIHx8IFtdKS5wdXNoKHgpO1xuICAgIHJldHVybiBydjtcbiAgfSwge30pO1xufVxuXG4vKipcbiAqIEJ1aWxkIGFuIG9iamVjdCBjb25zaXN0aW5nIG9mIG9ubHkgZGVmaW5lZCBwYXJhbWV0ZXJzIHRvIGF2b2lkIGNyZWF0aW5nIGFuXG4gKiBvYmplY3Qgd2l0aCBkZWZpbmVkIGtleXMgYW5kIHVuZGVmaW5lZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcGljayBkZWZpbmVkIHBhcmFtcyBvdXQgb2ZcbiAqIEBwYXJhbSB7c3RyaW5nW119IHBhcmFtcyBBbiBhcnJheSBvZiBzdHJpbmdzIHJlcHJlc2VudGluZyBwcm9wZXJ0aWVzIHRvIGxvb2sgZm9yIGluIHRoZSBvYmplY3RcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgc3BlY2lmaWVkIHZhbHVlcyB0aGF0IGFyZSBkZWZpbmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZpbmVkUGFyYW1zKG9iamVjdCwgcGFyYW1zKSB7XG4gIHJldHVybiBwYXJhbXNcbiAgICAuZmlsdGVyKHBhcmFtID0+IG9iamVjdFtwYXJhbV0pXG4gICAgLnJlZHVjZSgoYmlkLCBwYXJhbSkgPT4gT2JqZWN0LmFzc2lnbihiaWQsIHsgW3BhcmFtXTogb2JqZWN0W3BhcmFtXSB9KSwge30pO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE1lZGlhVHlwZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBiYW5uZXIgYmFubmVyIGNvbmZpZ3VyYXRpb25cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBuYXRpdmUgbmF0aXZlIGNvbmZpZ3VyYXRpb25cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSB2aWRlbyB2aWRlbyBjb25maWd1cmF0aW9uXG4gKi9cblxuLyoqXG4gKiBWYWxpZGF0ZXMgYW4gYWR1bml0J3MgYG1lZGlhVHlwZXNgIHBhcmFtZXRlclxuICogQHBhcmFtIHtNZWRpYVR5cGVzfSBtZWRpYVR5cGVzIG1lZGlhVHlwZXMgcGFyYW1ldGVyIHRvIHZhbGlkYXRlXG4gKiBAcmV0dXJuIHtib29sZWFufSBJZiBvYmplY3QgaXMgdmFsaWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRNZWRpYVR5cGVzKG1lZGlhVHlwZXMpIHtcbiAgY29uc3QgU1VQUE9SVEVEX01FRElBX1RZUEVTID0gWydiYW5uZXInLCAnbmF0aXZlJywgJ3ZpZGVvJ107XG4gIGNvbnN0IFNVUFBPUlRFRF9TVFJFQU1fVFlQRVMgPSBbJ2luc3RyZWFtJywgJ291dHN0cmVhbScsICdhZHBvZCddO1xuXG4gIGNvbnN0IHR5cGVzID0gT2JqZWN0LmtleXMobWVkaWFUeXBlcyk7XG5cbiAgaWYgKCF0eXBlcy5ldmVyeSh0eXBlID0+IGluY2x1ZGVzKFNVUFBPUlRFRF9NRURJQV9UWVBFUywgdHlwZSkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKEZFQVRVUkVTLlZJREVPICYmIG1lZGlhVHlwZXMudmlkZW8gJiYgbWVkaWFUeXBlcy52aWRlby5jb250ZXh0KSB7XG4gICAgcmV0dXJuIGluY2x1ZGVzKFNVUFBPUlRFRF9TVFJFQU1fVFlQRVMsIG1lZGlhVHlwZXMudmlkZW8uY29udGV4dCk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHVzZXIgY29uZmlndXJlZCBiaWRkZXIgcGFyYW1zIGZyb20gYWR1bml0XG4gKiBAcGFyYW0ge09iamVjdH0gYWRVbml0c1xuICogQHBhcmFtIHtzdHJpbmd9IGFkVW5pdENvZGUgY29kZVxuICogQHBhcmFtIHtzdHJpbmd9IGJpZGRlciBjb2RlXG4gKiBAcmV0dXJuIHtBcnJheX0gdXNlciBjb25maWd1cmVkIHBhcmFtIGZvciB0aGUgZ2l2ZW4gYmlkZGVyIGFkdW5pdCBjb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyQ29uZmlndXJlZFBhcmFtcyhhZFVuaXRzLCBhZFVuaXRDb2RlLCBiaWRkZXIpIHtcbiAgcmV0dXJuIGFkVW5pdHNcbiAgICAuZmlsdGVyKGFkVW5pdCA9PiBhZFVuaXQuY29kZSA9PT0gYWRVbml0Q29kZSlcbiAgICAuZmxhdE1hcCgoYWRVbml0KSA9PiBhZFVuaXQuYmlkcylcbiAgICAuZmlsdGVyKChiaWRkZXJEYXRhKSA9PiBiaWRkZXJEYXRhLmJpZGRlciA9PT0gYmlkZGVyKVxuICAgIC5tYXAoKGJpZGRlckRhdGEpID0+IGJpZGRlckRhdGEucGFyYW1zIHx8IHt9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIERvIE5vdCBUcmFjayBzdGF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RE5UKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLmRvTm90VHJhY2sgPT09ICcxJyB8fCB3aW5kb3cuZG9Ob3RUcmFjayA9PT0gJzEnIHx8IG5hdmlnYXRvci5tc0RvTm90VHJhY2sgPT09ICcxJyB8fCBuYXZpZ2F0b3IuZG9Ob3RUcmFjayA9PT0gJ3llcyc7XG59XG5cbmNvbnN0IGNvbXBhcmVDb2RlQW5kU2xvdCA9IChzbG90LCBhZFVuaXRDb2RlKSA9PiBzbG90LmdldEFkVW5pdFBhdGgoKSA9PT0gYWRVbml0Q29kZSB8fCBzbG90LmdldFNsb3RFbGVtZW50SWQoKSA9PT0gYWRVbml0Q29kZTtcblxuLyoqXG4gKiBSZXR1cm5zIGZpbHRlciBmdW5jdGlvbiB0byBtYXRjaCBhZFVuaXRDb2RlIGluIHNsb3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzbG90IEdvb2dsZVRhZyBzbG90XG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gZmlsdGVyIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FkVW5pdENvZGVNYXRjaGluZ1Nsb3Qoc2xvdCkge1xuICByZXR1cm4gKGFkVW5pdENvZGUpID0+IGNvbXBhcmVDb2RlQW5kU2xvdChzbG90LCBhZFVuaXRDb2RlKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGZpbHRlciBmdW5jdGlvbiB0byBtYXRjaCBhZFVuaXRDb2RlIGluIHNsb3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZFVuaXRDb2RlIEFkVW5pdCBjb2RlXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gZmlsdGVyIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Nsb3RNYXRjaGluZ0FkVW5pdENvZGUoYWRVbml0Q29kZSkge1xuICByZXR1cm4gKHNsb3QpID0+IGNvbXBhcmVDb2RlQW5kU2xvdChzbG90LCBhZFVuaXRDb2RlKTtcbn1cblxuLyoqXG4gKiBAc3VtbWFyeSBVc2VzIHRoZSBhZFVuaXQncyBjb2RlIGluIG9yZGVyIHRvIGZpbmQgYSBtYXRjaGluZyBncHQgc2xvdCBvYmplY3Qgb24gdGhlIHBhZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEdwdFNsb3RGb3JBZFVuaXRDb2RlKGFkVW5pdENvZGUpIHtcbiAgbGV0IG1hdGNoaW5nU2xvdDtcbiAgaWYgKGlzR3B0UHViYWRzRGVmaW5lZCgpKSB7XG4gICAgLy8gZmluZCB0aGUgZmlyc3QgbWF0Y2hpbmcgZ3B0IHNsb3Qgb24gdGhlIHBhZ2VcbiAgICBtYXRjaGluZ1Nsb3QgPSBmaW5kKHdpbmRvdy5nb29nbGV0YWcucHViYWRzKCkuZ2V0U2xvdHMoKSwgaXNTbG90TWF0Y2hpbmdBZFVuaXRDb2RlKGFkVW5pdENvZGUpKTtcbiAgfVxuICByZXR1cm4gbWF0Y2hpbmdTbG90O1xufTtcblxuLyoqXG4gKiBAc3VtbWFyeSBVc2VzIHRoZSBhZFVuaXQncyBjb2RlIGluIG9yZGVyIHRvIGZpbmQgYSBtYXRjaGluZyBncHRTbG90IG9uIHRoZSBwYWdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRHcHRTbG90SW5mb0ZvckFkVW5pdENvZGUoYWRVbml0Q29kZSkge1xuICBjb25zdCBtYXRjaGluZ1Nsb3QgPSBnZXRHcHRTbG90Rm9yQWRVbml0Q29kZShhZFVuaXRDb2RlKTtcbiAgaWYgKG1hdGNoaW5nU2xvdCkge1xuICAgIHJldHVybiB7XG4gICAgICBncHRTbG90OiBtYXRjaGluZ1Nsb3QuZ2V0QWRVbml0UGF0aCgpLFxuICAgICAgZGl2SWQ6IG1hdGNoaW5nU2xvdC5nZXRTbG90RWxlbWVudElkKClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHt9O1xufTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIHdhcm5pbmcgbWVzc2FnZSBmb3Igd2hlbiB1bnN1cHBvcnRlZCBiaWRkZXJzIGFyZSBkcm9wcGVkIGZyb20gYW4gYWR1bml0XG4gKiBAcGFyYW0ge09iamVjdH0gYWRVbml0IGFkIHVuaXQgZnJvbSB3aGljaCB0aGUgYmlkZGVyIGlzIGJlaW5nIGRyb3BwZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaWRkZXIgYmlkZGVyIGNvZGUgdGhhdCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBhZFVuaXRcbiAqIEByZXR1cm4ge3N0cmluZ30gd2FybmluZyBtZXNzYWdlIHRvIGRpc3BsYXkgd2hlbiBjb25kaXRpb24gaXMgbWV0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bnN1cHBvcnRlZEJpZGRlck1lc3NhZ2UoYWRVbml0LCBiaWRkZXIpIHtcbiAgY29uc3QgbWVkaWFUeXBlID0gT2JqZWN0LmtleXMoYWRVbml0Lm1lZGlhVHlwZXMgfHwgeydiYW5uZXInOiAnYmFubmVyJ30pLmpvaW4oJywgJyk7XG5cbiAgcmV0dXJuIGBcbiAgICAke2FkVW5pdC5jb2RlfSBpcyBhICR7bWVkaWFUeXBlfSBhZCB1bml0XG4gICAgY29udGFpbmluZyBiaWRkZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCAke21lZGlhVHlwZX06ICR7YmlkZGVyfS5cbiAgICBUaGlzIGJpZGRlciB3b24ndCBmZXRjaCBkZW1hbmQuXG4gIGA7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlucHV0IGlzIGludGVnZXIgb3Igbm90XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvaXNJbnRlZ2VyXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgaWYgKE51bWJlci5pc0ludGVnZXIpIHtcbiAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsdWUpICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIHZhbHVlIGluIGNhbWVsLWNhc2UgdG8gdW5kZXJzY29yZSBlZyAncGxhY2VtZW50SWQnIGJlY29tZXMgJ3BsYWNlbWVudF9pZCdcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBzdHJpbmcgdmFsdWUgdG8gY29udmVydFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydENhbWVsVG9VbmRlcnNjb3JlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKC8oPzpefFxcLj8pKFtBLVpdKS9nLCBmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4gJ18nICsgeS50b0xvd2VyQ2FzZSgpIH0pLnJlcGxhY2UoL15fLywgJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgb2JqZWN0IHdpdGggdW5kZWZpbmVkIHByb3BlcnRpZXMgcmVtb3ZlZCBmcm9tIGdpdmVuIG9iamVjdFxuICogQHBhcmFtIG9iaiB0aGUgb2JqZWN0IHRvIGNsZWFuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGVhbk9iaihvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKChuZXdPYmosIGtleSkgPT4ge1xuICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gbmV3T2JqO1xuICB9LCB7fSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggc2VsZWN0ZWQgcHJvcGVydGllcy4gIEFsc28gYWxsb3dzIHByb3BlcnR5IHJlbmFtaW5nIGFuZCB0cmFuc2Zvcm0gZnVuY3Rpb25zLlxuICogQHBhcmFtIG9iaiB0aGUgb3JpZ2luYWwgb2JqZWN0XG4gKiBAcGFyYW0gcHJvcGVydGllcyBBbiBhcnJheSBvZiBkZXNpcmVkIHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBpY2sob2JqLCBwcm9wZXJ0aWVzKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICByZXR1cm4gcHJvcGVydGllcy5yZWR1Y2UoKG5ld09iaiwgcHJvcCwgaSkgPT4ge1xuICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG5ld09iajtcbiAgICB9XG5cbiAgICBsZXQgbmV3UHJvcCA9IHByb3A7XG4gICAgbGV0IG1hdGNoID0gcHJvcC5tYXRjaCgvXiguKz8pXFxzYXNcXHMoLis/KSQvaSk7XG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHByb3AgPSBtYXRjaFsxXTtcbiAgICAgIG5ld1Byb3AgPSBtYXRjaFsyXTtcbiAgICB9XG5cbiAgICBsZXQgdmFsdWUgPSBvYmpbcHJvcF07XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzW2kgKyAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFsdWUgPSBwcm9wZXJ0aWVzW2kgKyAxXSh2YWx1ZSwgbmV3T2JqKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG5ld09ialtuZXdQcm9wXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdPYmo7XG4gIH0sIHt9KTtcbn1cblxuLyoqXG4gKiBUcnkgdG8gY29udmVydCBhIHZhbHVlIHRvIGEgdHlwZS5cbiAqIElmIGl0IGNhbid0IGJlIGRvbmUsIHRoZSB2YWx1ZSB3aWxsIGJlIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlVG9Db252ZXJ0IFRoZSB0YXJnZXQgdHlwZS4gZS5nLiBcInN0cmluZ1wiLCBcIm51bWJlclwiLCBldGMuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjb252ZXJ0ZWQgaW50byB0eXBlVG9Db252ZXJ0LlxuICovXG5mdW5jdGlvbiB0cnlDb252ZXJ0VHlwZSh0eXBlVG9Db252ZXJ0LCB2YWx1ZSkge1xuICBpZiAodHlwZVRvQ29udmVydCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUudG9TdHJpbmcoKTtcbiAgfSBlbHNlIGlmICh0eXBlVG9Db252ZXJ0ID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFR5cGVzKHR5cGVzLCBwYXJhbXMpIHtcbiAgT2JqZWN0LmtleXModHlwZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAocGFyYW1zW2tleV0pIHtcbiAgICAgIGlmIChpc0ZuKHR5cGVzW2tleV0pKSB7XG4gICAgICAgIHBhcmFtc1trZXldID0gdHlwZXNba2V5XShwYXJhbXNba2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXNba2V5XSA9IHRyeUNvbnZlcnRUeXBlKHR5cGVzW2tleV0sIHBhcmFtc1trZXldKTtcbiAgICAgIH1cblxuICAgICAgLy8gZG9uJ3Qgc2VuZCBpbnZhbGlkIHZhbHVlc1xuICAgICAgaWYgKGlzTmFOKHBhcmFtc1trZXldKSkge1xuICAgICAgICBkZWxldGUgcGFyYW1zLmtleTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheU9mTnVtcyh2YWwsIHNpemUpIHtcbiAgcmV0dXJuIChpc0FycmF5KHZhbCkpICYmICgoc2l6ZSkgPyB2YWwubGVuZ3RoID09PSBzaXplIDogdHJ1ZSkgJiYgKHZhbC5ldmVyeSh2ID0+IGlzSW50ZWdlcih2KSkpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbiBsZW5ndGggYW5kIGZpbGxzIGVhY2ggaXRlbSB3aXRoIHRoZSBnaXZlbiB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsbCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGxldCBuZXdBcnJheSA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgdmFsdWVUb1B1c2ggPSBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IGRlZXBDbG9uZSh2YWx1ZSkgOiB2YWx1ZTtcbiAgICBuZXdBcnJheS5wdXNoKHZhbHVlVG9QdXNoKTtcbiAgfVxuXG4gIHJldHVybiBuZXdBcnJheTtcbn1cblxuLyoqXG4gKiBodHRwOi8vbnBtLmltL2NodW5rXG4gKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggKnNpemUqIGNodW5rcyBmcm9tIGdpdmVuIGFycmF5XG4gKlxuICogRXhhbXBsZTpcbiAqIFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ10gY2h1bmtlZCBieSAyID0+XG4gKiBbWydhJywgJ2InXSwgWydjJywgJ2QnXSwgWydlJ11dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSkge1xuICBsZXQgbmV3QXJyYXkgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGguY2VpbChhcnJheS5sZW5ndGggLyBzaXplKTsgaSsrKSB7XG4gICAgbGV0IHN0YXJ0ID0gaSAqIHNpemU7XG4gICAgbGV0IGVuZCA9IHN0YXJ0ICsgc2l6ZTtcbiAgICBuZXdBcnJheS5wdXNoKGFycmF5LnNsaWNlKHN0YXJ0LCBlbmQpKTtcbiAgfVxuXG4gIHJldHVybiBuZXdBcnJheTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1pblZhbHVlRnJvbUFycmF5KGFycmF5KSB7XG4gIHJldHVybiBNYXRoLm1pbiguLi5hcnJheSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXhWYWx1ZUZyb21BcnJheShhcnJheSkge1xuICByZXR1cm4gTWF0aC5tYXgoLi4uYXJyYXkpO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBjcmVhdGUgY29tcGFyZSBmdW5jdGlvbiB0byBzb3J0IG9uIG9iamVjdCBwcm9wZXJ0eVxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IGNvbXBhcmUgZnVuY3Rpb24gdG8gYmUgdXNlZCBpbiBzb3J0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlT24ocHJvcGVydHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAgIGlmIChhW3Byb3BlcnR5XSA8IGJbcHJvcGVydHldKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGFbcHJvcGVydHldID4gYltwcm9wZXJ0eV0pIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUVMocXVlcnkpIHtcbiAgcmV0dXJuICFxdWVyeSA/IHt9IDogcXVlcnlcbiAgICAucmVwbGFjZSgvXlxcPy8sICcnKVxuICAgIC5zcGxpdCgnJicpXG4gICAgLnJlZHVjZSgoYWNjLCBjcml0ZXJpYSkgPT4ge1xuICAgICAgbGV0IFtrLCB2XSA9IGNyaXRlcmlhLnNwbGl0KCc9Jyk7XG4gICAgICBpZiAoL1xcW1xcXSQvLnRlc3QoaykpIHtcbiAgICAgICAgayA9IGsucmVwbGFjZSgnW10nLCAnJyk7XG4gICAgICAgIGFjY1trXSA9IGFjY1trXSB8fCBbXTtcbiAgICAgICAgYWNjW2tdLnB1c2godik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY2Nba10gPSB2IHx8ICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRRUyhxdWVyeSkge1xuICByZXR1cm4gT2JqZWN0XG4gICAgLmtleXMocXVlcnkpXG4gICAgLm1hcChrID0+IEFycmF5LmlzQXJyYXkocXVlcnlba10pXG4gICAgICA/IHF1ZXJ5W2tdLm1hcCh2ID0+IGAke2t9W109JHt2fWApLmpvaW4oJyYnKVxuICAgICAgOiBgJHtrfT0ke3F1ZXJ5W2tdfWApXG4gICAgLmpvaW4oJyYnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVXJsKHVybCwgb3B0aW9ucykge1xuICBsZXQgcGFyc2VkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICBpZiAob3B0aW9ucyAmJiAnbm9EZWNvZGVXaG9sZVVSTCcgaW4gb3B0aW9ucyAmJiBvcHRpb25zLm5vRGVjb2RlV2hvbGVVUkwpIHtcbiAgICBwYXJzZWQuaHJlZiA9IHVybDtcbiAgfSBlbHNlIHtcbiAgICBwYXJzZWQuaHJlZiA9IGRlY29kZVVSSUNvbXBvbmVudCh1cmwpO1xuICB9XG4gIC8vIGluIHdpbmRvdy5sb2NhdGlvbiAnc2VhcmNoJyBpcyBzdHJpbmcsIG5vdCBvYmplY3RcbiAgbGV0IHFzQXNTdHJpbmcgPSAob3B0aW9ucyAmJiAnZGVjb2RlU2VhcmNoQXNTdHJpbmcnIGluIG9wdGlvbnMgJiYgb3B0aW9ucy5kZWNvZGVTZWFyY2hBc1N0cmluZyk7XG4gIHJldHVybiB7XG4gICAgaHJlZjogcGFyc2VkLmhyZWYsXG4gICAgcHJvdG9jb2w6IChwYXJzZWQucHJvdG9jb2wgfHwgJycpLnJlcGxhY2UoLzokLywgJycpLFxuICAgIGhvc3RuYW1lOiBwYXJzZWQuaG9zdG5hbWUsXG4gICAgcG9ydDogK3BhcnNlZC5wb3J0LFxuICAgIHBhdGhuYW1lOiBwYXJzZWQucGF0aG5hbWUucmVwbGFjZSgvXig/IVxcLykvLCAnLycpLFxuICAgIHNlYXJjaDogKHFzQXNTdHJpbmcpID8gcGFyc2VkLnNlYXJjaCA6IGludGVybmFsLnBhcnNlUVMocGFyc2VkLnNlYXJjaCB8fCAnJyksXG4gICAgaGFzaDogKHBhcnNlZC5oYXNoIHx8ICcnKS5yZXBsYWNlKC9eIy8sICcnKSxcbiAgICBob3N0OiBwYXJzZWQuaG9zdCB8fCB3aW5kb3cubG9jYXRpb24uaG9zdFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRVcmwob2JqKSB7XG4gIHJldHVybiAob2JqLnByb3RvY29sIHx8ICdodHRwJykgKyAnOi8vJyArXG4gICAgKG9iai5ob3N0IHx8XG4gICAgICBvYmouaG9zdG5hbWUgKyAob2JqLnBvcnQgPyBgOiR7b2JqLnBvcnR9YCA6ICcnKSkgK1xuICAgIChvYmoucGF0aG5hbWUgfHwgJycpICtcbiAgICAob2JqLnNlYXJjaCA/IGA/JHtpbnRlcm5hbC5mb3JtYXRRUyhvYmouc2VhcmNoIHx8ICcnKX1gIDogJycpICtcbiAgICAob2JqLmhhc2ggPyBgIyR7b2JqLmhhc2h9YCA6ICcnKTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGRlZXBseSBjb21wYXJlcyB0d28gb2JqZWN0cyBjaGVja2luZyBmb3IgdGhlaXIgZXF1aXZhbGVuY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMVxuICogQHBhcmFtIHtPYmplY3R9IG9iajJcbiAqIEBwYXJhbSBjaGVja1R5cGVzIHtib29sZWFufSBpZiBzZXQsIHR3byBvYmplY3RzIHdpdGggaWRlbnRpY2FsIHByb3BlcnRpZXMgYnV0IGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgd2lsbCAqbm90KlxuICogYmUgY29uc2lkZXJlZCBlcXVpdmFsZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWVwRXF1YWwob2JqMSwgb2JqMiwge2NoZWNrVHlwZXMgPSBmYWxzZX0gPSB7fSkge1xuICBpZiAob2JqMSA9PT0gb2JqMikgcmV0dXJuIHRydWU7XG4gIGVsc2UgaWYgKFxuICAgICh0eXBlb2Ygb2JqMSA9PT0gJ29iamVjdCcgJiYgb2JqMSAhPT0gbnVsbCkgJiZcbiAgICAodHlwZW9mIG9iajIgPT09ICdvYmplY3QnICYmIG9iajIgIT09IG51bGwpICYmXG4gICAgKCFjaGVja1R5cGVzIHx8IChvYmoxLmNvbnN0cnVjdG9yID09PSBvYmoyLmNvbnN0cnVjdG9yKSlcbiAgKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKG9iajEpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMob2JqMikubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgcHJvcCBpbiBvYmoxKSB7XG4gICAgICBpZiAob2JqMi5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICBpZiAoIWRlZXBFcXVhbChvYmoxW3Byb3BdLCBvYmoyW3Byb3BdLCB7Y2hlY2tUeXBlc30pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VEZWVwKHRhcmdldCwgLi4uc291cmNlcykge1xuICBpZiAoIXNvdXJjZXMubGVuZ3RoKSByZXR1cm4gdGFyZ2V0O1xuICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KCk7XG5cbiAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuICAgICAgICBpZiAoIXRhcmdldFtrZXldKSBPYmplY3QuYXNzaWduKHRhcmdldCwgeyBba2V5XToge30gfSk7XG4gICAgICAgIG1lcmdlRGVlcCh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xuICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHNvdXJjZVtrZXldKSkge1xuICAgICAgICBpZiAoIXRhcmdldFtrZXldKSB7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHsgW2tleV06IFsuLi5zb3VyY2Vba2V5XV0gfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheSh0YXJnZXRba2V5XSkpIHtcbiAgICAgICAgICBzb3VyY2Vba2V5XS5mb3JFYWNoKG9iaiA9PiB7XG4gICAgICAgICAgICBsZXQgYWRkSXRGbGFnID0gMTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0W2tleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGRlZXBFcXVhbCh0YXJnZXRba2V5XVtpXSwgb2JqKSkge1xuICAgICAgICAgICAgICAgIGFkZEl0RmxhZyA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZGRJdEZsYWcpIHtcbiAgICAgICAgICAgICAgdGFyZ2V0W2tleV0ucHVzaChvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRhcmdldCwgeyBba2V5XTogc291cmNlW2tleV0gfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGVlcCh0YXJnZXQsIC4uLnNvdXJjZXMpO1xufVxuXG4vKipcbiAqIHJldHVybnMgYSBoYXNoIG9mIGEgc3RyaW5nIHVzaW5nIGEgZmFzdCBhbGdvcml0aG1cbiAqIHNvdXJjZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzUyMTcxNDgwLzg0NTM5MFxuICogQHBhcmFtIHN0clxuICogQHBhcmFtIHNlZWQgKG9wdGlvbmFsKVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGN5cmI1M0hhc2goc3RyLCBzZWVkID0gMCkge1xuICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW11bFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2ltdWwjUG9seWZpbGxcbiAgbGV0IGltdWwgPSBmdW5jdGlvbihvcEEsIG9wQikge1xuICAgIGlmIChpc0ZuKE1hdGguaW11bCkpIHtcbiAgICAgIHJldHVybiBNYXRoLmltdWwob3BBLCBvcEIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcEIgfD0gMDsgLy8gZW5zdXJlIHRoYXQgb3BCIGlzIGFuIGludGVnZXIuIG9wQSB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgY29lcmNlZC5cbiAgICAgIC8vIGZsb2F0aW5nIHBvaW50cyBnaXZlIHVzIDUzIGJpdHMgb2YgcHJlY2lzaW9uIHRvIHdvcmsgd2l0aCBwbHVzIDEgc2lnbiBiaXRcbiAgICAgIC8vIGF1dG9tYXRpY2FsbHkgaGFuZGxlZCBmb3Igb3VyIGNvbnZpZW5lbmNlOlxuICAgICAgLy8gMS4gMHgwMDNmZmZmZiAvKm9wQSAmIDB4MDAwZmZmZmYqLyAqIDB4N2ZmZmZmZmYgLypvcEIqLyA9IDB4MWZmZmZmN2ZjMDAwMDFcbiAgICAgIC8vICAgIDB4MWZmZmZmN2ZjMDAwMDEgPCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiAvKjB4MWZmZmZmZmZmZmZmZmYqL1xuICAgICAgdmFyIHJlc3VsdCA9IChvcEEgJiAweDAwM2ZmZmZmKSAqIG9wQjtcbiAgICAgIC8vIDIuIFdlIGNhbiByZW1vdmUgYW4gaW50ZWdlciBjb2Vyc2lvbiBmcm9tIHRoZSBzdGF0ZW1lbnQgYWJvdmUgYmVjYXVzZTpcbiAgICAgIC8vICAgIDB4MWZmZmZmN2ZjMDAwMDEgKyAweGZmYzAwMDAwID0gMHgxZmZmZmZmZjgwMDAwMVxuICAgICAgLy8gICAgMHgxZmZmZmZmZjgwMDAwMSA8IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIC8qMHgxZmZmZmZmZmZmZmZmZiovXG4gICAgICBpZiAob3BBICYgMHhmZmMwMDAwMCkgcmVzdWx0ICs9IChvcEEgJiAweGZmYzAwMDAwKSAqIG9wQiB8IDA7XG4gICAgICByZXR1cm4gcmVzdWx0IHwgMDtcbiAgICB9XG4gIH07XG5cbiAgbGV0IGgxID0gMHhkZWFkYmVlZiBeIHNlZWQ7XG4gIGxldCBoMiA9IDB4NDFjNmNlNTcgXiBzZWVkO1xuICBmb3IgKGxldCBpID0gMCwgY2g7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjaCA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIGgxID0gaW11bChoMSBeIGNoLCAyNjU0NDM1NzYxKTtcbiAgICBoMiA9IGltdWwoaDIgXiBjaCwgMTU5NzMzNDY3Nyk7XG4gIH1cbiAgaDEgPSBpbXVsKGgxIF4gKGgxID4+PiAxNiksIDIyNDY4MjI1MDcpIF4gaW11bChoMiBeIChoMiA+Pj4gMTMpLCAzMjY2NDg5OTA5KTtcbiAgaDIgPSBpbXVsKGgyIF4gKGgyID4+PiAxNiksIDIyNDY4MjI1MDcpIF4gaW11bChoMSBeIChoMSA+Pj4gMTMpLCAzMjY2NDg5OTA5KTtcbiAgcmV0dXJuICg0Mjk0OTY3Mjk2ICogKDIwOTcxNTEgJiBoMikgKyAoaDEgPj4+IDApKS50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIHJldHVybnMgYSB3aW5kb3cgb2JqZWN0LCB3aGljaCBob2xkcyB0aGUgcHJvdmlkZWQgZG9jdW1lbnQgb3IgbnVsbFxuICogQHBhcmFtIHtEb2N1bWVudH0gZG9jXG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2luZG93RnJvbURvY3VtZW50KGRvYykge1xuICByZXR1cm4gKGRvYykgPyBkb2MuZGVmYXVsdFZpZXcgOiBudWxsO1xufVxuXG4vKipcbiAqIHJldHVybnMgdGhlIHJlc3VsdCBvZiBgSlNPTi5wYXJzZShkYXRhKWAsIG9yIHVuZGVmaW5lZCBpZiB0aGF0IHRocm93cyBhbiBlcnJvci5cbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FmZUpTT05QYXJzZShkYXRhKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8qKlxuICogUmV0dXJucyBhIG1lbW9pemVkIHZlcnNpb24gb2YgYGZuYC5cbiAqXG4gKiBAcGFyYW0gZm5cbiAqIEBwYXJhbSBrZXkgY2FjaGUga2V5IGdlbmVyYXRvciwgaW52b2tlZCB3aXRoIHRoZSBzYW1lIGFyZ3VtZW50cyBwYXNzZWQgdG8gYGZuYC5cbiAqICAgICAgICBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnQgaXMgdXNlZCBhcyBrZXkuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbigpOiBhbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplKGZuLCBrZXkgPSBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBhcmc7IH0pIHtcbiAgY29uc3QgY2FjaGUgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IG1lbW9pemVkID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0ga2V5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKCFjYWNoZS5oYXMoY2FjaGVLZXkpKSB7XG4gICAgICBjYWNoZS5zZXQoY2FjaGVLZXksIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgfVxuICBtZW1vaXplZC5jbGVhciA9IGNhY2hlLmNsZWFyLmJpbmQoY2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8qKlxuICogU2V0cyBkYXRhc2V0IGF0dHJpYnV0ZXMgb24gYSBzY3JpcHRcbiAqIEBwYXJhbSB7U2NyaXB0fSBzY3JpcHRcbiAqIEBwYXJhbSB7b2JqZWN0fSBhdHRyaWJ1dGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRTY3JpcHRBdHRyaWJ1dGVzKHNjcmlwdCwgYXR0cmlidXRlcykge1xuICBmb3IgKGxldCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEVuY29kZSBhIHN0cmluZyBmb3IgaW5jbHVzaW9uIGluIEhUTUwuXG4gKiBTZWUgaHR0cHM6Ly9wcmFnbWF0aWN3ZWJzZWN1cml0eS5jb20vYXJ0aWNsZXMvc3Bhc2VjdXJpdHkvanNvbi1zdHJpbmdpZnkteHNzLmh0bWwgYW5kXG4gKiBodHRwczovL2NvZGVxbC5naXRodWIuY29tL2NvZGVxbC1xdWVyeS1oZWxwL2phdmFzY3JpcHQvanMtYmFkLWNvZGUtc2FuaXRpemF0aW9uL1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgZXNjYXBlVW5zYWZlQ2hhcnMgPSAoKCkgPT4ge1xuICBjb25zdCBlc2NhcGVzID0ge1xuICAgICc8JzogJ1xcXFx1MDAzQycsXG4gICAgJz4nOiAnXFxcXHUwMDNFJyxcbiAgICAnLyc6ICdcXFxcdTAwMkYnLFxuICAgICdcXFxcJzogJ1xcXFxcXFxcJyxcbiAgICAnXFxiJzogJ1xcXFxiJyxcbiAgICAnXFxmJzogJ1xcXFxmJyxcbiAgICAnXFxuJzogJ1xcXFxuJyxcbiAgICAnXFxyJzogJ1xcXFxyJyxcbiAgICAnXFx0JzogJ1xcXFx0JyxcbiAgICAnXFwwJzogJ1xcXFwwJyxcbiAgICAnXFx1MjAyOCc6ICdcXFxcdTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ1xcXFx1MjAyOSdcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bPD5cXGJcXGZcXG5cXHJcXHRcXDBcXHUyMDI4XFx1MjAyOVxcXFxdL2csIHggPT4gZXNjYXBlc1t4XSlcbiAgfVxufSkoKTtcblxuLyoqXG4gKiBQZXJmb3JtIGEgYmluYXJ5IHNlYXJjaCBmb3IgYGVsYCBvbiBhbiBvcmRlcmVkIGFycmF5IGBhcnJgLlxuICpcbiAqIEByZXR1cm5zIHRoZSBsb3dlc3Qgbm9ubmVnYXRpdmUgaW50ZWdlciBJIHRoYXQgc2F0aXNmaWVzOlxuICogICBrZXkoYXJyW2ldKSA+PSBrZXkoZWwpIGZvciBlYWNoIGkgYmV0d2VlbiBJIGFuZCBhcnIubGVuZ3RoXG4gKlxuICogICAoaWYgb25lIG9yIG1vcmUgbWF0Y2hlcyBhcmUgZm91bmQgZm9yIGBlbGAsIHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdDtcbiAqICAgaWYgdGhlIGVsZW1lbnQgaXMgbm90IGZvdW5kLCByZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQncyBncmVhdGVyO1xuICogICBpZiBubyBncmVhdGVyIGVsZW1lbnQgZXhpc3RzLCByZXR1cm4gYGFyci5sZW5ndGhgKVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmluYXJ5U2VhcmNoKGFyciwgZWwsIGtleSA9IChlbCkgPT4gZWwpIHtcbiAgbGV0IGxlZnQgPSAwO1xuICBsZXQgcmlnaHQgPSBhcnIubGVuZ3RoICYmIGFyci5sZW5ndGggLSAxO1xuICBjb25zdCB0YXJnZXQgPSBrZXkoZWwpO1xuICB3aGlsZSAocmlnaHQgLSBsZWZ0ID4gMSkge1xuICAgIGNvbnN0IG1pZGRsZSA9IGxlZnQgKyBNYXRoLnJvdW5kKChyaWdodCAtIGxlZnQpIC8gMik7XG4gICAgaWYgKHRhcmdldCA+IGtleShhcnJbbWlkZGxlXSkpIHtcbiAgICAgIGxlZnQgPSBtaWRkbGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJpZ2h0ID0gbWlkZGxlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoYXJyLmxlbmd0aCA+IGxlZnQgJiYgdGFyZ2V0ID4ga2V5KGFycltsZWZ0XSkpIHtcbiAgICBsZWZ0Kys7XG4gIH1cbiAgcmV0dXJuIGxlZnQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsImltcG9ydCB0b1Byb3BlcnR5S2V5IGZyb20gXCIuL3RvUHJvcGVydHlLZXkuanNcIjtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHRvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yKHJlY2VpdmVyLCBwcml2YXRlTWFwLCBhY3Rpb24pIHtcbiAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIFwiICsgYWN0aW9uICsgXCIgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XG4gIH1cbiAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcbn0iLCJpbXBvcnQgY2xhc3NBcHBseURlc2NyaXB0b3JHZXQgZnJvbSBcIi4vY2xhc3NBcHBseURlc2NyaXB0b3JHZXQuanNcIjtcbmltcG9ydCBjbGFzc0V4dHJhY3RGaWVsZERlc2NyaXB0b3IgZnJvbSBcIi4vY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBjbGFzc0V4dHJhY3RGaWVsZERlc2NyaXB0b3IocmVjZWl2ZXIsIHByaXZhdGVNYXAsIFwiZ2V0XCIpO1xuICByZXR1cm4gY2xhc3NBcHBseURlc2NyaXB0b3JHZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc0FwcGx5RGVzY3JpcHRvckdldChyZWNlaXZlciwgZGVzY3JpcHRvcikge1xuICBpZiAoZGVzY3JpcHRvci5nZXQpIHtcbiAgICByZXR1cm4gZGVzY3JpcHRvci5nZXQuY2FsbChyZWNlaXZlcik7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3IudmFsdWU7XG59IiwiaW1wb3J0IGNsYXNzQXBwbHlEZXNjcmlwdG9yU2V0IGZyb20gXCIuL2NsYXNzQXBwbHlEZXNjcmlwdG9yU2V0LmpzXCI7XG5pbXBvcnQgY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yIGZyb20gXCIuL2NsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvci5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xuICB2YXIgZGVzY3JpcHRvciA9IGNsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvcihyZWNlaXZlciwgcHJpdmF0ZU1hcCwgXCJzZXRcIik7XG4gIGNsYXNzQXBwbHlEZXNjcmlwdG9yU2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yLCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NBcHBseURlc2NyaXB0b3JTZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IsIHZhbHVlKSB7XG4gIGlmIChkZXNjcmlwdG9yLnNldCkge1xuICAgIGRlc2NyaXB0b3Iuc2V0LmNhbGwocmVjZWl2ZXIsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWRlc2NyaXB0b3Iud3JpdGFibGUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHJlYWQgb25seSBwcml2YXRlIGZpZWxkXCIpO1xuICAgIH1cbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gdmFsdWU7XG4gIH1cbn0iLCJjb25zdCBTVUNDRVNTID0gMDtcbmNvbnN0IEZBSUwgPSAxO1xuXG4vKipcbiAqIEEgdmVyc2lvbiBvZiBQcm9taXNlIHRoYXQgcnVucyBjYWxsYmFja3Mgc3luY2hyb25vdXNseSB3aGVuIGl0IGNhbiAoaS5lLiBhZnRlciBpdCdzIGJlZW4gZnVsZmlsbGVkIG9yIHJlamVjdGVkKS5cbiAqL1xuZXhwb3J0IGNsYXNzIEdyZWVkeVByb21pc2Uge1xuICAjcmVzdWx0O1xuICAjY2FsbGJhY2tzO1xuXG4gIC8qKlxuICAgKiBDb252ZW5pZW5jZSB3cmFwcGVyIGZvciBzZXRUaW1lb3V0OyB0YWtlcyBjYXJlIG9mIHJldHVybmluZyBhbiBhbHJlYWR5IGZ1bGZpbGxlZCBHcmVlZHlQcm9taXNlIHdoZW4gdGhlIGRlbGF5IGlzIHplcm8uXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheU1zIGRlbGF5IGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcmV0dXJucyB7R3JlZWR5UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgKHRvIHVuZGVmaW5lZCkgaW4gYGRlbGF5TXNgIG1pbGxpc2Vjb25kc1xuICAgKi9cbiAgc3RhdGljIHRpbWVvdXQoZGVsYXlNcyA9IDApIHtcbiAgICByZXR1cm4gbmV3IEdyZWVkeVByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGRlbGF5TXMgPT09IDAgPyByZXNvbHZlKCkgOiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5TXMpO1xuICAgIH0pO1xuICB9XG5cbiAgY29uc3RydWN0b3IocmVzb2x2ZXIpIHtcbiAgICBpZiAodHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Jlc29sdmVyIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IFtdO1xuICAgIGxldCBbcmVzb2x2ZSwgcmVqZWN0XSA9IFtTVUNDRVNTLCBGQUlMXS5tYXAoKHR5cGUpID0+IHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09IFNVQ0NFU1MgJiYgdHlwZW9mIHZhbHVlPy50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFsdWUudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9IGVsc2UgaWYgKCFyZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godHlwZSwgdmFsdWUpO1xuICAgICAgICAgIHdoaWxlIChjYWxsYmFja3MubGVuZ3RoKSBjYWxsYmFja3Muc2hpZnQoKSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdHJ5IHtcbiAgICAgIHJlc29sdmVyKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmVqZWN0KGUpO1xuICAgIH1cbiAgICB0aGlzLiNyZXN1bHQgPSByZXN1bHQ7XG4gICAgdGhpcy4jY2FsbGJhY2tzID0gY2FsbGJhY2tzO1xuICB9XG5cbiAgdGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLiNyZXN1bHQ7XG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRpbnVhdGlvbiA9ICgpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gcmVzdWx0WzFdO1xuICAgICAgICBsZXQgW2hhbmRsZXIsIHJlc29sdmVGbl0gPSByZXN1bHRbMF0gPT09IFNVQ0NFU1MgPyBbb25TdWNjZXNzLCByZXNvbHZlXSA6IFtvbkVycm9yLCByZWplY3RdO1xuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFsdWUgPSBoYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc29sdmVGbiA9IHJlc29sdmU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZUZuKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5sZW5ndGggPyBjb250aW51YXRpb24oKSA6IHRoaXMuI2NhbGxiYWNrcy5wdXNoKGNvbnRpbnVhdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICBjYXRjaChvbkVycm9yKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvbkVycm9yKTtcbiAgfVxuXG4gIGZpbmFsbHkob25GaW5hbGx5KSB7XG4gICAgbGV0IHZhbDtcbiAgICByZXR1cm4gdGhpcy50aGVuKFxuICAgICAgKHYpID0+IHsgdmFsID0gdjsgcmV0dXJuIG9uRmluYWxseSgpOyB9LFxuICAgICAgKGUpID0+IHsgdmFsID0gdGhpcy5jb25zdHJ1Y3Rvci5yZWplY3QoZSk7IHJldHVybiBvbkZpbmFsbHkoKSB9XG4gICAgKS50aGVuKCgpID0+IHZhbCk7XG4gIH1cblxuICBzdGF0aWMgI2NvbGxlY3QocHJvbWlzZXMsIGNvbGxlY3RvciwgZG9uZSkge1xuICAgIGxldCBjbnQgPSBwcm9taXNlcy5sZW5ndGg7XG4gICAgZnVuY3Rpb24gY2x0KCkge1xuICAgICAgY29sbGVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoLS1jbnQgPD0gMCAmJiBkb25lKSBkb25lKCk7XG4gICAgfVxuICAgIHByb21pc2VzLmxlbmd0aCA9PT0gMCAmJiBkb25lID8gZG9uZSgpIDogcHJvbWlzZXMuZm9yRWFjaCgocCwgaSkgPT4gdGhpcy5yZXNvbHZlKHApLnRoZW4oXG4gICAgICAodmFsKSA9PiBjbHQodHJ1ZSwgdmFsLCBpKSxcbiAgICAgIChlcnIpID0+IGNsdChmYWxzZSwgZXJyLCBpKVxuICAgICkpO1xuICB9XG5cbiAgc3RhdGljIHJhY2UocHJvbWlzZXMpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy4jY29sbGVjdChwcm9taXNlcywgKHN1Y2Nlc3MsIHJlc3VsdCkgPT4gc3VjY2VzcyA/IHJlc29sdmUocmVzdWx0KSA6IHJlamVjdChyZXN1bHQpKTtcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGFsbChwcm9taXNlcykge1xuICAgIHJldHVybiBuZXcgdGhpcygocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgcmVzID0gW107XG4gICAgICB0aGlzLiNjb2xsZWN0KHByb21pc2VzLCAoc3VjY2VzcywgdmFsLCBpKSA9PiBzdWNjZXNzID8gcmVzW2ldID0gdmFsIDogcmVqZWN0KHZhbCksICgpID0+IHJlc29sdmUocmVzKSk7XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBhbGxTZXR0bGVkKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKChyZXNvbHZlKSA9PiB7XG4gICAgICBsZXQgcmVzID0gW107XG4gICAgICB0aGlzLiNjb2xsZWN0KHByb21pc2VzLCAoc3VjY2VzcywgdmFsLCBpKSA9PiByZXNbaV0gPSBzdWNjZXNzID8ge3N0YXR1czogJ2Z1bGZpbGxlZCcsIHZhbHVlOiB2YWx9IDoge3N0YXR1czogJ3JlamVjdGVkJywgcmVhc29uOiB2YWx9LCAoKSA9PiByZXNvbHZlKHJlcykpXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyByZXNvbHZlKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKHJlc29sdmUgPT4gcmVzb2x2ZSh2YWx1ZSkpXG4gIH1cblxuICBzdGF0aWMgcmVqZWN0KGVycm9yKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKChyZXNvbHZlLCByZWplY3QpID0+IHJlamVjdChlcnJvcikpXG4gIH1cbn1cblxuLyoqXG4gKiBAcmV0dXJucyBhIHtwcm9taXNlLCByZXNvbHZlLCByZWplY3R9IHRyaW8gd2hlcmUgYHByb21pc2VgIGlzIHJlc29sdmVkIGJ5IGNhbGxpbmcgYHJlc29sdmVgIG9yIGByZWplY3RgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmZXIoe3Byb21pc2VGYWN0b3J5ID0gKHJlc29sdmVyKSA9PiBuZXcgR3JlZWR5UHJvbWlzZShyZXNvbHZlcil9ID0ge30pIHtcbiAgZnVuY3Rpb24gaW52b2tlcihkZWxlZ2F0ZSkge1xuICAgIHJldHVybiAodmFsKSA9PiBkZWxlZ2F0ZSh2YWwpO1xuICB9XG5cbiAgbGV0IHJlc29sdmVGbiwgcmVqZWN0Rm47XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9taXNlOiBwcm9taXNlRmFjdG9yeSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZXNvbHZlRm4gPSByZXNvbHZlO1xuICAgICAgcmVqZWN0Rm4gPSByZWplY3Q7XG4gICAgfSksXG4gICAgcmVzb2x2ZTogaW52b2tlcihyZXNvbHZlRm4pLFxuICAgIHJlamVjdDogaW52b2tlcihyZWplY3RGbilcbiAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGRzZXQob2JqLCBrZXlzLCB2YWwpIHtcblx0a2V5cy5zcGxpdCAmJiAoa2V5cz1rZXlzLnNwbGl0KCcuJykpO1xuXHR2YXIgaT0wLCBsPWtleXMubGVuZ3RoLCB0PW9iaiwgeCwgaztcblx0d2hpbGUgKGkgPCBsKSB7XG5cdFx0ayA9IGtleXNbaSsrXTtcblx0XHRpZiAoayA9PT0gJ19fcHJvdG9fXycgfHwgayA9PT0gJ2NvbnN0cnVjdG9yJyB8fCBrID09PSAncHJvdG90eXBlJykgYnJlYWs7XG5cdFx0dCA9IHRba10gPSAoaSA9PT0gbCkgPyB2YWwgOiAodHlwZW9mKHg9dFtrXSk9PT10eXBlb2Yoa2V5cykpID8geCA6IChrZXlzW2ldKjAgIT09IDAgfHwgISF+KCcnK2tleXNbaV0pLmluZGV4T2YoJy4nKSkgPyB7fSA6IFtdO1xuXHR9XG59XG4iLCJpbXBvcnQge0dyZWVkeVByb21pc2V9IGZyb20gJy4vcHJvbWlzZS5qcyc7XG5pbXBvcnQge2JpbmFyeVNlYXJjaCwgdGltZXN0YW1wfSBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGEgc2V0LWxpa2UgY29sbGVjdGlvbiB0aGF0IGF1dG9tYXRpY2FsbHkgZm9yZ2V0cyBpdGVtcyBhZnRlciBhIGNlcnRhaW4gdGltZS5cbiAqXG4gKiBAcGFyYW0geyh7fSkgPT4gTnVtYmVyfFByb21pc2U8TnVtYmVyPn0gc3RhcnRUaW1lPyBhIGZ1bmN0aW9uIHRha2luZyBhbiBpdGVtIGFkZGVkIHRvIHRoaXMgY29sbGVjdGlvbixcbiAqICAgYW5kIHJldHVybmluZyAoYSBwcm9taXNlIHRvKSBhIHRpbWVzdGFtcCB0byBiZSB1c2VkIGFzIHRoZSBzdGFydGluZyB0aW1lIGZvciB0aGUgaXRlbVxuICogICAodGhlIGl0ZW0gd2lsbCBiZSBkcm9wcGVkIGFmdGVyIGB0dGwoaXRlbSlgIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhpcyB0aW1lc3RhbXApLlxuICogICBEZWZhdWx0cyB0byB0aGUgdGltZSB0aGUgaXRlbSB3YXMgYWRkZWQgdG8gdGhlIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0geyh7fSkgPT4gTnVtYmVyfHZvaWR8UHJvbWlzZTxOdW1iZXJ8dm9pZD59IHR0bCBhIGZ1bmN0aW9uIHRha2luZyBhbiBpdGVtIGFkZGVkIHRvIHRoaXMgY29sbGVjdGlvbixcbiAqICAgYW5kIHJldHVybmluZyAoYSBwcm9taXNlIHRvKSB0aGUgZHVyYXRpb24gKGluIG1pbGxpc2Vjb25kcykgdGhlIGl0ZW0gc2hvdWxkIGJlIGtlcHQgaW4gaXQuXG4gKiAgIE1heSByZXR1cm4gbnVsbCB0byBpbmRpY2F0ZSB0aGF0IHRoZSBpdGVtIHNob3VsZCBiZSBwZXJzaXN0ZWQgaW5kZWZpbml0ZWx5LlxuICogQHBhcmFtIHtib29sZWFufSBtb25vdG9uaWM/IHNldCB0byB0cnVlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UsIGJ1dCBvbmx5IGlmLCBnaXZlbiBhbnkgdHdvIGl0ZW1zIEEgYW5kIEIgaW4gdGhpcyBjb2xsZWN0aW9uOlxuICogICBpZiBBIHdhcyBhZGRlZCBiZWZvcmUgQiwgdGhlbjpcbiAqICAgICAtIHN0YXJ0VGltZShBKSArIHR0bChBKSA8PSBzdGFydFRpbWUoQikgKyB0dGwoQilcbiAqICAgICAtIFByb21pc2UuYWxsKFtzdGFydFRpbWUoQSksIHR0bChBKV0pIG5ldmVyIHJlc29sdmVzIGxhdGVyIHRoYW4gUHJvbWlzZS5hbGwoW3N0YXJ0VGltZShCKSwgdHRsKEIpXSlcbiAqIEBwYXJhbSB7bnVtYmVyfSBzbGFjaz8gbWF4aW11bSBkdXJhdGlvbiAoaW4gbWlsbGlzZWNvbmRzKSB0aGF0IGFuIGl0ZW0gaXMgYWxsb3dlZCB0byBwZXJzaXN0XG4gKiAgIG9uY2UgcGFzdCBpdHMgVFRMLiBUaGlzIGlzIGFsc28gcm91Z2hseSB0aGUgaW50ZXJ2YWwgYmV0d2VlbiBcImdhcmJhZ2UgY29sbGVjdGlvblwiIHN3ZWVwcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHR0bENvbGxlY3Rpb24oXG4gIHtcbiAgICBzdGFydFRpbWUgPSB0aW1lc3RhbXAsXG4gICAgdHRsID0gKCkgPT4gbnVsbCxcbiAgICBtb25vdG9uaWMgPSBmYWxzZSxcbiAgICBzbGFjayA9IDUwMDBcbiAgfSA9IHt9XG4pIHtcbiAgY29uc3QgaXRlbXMgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IHBlbmRpbmdQdXJnZSA9IFtdO1xuICBjb25zdCBtYXJrRm9yUHVyZ2UgPSBtb25vdG9uaWNcbiAgICA/IChlbnRyeSkgPT4gcGVuZGluZ1B1cmdlLnB1c2goZW50cnkpXG4gICAgOiAoZW50cnkpID0+IHBlbmRpbmdQdXJnZS5zcGxpY2UoYmluYXJ5U2VhcmNoKHBlbmRpbmdQdXJnZSwgZW50cnksIChlbCkgPT4gZWwuZXhwaXJ5KSwgMCwgZW50cnkpXG4gIGxldCBuZXh0UHVyZ2UsIHRhc2s7XG5cbiAgZnVuY3Rpb24gcmVzY2hlZHVsZVB1cmdlKCkge1xuICAgIHRhc2sgJiYgY2xlYXJUaW1lb3V0KHRhc2spO1xuICAgIGlmIChwZW5kaW5nUHVyZ2UubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3Qgbm93ID0gdGltZXN0YW1wKCk7XG4gICAgICBuZXh0UHVyZ2UgPSBNYXRoLm1heChub3csIHBlbmRpbmdQdXJnZVswXS5leHBpcnkgKyBzbGFjayk7XG4gICAgICB0YXNrID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vdyA9IHRpbWVzdGFtcCgpO1xuICAgICAgICBsZXQgY250ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBwZW5kaW5nUHVyZ2UpIHtcbiAgICAgICAgICBpZiAoZW50cnkuZXhwaXJ5ID4gbm93KSBicmVhaztcbiAgICAgICAgICBpdGVtcy5kZWxldGUoZW50cnkuaXRlbSlcbiAgICAgICAgICBjbnQrKztcbiAgICAgICAgfVxuICAgICAgICBwZW5kaW5nUHVyZ2Uuc3BsaWNlKDAsIGNudCk7XG4gICAgICAgIHRhc2sgPSBudWxsO1xuICAgICAgICByZXNjaGVkdWxlUHVyZ2UoKTtcbiAgICAgIH0sIG5leHRQdXJnZSAtIG5vdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhc2sgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1rRW50cnkoaXRlbSkge1xuICAgIGNvbnN0IHZhbHVlcyA9IHt9O1xuICAgIGNvbnN0IHRoaXNDb2hvcnQgPSBjdXJyZW50Q29ob3J0O1xuICAgIGxldCBleHBpcnk7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICBpZiAodGhpc0NvaG9ydCA9PT0gY3VycmVudENvaG9ydCAmJiB2YWx1ZXMuc3RhcnQgIT0gbnVsbCAmJiB2YWx1ZXMuZGVsdGEgIT0gbnVsbCkge1xuICAgICAgICBleHBpcnkgPSB2YWx1ZXMuc3RhcnQgKyB2YWx1ZXMuZGVsdGE7XG4gICAgICAgIG1hcmtGb3JQdXJnZShlbnRyeSk7XG4gICAgICAgIGlmICh0YXNrID09IG51bGwgfHwgbmV4dFB1cmdlID4gZXhwaXJ5ICsgc2xhY2spIHtcbiAgICAgICAgICByZXNjaGVkdWxlUHVyZ2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IFtpbml0LCByZWZyZXNoXSA9IE9iamVjdC5lbnRyaWVzKHtcbiAgICAgIHN0YXJ0OiBzdGFydFRpbWUsXG4gICAgICBkZWx0YTogdHRsXG4gICAgfSkubWFwKChbZmllbGQsIGdldHRlcl0pID0+IHtcbiAgICAgIGxldCBjdXJyZW50Q2FsbDtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgdGhpc0NhbGwgPSBjdXJyZW50Q2FsbCA9IHt9O1xuICAgICAgICBHcmVlZHlQcm9taXNlLnJlc29sdmUoZ2V0dGVyKGl0ZW0pKS50aGVuKCh2YWwpID0+IHtcbiAgICAgICAgICBpZiAodGhpc0NhbGwgPT09IGN1cnJlbnRDYWxsKSB7XG4gICAgICAgICAgICB2YWx1ZXNbZmllbGRdID0gdmFsO1xuICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3QgZW50cnkgPSB7XG4gICAgICBpdGVtLFxuICAgICAgcmVmcmVzaCxcbiAgICAgIGdldCBleHBpcnkoKSB7XG4gICAgICAgIHJldHVybiBleHBpcnk7XG4gICAgICB9LFxuICAgIH07XG5cbiAgICBpbml0KCk7XG4gICAgcmVmcmVzaCgpO1xuICAgIHJldHVybiBlbnRyeTtcbiAgfVxuXG4gIGxldCBjdXJyZW50Q29ob3J0ID0ge307XG5cbiAgcmV0dXJuIHtcbiAgICBbU3ltYm9sLml0ZXJhdG9yXTogKCkgPT4gaXRlbXMua2V5cygpLFxuICAgIC8qKlxuICAgICAqIEFkZCBhbiBpdGVtIHRvIHRoaXMgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0gaXRlbVxuICAgICAqL1xuICAgIGFkZChpdGVtKSB7XG4gICAgICAhaXRlbXMuaGFzKGl0ZW0pICYmIGl0ZW1zLnNldChpdGVtLCBta0VudHJ5KGl0ZW0pKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoaXMgY29sbGVjdGlvbi5cbiAgICAgKi9cbiAgICBjbGVhcigpIHtcbiAgICAgIHBlbmRpbmdQdXJnZS5sZW5ndGggPSAwO1xuICAgICAgcmVzY2hlZHVsZVB1cmdlKCk7XG4gICAgICBpdGVtcy5jbGVhcigpO1xuICAgICAgY3VycmVudENvaG9ydCA9IHt9O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge1tdfSBhbGwgdGhlIGl0ZW1zIGluIHRoaXMgY29sbGVjdGlvbiwgaW4gaW5zZXJ0aW9uIG9yZGVyLlxuICAgICAqL1xuICAgIHRvQXJyYXkoKSB7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbShpdGVtcy5rZXlzKCkpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogUmVmcmVzaCB0aGUgVFRMIGZvciBlYWNoIGl0ZW0gaW4gdGhpcyBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIHJlZnJlc2goKSB7XG4gICAgICBwZW5kaW5nUHVyZ2UubGVuZ3RoID0gMDtcbiAgICAgIHJlc2NoZWR1bGVQdXJnZSgpO1xuICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBpdGVtcy52YWx1ZXMoKSkge1xuICAgICAgICBlbnRyeS5yZWZyZXNoKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiIsIi8qKlxuICogZXZlbnRzLmpzXG4gKi9cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMuanMnXG5pbXBvcnQgQ09OU1RBTlRTIGZyb20gJy4vY29uc3RhbnRzLmpzb24nO1xuaW1wb3J0IHt0dGxDb2xsZWN0aW9ufSBmcm9tICcuL3V0aWxzL3R0bENvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHtjb25maWd9IGZyb20gJy4vY29uZmlnLmpzJztcbmNvbnN0IFRUTF9DT05GSUcgPSAnZXZlbnRIaXN0b3J5VFRMJztcblxubGV0IGV2ZW50VFRMID0gbnVsbDtcblxuLy8ga2VlcCBhIHJlY29yZCBvZiBhbGwgZXZlbnRzIGZpcmVkXG5jb25zdCBldmVudHNGaXJlZCA9IHR0bENvbGxlY3Rpb24oe1xuICBtb25vdG9uaWM6IHRydWUsXG4gIHR0bDogKCkgPT4gZXZlbnRUVEwsXG59KVxuXG5jb25maWcuZ2V0Q29uZmlnKFRUTF9DT05GSUcsICh2YWwpID0+IHtcbiAgY29uc3QgcHJldmlvdXMgPSBldmVudFRUTDtcbiAgdmFsID0gdmFsPy5bVFRMX0NPTkZJR107XG4gIGV2ZW50VFRMID0gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgPyB2YWwgKiAxMDAwIDogbnVsbDtcbiAgaWYgKHByZXZpb3VzICE9PSBldmVudFRUTCkge1xuICAgIGV2ZW50c0ZpcmVkLnJlZnJlc2goKTtcbiAgfVxufSk7XG5cbmxldCBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbmxldCBwdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG5cbi8vIGRlZmluZSBlbnRpcmUgZXZlbnRzXG5sZXQgYWxsRXZlbnRzID0gT2JqZWN0LnZhbHVlcyhDT05TVEFOVFMuRVZFTlRTKTtcblxuY29uc3QgaWRQYXRocyA9IENPTlNUQU5UUy5FVkVOVF9JRF9QQVRIUztcblxuY29uc3QgX3B1YmxpYyA9IChmdW5jdGlvbiAoKSB7XG4gIGxldCBfaGFuZGxlcnMgPSB7fTtcbiAgbGV0IF9wdWJsaWMgPSB7fTtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50U3RyaW5nICBUaGUgbmFtZSBvZiB0aGUgZXZlbnQuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgIFRoZSBwYXlsb2FkIGVtaXR0ZWQgd2l0aCB0aGUgZXZlbnQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBfZGlzcGF0Y2goZXZlbnRTdHJpbmcsIGFyZ3MpIHtcbiAgICB1dGlscy5sb2dNZXNzYWdlKCdFbWl0dGluZyBldmVudCBmb3I6ICcgKyBldmVudFN0cmluZyk7XG5cbiAgICBsZXQgZXZlbnRQYXlsb2FkID0gYXJnc1swXSB8fCB7fTtcbiAgICBsZXQgaWRQYXRoID0gaWRQYXRoc1tldmVudFN0cmluZ107XG4gICAgbGV0IGtleSA9IGV2ZW50UGF5bG9hZFtpZFBhdGhdO1xuICAgIGxldCBldmVudCA9IF9oYW5kbGVyc1tldmVudFN0cmluZ10gfHwgeyBxdWU6IFtdIH07XG4gICAgbGV0IGV2ZW50S2V5cyA9IHV0aWxzLl9tYXAoZXZlbnQsIGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgICByZXR1cm4gaztcbiAgICB9KTtcblxuICAgIGxldCBjYWxsYmFja3MgPSBbXTtcblxuICAgIC8vIHJlY29yZCB0aGUgZXZlbnQ6XG4gICAgZXZlbnRzRmlyZWQuYWRkKHtcbiAgICAgIGV2ZW50VHlwZTogZXZlbnRTdHJpbmcsXG4gICAgICBhcmdzOiBldmVudFBheWxvYWQsXG4gICAgICBpZDoga2V5LFxuICAgICAgZWxhcHNlZFRpbWU6IHV0aWxzLmdldFBlcmZvcm1hbmNlTm93KCksXG4gICAgfSk7XG5cbiAgICAvKiogUHVzaCBlYWNoIHNwZWNpZmljIGNhbGxiYWNrIHRvIHRoZSBgY2FsbGJhY2tzYCBhcnJheS5cbiAgICAgKiBJZiB0aGUgYGV2ZW50YCBtYXAgaGFzIGEga2V5IHRoYXQgbWF0Y2hlcyB0aGUgdmFsdWUgb2YgdGhlXG4gICAgICogZXZlbnQgcGF5bG9hZCBpZCBwYXRoLCBlLmcuIGBldmVudFBheWxvYWRbaWRQYXRoXWAsIHRoZW4gYXBwbHlcbiAgICAgKiBlYWNoIGZ1bmN0aW9uIGluIHRoZSBgcXVlYCBhcnJheSBhcyBhbiBhcmd1bWVudCB0byBwdXNoIHRvIHRoZVxuICAgICAqIGBjYWxsYmFja3NgIGFycmF5XG4gICAgICogKi9cbiAgICBpZiAoa2V5ICYmIHV0aWxzLmNvbnRhaW5zKGV2ZW50S2V5cywga2V5KSkge1xuICAgICAgcHVzaC5hcHBseShjYWxsYmFja3MsIGV2ZW50W2tleV0ucXVlKTtcbiAgICB9XG5cbiAgICAvKiogUHVzaCBlYWNoIGdlbmVyYWwgY2FsbGJhY2sgdG8gdGhlIGBjYWxsYmFja3NgIGFycmF5LiAqL1xuICAgIHB1c2guYXBwbHkoY2FsbGJhY2tzLCBldmVudC5xdWUpO1xuXG4gICAgLyoqIGNhbGwgZWFjaCBvZiB0aGUgY2FsbGJhY2tzICovXG4gICAgdXRpbHMuX2VhY2goY2FsbGJhY2tzLCBmdW5jdGlvbiAoZm4pIHtcbiAgICAgIGlmICghZm4pIHJldHVybjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB1dGlscy5sb2dFcnJvcignRXJyb3IgZXhlY3V0aW5nIGhhbmRsZXI6JywgJ2V2ZW50cy5qcycsIGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NoZWNrQXZhaWxhYmxlRXZlbnQoZXZlbnQpIHtcbiAgICByZXR1cm4gdXRpbHMuY29udGFpbnMoYWxsRXZlbnRzLCBldmVudCk7XG4gIH1cblxuICBfcHVibGljLm9uID0gZnVuY3Rpb24gKGV2ZW50U3RyaW5nLCBoYW5kbGVyLCBpZCkge1xuICAgIC8vIGNoZWNrIHdoZXRoZXIgYXZhaWxhYmxlIGV2ZW50IG9yIG5vdFxuICAgIGlmIChfY2hlY2tBdmFpbGFibGVFdmVudChldmVudFN0cmluZykpIHtcbiAgICAgIGxldCBldmVudCA9IF9oYW5kbGVyc1tldmVudFN0cmluZ10gfHwgeyBxdWU6IFtdIH07XG5cbiAgICAgIGlmIChpZCkge1xuICAgICAgICBldmVudFtpZF0gPSBldmVudFtpZF0gfHwgeyBxdWU6IFtdIH07XG4gICAgICAgIGV2ZW50W2lkXS5xdWUucHVzaChoYW5kbGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV2ZW50LnF1ZS5wdXNoKGhhbmRsZXIpO1xuICAgICAgfVxuXG4gICAgICBfaGFuZGxlcnNbZXZlbnRTdHJpbmddID0gZXZlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHV0aWxzLmxvZ0Vycm9yKCdXcm9uZyBldmVudCBuYW1lIDogJyArIGV2ZW50U3RyaW5nICsgJyBWYWxpZCBldmVudCBuYW1lcyA6JyArIGFsbEV2ZW50cyk7XG4gICAgfVxuICB9O1xuXG4gIF9wdWJsaWMuZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGxldCBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIF9kaXNwYXRjaChldmVudCwgYXJncyk7XG4gIH07XG5cbiAgX3B1YmxpYy5vZmYgPSBmdW5jdGlvbiAoZXZlbnRTdHJpbmcsIGhhbmRsZXIsIGlkKSB7XG4gICAgbGV0IGV2ZW50ID0gX2hhbmRsZXJzW2V2ZW50U3RyaW5nXTtcblxuICAgIGlmICh1dGlscy5pc0VtcHR5KGV2ZW50KSB8fCAodXRpbHMuaXNFbXB0eShldmVudC5xdWUpICYmIHV0aWxzLmlzRW1wdHkoZXZlbnRbaWRdKSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaWQgJiYgKHV0aWxzLmlzRW1wdHkoZXZlbnRbaWRdKSB8fCB1dGlscy5pc0VtcHR5KGV2ZW50W2lkXS5xdWUpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpZCkge1xuICAgICAgdXRpbHMuX2VhY2goZXZlbnRbaWRdLnF1ZSwgZnVuY3Rpb24gKF9oYW5kbGVyKSB7XG4gICAgICAgIGxldCBxdWUgPSBldmVudFtpZF0ucXVlO1xuICAgICAgICBpZiAoX2hhbmRsZXIgPT09IGhhbmRsZXIpIHtcbiAgICAgICAgICBxdWUuc3BsaWNlKHF1ZS5pbmRleE9mKF9oYW5kbGVyKSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB1dGlscy5fZWFjaChldmVudC5xdWUsIGZ1bmN0aW9uIChfaGFuZGxlcikge1xuICAgICAgICBsZXQgcXVlID0gZXZlbnQucXVlO1xuICAgICAgICBpZiAoX2hhbmRsZXIgPT09IGhhbmRsZXIpIHtcbiAgICAgICAgICBxdWUuc3BsaWNlKHF1ZS5pbmRleE9mKF9oYW5kbGVyKSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9oYW5kbGVyc1tldmVudFN0cmluZ10gPSBldmVudDtcbiAgfTtcblxuICBfcHVibGljLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2hhbmRsZXJzO1xuICB9O1xuXG4gIF9wdWJsaWMuYWRkRXZlbnRzID0gZnVuY3Rpb24gKGV2ZW50cykge1xuICAgIGFsbEV2ZW50cyA9IGFsbEV2ZW50cy5jb25jYXQoZXZlbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gcmV0dXJuIGEgY29weSBvZiBhbGwgdGhlIGV2ZW50cyBmaXJlZFxuICAgKiBAcmV0dXJuIHtBcnJheX0gYXJyYXkgb2YgZXZlbnRzIGZpcmVkXG4gICAqL1xuICBfcHVibGljLmdldEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZXZlbnRzRmlyZWQudG9BcnJheSgpLm1hcCh2YWwgPT4gT2JqZWN0LmFzc2lnbih7fSwgdmFsKSlcbiAgfTtcblxuICByZXR1cm4gX3B1YmxpYztcbn0oKSk7XG5cbnV0aWxzLl9zZXRFdmVudEVtaXR0ZXIoX3B1YmxpYy5lbWl0LmJpbmQoX3B1YmxpYykpO1xuXG5leHBvcnQgY29uc3Qge29uLCBvZmYsIGdldCwgZ2V0RXZlbnRzLCBlbWl0LCBhZGRFdmVudHN9ID0gX3B1YmxpYztcblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyRXZlbnRzKCkge1xuICBldmVudHNGaXJlZC5jbGVhcigpO1xufVxuIiwiaW1wb3J0IHtjb25maWd9IGZyb20gJy4vY29uZmlnLmpzJztcbmltcG9ydCB7YnVpbGRVcmwsIGxvZ0Vycm9yLCBwYXJzZVVybH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbmV4cG9ydCBjb25zdCBkZXAgPSB7XG4gIGZldGNoOiB3aW5kb3cuZmV0Y2guYmluZCh3aW5kb3cpLFxuICBtYWtlUmVxdWVzdDogKHIsIG8pID0+IG5ldyBSZXF1ZXN0KHIsIG8pLFxuICB0aW1lb3V0KHRpbWVvdXQsIHJlc291cmNlKSB7XG4gICAgY29uc3QgY3RsID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBjYW5jZWxUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY3RsLmFib3J0KCk7XG4gICAgICBsb2dFcnJvcihgUmVxdWVzdCB0aW1lb3V0IGFmdGVyICR7dGltZW91dH1tc2AsIHJlc291cmNlKTtcbiAgICAgIGNhbmNlbFRpbWVyID0gbnVsbDtcbiAgICB9LCB0aW1lb3V0KTtcbiAgICByZXR1cm4ge1xuICAgICAgc2lnbmFsOiBjdGwuc2lnbmFsLFxuICAgICAgZG9uZSgpIHtcbiAgICAgICAgY2FuY2VsVGltZXIgJiYgY2xlYXJUaW1lb3V0KGNhbmNlbFRpbWVyKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBHRVQgPSAnR0VUJztcbmNvbnN0IFBPU1QgPSAnUE9TVCc7XG5jb25zdCBDVFlQRSA9ICdDb250ZW50LVR5cGUnO1xuXG4vKipcbiAqIHRyYW5zZm9ybSBsZWdhY3kgYGFqYXhgIHBhcmFtZXRlcnMgaW50byBhIGZldGNoIHJlcXVlc3QuXG4gKiBAcmV0dXJucyB7UmVxdWVzdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvRmV0Y2hSZXF1ZXN0KHVybCwgZGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IChkYXRhID8gUE9TVCA6IEdFVCk7XG4gIGlmIChtZXRob2QgPT09IEdFVCAmJiBkYXRhKSB7XG4gICAgY29uc3QgdXJsSW5mbyA9IHBhcnNlVXJsKHVybCwgb3B0aW9ucyk7XG4gICAgT2JqZWN0LmFzc2lnbih1cmxJbmZvLnNlYXJjaCwgZGF0YSk7XG4gICAgdXJsID0gYnVpbGRVcmwodXJsSW5mbyk7XG4gIH1cbiAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuY3VzdG9tSGVhZGVycyk7XG4gIGhlYWRlcnMuc2V0KENUWVBFLCBvcHRpb25zLmNvbnRlbnRUeXBlIHx8ICd0ZXh0L3BsYWluJyk7XG4gIGNvbnN0IHJxT3B0cyA9IHtcbiAgICBtZXRob2QsXG4gICAgaGVhZGVyc1xuICB9XG4gIGlmIChtZXRob2QgIT09IEdFVCAmJiBkYXRhKSB7XG4gICAgcnFPcHRzLmJvZHkgPSBkYXRhO1xuICB9XG4gIGlmIChvcHRpb25zLndpdGhDcmVkZW50aWFscykge1xuICAgIHJxT3B0cy5jcmVkZW50aWFscyA9ICdpbmNsdWRlJztcbiAgfVxuICBpZiAob3B0aW9ucy5icm93c2luZ1RvcGljcyAmJiBpc1NlY3VyZUNvbnRleHQpIHtcbiAgICAvLyB0aGUgUmVxdWVzdCBjb25zdHJ1Y3RvciB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0b3BpY3NcbiAgICAvLyBidXQgd2UncmUgbm90IGluIGEgc2VjdXJlIGNvbnRleHRcbiAgICBycU9wdHMuYnJvd3NpbmdUb3BpY3MgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXAubWFrZVJlcXVlc3QodXJsLCBycU9wdHMpO1xufVxuXG4vKipcbiAqIFJldHVybiBhIHZlcnNpb24gb2YgYGZldGNoYCB0aGF0IGF1dG9tYXRpY2FsbHkgY2FuY2VscyByZXF1ZXN0cyBhZnRlciBgdGltZW91dGAgbWlsbGlzZWNvbmRzLlxuICpcbiAqIElmIHByb3ZpZGVkLCBgcmVxdWVzdGAgYW5kIGBkb25lYCBzaG91bGQgYmUgZnVuY3Rpb25zIGFjY2VwdGluZyBhIHNpbmdsZSBhcmd1bWVudC5cbiAqIGByZXF1ZXN0YCBpcyBpbnZva2VkIGF0IHRoZSBiZWdpbm5pbmcgb2YgZWFjaCByZXF1ZXN0LCBhbmQgYGRvbmVgIGF0IHRoZSBlbmQ7IGJvdGggYXJlIHBhc3NlZCBpdHMgb3JpZ2luLlxuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbigqLCB7fT8pOiBQcm9taXNlPFJlc3BvbnNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZldGNoZXJGYWN0b3J5KHRpbWVvdXQgPSAzMDAwLCB7cmVxdWVzdCwgZG9uZX0gPSB7fSkge1xuICBsZXQgZmV0Y2hlciA9IChyZXNvdXJjZSwgb3B0aW9ucykgPT4ge1xuICAgIGxldCB0bztcbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIG9wdGlvbnM/LnNpZ25hbCA9PSBudWxsICYmICFjb25maWcuZ2V0Q29uZmlnKCdkaXNhYmxlQWpheFRpbWVvdXQnKSkge1xuICAgICAgdG8gPSBkZXAudGltZW91dCh0aW1lb3V0LCByZXNvdXJjZSk7XG4gICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7c2lnbmFsOiB0by5zaWduYWx9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgbGV0IHBtID0gZGVwLmZldGNoKHJlc291cmNlLCBvcHRpb25zKTtcbiAgICBpZiAodG8/LmRvbmUgIT0gbnVsbCkgcG0gPSBwbS5maW5hbGx5KHRvLmRvbmUpO1xuICAgIHJldHVybiBwbTtcbiAgfTtcblxuICBpZiAocmVxdWVzdCAhPSBudWxsIHx8IGRvbmUgIT0gbnVsbCkge1xuICAgIGZldGNoZXIgPSAoKGZldGNoKSA9PiBmdW5jdGlvbiAocmVzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IG9yaWdpbiA9IG5ldyBVUkwocmVzb3VyY2U/LnVybCA9PSBudWxsID8gcmVzb3VyY2UgOiByZXNvdXJjZS51cmwsIGRvY3VtZW50LmxvY2F0aW9uKS5vcmlnaW47XG4gICAgICBsZXQgcmVxID0gZmV0Y2gocmVzb3VyY2UsIG9wdGlvbnMpO1xuICAgICAgcmVxdWVzdCAmJiByZXF1ZXN0KG9yaWdpbik7XG4gICAgICBpZiAoZG9uZSkgcmVxID0gcmVxLmZpbmFsbHkoKCkgPT4gZG9uZShvcmlnaW4pKTtcbiAgICAgIHJldHVybiByZXE7XG4gICAgfSkoZmV0Y2hlcik7XG4gIH1cbiAgcmV0dXJuIGZldGNoZXI7XG59XG5cbmZ1bmN0aW9uIHRvWEhSKHtzdGF0dXMsIHN0YXR1c1RleHQgPSAnJywgaGVhZGVycywgdXJsfSwgcmVzcG9uc2VUZXh0KSB7XG4gIGxldCB4bWwgPSAwO1xuICByZXR1cm4ge1xuICAgIHJlYWR5U3RhdGU6IFhNTEh0dHBSZXF1ZXN0LkRPTkUsXG4gICAgc3RhdHVzLFxuICAgIHN0YXR1c1RleHQsXG4gICAgcmVzcG9uc2VUZXh0LFxuICAgIHJlc3BvbnNlOiByZXNwb25zZVRleHQsXG4gICAgcmVzcG9uc2VUeXBlOiAnJyxcbiAgICByZXNwb25zZVVSTDogdXJsLFxuICAgIGdldCByZXNwb25zZVhNTCgpIHtcbiAgICAgIGlmICh4bWwgPT09IDApIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB4bWwgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHJlc3BvbnNlVGV4dCwgaGVhZGVycz8uZ2V0KENUWVBFKT8uc3BsaXQoJzsnKT8uWzBdKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgeG1sID0gbnVsbDtcbiAgICAgICAgICBsb2dFcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHhtbDtcbiAgICB9LFxuICAgIGdldFJlc3BvbnNlSGVhZGVyOiAoaGVhZGVyKSA9PiBoZWFkZXJzPy5oYXMoaGVhZGVyKSA/IGhlYWRlcnMuZ2V0KGhlYWRlcikgOiBudWxsLFxuICB9XG59XG5cbi8qKlxuICogYXR0YWNoIGxlZ2FjeSBgYWpheGAgY2FsbGJhY2tzIHRvIGEgZmV0Y2ggcHJvbWlzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaENhbGxiYWNrcyhmZXRjaFBtLCBjYWxsYmFjaykge1xuICBjb25zdCB7c3VjY2VzcywgZXJyb3J9ID0gdHlwZW9mIGNhbGxiYWNrID09PSAnb2JqZWN0JyAmJiBjYWxsYmFjayAhPSBudWxsID8gY2FsbGJhY2sgOiB7XG4gICAgc3VjY2VzczogdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nID8gY2FsbGJhY2sgOiAoKSA9PiBudWxsLFxuICAgIGVycm9yOiAoZSwgeCkgPT4gbG9nRXJyb3IoJ05ldHdvcmsgZXJyb3InLCBlLCB4KVxuICB9O1xuICBmZXRjaFBtLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpLnRoZW4oKHJlc3BvbnNlVGV4dCkgPT4gW3Jlc3BvbnNlLCByZXNwb25zZVRleHRdKSlcbiAgICAudGhlbigoW3Jlc3BvbnNlLCByZXNwb25zZVRleHRdKSA9PiB7XG4gICAgICBjb25zdCB4aHIgPSB0b1hIUihyZXNwb25zZSwgcmVzcG9uc2VUZXh0KTtcbiAgICAgIHJlc3BvbnNlLm9rIHx8IHJlc3BvbnNlLnN0YXR1cyA9PT0gMzA0ID8gc3VjY2VzcyhyZXNwb25zZVRleHQsIHhocikgOiBlcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0LCB4aHIpO1xuICAgIH0sICgpID0+IGVycm9yKCcnLCB0b1hIUih7c3RhdHVzOiAwfSwgJycpKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhamF4QnVpbGRlcih0aW1lb3V0ID0gMzAwMCwge3JlcXVlc3QsIGRvbmV9ID0ge30pIHtcbiAgY29uc3QgZmV0Y2hlciA9IGZldGNoZXJGYWN0b3J5KHRpbWVvdXQsIHtyZXF1ZXN0LCBkb25lfSk7XG4gIHJldHVybiBmdW5jdGlvbiAodXJsLCBjYWxsYmFjaywgZGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgYXR0YWNoQ2FsbGJhY2tzKGZldGNoZXIodG9GZXRjaFJlcXVlc3QodXJsLCBkYXRhLCBvcHRpb25zKSksIGNhbGxiYWNrKTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGFqYXggPSBhamF4QnVpbGRlcigpO1xuZXhwb3J0IGNvbnN0IGZldGNoID0gZmV0Y2hlckZhY3RvcnkoKTtcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgaW50ZXJhY3RzIHdpdGggdGhlIHNlcnZlciB1c2VkIHRvIGNhY2hlIHZpZGVvIGFkIGNvbnRlbnQgdG8gYmUgcmVzdG9yZWQgbGF0ZXIuXG4gKiBBdCBhIGhpZ2ggbGV2ZWwsIHRoZSBleHBlY3RlZCB3b3JrZmxvdyBnb2VzIGxpa2UgdGhpczpcbiAqXG4gKiAgIC0gUmVxdWVzdCB2aWRlbyBhZHMgZnJvbSBCaWRkZXJzXG4gKiAgIC0gR2VuZXJhdGUgSURzIGZvciBlYWNoIHZhbGlkIGJpZCwgYW5kIGNhY2hlIHRoZSBrZXkvdmFsdWUgcGFpciBvbiB0aGUgc2VydmVyLlxuICogICAtIFJldHVybiB0aGVzZSBJRHMgc28gdGhhdCBwdWJsaXNoZXJzIGNhbiB1c2UgdGhlbSB0byBmZXRjaCB0aGUgYmlkcyBsYXRlci5cbiAqXG4gKiBUaGlzIHRyaWNrZXJ5IGhlbHBzIGludGVncmF0ZSB3aXRoIGFkIHNlcnZlcnMsIHdoaWNoIHNldCBjaGFyYWN0ZXIgbGltaXRzIG9uIHJlcXVlc3QgcGFyYW1zLlxuICovXG5cbmltcG9ydCB7YWpheEJ1aWxkZXJ9IGZyb20gJy4vYWpheC5qcyc7XG5pbXBvcnQge2NvbmZpZ30gZnJvbSAnLi9jb25maWcuanMnO1xuaW1wb3J0IHthdWN0aW9uTWFuYWdlcn0gZnJvbSAnLi9hdWN0aW9uTWFuYWdlci5qcyc7XG5cbi8qKlxuICogTWlnaHQgYmUgdXNlZnVsIHRvIGJlIGNvbmZpZ3VyYWJsZSBpbiB0aGUgZnV0dXJlXG4gKiBEZXBlbmRpbmcgb24gcHVibGlzaGVyIG5lZWRzXG4gKi9cbmNvbnN0IHR0bEJ1ZmZlckluU2Vjb25kcyA9IDE1O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IENhY2hlYWJsZVVybEJpZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHZhc3RVcmwgQSBVUkwgd2hpY2ggbG9hZHMgc29tZSB2YWxpZCBWQVNUIFhNTC5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IENhY2hlYWJsZVBheWxvYWRCaWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB2YXN0WG1sIFNvbWUgVkFTVCBYTUwgd2hpY2ggbG9hZHMgYW4gYWQgaW4gYSB2aWRlbyBwbGF5ZXIuXG4gKi9cblxuLyoqXG4gKiBBIENhY2hlYWJsZUJpZCBkZXNjcmliZXMgdGhlIHR5cGVzIHdoaWNoIHRoZSB2aWRlb0NhY2hlIGNhbiBzdG9yZS5cbiAqXG4gKiBAdHlwZWRlZiB7Q2FjaGVhYmxlVXJsQmlkfENhY2hlYWJsZVBheWxvYWRCaWR9IENhY2hlYWJsZUJpZFxuICovXG5cbi8qKlxuICogRnVuY3Rpb24gd2hpY2ggd3JhcHMgYSBVUkkgdGhhdCBzZXJ2ZXMgVkFTVCBYTUwsIHNvIHRoYXQgaXQgY2FuIGJlIGxvYWRlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBVUkkgd2hlcmUgdGhlIFZBU1QgY29udGVudCBjYW4gYmUgZm91bmQuXG4gKiBAcGFyYW0ge3N0cmluZ30gaW1wVXJsIEFuIGltcHJlc3Npb24gdHJhY2tlciBVUkwgZm9yIHRoZSBkZWxpdmVyeSBvZiB0aGUgdmlkZW8gYWRcbiAqIEByZXR1cm4gQSBWQVNUIFVSTCB3aGljaCBsb2FkcyBYTUwgZnJvbSB0aGUgZ2l2ZW4gVVJJLlxuICovXG5mdW5jdGlvbiB3cmFwVVJJKHVyaSwgaW1wVXJsKSB7XG4gIC8vIFRlY2huaWNhbGx5LCB0aGlzIGlzIHZ1bG5lcmFibGUgdG8gY3Jvc3Mtc2NyaXB0IGluamVjdGlvbiBieSBza2V0Y2h5IHZhc3RVcmwgYmlkcy5cbiAgLy8gV2UgY291bGQgbWFrZSBzdXJlIGl0J3MgYSB2YWxpZCBVUkkuLi4gYnV0IHNpbmNlIHdlJ3JlIGxvYWRpbmcgVkFTVCBYTUwgZnJvbSB0aGVcbiAgLy8gVVJMIHRoZXkgcHJvdmlkZSBhbnl3YXksIHRoYXQncyBwcm9iYWJseSBub3QgYSBiaWcgZGVhbC5cbiAgbGV0IHZhc3RJbXAgPSAoaW1wVXJsKSA/IGA8IVtDREFUQVske2ltcFVybH1dXT5gIDogYGA7XG4gIHJldHVybiBgPFZBU1QgdmVyc2lvbj1cIjMuMFwiPlxuICAgIDxBZD5cbiAgICAgIDxXcmFwcGVyPlxuICAgICAgICA8QWRTeXN0ZW0+cHJlYmlkLm9yZyB3cmFwcGVyPC9BZFN5c3RlbT5cbiAgICAgICAgPFZBU1RBZFRhZ1VSST48IVtDREFUQVske3VyaX1dXT48L1ZBU1RBZFRhZ1VSST5cbiAgICAgICAgPEltcHJlc3Npb24+JHt2YXN0SW1wfTwvSW1wcmVzc2lvbj5cbiAgICAgICAgPENyZWF0aXZlcz48L0NyZWF0aXZlcz5cbiAgICAgIDwvV3JhcHBlcj5cbiAgICA8L0FkPlxuICA8L1ZBU1Q+YDtcbn1cblxuLyoqXG4gKiBXcmFwcyBhIGJpZCBpbiB0aGUgZm9ybWF0IGV4cGVjdGVkIGJ5IHRoZSBwcmViaWQtc2VydmVyIGVuZHBvaW50cywgb3IgcmV0dXJucyBudWxsIGlmXG4gKiB0aGUgYmlkIGNhbid0IGJlIGNvbnZlcnRlZCBjbGVhbmx5LlxuICpcbiAqIEBwYXJhbSB7Q2FjaGVhYmxlQmlkfSBiaWRcbiAqIEBwYXJhbSBpbmRleFxuICovXG5mdW5jdGlvbiB0b1N0b3JhZ2VSZXF1ZXN0KGJpZCwge2luZGV4ID0gYXVjdGlvbk1hbmFnZXIuaW5kZXh9ID0ge30pIHtcbiAgY29uc3QgdmFzdFZhbHVlID0gYmlkLnZhc3RYbWwgPyBiaWQudmFzdFhtbCA6IHdyYXBVUkkoYmlkLnZhc3RVcmwsIGJpZC52YXN0SW1wVXJsKTtcbiAgY29uc3QgYXVjdGlvbiA9IGluZGV4LmdldEF1Y3Rpb24oYmlkKTtcbiAgY29uc3QgdHRsV2l0aEJ1ZmZlciA9IE51bWJlcihiaWQudHRsKSArIHR0bEJ1ZmZlckluU2Vjb25kcztcbiAgbGV0IHBheWxvYWQgPSB7XG4gICAgdHlwZTogJ3htbCcsXG4gICAgdmFsdWU6IHZhc3RWYWx1ZSxcbiAgICB0dGxzZWNvbmRzOiB0dGxXaXRoQnVmZmVyXG4gIH07XG5cbiAgaWYgKGNvbmZpZy5nZXRDb25maWcoJ2NhY2hlLnZhc3R0cmFjaycpKSB7XG4gICAgcGF5bG9hZC5iaWRkZXIgPSBiaWQuYmlkZGVyO1xuICAgIHBheWxvYWQuYmlkaWQgPSBiaWQucmVxdWVzdElkO1xuICAgIHBheWxvYWQuYWlkID0gYmlkLmF1Y3Rpb25JZDtcbiAgfVxuXG4gIGlmIChhdWN0aW9uICE9IG51bGwpIHtcbiAgICBwYXlsb2FkLnRpbWVzdGFtcCA9IGF1Y3Rpb24uZ2V0QXVjdGlvblN0YXJ0KCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGJpZC5jdXN0b21DYWNoZUtleSA9PT0gJ3N0cmluZycgJiYgYmlkLmN1c3RvbUNhY2hlS2V5ICE9PSAnJykge1xuICAgIHBheWxvYWQua2V5ID0gYmlkLmN1c3RvbUNhY2hlS2V5O1xuICB9XG5cbiAgcmV0dXJuIHBheWxvYWQ7XG59XG5cbi8qKlxuICogQSBmdW5jdGlvbiB3aGljaCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIHJlc3VsdHMgb2YgdGhlIHN0b3JhZ2Ugb3BlcmF0aW9uLlxuICpcbiAqIEBjYWxsYmFjayB2aWRlb0NhY2hlU3RvcmVDYWxsYmFja1xuICpcbiAqIEBwYXJhbSB7RXJyb3J9IFtlcnJvcl0gVGhlIGVycm9yLCBpZiBvbmUgb2NjdXJyZWQuXG4gKiBAcGFyYW0gez9zdHJpbmdbXX0gdXVpZHMgQW4gYXJyYXkgb2YgdW5pcXVlIElEcy4gVGhlIGFycmF5IHdpbGwgaGF2ZSBvbmUgZWxlbWVudCBmb3IgZWFjaCBiaWQgd2Ugd2VyZSBhc2tlZFxuICogICB0byBzdG9yZS4gSXQgbWF5IGluY2x1ZGUgbnVsbCBlbGVtZW50cyBpZiBzb21lIG9mIHRoZSBiaWRzIHdlcmUgbWFsZm9ybWVkLCBvciBhbiBlcnJvciBvY2N1cnJlZC5cbiAqICAgRWFjaCBub24tbnVsbCBlbGVtZW50IGluIHRoaXMgYXJyYXkgaXMgYSB2YWxpZCBpbnB1dCBpbnRvIHRoZSByZXRyaWV2ZSBmdW5jdGlvbiwgd2hpY2ggd2lsbCBmZXRjaFxuICogICBzb21lIFZBU1QgWE1MIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHJlbmRlciB0aGlzIGJpZCdzIGFkLlxuICovXG5cbi8qKlxuICogQSBmdW5jdGlvbiB3aGljaCBicmlkZ2VzIHRoZSBBUElzIGJldHdlZW4gdGhlIHZpZGVvQ2FjaGVTdG9yZUNhbGxiYWNrIGFuZCBvdXIgYWpheCBmdW5jdGlvbidzIEFQSS5cbiAqXG4gKiBAcGFyYW0ge3ZpZGVvQ2FjaGVTdG9yZUNhbGxiYWNrfSBkb25lIEEgY2FsbGJhY2sgdG8gdGhlIFwic3RvcmVcIiBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGNhbGxiYWNrIHdoaWNoIGludGVycHJldHMgdGhlIGNhY2hlIHNlcnZlcidzIHJlc3BvbnNlcywgYW5kIG1ha2VzIHVwIHRoZSByaWdodFxuICogICBhcmd1bWVudHMgZm9yIG91ciBjYWxsYmFjay5cbiAqL1xuZnVuY3Rpb24gc2hpbVN0b3JhZ2VDYWxsYmFjayhkb25lKSB7XG4gIHJldHVybiB7XG4gICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlQm9keSkge1xuICAgICAgbGV0IGlkcztcbiAgICAgIHRyeSB7XG4gICAgICAgIGlkcyA9IEpTT04ucGFyc2UocmVzcG9uc2VCb2R5KS5yZXNwb25zZXNcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZG9uZShlLCBbXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlkcykge1xuICAgICAgICBkb25lKG51bGwsIGlkcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25lKG5ldyBFcnJvcihcIlRoZSBjYWNoZSBzZXJ2ZXIgZGlkbid0IHJlc3BvbmQgd2l0aCBhIHJlc3BvbnNlcyBwcm9wZXJ0eS5cIiksIFtdKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiAoc3RhdHVzVGV4dCwgcmVzcG9uc2VCb2R5KSB7XG4gICAgICBkb25lKG5ldyBFcnJvcihgRXJyb3Igc3RvcmluZyB2aWRlbyBhZCBpbiB0aGUgY2FjaGU6ICR7c3RhdHVzVGV4dH06ICR7SlNPTi5zdHJpbmdpZnkocmVzcG9uc2VCb2R5KX1gKSwgW10pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIElmIHRoZSBnaXZlbiBiaWQgaXMgZm9yIGEgVmlkZW8gYWQsIGdlbmVyYXRlIGEgdW5pcXVlIElEIGFuZCBjYWNoZSBpdCBzb21ld2hlcmUgc2VydmVyLXNpZGUuXG4gKlxuICogQHBhcmFtIHtDYWNoZWFibGVCaWRbXX0gYmlkcyBBIGxpc3Qgb2YgYmlkIG9iamVjdHMgd2hpY2ggc2hvdWxkIGJlIGNhY2hlZC5cbiAqIEBwYXJhbSB7dmlkZW9DYWNoZVN0b3JlQ2FsbGJhY2t9IFtkb25lXSBBbiBvcHRpb25hbCBjYWxsYmFjayB3aGljaCBzaG91bGQgYmUgZXhlY3V0ZWQgYWZ0ZXJcbiAqIHRoZSBkYXRhIGhhcyBiZWVuIHN0b3JlZCBpbiB0aGUgY2FjaGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdG9yZShiaWRzLCBkb25lLCBnZXRBamF4ID0gYWpheEJ1aWxkZXIpIHtcbiAgY29uc3QgcmVxdWVzdERhdGEgPSB7XG4gICAgcHV0czogYmlkcy5tYXAodG9TdG9yYWdlUmVxdWVzdClcbiAgfTtcbiAgY29uc3QgYWpheCA9IGdldEFqYXgoY29uZmlnLmdldENvbmZpZygnY2FjaGUudGltZW91dCcpKTtcbiAgYWpheChjb25maWcuZ2V0Q29uZmlnKCdjYWNoZS51cmwnKSwgc2hpbVN0b3JhZ2VDYWxsYmFjayhkb25lKSwgSlNPTi5zdHJpbmdpZnkocmVxdWVzdERhdGEpLCB7XG4gICAgY29udGVudFR5cGU6ICd0ZXh0L3BsYWluJyxcbiAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWVcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDYWNoZVVybChpZCkge1xuICByZXR1cm4gYCR7Y29uZmlnLmdldENvbmZpZygnY2FjaGUudXJsJyl9P3V1aWQ9JHtpZH1gO1xufVxuIiwiaW1wb3J0IHtpbmNsdWRlc30gZnJvbSAnLi9wb2x5ZmlsbC5qcyc7XG5pbXBvcnQgeyBsb2dFcnJvciwgbG9nV2FybiwgaW5zZXJ0RWxlbWVudCwgc2V0U2NyaXB0QXR0cmlidXRlcyB9IGZyb20gJy4vdXRpbHMuanMnO1xuXG5jb25zdCBfcmVxdWVzdENhY2hlID0gbmV3IFdlYWtNYXAoKTtcbi8vIFRoZSBiZWxvdyBsaXN0IGNvbnRhaW5zIG1vZHVsZXMgb3IgdmVuZG9ycyB3aG9tIFByZWJpZCBhbGxvd3MgdG8gbG9hZCBleHRlcm5hbCBKUy5cbmNvbnN0IF9hcHByb3ZlZExvYWRFeHRlcm5hbEpTTGlzdCA9IFtcbiAgJ2RlYnVnZ2luZycsXG4gICdhZGxvb3gnLFxuICAnY3JpdGVvJyxcbiAgJ291dHN0cmVhbScsXG4gICdhZGFnaW8nLFxuICAnc3BvdHgnLFxuICAnYnJvd3NpJyxcbiAgJ2JyYW5kbWV0cmljcycsXG4gICdqdXN0dGFnJyxcbiAgJ3RuY0lkJyxcbiAgJ2FrYW1haWRhcCcsXG4gICdmdHJhY2tJZCcsXG4gICdpbnNraW4nLFxuICAnaGFkcm9uJyxcbiAgJ21lZGlhbmV0JyxcbiAgJ2ltcHJvdmVkaWdpdGFsJyxcbiAgJ2FheEJsb2NrbWV0ZXInLFxuICAnY29uZmlhbnQnLFxuICAnYXJjc3BhbicsXG4gICdhaXJncmlkJyxcbiAgJ2NsZWFuLmlvJyxcbiAgJ2ExTWVkaWEnLFxuICAnZ2VvZWRnZScsXG5dXG5cbi8qKlxuICogTG9hZHMgZXh0ZXJuYWwgamF2YXNjcmlwdC4gQ2FuIG9ubHkgYmUgdXNlZCBpZiBleHRlcm5hbCBKUyBpcyBhcHByb3ZlZCBieSBQcmViaWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcHJlYmlkL3ByZWJpZC1qcy1leHRlcm5hbC1qcy10ZW1wbGF0ZSNwb2xpY3lcbiAqIEVhY2ggdW5pcXVlIFVSTCB3aWxsIGJlIGxvYWRlZCBhdCBtb3N0IDEgdGltZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgdGhlIHVybCB0byBsb2FkXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlQ29kZSBiaWRkZXJDb2RlIG9yIG1vZHVsZSBjb2RlIG9mIHRoZSBtb2R1bGUgcmVxdWVzdGluZyB0aGlzIHJlc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhZnRlciB0aGUgc2NyaXB0IGlzIGxvYWRlZFxuICogQHBhcmFtIHtEb2N1bWVudH0gW2RvY10gdGhlIGNvbnRleHQgZG9jdW1lbnQsIGluIHdoaWNoIHRoZSBzY3JpcHQgd2lsbCBiZSBsb2FkZWQsIGRlZmF1bHRzIHRvIGxvYWRlZCBkb2N1bWVudFxuICogQHBhcmFtIHtvYmplY3R9IGFuIG9iamVjdCBvZiBhdHRyaWJ1dGVzIHRvIGJlIGFkZGVkIHRvIHRoZSBzY3JpcHQgd2l0aCBzZXRBdHRyaWJ1dGUgYnkgW2tleV0gYW5kIFt2YWx1ZV07IE9ubHkgdGhlIGF0dHJpYnV0ZXMgcGFzc2VkIGluIHRoZSBmaXJzdCByZXF1ZXN0IG9mIGEgdXJsIHdpbGwgYmUgYWRkZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkRXh0ZXJuYWxTY3JpcHQodXJsLCBtb2R1bGVDb2RlLCBjYWxsYmFjaywgZG9jLCBhdHRyaWJ1dGVzKSB7XG4gIGlmICghbW9kdWxlQ29kZSB8fCAhdXJsKSB7XG4gICAgbG9nRXJyb3IoJ2Nhbm5vdCBsb2FkIGV4dGVybmFsIHNjcmlwdCB3aXRob3V0IHVybCBhbmQgbW9kdWxlQ29kZScpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWluY2x1ZGVzKF9hcHByb3ZlZExvYWRFeHRlcm5hbEpTTGlzdCwgbW9kdWxlQ29kZSkpIHtcbiAgICBsb2dFcnJvcihgJHttb2R1bGVDb2RlfSBub3Qgd2hpdGVsaXN0ZWQgZm9yIGxvYWRpbmcgZXh0ZXJuYWwgSmF2YVNjcmlwdGApO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWRvYykge1xuICAgIGRvYyA9IGRvY3VtZW50OyAvLyBwcm92aWRlIGEgXCJ2YWxpZFwiIGtleSBmb3IgdGhlIFdlYWtNYXBcbiAgfVxuICAvLyBvbmx5IGxvYWQgZWFjaCBhc3NldCBvbmNlXG4gIGNvbnN0IHN0b3JlZENhY2hlZE9iamVjdCA9IGdldENhY2hlT2JqZWN0KGRvYywgdXJsKTtcbiAgaWYgKHN0b3JlZENhY2hlZE9iamVjdCkge1xuICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChzdG9yZWRDYWNoZWRPYmplY3QubG9hZGVkKSB7XG4gICAgICAgIC8vIGludm9rZUNhbGxiYWNrcyBpbW1lZGlhdGVseVxuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcXVldWUgdGhlIGNhbGxiYWNrXG4gICAgICAgIHN0b3JlZENhY2hlZE9iamVjdC5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdG9yZWRDYWNoZWRPYmplY3QudGFnO1xuICB9XG4gIGNvbnN0IGNhY2hlZERvY09iaiA9IF9yZXF1ZXN0Q2FjaGUuZ2V0KGRvYykgfHwge307XG4gIGNvbnN0IGNhY2hlT2JqZWN0ID0ge1xuICAgIGxvYWRlZDogZmFsc2UsXG4gICAgdGFnOiBudWxsLFxuICAgIGNhbGxiYWNrczogW11cbiAgfTtcbiAgY2FjaGVkRG9jT2JqW3VybF0gPSBjYWNoZU9iamVjdDtcbiAgX3JlcXVlc3RDYWNoZS5zZXQoZG9jLCBjYWNoZWREb2NPYmopO1xuXG4gIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWNoZU9iamVjdC5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICBsb2dXYXJuKGBtb2R1bGUgJHttb2R1bGVDb2RlfSBpcyBsb2FkaW5nIGV4dGVybmFsIEphdmFTY3JpcHRgKTtcbiAgcmV0dXJuIHJlcXVlc3RSZXNvdXJjZSh1cmwsIGZ1bmN0aW9uICgpIHtcbiAgICBjYWNoZU9iamVjdC5sb2FkZWQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhY2hlT2JqZWN0LmNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWNoZU9iamVjdC5jYWxsYmFja3NbaV0oKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dFcnJvcignRXJyb3IgZXhlY3V0aW5nIGNhbGxiYWNrJywgJ2FkbG9hZGVyLmpzOmxvYWRFeHRlcm5hbFNjcmlwdCcsIGUpO1xuICAgIH1cbiAgfSwgZG9jLCBhdHRyaWJ1dGVzKTtcblxuICBmdW5jdGlvbiByZXF1ZXN0UmVzb3VyY2UodGFnU3JjLCBjYWxsYmFjaywgZG9jLCBhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKCFkb2MpIHtcbiAgICAgIGRvYyA9IGRvY3VtZW50O1xuICAgIH1cbiAgICB2YXIganB0U2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIGpwdFNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAganB0U2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuICAgIGNvbnN0IGNhY2hlT2JqZWN0ID0gZ2V0Q2FjaGVPYmplY3QoZG9jLCB1cmwpO1xuICAgIGlmIChjYWNoZU9iamVjdCkge1xuICAgICAgY2FjaGVPYmplY3QudGFnID0ganB0U2NyaXB0O1xuICAgIH1cblxuICAgIGlmIChqcHRTY3JpcHQucmVhZHlTdGF0ZSkge1xuICAgICAganB0U2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGpwdFNjcmlwdC5yZWFkeVN0YXRlID09PSAnbG9hZGVkJyB8fCBqcHRTY3JpcHQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICAgIGpwdFNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGpwdFNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGpwdFNjcmlwdC5zcmMgPSB0YWdTcmM7XG5cbiAgICBpZiAoYXR0cmlidXRlcykge1xuICAgICAgc2V0U2NyaXB0QXR0cmlidXRlcyhqcHRTY3JpcHQsIGF0dHJpYnV0ZXMpO1xuICAgIH1cblxuICAgIC8vIGFkZCB0aGUgbmV3IHNjcmlwdCB0YWcgdG8gdGhlIHBhZ2VcbiAgICBpbnNlcnRFbGVtZW50KGpwdFNjcmlwdCwgZG9jKTtcblxuICAgIHJldHVybiBqcHRTY3JpcHQ7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q2FjaGVPYmplY3QoZG9jLCB1cmwpIHtcbiAgICBjb25zdCBjYWNoZWREb2NPYmogPSBfcmVxdWVzdENhY2hlLmdldChkb2MpO1xuICAgIGlmIChjYWNoZWREb2NPYmogJiYgY2FjaGVkRG9jT2JqW3VybF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWREb2NPYmpbdXJsXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7IC8vIHJldHVybiBuZXcgY2FjaGUgb2JqZWN0P1xuICB9XG59O1xuIiwiaW1wb3J0IHsgbG9hZEV4dGVybmFsU2NyaXB0IH0gZnJvbSAnLi9hZGxvYWRlci5qcyc7XG5pbXBvcnQge1xuICBsb2dFcnJvciwgbG9nV2FybiwgbG9nTWVzc2FnZSwgZGVlcEFjY2Vzc1xufSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7ZmluZH0gZnJvbSAnLi9wb2x5ZmlsbC5qcyc7XG5pbXBvcnQge2dldEdsb2JhbH0gZnJvbSAnLi9wcmViaWRHbG9iYWwuanMnO1xuXG5jb25zdCBwYmpzSW5zdGFuY2UgPSBnZXRHbG9iYWwoKTtcbmNvbnN0IG1vZHVsZUNvZGUgPSAnb3V0c3RyZWFtJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBSZW5kZXJlclxuICpcbiAqIEEgUmVuZGVyZXIgc3RvcmVzIHNvbWUgZnVuY3Rpb25zIHdoaWNoIGFyZSB1c2VkIHRvIHJlbmRlciBhIHBhcnRpY3VsYXIgQmlkLlxuICogVGhlc2UgYXJlIHVzZWQgaW4gT3V0c3RyZWFtIFZpZGVvIEJpZHMsIHJldHVybmVkIG9uIHRoZSBCaWQgYnkgdGhlIGFkYXB0ZXIsIGFuZCB3aWxsXG4gKiBiZSB1c2VkIHRvIHJlbmRlciB0aGF0IGJpZCB1bmxlc3MgdGhlIFB1Ymxpc2hlciBvdmVycmlkZXMgdGhlbS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gUmVuZGVyZXIob3B0aW9ucykge1xuICBjb25zdCB7IHVybCwgY29uZmlnLCBpZCwgY2FsbGJhY2ssIGxvYWRlZCwgYWRVbml0Q29kZSwgcmVuZGVyTm93IH0gPSBvcHRpb25zO1xuICB0aGlzLnVybCA9IHVybDtcbiAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgdGhpcy5pZCA9IGlkO1xuICB0aGlzLnJlbmRlck5vdyA9IHJlbmRlck5vdztcblxuICAvLyBhIHJlbmRlcmVyIG1heSBwdXNoIHRvIHRoZSBjb21tYW5kIHF1ZXVlIHRvIGRlbGF5IHJlbmRlcmluZyB1bnRpbCB0aGVcbiAgLy8gcmVuZGVyIGZ1bmN0aW9uIGlzIGxvYWRlZCBieSBsb2FkRXh0ZXJuYWxTY3JpcHQsIGF0IHdoaWNoIHBvaW50IHRoZSB0aGUgY29tbWFuZFxuICAvLyBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZFxuICB0aGlzLmxvYWRlZCA9IGxvYWRlZDtcbiAgdGhpcy5jbWQgPSBbXTtcbiAgdGhpcy5wdXNoID0gZnVuYyA9PiB7XG4gICAgaWYgKHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBsb2dFcnJvcignQ29tbWFuZHMgZ2l2ZW4gdG8gUmVuZGVyZXIucHVzaCBtdXN0IGJlIHdyYXBwZWQgaW4gYSBmdW5jdGlvbicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmxvYWRlZCA/IGZ1bmMuY2FsbCgpIDogdGhpcy5jbWQucHVzaChmdW5jKTtcbiAgfTtcblxuICAvLyBiaWRkZXJzIG1heSBvdmVycmlkZSB0aGlzIHdpdGggdGhlIGBjYWxsYmFja2AgcHJvcGVydHkgZ2l2ZW4gdG8gYGluc3RhbGxgXG4gIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjayB8fCAoKCkgPT4ge1xuICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICB0aGlzLnByb2Nlc3MoKTtcbiAgfSk7XG5cbiAgLy8gdXNlIGEgZnVuY3Rpb24sIG5vdCBhbiBhcnJvdywgaW4gb3JkZXIgdG8gYmUgYWJsZSB0byBwYXNzIFwiYXJndW1lbnRzXCIgdGhyb3VnaFxuICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCByZW5kZXJBcmdzID0gYXJndW1lbnRzXG4gICAgY29uc3QgcnVuUmVuZGVyID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX3JlbmRlcikge1xuICAgICAgICB0aGlzLl9yZW5kZXIuYXBwbHkodGhpcywgcmVuZGVyQXJncylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ1dhcm4oYE5vIHJlbmRlciBmdW5jdGlvbiB3YXMgcHJvdmlkZWQsIHBsZWFzZSB1c2UgLnNldFJlbmRlciBvbiB0aGUgcmVuZGVyZXJgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNSZW5kZXJlclByZWZlcnJlZEZyb21BZFVuaXQoYWRVbml0Q29kZSkpIHtcbiAgICAgIGxvZ1dhcm4oYEV4dGVybmFsIEpzIG5vdCBsb2FkZWQgYnkgUmVuZGVyZXIgc2luY2UgcmVuZGVyZXIgdXJsIGFuZCBjYWxsYmFjayBpcyBhbHJlYWR5IGRlZmluZWQgb24gYWRVbml0ICR7YWRVbml0Q29kZX1gKTtcbiAgICAgIHJ1blJlbmRlcigpO1xuICAgIH0gZWxzZSBpZiAocmVuZGVyTm93KSB7XG4gICAgICBydW5SZW5kZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd2UgZXhwZWN0IHRvIGxvYWQgYSByZW5kZXJlciB1cmwgb25jZSBvbmx5IHNvIGNhY2hlIHRoZSByZXF1ZXN0IHRvIGxvYWQgc2NyaXB0XG4gICAgICB0aGlzLmNtZC51bnNoaWZ0KHJ1blJlbmRlcikgLy8gc2hvdWxkIHJlbmRlciBydW4gZmlyc3QgP1xuICAgICAgbG9hZEV4dGVybmFsU2NyaXB0KHVybCwgbW9kdWxlQ29kZSwgdGhpcy5jYWxsYmFjaywgdGhpcy5kb2N1bWVudENvbnRleHQpO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpOyAvLyBiaW5kIHRoZSBmdW5jdGlvbiB0byB0aGlzIG9iamVjdCB0byBhdm9pZCAndGhpcycgZXJyb3JzXG59XG5cblJlbmRlcmVyLmluc3RhbGwgPSBmdW5jdGlvbih7IHVybCwgY29uZmlnLCBpZCwgY2FsbGJhY2ssIGxvYWRlZCwgYWRVbml0Q29kZSwgcmVuZGVyTm93IH0pIHtcbiAgcmV0dXJuIG5ldyBSZW5kZXJlcih7IHVybCwgY29uZmlnLCBpZCwgY2FsbGJhY2ssIGxvYWRlZCwgYWRVbml0Q29kZSwgcmVuZGVyTm93IH0pO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmdldENvbmZpZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jb25maWc7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuc2V0UmVuZGVyID0gZnVuY3Rpb24oZm4pIHtcbiAgdGhpcy5fcmVuZGVyID0gZm47XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuc2V0RXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uKGhhbmRsZXJzKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBoYW5kbGVycztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5oYW5kbGVWaWRlb0V2ZW50ID0gZnVuY3Rpb24oeyBpZCwgZXZlbnROYW1lIH0pIHtcbiAgaWYgKHR5cGVvZiB0aGlzLmhhbmRsZXJzW2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmhhbmRsZXJzW2V2ZW50TmFtZV0oKTtcbiAgfVxuXG4gIGxvZ01lc3NhZ2UoYFByZWJpZCBSZW5kZXJlciBldmVudCBmb3IgaWQgJHtpZH0gdHlwZSAke2V2ZW50TmFtZX1gKTtcbn07XG5cbi8qXG4gKiBDYWxscyBmdW5jdGlvbnMgdGhhdCB3ZXJlIHB1c2hlZCB0byB0aGUgY29tbWFuZCBxdWV1ZSBiZWZvcmUgdGhlXG4gKiByZW5kZXJlciB3YXMgbG9hZGVkIGJ5IGBsb2FkRXh0ZXJuYWxTY3JpcHRgXG4gKi9cblJlbmRlcmVyLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24oKSB7XG4gIHdoaWxlICh0aGlzLmNtZC5sZW5ndGggPiAwKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuY21kLnNoaWZ0KCkuY2FsbCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dFcnJvcignRXJyb3IgcHJvY2Vzc2luZyBSZW5kZXJlciBjb21tYW5kOiAnLCBlcnJvcik7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGNyZWF0aXZlIHJlbmRlcmluZyBzaG91bGQgYmUgZG9uZSBieSBSZW5kZXJlciBvciBub3QuXG4gKiBAcGFyYW0ge09iamVjdH0gcmVuZGVyZXIgUmVuZGVyZXIgb2JqZWN0IGluc3RhbGxlZCBieSBhZGFwdGVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVuZGVyZXJSZXF1aXJlZChyZW5kZXJlcikge1xuICByZXR1cm4gISEocmVuZGVyZXIgJiYgKHJlbmRlcmVyLnVybCB8fCByZW5kZXJlci5yZW5kZXJOb3cpKTtcbn1cblxuLyoqXG4gKiBSZW5kZXIgdGhlIGJpZCByZXR1cm5lZCBieSB0aGUgYWRhcHRlclxuICogQHBhcmFtIHtPYmplY3R9IHJlbmRlcmVyIFJlbmRlcmVyIG9iamVjdCBpbnN0YWxsZWQgYnkgYWRhcHRlclxuICogQHBhcmFtIHtPYmplY3R9IGJpZCBCaWQgcmVzcG9uc2VcbiAqIEBwYXJhbSB7RG9jdW1lbnR9IGRvYyBjb250ZXh0IGRvY3VtZW50IG9mIGJpZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhlY3V0ZVJlbmRlcmVyKHJlbmRlcmVyLCBiaWQsIGRvYykge1xuICBsZXQgZG9jQ29udGV4dCA9IG51bGw7XG4gIGlmIChyZW5kZXJlci5jb25maWcgJiYgcmVuZGVyZXIuY29uZmlnLmRvY3VtZW50UmVzb2x2ZXIpIHtcbiAgICBkb2NDb250ZXh0ID0gcmVuZGVyZXIuY29uZmlnLmRvY3VtZW50UmVzb2x2ZXIoYmlkLCBkb2N1bWVudCwgZG9jKTsvLyBhIHVzZXIgcHJvdmlkZWQgY2FsbGJhY2ssIHdoaWNoIHNob3VsZCByZXR1cm4gYSBEb2N1bWVudCwgYW5kIGV4cGVjdCB0aGUgcGFyYW1ldGVyczsgYmlkLCBzb3VyY2VEb2N1bWVudCwgcmVuZGVyRG9jdW1lbnRcbiAgfVxuICBpZiAoIWRvY0NvbnRleHQpIHtcbiAgICBkb2NDb250ZXh0ID0gZG9jdW1lbnQ7XG4gIH1cbiAgcmVuZGVyZXIuZG9jdW1lbnRDb250ZXh0ID0gZG9jQ29udGV4dDtcbiAgcmVuZGVyZXIucmVuZGVyKGJpZCwgcmVuZGVyZXIuZG9jdW1lbnRDb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gaXNSZW5kZXJlclByZWZlcnJlZEZyb21BZFVuaXQoYWRVbml0Q29kZSkge1xuICBjb25zdCBhZFVuaXRzID0gcGJqc0luc3RhbmNlLmFkVW5pdHM7XG4gIGNvbnN0IGFkVW5pdCA9IGZpbmQoYWRVbml0cywgYWRVbml0ID0+IHtcbiAgICByZXR1cm4gYWRVbml0LmNvZGUgPT09IGFkVW5pdENvZGU7XG4gIH0pO1xuXG4gIGlmICghYWRVbml0KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyByZW5kZXJlciBkZWZpbmVkIGF0IGFkVW5pdCBsZXZlbFxuICBjb25zdCBhZFVuaXRSZW5kZXJlciA9IGRlZXBBY2Nlc3MoYWRVbml0LCAncmVuZGVyZXInKTtcbiAgY29uc3QgaGFzVmFsaWRBZFVuaXRSZW5kZXJlciA9ICEhKGFkVW5pdFJlbmRlcmVyICYmIGFkVW5pdFJlbmRlcmVyLnVybCAmJiBhZFVuaXRSZW5kZXJlci5yZW5kZXIpO1xuXG4gIC8vIHJlbmRlcmVyIGRlZmluZWQgYXQgYWRVbml0Lm1lZGlhVHlwZXMgbGV2ZWxcbiAgY29uc3QgbWVkaWFUeXBlUmVuZGVyZXIgPSBkZWVwQWNjZXNzKGFkVW5pdCwgJ21lZGlhVHlwZXMudmlkZW8ucmVuZGVyZXInKTtcbiAgY29uc3QgaGFzVmFsaWRNZWRpYVR5cGVSZW5kZXJlciA9ICEhKG1lZGlhVHlwZVJlbmRlcmVyICYmIG1lZGlhVHlwZVJlbmRlcmVyLnVybCAmJiBtZWRpYVR5cGVSZW5kZXJlci5yZW5kZXIpXG5cbiAgcmV0dXJuICEhKFxuICAgIChoYXNWYWxpZEFkVW5pdFJlbmRlcmVyICYmICEoYWRVbml0UmVuZGVyZXIuYmFja3VwT25seSA9PT0gdHJ1ZSkpIHx8XG4gICAgKGhhc1ZhbGlkTWVkaWFUeXBlUmVuZGVyZXIgJiYgIShtZWRpYVR5cGVSZW5kZXJlci5iYWNrdXBPbmx5ID09PSB0cnVlKSlcbiAgKTtcbn1cbiIsImltcG9ydCB7ZGVlcEFjY2VzcywgbWVyZ2VEZWVwfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7Z2V0R2xvYmFsfSBmcm9tICcuL3ByZWJpZEdsb2JhbC5qcyc7XG5pbXBvcnQgQ09OU1RBTlRTIGZyb20gJy4vY29uc3RhbnRzLmpzb24nO1xuXG5leHBvcnQgY2xhc3MgU2NvcGVkU2V0dGluZ3Mge1xuICBjb25zdHJ1Y3RvcihnZXRTZXR0aW5ncywgZGVmYXVsdFNjb3BlKSB7XG4gICAgdGhpcy5nZXRTZXR0aW5ncyA9IGdldFNldHRpbmdzO1xuICAgIHRoaXMuZGVmYXVsdFNjb3BlID0gZGVmYXVsdFNjb3BlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzZXR0aW5nIHZhbHVlIGF0IGBwYXRoYCB1bmRlciB0aGUgZ2l2ZW4gc2NvcGUsIGZhbGxpbmcgYmFjayB0byB0aGUgZGVmYXVsdCBzY29wZSBpZiBuZWVkZWQuXG4gICAqIElmIGBzY29wZWAgaXMgYG51bGxgLCBnZXQgdGhlIHNldHRpbmcncyBkZWZhdWx0IHZhbHVlLlxuICAgKiBAcGFyYW0gc2NvcGUge1N0cmluZ3xudWxsfVxuICAgKiBAcGFyYW0gcGF0aCB7U3RyaW5nfVxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGdldChzY29wZSwgcGF0aCkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0T3duKHNjb3BlLCBwYXRoKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFsdWUgPSB0aGlzLmdldE93bihudWxsLCBwYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc2V0dGluZyB2YWx1ZSBhdCBgcGF0aGAgKndpdGhvdXQqIGZhbGxpbmcgYmFjayB0byB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICogQHBhcmFtIHNjb3BlIHtTdHJpbmd9XG4gICAqIEBwYXJhbSBwYXRoIHtTdHJpbmd9XG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgZ2V0T3duKHNjb3BlLCBwYXRoKSB7XG4gICAgc2NvcGUgPSB0aGlzLiNyZXNvbHZlU2NvcGUoc2NvcGUpO1xuICAgIHJldHVybiBkZWVwQWNjZXNzKHRoaXMuZ2V0U2V0dGluZ3MoKSwgYCR7c2NvcGV9LiR7cGF0aH1gKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX0gYWxsIGV4aXN0aW5nIHNjb3BlcyBleGNlcHQgdGhlIGRlZmF1bHQgb25lLlxuICAgKi9cbiAgZ2V0U2NvcGVzKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmdldFNldHRpbmdzKCkpLmZpbHRlcigoc2NvcGUpID0+IHNjb3BlICE9PSB0aGlzLmRlZmF1bHRTY29wZSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMgYWxsIHNldHRpbmdzIGluIHRoZSBnaXZlbiBzY29wZSwgbWVyZ2VkIHdpdGggdGhlIHNldHRpbmdzIGZvciB0aGUgZGVmYXVsdCBzY29wZS5cbiAgICovXG4gIHNldHRpbmdzRm9yKHNjb3BlKSB7XG4gICAgcmV0dXJuIG1lcmdlRGVlcCh7fSwgdGhpcy5vd25TZXR0aW5nc0ZvcihudWxsKSwgdGhpcy5vd25TZXR0aW5nc0ZvcihzY29wZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIGFsbCBzZXR0aW5ncyBpbiB0aGUgZ2l2ZW4gc2NvcGUsICp3aXRob3V0KiBhbnkgb2YgdGhlIGRlZmF1bHQgc2V0dGluZ3MuXG4gICAqL1xuICBvd25TZXR0aW5nc0ZvcihzY29wZSkge1xuICAgIHNjb3BlID0gdGhpcy4jcmVzb2x2ZVNjb3BlKHNjb3BlKTtcbiAgICByZXR1cm4gdGhpcy5nZXRTZXR0aW5ncygpW3Njb3BlXSB8fCB7fTtcbiAgfVxuXG4gICNyZXNvbHZlU2NvcGUoc2NvcGUpIHtcbiAgICBpZiAoc2NvcGUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFNjb3BlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc2NvcGU7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBiaWRkZXJTZXR0aW5ncyA9IG5ldyBTY29wZWRTZXR0aW5ncygoKSA9PiBnZXRHbG9iYWwoKS5iaWRkZXJTZXR0aW5ncyB8fCB7fSwgQ09OU1RBTlRTLkpTT05fTUFQUElORy5CRF9TRVRUSU5HX1NUQU5EQVJEKTtcbiIsImV4cG9ydCBjb25zdCBNT0RVTEVfVFlQRV9QUkVCSUQgPSAncHJlYmlkJztcbmV4cG9ydCBjb25zdCBNT0RVTEVfVFlQRV9CSURERVIgPSAnYmlkZGVyJztcbmV4cG9ydCBjb25zdCBNT0RVTEVfVFlQRV9VSUQgPSAndXNlcklkJztcbmV4cG9ydCBjb25zdCBNT0RVTEVfVFlQRV9SVEQgPSAncnRkJztcbmV4cG9ydCBjb25zdCBNT0RVTEVfVFlQRV9BTkFMWVRJQ1MgPSAnYW5hbHl0aWNzJztcbiIsImltcG9ydCBmdW5Ib29rcyBmcm9tICdmdW4taG9va3Mvbm8tZXZhbC9pbmRleC5qcyc7XG5pbXBvcnQge2RlZmVyfSBmcm9tICcuL3V0aWxzL3Byb21pc2UuanMnO1xuXG5leHBvcnQgbGV0IGhvb2sgPSBmdW5Ib29rcyh7XG4gIHJlYWR5OiBmdW5Ib29rcy5TWU5DIHwgZnVuSG9va3MuQVNZTkMgfCBmdW5Ib29rcy5RVUVVRVxufSk7XG5cbmNvbnN0IHJlYWR5Q3RsID0gZGVmZXIoKTtcbmhvb2sucmVhZHkgPSAoKCkgPT4ge1xuICBjb25zdCByZWFkeSA9IGhvb2sucmVhZHk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiByZWFkeS5hcHBseShob29rLCBhcmd1bWVudHMpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICByZWFkeUN0bC5yZXNvbHZlKCk7XG4gICAgfVxuICB9XG59KSgpO1xuXG4vKipcbiAqIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gaG9va3MgYXJlIHJlYWR5LlxuICogQHR5cGUge1Byb21pc2V9XG4gKi9cbmV4cG9ydCBjb25zdCByZWFkeSA9IHJlYWR5Q3RsLnByb21pc2U7XG5cbmV4cG9ydCBjb25zdCBnZXRIb29rID0gaG9vay5nZXQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cEJlZm9yZUhvb2tGbk9uY2UoYmFzZUZuLCBob29rRm4sIHByaW9yaXR5ID0gMTUpIHtcbiAgbGV0IHJlc3VsdCA9IGJhc2VGbi5nZXRIb29rcyh7aG9vazogaG9va0ZufSk7XG4gIGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgYmFzZUZuLmJlZm9yZShob29rRm4sIHByaW9yaXR5KTtcbiAgfVxufVxuY29uc3Qgc3VibW9kdWxlSW5zdGFsbE1hcCA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gbW9kdWxlKG5hbWUsIGluc3RhbGwsIHtwb3N0SW5zdGFsbEFsbG93ZWQgPSBmYWxzZX0gPSB7fSkge1xuICBob29rKCdhc3luYycsIGZ1bmN0aW9uIChzdWJtb2R1bGVzKSB7XG4gICAgc3VibW9kdWxlcy5mb3JFYWNoKGFyZ3MgPT4gaW5zdGFsbCguLi5hcmdzKSk7XG4gICAgaWYgKHBvc3RJbnN0YWxsQWxsb3dlZCkgc3VibW9kdWxlSW5zdGFsbE1hcFtuYW1lXSA9IGluc3RhbGw7XG4gIH0sIG5hbWUpKFtdKTsgLy8gd2lsbCBiZSBxdWV1ZWQgdW50aWwgaG9vay5yZWFkeSgpIGNhbGxlZCBpbiBwYmpzLnByb2Nlc3NRdWV1ZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VibW9kdWxlKG5hbWUsIC4uLmFyZ3MpIHtcbiAgY29uc3QgaW5zdGFsbCA9IHN1Ym1vZHVsZUluc3RhbGxNYXBbbmFtZV07XG4gIGlmIChpbnN0YWxsKSByZXR1cm4gaW5zdGFsbCguLi5hcmdzKTtcbiAgZ2V0SG9vayhuYW1lKS5iZWZvcmUoKG5leHQsIG1vZHVsZXMpID0+IHtcbiAgICBtb2R1bGVzLnB1c2goYXJncyk7XG4gICAgbmV4dChtb2R1bGVzKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29weSBob29rIG1ldGhvZHMgKC5iZWZvcmUsIC5hZnRlciwgZXRjKSBmcm9tIGEgZ2l2ZW4gaG9vayB0byBhIGdpdmVuIHdyYXBwZXIgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gd3JhcEhvb2soaG9vaywgd3JhcHBlcikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhcbiAgICB3cmFwcGVyLFxuICAgIE9iamVjdC5mcm9tRW50cmllcyhbJ2JlZm9yZScsICdhZnRlcicsICdnZXRIb29rcycsICdyZW1vdmVBbGwnXS5tYXAoKG0pID0+IFttLCB7Z2V0OiAoKSA9PiBob29rW21dfV0pKVxuICApO1xuICByZXR1cm4gd3JhcHBlcjtcbn1cbiIsImltcG9ydCB7TU9EVUxFX1RZUEVfQklEREVSfSBmcm9tICcuL21vZHVsZXMuanMnO1xuaW1wb3J0IHtob29rfSBmcm9tICcuLi9ob29rLmpzJztcblxuLyoqXG4gKiBDb21wb25lbnQgSUQgLSB3aG8gaXMgdHJ5aW5nIHRvIHBlcmZvcm0gdGhlIGFjdGl2aXR5P1xuICogUmVsZXZhbnQgZm9yIGFsbCBhY3Rpdml0aWVzLlxuICovXG5leHBvcnQgY29uc3QgQUNUSVZJVFlfUEFSQU1fQ09NUE9ORU5UID0gJ2NvbXBvbmVudCc7XG5leHBvcnQgY29uc3QgQUNUSVZJVFlfUEFSQU1fQ09NUE9ORU5UX1RZUEUgPSBBQ1RJVklUWV9QQVJBTV9DT01QT05FTlQgKyAnVHlwZSc7XG5leHBvcnQgY29uc3QgQUNUSVZJVFlfUEFSQU1fQ09NUE9ORU5UX05BTUUgPSBBQ1RJVklUWV9QQVJBTV9DT01QT05FTlQgKyAnTmFtZSc7XG5cbi8qKlxuICogQ29kZSBvZiB0aGUgYmlkIGFkYXB0ZXIgdGhhdCBgY29tcG9uZW50TmFtZWAgaXMgYW4gYWxpYXMgb2YuXG4gKiBNYXkgYmUgdGhlIHNhbWUgYXMgdGhlIGNvbXBvbmVudCBuYW1lLlxuICpcbiAqIHJlbGV2YW50IGZvciBhbGwgYWN0aXZpdGllcywgYnV0IG9ubHkgd2hlbiBjb21wb25lbnRUeXBlIGlzICdiaWRkZXInLlxuICovXG5leHBvcnQgY29uc3QgQUNUSVZJVFlfUEFSQU1fQURBUFRFUl9DT0RFID0gJ2FkYXB0ZXJDb2RlJztcblxuLyoqXG4gKiBTdG9yYWdlIHR5cGUgLSBlaXRoZXIgJ2h0bWw1JyBvciAnY29va2llJy5cbiAqIFJlbGV2YW50IGZvcjogYWNjZXNzRGV2aWNlXG4gKi9cbmV4cG9ydCBjb25zdCBBQ1RJVklUWV9QQVJBTV9TVE9SQUdFX1RZUEUgPSAnc3RvcmFnZVR5cGUnO1xuXG4vKipcbiAqIHMyc0NvbmZpZ1tdLmNvbmZpZ05hbWUsIHVzZWQgdG8gaWRlbnRpZnkgYSBwYXJ0aWN1bGFyIHMycyBpbnN0YW5jZVxuICogcmVsZXZhbnQgZm9yOiBmZXRjaEJpZHMsIGJ1dCBvbmx5IHdoZW4gY29tcG9uZW50IGlzICdwcmViaWQucGJzQmlkQWRhcHRlcidcbiAqL1xuZXhwb3J0IGNvbnN0IEFDVElWSVRZX1BBUkFNX1MyU19OQU1FID0gJ2NvbmZpZ05hbWUnO1xuLyoqXG4gKiB1c2VyIHN5bmMgdHlwZSAtICdpZnJhbWUnIG9yICdwaXhlbCdcbiAqIHJlbGV2YW50IGZvcjogc3luY1VzZXJcbiAqL1xuZXhwb3J0IGNvbnN0IEFDVElWSVRZX1BBUkFNX1NZTkNfVFlQRSA9ICdzeW5jVHlwZSdcbi8qKlxuICogdXNlciBzeW5jIFVSTFxuICogcmVsZXZhbnQgZm9yOiBzeW5jVXNlclxuICovXG5leHBvcnQgY29uc3QgQUNUSVZJVFlfUEFSQU1fU1lOQ19VUkwgPSAnc3luY1VybCc7XG4vKipcbiAqIEBwcml2YXRlXG4gKiBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGFuYWx5dGljcyBhZGFwdGVyIC0gdGhlIGFyZ3VtZW50IHBhc3NlZCB0byBgZW5hYmxlQW5hbHl0aWNzYC5cbiAqIHJlbGV2YW50IGZvcjogcmVwb3J0QW5hbHl0aWNzXG4gKi9cbmV4cG9ydCBjb25zdCBBQ1RJVklUWV9QQVJBTV9BTkxfQ09ORklHID0gJ19jb25maWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZpdHlQYXJhbXNCdWlsZGVyKHJlc29sdmVBbGlhcykge1xuICByZXR1cm4gZnVuY3Rpb24gYWN0aXZpdHlQYXJhbXMobW9kdWxlVHlwZSwgbW9kdWxlTmFtZSwgcGFyYW1zKSB7XG4gICAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgICBbQUNUSVZJVFlfUEFSQU1fQ09NUE9ORU5UX1RZUEVdOiBtb2R1bGVUeXBlLFxuICAgICAgW0FDVElWSVRZX1BBUkFNX0NPTVBPTkVOVF9OQU1FXTogbW9kdWxlTmFtZSxcbiAgICAgIFtBQ1RJVklUWV9QQVJBTV9DT01QT05FTlRdOiBgJHttb2R1bGVUeXBlfS4ke21vZHVsZU5hbWV9YFxuICAgIH07XG4gICAgaWYgKG1vZHVsZVR5cGUgPT09IE1PRFVMRV9UWVBFX0JJRERFUikge1xuICAgICAgZGVmYXVsdHNbQUNUSVZJVFlfUEFSQU1fQURBUFRFUl9DT0RFXSA9IHJlc29sdmVBbGlhcyhtb2R1bGVOYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1aWxkQWN0aXZpdHlQYXJhbXMoT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgcGFyYW1zKSk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGJ1aWxkQWN0aXZpdHlQYXJhbXMgPSBob29rKCdzeW5jJywgcGFyYW1zID0+IHBhcmFtcyk7XG4iLCJpbXBvcnQge3ByZWZpeExvZ30gZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHtBQ1RJVklUWV9QQVJBTV9DT01QT05FTlR9IGZyb20gJy4vcGFyYW1zLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVSZWdpc3RyeShsb2dnZXIgPSBwcmVmaXhMb2coJ0FjdGl2aXR5IGNvbnRyb2w6JykpIHtcbiAgY29uc3QgcmVnaXN0cnkgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRSdWxlcyhhY3Rpdml0eSkge1xuICAgIHJldHVybiByZWdpc3RyeVthY3Rpdml0eV0gPSByZWdpc3RyeVthY3Rpdml0eV0gfHwgW107XG4gIH1cblxuICBmdW5jdGlvbiBydW5SdWxlKGFjdGl2aXR5LCBuYW1lLCBydWxlLCBwYXJhbXMpIHtcbiAgICBsZXQgcmVzO1xuICAgIHRyeSB7XG4gICAgICByZXMgPSBydWxlKHBhcmFtcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nZ2VyLmxvZ0Vycm9yKGBFeGNlcHRpb24gaW4gcnVsZSAke25hbWV9IGZvciAnJHthY3Rpdml0eX0nYCwgZSk7XG4gICAgICByZXMgPSB7YWxsb3c6IGZhbHNlLCByZWFzb246IGV9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzICYmIE9iamVjdC5hc3NpZ24oe2FjdGl2aXR5LCBuYW1lLCBjb21wb25lbnQ6IHBhcmFtc1tBQ1RJVklUWV9QQVJBTV9DT01QT05FTlRdfSwgcmVzKTtcbiAgfVxuXG4gIGNvbnN0IGR1cGVzID0ge307XG4gIGNvbnN0IERFRFVQRV9JTlRFUlZBTCA9IDEwMDA7XG5cbiAgZnVuY3Rpb24gbG9nUmVzdWx0KHthY3Rpdml0eSwgbmFtZSwgYWxsb3csIHJlYXNvbiwgY29tcG9uZW50fSkge1xuICAgIGNvbnN0IG1zZyA9IGAke25hbWV9ICR7YWxsb3cgPyAnYWxsb3dlZCcgOiAnZGVuaWVkJ30gJyR7YWN0aXZpdHl9JyBmb3IgJyR7Y29tcG9uZW50fScke3JlYXNvbiA/ICc6JyA6ICcnfWA7XG4gICAgY29uc3QgZGVkdXBpbmcgPSBkdXBlcy5oYXNPd25Qcm9wZXJ0eShtc2cpO1xuICAgIGlmIChkZWR1cGluZykge1xuICAgICAgY2xlYXJUaW1lb3V0KGR1cGVzW21zZ10pO1xuICAgIH1cbiAgICBkdXBlc1ttc2ddID0gc2V0VGltZW91dCgoKSA9PiBkZWxldGUgZHVwZXNbbXNnXSwgREVEVVBFX0lOVEVSVkFMKTtcbiAgICBpZiAoIWRlZHVwaW5nKSB7XG4gICAgICBjb25zdCBwYXJ0cyA9IFttc2ddO1xuICAgICAgcmVhc29uICYmIHBhcnRzLnB1c2gocmVhc29uKTtcbiAgICAgIChhbGxvdyA/IGxvZ2dlci5sb2dJbmZvIDogbG9nZ2VyLmxvZ1dhcm4pLmFwcGx5KGxvZ2dlciwgcGFydHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYW4gYWN0aXZpdHkgY29udHJvbCBydWxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFjdGl2aXR5IGFjdGl2aXR5IG5hbWUgLSBzZXQgaXMgZGVmaW5lZCBpbiBgYWN0aXZpdGllcy5qc2BcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcnVsZU5hbWUgYSBuYW1lIGZvciB0aGlzIHJ1bGU7IHVzZWQgZm9yIGxvZ2dpbmcuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbih7fSk6IHthbGxvdzogYm9vbGVhbiwgcmVhc29uPzogc3RyaW5nfX0gcnVsZSBkZWZpbml0aW9uIGZ1bmN0aW9uLiBUYWtlcyBpbiBhY3Rpdml0eVxuICAgICAqICAgICAgICBwYXJhbWV0ZXJzIGFzIGEgc2luZ2xlIG1hcDsgTUFZIHJldHVybiBhbiBvYmplY3Qge2FsbG93LCByZWFzb259LCB3aGVyZSBhbGxvdyBpcyB0cnVlL2ZhbHNlLFxuICAgICAqICAgICAgICBhbmQgcmVhc29uIGlzIGFuIG9wdGlvbmFsIG1lc3NhZ2UgdXNlZCBmb3IgbG9nZ2luZy5cbiAgICAgKlxuICAgICAqICAgICAgICB7YWxsb3c6IHRydWV9IHdpbGwgYWxsb3cgdGhpcyBhY3Rpdml0eSBBUyBMT05HIEFTIG5vIG90aGVyIHJ1bGVzIHdpdGggc2FtZSBvciBoaWdoZXIgcHJpb3JpdHkgcmV0dXJuIHthbGxvdzogZmFsc2V9O1xuICAgICAqICAgICAgICB7YWxsb3c6IGZhbHNlfSB3aWxsIGRlbnkgdGhpcyBhY3Rpdml0eSBBUyBMT05HIEFTIG5vIG90aGVyIHJ1bGVzIHdpdGggaGlnaGVyIHByaW9yaXR5IHJldHVybiB7YWxsb3c6IHRydWV9O1xuICAgICAqICAgICAgICByZXR1cm5pbmcgbnVsbC91bmRlZmluZWQgaGFzIG5vIGVmZmVjdCAtIHRoZSBkZWNpc2lvbiBpcyBsZWZ0IHRvIG90aGVyIHJ1bGVzLlxuICAgICAqICAgICAgICBJZiBubyBydWxlIHJldHVybnMgYW4gYWxsb3cgdmFsdWUsIHRoZSBkZWZhdWx0IGlzIHRvIGFsbG93IHRoZSBhY3Rpdml0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwcmlvcml0eSBydWxlIHByaW9yaXR5OyBsb3dlciBudW1iZXIgbWVhbnMgaGlnaGVyIHByaW9yaXR5XG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKHZvaWQpOiB2b2lkfSBhIGZ1bmN0aW9uIHRoYXQgdW5yZWdpc3RlcnMgdGhlIHJ1bGUgd2hlbiBjYWxsZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJBY3Rpdml0eUNvbnRyb2woYWN0aXZpdHksIHJ1bGVOYW1lLCBydWxlLCBwcmlvcml0eSA9IDEwKSB7XG4gICAgICBjb25zdCBydWxlcyA9IGdldFJ1bGVzKGFjdGl2aXR5KTtcbiAgICAgIGNvbnN0IHBvcyA9IHJ1bGVzLmZpbmRJbmRleCgoW2l0ZW1Qcmlvcml0eV0pID0+IHByaW9yaXR5IDwgaXRlbVByaW9yaXR5KTtcbiAgICAgIGNvbnN0IGVudHJ5ID0gW3ByaW9yaXR5LCBydWxlTmFtZSwgcnVsZV07XG4gICAgICBydWxlcy5zcGxpY2UocG9zIDwgMCA/IHJ1bGVzLmxlbmd0aCA6IHBvcywgMCwgZW50cnkpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gcnVsZXMuaW5kZXhPZihlbnRyeSk7XG4gICAgICAgIGlmIChpZHggPj0gMCkgcnVsZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUZXN0IHdoZXRoZXIgYW4gYWN0aXZpdHkgaXMgYWxsb3dlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpdml0eSBhY3Rpdml0eSBuYW1lXG4gICAgICogQHBhcmFtIHt7fX0gcGFyYW1zIGFjdGl2aXR5IHBhcmFtZXRlcnM7IHNob3VsZCBiZSBnZW5lcmF0ZWQgdGhyb3VnaCB0aGUgYGFjdGl2aXR5UGFyYW1zYCB1dGlsaXR5LlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgZm9yIGFsbG93LCBmYWxzZSBmb3IgZGVueS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FjdGl2aXR5QWxsb3dlZChhY3Rpdml0eSwgcGFyYW1zKSB7XG4gICAgICBsZXQgbGFzdFByaW9yaXR5LCBmb3VuZEFsbG93O1xuICAgICAgZm9yIChjb25zdCBbcHJpb3JpdHksIG5hbWUsIHJ1bGVdIG9mIGdldFJ1bGVzKGFjdGl2aXR5KSkge1xuICAgICAgICBpZiAobGFzdFByaW9yaXR5ICE9PSBwcmlvcml0eSAmJiBmb3VuZEFsbG93KSBicmVhaztcbiAgICAgICAgbGFzdFByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgICAgIGNvbnN0IHJ1bGVSZXN1bHQgPSBydW5SdWxlKGFjdGl2aXR5LCBuYW1lLCBydWxlLCBwYXJhbXMpO1xuICAgICAgICBpZiAocnVsZVJlc3VsdCkge1xuICAgICAgICAgIGlmICghcnVsZVJlc3VsdC5hbGxvdykge1xuICAgICAgICAgICAgbG9nUmVzdWx0KHJ1bGVSZXN1bHQpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3VuZEFsbG93ID0gcnVsZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvdW5kQWxsb3cgJiYgbG9nUmVzdWx0KGZvdW5kQWxsb3cpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICBdO1xufVxuXG5leHBvcnQgY29uc3QgW3JlZ2lzdGVyQWN0aXZpdHlDb250cm9sLCBpc0FjdGl2aXR5QWxsb3dlZF0gPSBydWxlUmVnaXN0cnkoKTtcbiIsIi8qKlxuICogQWN0aXZpdHkgKHRoYXQgYXJlIHJlbGV2YW50IGZvciBwcml2YWN5KSBkZWZpbml0aW9uc1xuICpcbiAqIHJlZi4gaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xZFJ4RlVGbWhoMmpHYW56R1p2ZmtLXzZqdEhQcEhYV0Q3UXNpNktFdWdlRVxuICogJiBodHRwczovL2dpdGh1Yi5jb20vcHJlYmlkL1ByZWJpZC5qcy9pc3N1ZXMvOTU0NlxuICovXG5cbi8qKlxuICogYWNjZXNzRGV2aWNlOiBzb21lIGNvbXBvbmVudCB3YW50cyB0byByZWFkIG9yIHdyaXRlIHRvIGxvY2FsU3RvcmFnZSBvciBjb29raWVzLlxuICovXG5leHBvcnQgY29uc3QgQUNUSVZJVFlfQUNDRVNTX0RFVklDRSA9ICdhY2Nlc3NEZXZpY2UnO1xuLyoqXG4gKiBzeW5jVXNlcjogQSBiaWQgYWRhcHRlciB3YW50cyB0byBydW4gYSB1c2VyIHN5bmMuXG4gKi9cbmV4cG9ydCBjb25zdCBBQ1RJVklUWV9TWU5DX1VTRVIgPSAnc3luY1VzZXInO1xuLyoqXG4gKiBlbnJpY2hVZnBkOiBzb21lIGNvbXBvbmVudCB3YW50cyB0byBhZGQgdXNlciBmaXJzdC1wYXJ0eSBkYXRhIHRvIGJpZCByZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGNvbnN0IEFDVElWSVRZX0VOUklDSF9VRlBEID0gJ2VucmljaFVmcGQnO1xuLyoqXG4gKiBlbnJpY2hFaWRzOiBzb21lIGNvbXBvbmVudCB3YW50cyB0byBhZGQgdXNlciBJRHMgdG8gYmlkIHJlcXVlc3RzLlxuICovXG5leHBvcnQgY29uc3QgQUNUSVZJVFlfRU5SSUNIX0VJRFMgPSAnZW5yaWNoRWlkcyc7XG4vKipcbiAqIGZldGNoQmlkOiBhIGJpZGRlciB3YW50cyB0byBiaWQuXG4gKi9cbmV4cG9ydCBjb25zdCBBQ1RJVklUWV9GRVRDSF9CSURTID0gJ2ZldGNoQmlkcyc7XG5cbi8qKlxuICogcmVwb3J0QW5hbHl0aWNzOiBzb21lIGNvbXBvbmVudCB3YW50cyB0byBwaG9uZSBob21lIHdpdGggYW5hbHl0aWNzIGRhdGEuXG4gKi9cbmV4cG9ydCBjb25zdCBBQ1RJVklUWV9SRVBPUlRfQU5BTFlUSUNTID0gJ3JlcG9ydEFuYWx5dGljcyc7XG5cbi8qKlxuICogc29tZSBjb21wb25lbnQgd2FudHMgYWNjZXNzIHRvIChhbmQgc2VuZCBhbG9uZykgdXNlciBJRHNcbiAqL1xuZXhwb3J0IGNvbnN0IEFDVElWSVRZX1RSQU5TTUlUX0VJRFMgPSAndHJhbnNtaXRFaWRzJ1xuXG4vKipcbiAqIHRyYW5zbWl0VWZwZDogc29tZSBjb21wb25lbnQgd2FudHMgYWNjZXNzIHRvIChhbmQgc2VuZCBhbG9uZykgdXNlciBGUERcbiAqL1xuZXhwb3J0IGNvbnN0IEFDVElWSVRZX1RSQU5TTUlUX1VGUEQgPSAndHJhbnNtaXRVZnBkJztcblxuLyoqXG4gKiB0cmFuc21pdFByZWNpc2VHZW86IHNvbWUgY29tcG9uZW50IHdhbnRzIGFjY2VzcyB0byAoYW5kIHNlbmQgYWxvbmcpIGdlb2xvY2F0aW9uIGluZm9cbiAqL1xuZXhwb3J0IGNvbnN0IEFDVElWSVRZX1RSQU5TTUlUX1BSRUNJU0VfR0VPID0gJ3RyYW5zbWl0UHJlY2lzZUdlbyc7XG5cbi8qKlxuICogdHJhbnNtaXQgVElEOiBzb21lIGNvbXBvbmVudCB3YW50cyBhY2Nlc3Mgb3QgKGFuZCBzZW5kIGFsb25nKSB0cmFuc2FjdGlvbiBJRHNcbiAqL1xuZXhwb3J0IGNvbnN0IEFDVElWSVRZX1RSQU5TTUlUX1RJRCA9ICd0cmFuc21pdFRpZCc7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBZGFwdGVyKGNvZGUpIHtcbiAgdmFyIGJpZGRlckNvZGUgPSBjb2RlO1xuXG4gIGZ1bmN0aW9uIHNldEJpZGRlckNvZGUoY29kZSkge1xuICAgIGJpZGRlckNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QmlkZGVyQ29kZSgpIHtcbiAgICByZXR1cm4gYmlkZGVyQ29kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGxCaWRzKCkge1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjYWxsQmlkczogY2FsbEJpZHMsXG4gICAgc2V0QmlkZGVyQ29kZTogc2V0QmlkZGVyQ29kZSxcbiAgICBnZXRCaWRkZXJDb2RlOiBnZXRCaWRkZXJDb2RlXG4gIH07XG59XG4iLCJpbXBvcnQgeyBnZXRVbmlxdWVJZGVudGlmaWVyU3RyIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbi8qKlxuIFJlcXVpcmVkIHBhcmFtYXRlcnNcbiBiaWRkZXJDb2RlLFxuIGhlaWdodCxcbiB3aWR0aCxcbiBzdGF0dXNDb2RlXG4gT3B0aW9uYWwgcGFyYW1hdGVyc1xuIGFkSWQsXG4gY3BtLFxuIGFkLFxuIGFkVXJsLFxuIGRlYWxJZCxcbiBwcmljZUtleVN0cmluZztcbiAqL1xuZnVuY3Rpb24gQmlkKHN0YXR1c0NvZGUsIHtzcmMgPSAnY2xpZW50JywgYmlkZGVyID0gJycsIGJpZElkLCB0cmFuc2FjdGlvbklkLCBhdWN0aW9uSWR9ID0ge30pIHtcbiAgdmFyIF9iaWRTcmMgPSBzcmM7XG4gIHZhciBfc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGUgfHwgMDtcblxuICB0aGlzLmJpZGRlckNvZGUgPSBiaWRkZXI7XG4gIHRoaXMud2lkdGggPSAwO1xuICB0aGlzLmhlaWdodCA9IDA7XG4gIHRoaXMuc3RhdHVzTWVzc2FnZSA9IF9nZXRTdGF0dXMoKTtcbiAgdGhpcy5hZElkID0gZ2V0VW5pcXVlSWRlbnRpZmllclN0cigpO1xuICB0aGlzLnJlcXVlc3RJZCA9IGJpZElkO1xuICB0aGlzLnRyYW5zYWN0aW9uSWQgPSB0cmFuc2FjdGlvbklkO1xuICB0aGlzLmF1Y3Rpb25JZCA9IGF1Y3Rpb25JZDtcbiAgdGhpcy5tZWRpYVR5cGUgPSAnYmFubmVyJztcbiAgdGhpcy5zb3VyY2UgPSBfYmlkU3JjO1xuXG4gIGZ1bmN0aW9uIF9nZXRTdGF0dXMoKSB7XG4gICAgc3dpdGNoIChfc3RhdHVzQ29kZSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gJ1BlbmRpbmcnO1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gJ0JpZCBhdmFpbGFibGUnO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gJ0JpZCByZXR1cm5lZCBlbXB0eSBvciBlcnJvciByZXNwb25zZSc7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiAnQmlkIHRpbWVkIG91dCc7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5nZXRTdGF0dXNDb2RlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfc3RhdHVzQ29kZTtcbiAgfTtcblxuICAvLyByZXR1cm5zIHRoZSBzaXplIG9mIHRoZSBiaWQgY3JlYXRpdmUuIENvbmNhdGVuYXRpb24gb2Ygd2lkdGggYW5kIGhlaWdodCBieSDigJh44oCZLlxuICB0aGlzLmdldFNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMud2lkdGggKyAneCcgKyB0aGlzLmhlaWdodDtcbiAgfTtcblxuICB0aGlzLmdldElkZW50aWZpZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzcmM6IHRoaXMuc291cmNlLFxuICAgICAgYmlkZGVyOiB0aGlzLmJpZGRlckNvZGUsXG4gICAgICBiaWRJZDogdGhpcy5yZXF1ZXN0SWQsXG4gICAgICB0cmFuc2FjdGlvbklkOiB0aGlzLnRyYW5zYWN0aW9uSWQsXG4gICAgICBhdWN0aW9uSWQ6IHRoaXMuYXVjdGlvbklkXG4gICAgfVxuICB9O1xufVxuXG4vLyBCaWQgZmFjdG9yeSBmdW5jdGlvbi5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCaWQoc3RhdHVzQ29kZSwgaWRlbnRpZmllcnMpIHtcbiAgcmV0dXJuIG5ldyBCaWQoc3RhdHVzQ29kZSwgaWRlbnRpZmllcnMpO1xufVxuIiwiaW1wb3J0IHtkZWVwQWNjZXNzLCBsb2dFcnJvcn0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQge2NvbmZpZ30gZnJvbSAnLi4vc3JjL2NvbmZpZy5qcyc7XG5pbXBvcnQge2hvb2t9IGZyb20gJy4vaG9vay5qcyc7XG5pbXBvcnQge2F1Y3Rpb25NYW5hZ2VyfSBmcm9tICcuL2F1Y3Rpb25NYW5hZ2VyLmpzJztcblxuZXhwb3J0IGNvbnN0IE9VVFNUUkVBTSA9ICdvdXRzdHJlYW0nO1xuZXhwb3J0IGNvbnN0IElOU1RSRUFNID0gJ2luc3RyZWFtJztcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxWaWRlb0RlZmF1bHRzKGFkVW5pdCkge1xuICBjb25zdCB2aWRlbyA9IGFkVW5pdD8ubWVkaWFUeXBlcz8udmlkZW87XG4gIGlmICh2aWRlbyAhPSBudWxsICYmIHZpZGVvLnBsY210ID09IG51bGwpIHtcbiAgICBpZiAodmlkZW8uY29udGV4dCA9PT0gT1VUU1RSRUFNIHx8IFsyLCAzLCA0XS5pbmNsdWRlcyh2aWRlby5wbGFjZW1lbnQpKSB7XG4gICAgICB2aWRlby5wbGNtdCA9IDQ7XG4gICAgfSBlbHNlIGlmICh2aWRlby5jb250ZXh0ICE9PSBPVVRTVFJFQU0gJiYgWzIsIDZdLmluY2x1ZGVzKHZpZGVvLnBsYXliYWNrbWV0aG9kKSkge1xuICAgICAgdmlkZW8ucGxjbXQgPSAyO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFZpZGVvQmlkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYWRJZCBpZCBvZiB0aGUgYmlkXG4gKi9cblxuLyoqXG4gKiBWYWxpZGF0ZSB0aGF0IHRoZSBhc3NldHMgcmVxdWlyZWQgZm9yIHZpZGVvIGNvbnRleHQgYXJlIHByZXNlbnQgb24gdGhlIGJpZFxuICogQHBhcmFtIHtWaWRlb0JpZH0gYmlkIFZpZGVvIGJpZCB0byB2YWxpZGF0ZVxuICogQHBhcmFtIGluZGV4XG4gKiBAcmV0dXJuIHtCb29sZWFufSBJZiBvYmplY3QgaXMgdmFsaWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRWaWRlb0JpZChiaWQsIHtpbmRleCA9IGF1Y3Rpb25NYW5hZ2VyLmluZGV4fSA9IHt9KSB7XG4gIGNvbnN0IHZpZGVvTWVkaWFUeXBlID0gZGVlcEFjY2VzcyhpbmRleC5nZXRNZWRpYVR5cGVzKGJpZCksICd2aWRlbycpO1xuICBjb25zdCBjb250ZXh0ID0gdmlkZW9NZWRpYVR5cGUgJiYgZGVlcEFjY2Vzcyh2aWRlb01lZGlhVHlwZSwgJ2NvbnRleHQnKTtcbiAgY29uc3QgdXNlQ2FjaGVLZXkgPSB2aWRlb01lZGlhVHlwZSAmJiBkZWVwQWNjZXNzKHZpZGVvTWVkaWFUeXBlLCAndXNlQ2FjaGVLZXknKTtcbiAgY29uc3QgYWRVbml0ID0gaW5kZXguZ2V0QWRVbml0KGJpZCk7XG5cbiAgLy8gaWYgY29udGV4dCBub3QgZGVmaW5lZCBhc3N1bWUgZGVmYXVsdCAnaW5zdHJlYW0nIGZvciB2aWRlbyBiaWRzXG4gIC8vIGluc3RyZWFtIGJpZHMgcmVxdWlyZSBhIHZhc3QgdXJsIG9yIHZhc3QgeG1sIGNvbnRlbnRcbiAgcmV0dXJuIGNoZWNrVmlkZW9CaWRTZXR1cChiaWQsIGFkVW5pdCwgdmlkZW9NZWRpYVR5cGUsIGNvbnRleHQsIHVzZUNhY2hlS2V5KTtcbn1cblxuZXhwb3J0IGNvbnN0IGNoZWNrVmlkZW9CaWRTZXR1cCA9IGhvb2soJ3N5bmMnLCBmdW5jdGlvbihiaWQsIGFkVW5pdCwgdmlkZW9NZWRpYVR5cGUsIGNvbnRleHQsIHVzZUNhY2hlS2V5KSB7XG4gIGlmICh2aWRlb01lZGlhVHlwZSAmJiAodXNlQ2FjaGVLZXkgfHwgY29udGV4dCAhPT0gT1VUU1RSRUFNKSkge1xuICAgIC8vIHhtbC1vbmx5IHZpZGVvIGJpZHMgcmVxdWlyZSBhIHByZWJpZCBjYWNoZSB1cmxcbiAgICBpZiAoIWNvbmZpZy5nZXRDb25maWcoJ2NhY2hlLnVybCcpICYmIGJpZC52YXN0WG1sICYmICFiaWQudmFzdFVybCkge1xuICAgICAgbG9nRXJyb3IoYFxuICAgICAgICBUaGlzIGJpZCBjb250YWlucyBvbmx5IHZhc3RYbWwgYW5kIHdpbGwgbm90IHdvcmsgd2hlbiBhIHByZWJpZCBjYWNoZSB1cmwgaXMgbm90IHNwZWNpZmllZC5cbiAgICAgICAgVHJ5IGVuYWJsaW5nIHByZWJpZCBjYWNoZSB3aXRoICQkUFJFQklEX0dMT0JBTCQkLnNldENvbmZpZyh7IGNhY2hlOiB7dXJsOiBcIi4uLlwifSB9KTtcbiAgICAgIGApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAhIShiaWQudmFzdFVybCB8fCBiaWQudmFzdFhtbCk7XG4gIH1cblxuICAvLyBvdXRzdHJlYW0gYmlkcyByZXF1aXJlIGEgcmVuZGVyZXIgb24gdGhlIGJpZCBvciBwdWItZGVmaW5lZCBvbiBhZHVuaXRcbiAgaWYgKGNvbnRleHQgPT09IE9VVFNUUkVBTSAmJiAhdXNlQ2FjaGVLZXkpIHtcbiAgICByZXR1cm4gISEoYmlkLnJlbmRlcmVyIHx8IChhZFVuaXQgJiYgYWRVbml0LnJlbmRlcmVyKSB8fCB2aWRlb01lZGlhVHlwZS5yZW5kZXJlcik7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0sICdjaGVja1ZpZGVvQmlkU2V0dXAnKTtcbiIsImltcG9ydCB7Y29uZmlnfSBmcm9tICcuLi9jb25maWcuanMnO1xuZXhwb3J0IGNvbnN0IENPTkZJR19UT0dHTEUgPSAncGVyZm9ybWFuY2VNZXRyaWNzJztcbmNvbnN0IGdldFRpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vdyA/ICgpID0+IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSA6ICgpID0+IERhdGUubm93KCk7XG5jb25zdCBOT0RFUyA9IG5ldyBXZWFrTWFwKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXRyaWNzRmFjdG9yeSh7bm93ID0gZ2V0VGltZSwgbWtOb2RlID0gbWFrZU5vZGUsIG1rVGltZXIgPSBtYWtlVGltZXIsIG1rUmVuYW1lciA9IChyZW5hbWUpID0+IHJlbmFtZSwgbm9kZXMgPSBOT0RFU30gPSB7fSkge1xuICByZXR1cm4gZnVuY3Rpb24gbmV3TWV0cmljcygpIHtcbiAgICBmdW5jdGlvbiBtYWtlTWV0cmljcyhzZWxmLCByZW5hbWUgPSAobikgPT4gKHtmb3JFYWNoKGZuKSB7IGZuKG4pOyB9fSkpIHtcbiAgICAgIHJlbmFtZSA9IG1rUmVuYW1lcihyZW5hbWUpO1xuXG4gICAgICBmdW5jdGlvbiBhY2Nlc3NvcihzbG90KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiBzZWxmLmRmV2Fsayh7XG4gICAgICAgICAgICB2aXNpdChlZGdlLCBub2RlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG9iaiA9IG5vZGVbc2xvdF07XG4gICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqW25hbWVdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGdldFRpbWVzdGFtcCA9IGFjY2Vzc29yKCd0aW1lc3RhbXBzJyk7XG5cbiAgICAgIC8qKlxuICAgICAgICogUmVnaXN0ZXIgYSBtZXRyaWMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIG5hbWUgbWV0cmljIG5hbWVcbiAgICAgICAqIEBwYXJhbSB2YWx1ZSBtZXRyaWMgdmFsaXVlXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHNldE1ldHJpYyhuYW1lLCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBuYW1lcyA9IHJlbmFtZShuYW1lKTtcbiAgICAgICAgc2VsZi5kZldhbGsoe1xuICAgICAgICAgIGZvbGxvdyhpbkVkZ2UsIG91dEVkZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvdXRFZGdlLnByb3BhZ2F0ZSAmJiAoIWluRWRnZSB8fCAhaW5FZGdlLnN0b3BQcm9wYWdhdGlvbilcbiAgICAgICAgICB9LFxuICAgICAgICAgIHZpc2l0KGVkZ2UsIG5vZGUpIHtcbiAgICAgICAgICAgIG5hbWVzLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlZGdlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBub2RlLm1ldHJpY3NbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUuZ3JvdXBzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICBub2RlLmdyb3Vwc1tuYW1lXSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBub2RlLmdyb3Vwc1tuYW1lXS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE1hcmsgdGhlIGN1cnJlbnQgdGltZSBhcyBhIGNoZWNrcG9pbnQgd2l0aCB0aGUgZ2l2ZW4gbmFtZSwgdG8gYmUgcmVmZXJlbmNlZCBsYXRlclxuICAgICAgICogYnkgYHRpbWVTaW5jZWAgb3IgYHRpbWVCZXR3ZWVuYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gbmFtZSBjaGVja3BvaW50IG5hbWVcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gY2hlY2twb2ludChuYW1lKSB7XG4gICAgICAgIHNlbGYudGltZXN0YW1wc1tuYW1lXSA9IG5vdygpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCB0aGUgdGFtZSBwYXNzZWQgc2luY2UgYGNoZWNrcG9pbnRgLCBhbmQgb3B0aW9uYWxseSBzYXZlIGl0IGFzIGEgbWV0cmljLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSBjaGVja3BvaW50IGNoZWNrcG9pbnQgbmFtZVxuICAgICAgICogQHBhcmFtIG1ldHJpYz8gbWV0cmljIG5hbWVcbiAgICAgICAqIEByZXR1cm4ge251bWJlcn0gdGltZSBiZXR3ZWVuIG5vdyBhbmQgYGNoZWNrcG9pbnRgXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHRpbWVTaW5jZShjaGVja3BvaW50LCBtZXRyaWMpIHtcbiAgICAgICAgY29uc3QgdHMgPSBnZXRUaW1lc3RhbXAoY2hlY2twb2ludCk7XG4gICAgICAgIGNvbnN0IGVsYXBzZWQgPSB0cyAhPSBudWxsID8gbm93KCkgLSB0cyA6IG51bGw7XG4gICAgICAgIGlmIChtZXRyaWMgIT0gbnVsbCkge1xuICAgICAgICAgIHNldE1ldHJpYyhtZXRyaWMsIGVsYXBzZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGFwc2VkO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCB0aGUgdGltZSBwYXNzZWQgYmV0d2VlbiBgc3RhcnRDaGVja3BvaW50YCBhbmQgYGVuZENoZWNrcG9pbnRgLCBvcHRpb25hbGx5IHNhdmluZyBpdCBhcyBhIG1ldHJpYy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gc3RhcnRDaGVja3BvaW50IGJlZ2luIGNoZWNrcG9pbnRcbiAgICAgICAqIEBwYXJhbSBlbmRDaGVja3BvaW50IGVuZCBjaGVja3BvaW50XG4gICAgICAgKiBAcGFyYW0gbWV0cmljPyBtZXRyaWMgbmFtZVxuICAgICAgICogQHJldHVybiB7bnVtYmVyfSB0aW1lIHBhc3NlZCBiZXR3ZWVuIGBzdGFydENoZWNrcG9pbnRgIGFuZCBgZW5kQ2hlY2twb2ludGBcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gdGltZUJldHdlZW4oc3RhcnRDaGVja3BvaW50LCBlbmRDaGVja3BvaW50LCBtZXRyaWMpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBnZXRUaW1lc3RhbXAoc3RhcnRDaGVja3BvaW50KTtcbiAgICAgICAgY29uc3QgZW5kID0gZ2V0VGltZXN0YW1wKGVuZENoZWNrcG9pbnQpO1xuICAgICAgICBjb25zdCBlbGFwc2VkID0gc3RhcnQgIT0gbnVsbCAmJiBlbmQgIT0gbnVsbCA/IGVuZCAtIHN0YXJ0IDogbnVsbDtcbiAgICAgICAgaWYgKG1ldHJpYyAhPSBudWxsKSB7XG4gICAgICAgICAgc2V0TWV0cmljKG1ldHJpYywgZWxhcHNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsYXBzZWQ7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgc3RvcHMgYSB0aW1lIG1lYXN1cmUgYW5kIHNhdmVzIGl0IGFzIGEgbWV0cmljLlxuICAgICAgICpcbiAgICAgICAqIEB0eXBlZGVmIHtmdW5jdGlvbigpOiB2b2lkfSBNZXRyaWNzVGltZXJcbiAgICAgICAqIEB0ZW1wbGF0ZSB7ZnVuY3Rpb259IEZcbiAgICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oRik6IEZ9IHN0b3BCZWZvcmUgcmV0dXJucyBhIHdyYXBwZXIgYXJvdW5kIHRoZSBnaXZlbiBmdW5jdGlvbiB0aGF0IGJlZ2lucyBieVxuICAgICAgICogICBzdG9wcGluZyB0aGlzIHRpbWUgbWVhc3VyZS5cbiAgICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oRik6IEZ9IHN0b3BBZnRlciByZXR1cm5zIGEgd3JhcHBlciBhcm91bmQgdGhlIGdpdmVuIGZ1bmN0aW9uIHRoYXQgZW5kcyBieVxuICAgICAgICogICBzdG9wcGluZyB0aGlzIHRpbWUgbWVhc3VyZS5cbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIFN0YXJ0IG1lYXN1cmluZyBhIHRpbWUgbWV0cmljIHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIG5hbWUgbWV0cmljIG5hbWVcbiAgICAgICAqIEByZXR1cm4ge01ldHJpY3NUaW1lcn1cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gc3RhcnRUaW1pbmcobmFtZSkge1xuICAgICAgICByZXR1cm4gbWtUaW1lcihub3csICh2YWwpID0+IHNldE1ldHJpYyhuYW1lLCB2YWwpKVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJ1biBmbiBhbmQgbWVhc3VyZSB0aGUgdGltZSBzcGVudCBpbiBpdC5cbiAgICAgICAqXG4gICAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAgICogQHBhcmFtIG5hbWUgdGhlIG5hbWUgdG8gdXNlIGZvciB0aGUgbWVhc3VyZWQgdGltZSBtZXRyaWNcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogVH0gZm5cbiAgICAgICAqIEByZXR1cm4ge1R9IHRoZSByZXR1cm4gdmFsdWUgb2YgYGZuYFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBtZWFzdXJlVGltZShuYW1lLCBmbikge1xuICAgICAgICByZXR1cm4gc3RhcnRUaW1pbmcobmFtZSkuc3RvcEFmdGVyKGZuKSgpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlZGVmIHtmdW5jdGlvbjogVH0gSG9va0ZuXG4gICAgICAgKiBAcHJvcGVydHkge2Z1bmN0aW9uKFQpOiB2b2lkfSBiYWlsXG4gICAgICAgKlxuICAgICAgICogQHRlbXBsYXRlIFRcbiAgICAgICAqIEB0eXBlZGVmIHtUOiBIb29rRm59IFRpbWVkSG9va0ZuXG4gICAgICAgKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IHN0b3BUaW1pbmdcbiAgICAgICAqIEBwcm9wZXJ0eSB7VH0gdW50aW1lZFxuICAgICAgICovXG5cbiAgICAgIC8qKlxuICAgICAgICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBtZWFzdXJpbmcgdGltZSBzcGVudCBpbiBhIGAuYmVmb3JlYCBvciBgLmFmdGVyYCBob29rLlxuICAgICAgICpcbiAgICAgICAqIEB0ZW1wbGF0ZSBUXG4gICAgICAgKiBAcGFyYW0gbmFtZSBtZXRyaWMgbmFtZVxuICAgICAgICogQHBhcmFtIHtIb29rRm59IG5leHQgdGhlIGhvb2sncyBgbmV4dGAgKGZpcnN0KSBhcmd1bWVudFxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihUaW1lZEhvb2tGbik6IFR9IGZuIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHJ1biBpbW1lZGlhdGVseTsgaXQgdGFrZXMgYG5leHRgLFxuICAgICAgICogICAgd2hlcmUgYm90aCBgbmV4dGAgYW5kIGBuZXh0LmJhaWxgIGF1dG9tYXRpY2FsbHlcbiAgICAgICAqICAgIGNhbGwgYHN0b3BUaW1pbmdgIGJlZm9yZSBjb250aW51aW5nIHdpdGggdGhlIG9yaWdpbmFsIGhvb2suXG4gICAgICAgKiBAcmV0dXJuIHtUfSBmbidzIHJldHVybiB2YWx1ZVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBtZWFzdXJlSG9va1RpbWUobmFtZSwgbmV4dCwgZm4pIHtcbiAgICAgICAgY29uc3Qgc3RvcFRpbWluZyA9IHN0YXJ0VGltaW5nKG5hbWUpO1xuICAgICAgICByZXR1cm4gZm4oKGZ1bmN0aW9uIChvcmlnKSB7XG4gICAgICAgICAgY29uc3QgbmV4dCA9IHN0b3BUaW1pbmcuc3RvcEJlZm9yZShvcmlnKTtcbiAgICAgICAgICBuZXh0LmJhaWwgPSBvcmlnLmJhaWwgJiYgc3RvcFRpbWluZy5zdG9wQmVmb3JlKG9yaWcuYmFpbCk7XG4gICAgICAgICAgbmV4dC5zdG9wVGltaW5nID0gc3RvcFRpbWluZztcbiAgICAgICAgICBuZXh0LnVudGltZWQgPSBvcmlnO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9KShuZXh0KSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IGFsbCByZWdpc3RlcmVkIG1ldHJpY3MuXG4gICAgICAgKiBAcmV0dXJuIHt7fX1cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZ2V0TWV0cmljcygpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHt9XG4gICAgICAgIHNlbGYuZGZXYWxrKHtcbiAgICAgICAgICB2aXNpdChlZGdlLCBub2RlKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCAhZWRnZSB8fCBlZGdlLmluY2x1ZGVHcm91cHMgPyBub2RlLmdyb3VwcyA6IG51bGwsIG5vZGUubWV0cmljcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhbmQgcmV0dXJuIGEgbmV3IG1ldHJpY3Mgb2JqZWN0IHRoYXQgc3RhcnRzIGFzIGEgdmlldyBvbiBhbGwgbWV0cmljcyByZWdpc3RlcmVkIGhlcmUsXG4gICAgICAgKiBhbmQgLSBieSBkZWZhdWx0IC0gYWxzbyBwcm9wYWdhdGVzIGFsbCBuZXcgbWV0cmljcyBoZXJlLlxuICAgICAgICpcbiAgICAgICAqIFByb3BhZ2F0ZWQgbWV0cmljcyBhcmUgZ3JvdXBlZCB0b2dldGhlciwgYW5kIGludGVuZGVkIGZvciByZXBlYXRlZCBvcGVyYXRpb25zLiBGb3IgZXhhbXBsZSwgd2l0aCB0aGUgZm9sbG93aW5nOlxuICAgICAgICpcbiAgICAgICAqIGBgYFxuICAgICAgICogY29uc3QgbWV0cmljcyA9IG5ld01ldHJpY3MoKTtcbiAgICAgICAqIGNvbnN0IHJlcXVlc3RzID0gbWV0cmljcy5tZWFzdXJlVGltZSgnYnVpbGRSZXF1ZXN0cycsIGJ1aWxkUmVxdWVzdHMpXG4gICAgICAgKiByZXF1ZXN0cy5mb3JFYWNoKChyZXEpID0+IHtcbiAgICAgICAqICAgY29uc3QgcmVxdWVzdE1ldHJpY3MgPSBtZXRyaWNzLmZvcmsoKTtcbiAgICAgICAqICAgcmVxdWVzdE1ldHJpY3MubWVhc3VyZVRpbWUoJ3Byb2Nlc3NSZXF1ZXN0JywgKCkgPT4gcHJvY2Vzc1JlcXVlc3QocmVxKTtcbiAgICAgICAqIH0pXG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBpZiBgYnVpbGRSZXF1ZXN0c2AgdGFrZXMgMTBtcyBhbmQgcmV0dXJucyAzIG9iamVjdHMsIHdoaWNoIHJlc3BlY3RpdmVseSB0YWtlIDEwMCwgMjAwLCBhbmQgMzAwbXMgaW4gYHByb2Nlc3NSZXF1ZXN0YCwgdGhlblxuICAgICAgICogdGhlIGZpbmFsIGBtZXRyaWNzLmdldE1ldHJpY3MoKWAgd291bGQgYmU6XG4gICAgICAgKlxuICAgICAgICogYGBgXG4gICAgICAgKiB7XG4gICAgICAgKiAgICBidWlsZFJlcXVlc3RzOiAxMCxcbiAgICAgICAqICAgIHByb2Nlc3NSZXF1ZXN0OiBbMTAwLCAyMDAsIDMwMF1cbiAgICAgICAqIH1cbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIHdoaWxlIHRoZSBpbm5lciBgcmVxdWVzdE1ldHJpY3MuZ2V0TWV0cmljcygpYCB3b3VsZCBiZTpcbiAgICAgICAqXG4gICAgICAgKiBgYGBcbiAgICAgICAqIHtcbiAgICAgICAqICAgYnVpbGRSZXF1ZXN0czogMTAsXG4gICAgICAgKiAgIHByb2Nlc3NSZXF1ZXN0OiAxMDAgLy8gb3IgMjAwIGZvciB0aGUgMm5kIGxvb3AsIGV0Y1xuICAgICAgICogfVxuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSBwcm9wYWdhdGUgaWYgZmFsc2UsIHRoZSBmb3JrZWQgbWV0cmljcyB3aWxsIG5vdCBiZSBwcm9wYWdhdGVkIGhlcmVcbiAgICAgICAqIEBwYXJhbSBzdG9wUHJvcGFnYXRpb24gaWYgdHJ1ZSwgcHJvcGFnYXRpb24gZnJvbSB0aGUgbmV3IG1ldHJpY3MgaXMgc3RvcHBlZCBoZXJlIC0gaW5zdGVhZCBvZlxuICAgICAgICogICBjb250aW51aW5nIHVwIHRoZSBjaGFpbiAoaWYgZm9yIGV4YW1wbGUgdGhlc2UgbWV0cmljcyB3ZXJlIHRoZW1zZWx2ZXMgY3JlYXRlZCB0aHJvdWdoIGAuZm9yaygpYClcbiAgICAgICAqIEBwYXJhbSBpbmNsdWRlR3JvdXBzIGlmIHRydWUsIHRoZSBmb3JrZWQgbWV0cmljcyB3aWxsIGFsc28gcmVwbGljYXRlIG1ldHJpY3MgdGhhdCB3ZXJlIHByb3BhZ2F0ZWRcbiAgICAgICAqICAgaGVyZSBmcm9tIGVsc2V3aGVyZS4gRm9yIGV4YW1wbGU6XG4gICAgICAgKiAgIGBgYFxuICAgICAgICogICBjb25zdCBtZXRyaWNzID0gbmV3TWV0cmljcygpO1xuICAgICAgICogICBjb25zdCBvcDEgPSBtZXRyaWNzLmZvcmsoKTtcbiAgICAgICAqICAgY29uc3Qgd2l0aG91dEdyb3VwcyA9IG1ldHJpY3MuZm9yaygpO1xuICAgICAgICogICBjb25zdCB3aXRoR3JvdXBzID0gbWV0cmljcy5mb3JrKHtpbmNsdWRlR3JvdXBzOiB0cnVlfSk7XG4gICAgICAgKiAgIG9wMS5zZXRNZXRyaWMoJ2ZvbycsICdiYXInKTtcbiAgICAgICAqICAgd2l0aG91dEdyb3Vwcy5nZXRNZXRyaWNzKCkgLy8ge31cbiAgICAgICAqICAgd2l0aEdyb3Vwcy5nZXRNZXRyaWNzKCkgLy8ge2ZvbzogWydiYXInXX1cbiAgICAgICAqICAgYGBgXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGZvcmsoe3Byb3BhZ2F0ZSA9IHRydWUsIHN0b3BQcm9wYWdhdGlvbiA9IGZhbHNlLCBpbmNsdWRlR3JvdXBzID0gZmFsc2V9ID0ge30pIHtcbiAgICAgICAgcmV0dXJuIG1ha2VNZXRyaWNzKG1rTm9kZShbW3NlbGYsIHtwcm9wYWdhdGUsIHN0b3BQcm9wYWdhdGlvbiwgaW5jbHVkZUdyb3Vwc31dXSksIHJlbmFtZSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogSm9pbiBgb3RoZXJNZXRyaWNzYCB3aXRoIHRoZXNlOyBhbGwgbWV0cmljcyBmcm9tIGBvdGhlck1ldHJpY3NgIHdpbGwgKGJ5IGRlZmF1bHQpIGJlIHByb3BhZ2F0ZWQgaGVyZSxcbiAgICAgICAqIGFuZCBhbGwgbWV0cmljcyBmcm9tIGhlcmUgd2lsbCBiZSBpbmNsdWRlZCBpbiBgb3RoZXJNZXRyaWNzYC5cbiAgICAgICAqXG4gICAgICAgKiBgcHJvcGFnYXRlYCwgYHN0b3BQcm9wYWdhdGlvbmAgYW5kIGBpbmNsdWRlR3JvdXBzYCBoYXZlIHRoZSBzYW1lIHNlbWFudGljcyBhcyBpbiBgLmZvcmsoKWAuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGpvaW4ob3RoZXJNZXRyaWNzLCB7cHJvcGFnYXRlID0gdHJ1ZSwgc3RvcFByb3BhZ2F0aW9uID0gZmFsc2UsIGluY2x1ZGVHcm91cHMgPSBmYWxzZX0gPSB7fSkge1xuICAgICAgICBjb25zdCBvdGhlciA9IG5vZGVzLmdldChvdGhlck1ldHJpY3MpO1xuICAgICAgICBpZiAob3RoZXIgIT0gbnVsbCkge1xuICAgICAgICAgIG90aGVyLmFkZFBhcmVudChzZWxmLCB7cHJvcGFnYXRlLCBzdG9wUHJvcGFnYXRpb24sIGluY2x1ZGVHcm91cHN9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIHJldHVybiBhIHZlcnNpb24gb2YgdGhlc2UgbWV0cmljcyB3aGVyZSBhbGwgbmV3IG1ldHJpY3MgYXJlIHJlbmFtZWQgYWNjb3JkaW5nIHRvIGByZW5hbWVGbmAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihTdHJpbmcpOiBBcnJheVtTdHJpbmddfSByZW5hbWVGblxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiByZW5hbWVXaXRoKHJlbmFtZUZuKSB7XG4gICAgICAgIHJldHVybiBtYWtlTWV0cmljcyhzZWxmLCByZW5hbWVGbik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlIGEgbmV3IG1ldHJpY3Mgb2JqZWN0IHRoYXQgdXNlcyB0aGUgc2FtZSBwcm9wYWdhdGlvbiBhbmQgcmVuYW1pbmcgcnVsZXMgYXMgdGhpcyBvbmUuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIG5ld01ldHJpY3MoKSB7XG4gICAgICAgIHJldHVybiBtYWtlTWV0cmljcyhzZWxmLm5ld1NpYmxpbmcoKSwgcmVuYW1lKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWV0cmljcyA9IHtcbiAgICAgICAgc3RhcnRUaW1pbmcsXG4gICAgICAgIG1lYXN1cmVUaW1lLFxuICAgICAgICBtZWFzdXJlSG9va1RpbWUsXG4gICAgICAgIGNoZWNrcG9pbnQsXG4gICAgICAgIHRpbWVTaW5jZSxcbiAgICAgICAgdGltZUJldHdlZW4sXG4gICAgICAgIHNldE1ldHJpYyxcbiAgICAgICAgZ2V0TWV0cmljcyxcbiAgICAgICAgZm9yayxcbiAgICAgICAgam9pbixcbiAgICAgICAgbmV3TWV0cmljcyxcbiAgICAgICAgcmVuYW1lV2l0aCxcbiAgICAgICAgdG9KU09OKCkge1xuICAgICAgICAgIHJldHVybiBnZXRNZXRyaWNzKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBub2Rlcy5zZXQobWV0cmljcywgc2VsZik7XG4gICAgICByZXR1cm4gbWV0cmljcztcbiAgICB9XG5cbiAgICByZXR1cm4gbWFrZU1ldHJpY3MobWtOb2RlKFtdKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JhcEZuKGZuLCBiZWZvcmUsIGFmdGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYmVmb3JlICYmIGJlZm9yZSgpO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgYWZ0ZXIgJiYgYWZ0ZXIoKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1ha2VUaW1lcihub3csIGNiKSB7XG4gIGNvbnN0IHN0YXJ0ID0gbm93KCk7XG4gIGxldCBkb25lID0gZmFsc2U7XG4gIGZ1bmN0aW9uIHN0b3BUaW1pbmcoKSB7XG4gICAgaWYgKCFkb25lKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RhbmRhcmQvbm8tY2FsbGJhY2stbGl0ZXJhbFxuICAgICAgY2Iobm93KCkgLSBzdGFydCk7XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgc3RvcFRpbWluZy5zdG9wQmVmb3JlID0gKGZuKSA9PiB3cmFwRm4oZm4sIHN0b3BUaW1pbmcpO1xuICBzdG9wVGltaW5nLnN0b3BBZnRlciA9IChmbikgPT4gd3JhcEZuKGZuLCBudWxsLCBzdG9wVGltaW5nKTtcbiAgcmV0dXJuIHN0b3BUaW1pbmc7XG59XG5cbmZ1bmN0aW9uIG1ha2VOb2RlKHBhcmVudHMpIHtcbiAgcmV0dXJuIHtcbiAgICBtZXRyaWNzOiB7fSxcbiAgICB0aW1lc3RhbXBzOiB7fSxcbiAgICBncm91cHM6IHt9LFxuICAgIGFkZFBhcmVudChub2RlLCBlZGdlKSB7XG4gICAgICBwYXJlbnRzLnB1c2goW25vZGUsIGVkZ2VdKTtcbiAgICB9LFxuICAgIG5ld1NpYmxpbmcoKSB7XG4gICAgICByZXR1cm4gbWFrZU5vZGUocGFyZW50cy5zbGljZSgpKTtcbiAgICB9LFxuICAgIGRmV2Fsayh7dmlzaXQsIGZvbGxvdyA9ICgpID0+IHRydWUsIHZpc2l0ZWQgPSBuZXcgU2V0KCksIGluRWRnZX0gPSB7fSkge1xuICAgICAgbGV0IHJlcztcbiAgICAgIGlmICghdmlzaXRlZC5oYXModGhpcykpIHtcbiAgICAgICAgdmlzaXRlZC5hZGQodGhpcyk7XG4gICAgICAgIHJlcyA9IHZpc2l0KGluRWRnZSwgdGhpcyk7XG4gICAgICAgIGlmIChyZXMgIT0gbnVsbCkgcmV0dXJuIHJlcztcbiAgICAgICAgZm9yIChjb25zdCBbcGFyZW50LCBvdXRFZGdlXSBvZiBwYXJlbnRzKSB7XG4gICAgICAgICAgaWYgKGZvbGxvdyhpbkVkZ2UsIG91dEVkZ2UpKSB7XG4gICAgICAgICAgICByZXMgPSBwYXJlbnQuZGZXYWxrKHt2aXNpdCwgZm9sbG93LCB2aXNpdGVkLCBpbkVkZ2U6IG91dEVkZ2V9KTtcbiAgICAgICAgICAgIGlmIChyZXMgIT0gbnVsbCkgcmV0dXJuIHJlcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmNvbnN0IG51bGxNZXRyaWNzID0gKCgpID0+IHtcbiAgY29uc3Qgbm9wID0gZnVuY3Rpb24gKCkge307XG4gIGNvbnN0IGVtcHR5ID0gKCkgPT4gKHt9KTtcbiAgY29uc3Qgbm9uZSA9IHtmb3JFYWNoOiBub3B9O1xuICBjb25zdCBudWxsVGltZXIgPSAoKSA9PiBudWxsO1xuICBudWxsVGltZXIuc3RvcEJlZm9yZSA9IChmbikgPT4gZm47XG4gIG51bGxUaW1lci5zdG9wQWZ0ZXIgPSAoZm4pID0+IGZuO1xuICBjb25zdCBudWxsTm9kZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgIHtkZldhbGs6IG5vcCwgbmV3U2libGluZzogKCkgPT4gbnVsbE5vZGUsIGFkZFBhcmVudDogbm9wfSxcbiAgICBPYmplY3QuZnJvbUVudHJpZXMoWydtZXRyaWNzJywgJ3RpbWVzdGFtcHMnLCAnZ3JvdXBzJ10ubWFwKHByb3AgPT4gW3Byb3AsIHtnZXQ6IGVtcHR5fV0pKSk7XG4gIHJldHVybiBtZXRyaWNzRmFjdG9yeSh7XG4gICAgbm93OiAoKSA9PiAwLFxuICAgIG1rTm9kZTogKCkgPT4gbnVsbE5vZGUsXG4gICAgbWtSZW5hbWVyOiAoKSA9PiAoKSA9PiBub25lLFxuICAgIG1rVGltZXI6ICgpID0+IG51bGxUaW1lcixcbiAgICBub2Rlczoge2dldDogbm9wLCBzZXQ6IG5vcH1cbiAgfSkoKTtcbn0pKCk7XG5cbmxldCBlbmFibGVkID0gdHJ1ZTtcbmNvbmZpZy5nZXRDb25maWcoQ09ORklHX1RPR0dMRSwgKGNmZykgPT4geyBlbmFibGVkID0gISFjZmdbQ09ORklHX1RPR0dMRV0gfSk7XG5cbi8qKlxuICogY29udmVuaWVuY2UgZmFsbGJhY2sgZnVuY3Rpb24gZm9yIG1ldHJpY3MgdGhhdCBtYXkgYmUgdW5kZWZpbmVkLCBlc3BlY2lhbGx5IGR1cmluZyB0ZXN0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU1ldHJpY3MobWV0cmljcykge1xuICByZXR1cm4gKGVuYWJsZWQgJiYgbWV0cmljcykgfHwgbnVsbE1ldHJpY3M7XG59XG5cbmV4cG9ydCBjb25zdCBuZXdNZXRyaWNzID0gKCgpID0+IHtcbiAgY29uc3QgbWFrZU1ldHJpY3MgPSBtZXRyaWNzRmFjdG9yeSgpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlbmFibGVkID8gbWFrZU1ldHJpY3MoKSA6IG51bGxNZXRyaWNzO1xuICB9XG59KSgpO1xuXG5leHBvcnQgZnVuY3Rpb24gaG9va1RpbWVyKHByZWZpeCwgZ2V0TWV0cmljcykge1xuICByZXR1cm4gZnVuY3Rpb24obmFtZSwgaG9va0ZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0LCAuLi5hcmdzKSB7XG4gICAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICAgIHJldHVybiB1c2VNZXRyaWNzKGdldE1ldHJpY3MuYXBwbHkodGhhdCwgYXJncykpLm1lYXN1cmVIb29rVGltZShwcmVmaXggKyBuYW1lLCBuZXh0LCBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgICByZXR1cm4gaG9va0ZuLmNhbGwodGhhdCwgbmV4dCwgLi4uYXJncyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHRpbWVkQXVjdGlvbkhvb2sgPSBob29rVGltZXIoJ3JlcXVlc3RCaWRzLicsIChyZXEpID0+IHJlcS5tZXRyaWNzKTtcbmV4cG9ydCBjb25zdCB0aW1lZEJpZFJlc3BvbnNlSG9vayA9IGhvb2tUaW1lcignYWRkQmlkUmVzcG9uc2UuJywgKF8sIGJpZCkgPT4gYmlkLm1ldHJpY3MpXG4iLCJpbXBvcnQgYWRhcHRlck1hbmFnZXIgZnJvbSAnLi4vYWRhcHRlck1hbmFnZXIuanMnO1xuaW1wb3J0IHthY3Rpdml0eVBhcmFtc0J1aWxkZXJ9IGZyb20gJy4vcGFyYW1zLmpzJztcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciBidWlsZGluZyBjb21tb24gYWN0aXZpdHkgcGFyYW1ldGVycyAtIGJyb2tlbiBvdXQgdG8gaXRzIG93blxuICogZmlsZSB0byBhdm9pZCBjaXJjdWxhciBpbXBvcnRzLlxuICovXG5leHBvcnQgY29uc3QgYWN0aXZpdHlQYXJhbXMgPSBhY3Rpdml0eVBhcmFtc0J1aWxkZXIoKGFsaWFzKSA9PiBhZGFwdGVyTWFuYWdlci5yZXNvbHZlQWxpYXMoYWxpYXMpKTtcbiIsImltcG9ydCBBZGFwdGVyIGZyb20gJy4uL2FkYXB0ZXIuanMnO1xuaW1wb3J0IGFkYXB0ZXJNYW5hZ2VyIGZyb20gJy4uL2FkYXB0ZXJNYW5hZ2VyLmpzJztcbmltcG9ydCB7Y29uZmlnfSBmcm9tICcuLi9jb25maWcuanMnO1xuaW1wb3J0IHtjcmVhdGVCaWR9IGZyb20gJy4uL2JpZGZhY3RvcnkuanMnO1xuaW1wb3J0IHt1c2VyU3luY30gZnJvbSAnLi4vdXNlclN5bmMuanMnO1xuaW1wb3J0IHtuYXRpdmVCaWRJc1ZhbGlkfSBmcm9tICcuLi9uYXRpdmUuanMnO1xuaW1wb3J0IHtpc1ZhbGlkVmlkZW9CaWR9IGZyb20gJy4uL3ZpZGVvLmpzJztcbmltcG9ydCBDT05TVEFOVFMgZnJvbSAnLi4vY29uc3RhbnRzLmpzb24nO1xuaW1wb3J0ICogYXMgZXZlbnRzIGZyb20gJy4uL2V2ZW50cy5qcyc7XG5pbXBvcnQge2luY2x1ZGVzfSBmcm9tICcuLi9wb2x5ZmlsbC5qcyc7XG5pbXBvcnQge1xuICBkZWxheUV4ZWN1dGlvbixcbiAgaXNBcnJheSxcbiAgaXNQbGFpbk9iamVjdCxcbiAgbG9nRXJyb3IsXG4gIGxvZ1dhcm4sIG1lbW9pemUsXG4gIHBhcnNlUXVlcnlTdHJpbmdQYXJhbWV0ZXJzLFxuICBwYXJzZVNpemVzSW5wdXQsIHBpY2ssXG4gIHVuaXF1ZXNcbn0gZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHtob29rfSBmcm9tICcuLi9ob29rLmpzJztcbmltcG9ydCB7YXVjdGlvbk1hbmFnZXJ9IGZyb20gJy4uL2F1Y3Rpb25NYW5hZ2VyLmpzJztcbmltcG9ydCB7YmlkZGVyU2V0dGluZ3N9IGZyb20gJy4uL2JpZGRlclNldHRpbmdzLmpzJztcbmltcG9ydCB7dXNlTWV0cmljc30gZnJvbSAnLi4vdXRpbHMvcGVyZk1ldHJpY3MuanMnO1xuaW1wb3J0IHtpc0FjdGl2aXR5QWxsb3dlZH0gZnJvbSAnLi4vYWN0aXZpdGllcy9ydWxlcy5qcyc7XG5pbXBvcnQge2FjdGl2aXR5UGFyYW1zfSBmcm9tICcuLi9hY3Rpdml0aWVzL2FjdGl2aXR5UGFyYW1zLmpzJztcbmltcG9ydCB7TU9EVUxFX1RZUEVfQklEREVSfSBmcm9tICcuLi9hY3Rpdml0aWVzL21vZHVsZXMuanMnO1xuaW1wb3J0IHtBQ1RJVklUWV9UUkFOU01JVF9USUQsIEFDVElWSVRZX1RSQU5TTUlUX1VGUER9IGZyb20gJy4uL2FjdGl2aXRpZXMvYWN0aXZpdGllcy5qcyc7XG5cbi8qKlxuICogVGhpcyBmaWxlIGFpbXMgdG8gc3VwcG9ydCBBZGFwdGVycyBkdXJpbmcgdGhlIFByZWJpZCAwLnggLT4gMS54IHRyYW5zaXRpb24uXG4gKlxuICogUHJlYmlkIDEueCBhbmQgUHJlYmlkIDAueCB3aWxsIGJlIGluIHNlcGFyYXRlIGJyYW5jaGVzLS1wZXJoYXBzIGZvciBhIGxvbmcgdGltZS5cbiAqIFRoaXMgZnVuY3Rpb24gZGVmaW5lcyBhbiBBUEkgZm9yIGFkYXB0ZXIgY29uc3RydWN0aW9uIHdoaWNoIGlzIGNvbXBhdGlibGUgd2l0aCBib3RoIHZlcnNpb25zLlxuICogQWRhcHRlcnMgd2hpY2ggdXNlIGl0IGNhbiBtYWludGFpbiB0aGVpciBjb2RlIGluIG1hc3RlciwgYW5kIG9ubHkgdGhpcyBmaWxlIHdpbGwgbmVlZCB0byBjaGFuZ2VcbiAqIGluIHRoZSAxLnggYnJhbmNoLlxuICpcbiAqIFR5cGljYWwgdXNhZ2UgbG9va3Mgc29tZXRoaW5nIGxpa2U6XG4gKlxuICogY29uc3QgYWRhcHRlciA9IHJlZ2lzdGVyQmlkZGVyKHtcbiAqICAgY29kZTogJ215QmlkZGVyQ29kZScsXG4gKiAgIGFsaWFzZXM6IFsnYWxpYXMxJywgJ2FsaWFzMiddLFxuICogICBzdXBwb3J0ZWRNZWRpYVR5cGVzOiBbJ3ZpZGVvJywgJ25hdGl2ZSddLFxuICogICBpc0JpZFJlcXVlc3RWYWxpZDogZnVuY3Rpb24ocGFyYW1zT2JqZWN0KSB7IHJldHVybiB0cnVlL2ZhbHNlIH0sXG4gKiAgIGJ1aWxkUmVxdWVzdHM6IGZ1bmN0aW9uKGJpZFJlcXVlc3RzLCBiaWRkZXJSZXF1ZXN0KSB7IHJldHVybiBzb21lIFNlcnZlclJlcXVlc3QocykgfSxcbiAqICAgaW50ZXJwcmV0UmVzcG9uc2U6IGZ1bmN0aW9uKG9uZVNlcnZlclJlc3BvbnNlKSB7IHJldHVybiBzb21lIEJpZHMsIG9yIHRocm93IGFuIGVycm9yLiB9XG4gKiB9KTtcbiAqXG4gKiBAc2VlIEJpZGRlclNwZWMgZm9yIHRoZSBmdWxsIEFQSSBhbmQgbW9yZSB0aG9yb3VnaCBkZXNjcmlwdGlvbnMuXG4gKlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gQmlkZGVyU3BlYyBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgYWRhcHRlci1zcGVjaWZpYyBmdW5jdGlvbnMgbmVlZGVkIHRvXG4gKiBtYWtlIGEgQmlkZGVyLlxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb2RlIEEgY29kZSB3aGljaCB3aWxsIGJlIHVzZWQgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyBiaWRkZXIuIFRoaXMgc2hvdWxkIGJlIHRoZSBzYW1lXG4gKiAgIG9uZSBhcyBpcyB1c2VkIGluIHRoZSBjYWxsIHRvIHJlZ2lzdGVyQmlkQWRhcHRlclxuICogQHByb3BlcnR5IHtzdHJpbmdbXX0gW2FsaWFzZXNdIEEgbGlzdCBvZiBhbGlhc2VzIHdoaWNoIHNob3VsZCBhbHNvIHJlc29sdmUgdG8gdGhpcyBiaWRkZXIuXG4gKiBAcHJvcGVydHkge01lZGlhVHlwZVtdfSBbc3VwcG9ydGVkTWVkaWFUeXBlc106IEEgbGlzdCBvZiBNZWRpYSBUeXBlcyB3aGljaCB0aGUgYWRhcHRlciBzdXBwb3J0cy5cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24ob2JqZWN0KTogYm9vbGVhbn0gaXNCaWRSZXF1ZXN0VmFsaWQgRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gYmlkIGhhcyBhbGwgdGhlIHBhcmFtc1xuICogICBuZWVkZWQgdG8gbWFrZSBhIHZhbGlkIHJlcXVlc3QuXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKEJpZFJlcXVlc3RbXSwgYmlkZGVyUmVxdWVzdCk6IFNlcnZlclJlcXVlc3R8U2VydmVyUmVxdWVzdFtdfSBidWlsZFJlcXVlc3RzIEJ1aWxkIHRoZSByZXF1ZXN0IHRvIHRoZSBTZXJ2ZXJcbiAqICAgd2hpY2ggcmVxdWVzdHMgQmlkcyBmb3IgdGhlIGdpdmVuIGFycmF5IG9mIFJlcXVlc3RzLiBFYWNoIEJpZFJlcXVlc3QgaW4gdGhlIGFyZ3VtZW50IGFycmF5IGlzIGd1YXJhbnRlZWQgdG8gaGF2ZVxuICogICBwYXNzZWQgdGhlIGlzQmlkUmVxdWVzdFZhbGlkKCkgdGVzdC5cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oU2VydmVyUmVzcG9uc2UsIEJpZFJlcXVlc3QpOiBCaWRbXX0gaW50ZXJwcmV0UmVzcG9uc2UgR2l2ZW4gYSBzdWNjZXNzZnVsIHJlc3BvbnNlIGZyb20gdGhlIFNlcnZlcixcbiAqICAgaW50ZXJwcmV0IGl0IGFuZCByZXR1cm4gdGhlIEJpZCBvYmplY3RzLiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgcnVuIGluc2lkZSBhIHRyeS9jYXRjaC5cbiAqICAgSWYgaXQgdGhyb3dzIGFueSBlcnJvcnMsIHlvdXIgYmlkcyB3aWxsIGJlIGRpc2NhcmRlZC5cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oU3luY09wdGlvbnMsIFNlcnZlclJlc3BvbnNlW10pOiBVc2VyU3luY1tdfSBbZ2V0VXNlclN5bmNzXSBHaXZlbiBhbiBhcnJheSBvZiBhbGwgdGhlIHJlc3BvbnNlc1xuICogICBmcm9tIHRoZSBzZXJ2ZXIsIGRldGVybWluZSB3aGljaCB1c2VyIHN5bmNzIHNob3VsZCBvY2N1ci4gVGhlIGFyZ3VtZW50IGFycmF5IHdpbGwgY29udGFpbiBldmVyeSBlbGVtZW50XG4gKiAgIHdoaWNoIGhhcyBiZWVuIHNlbnQgdGhyb3VnaCB0byBpbnRlcnByZXRSZXNwb25zZS4gVGhlIG9yZGVyIG9mIHN5bmNzIGluIHRoaXMgYXJyYXkgbWF0dGVycy4gVGhlIG1vc3RcbiAqICAgaW1wb3J0YW50IG9uZXMgc2hvdWxkIGNvbWUgZmlyc3QsIHNpbmNlIHB1Ymxpc2hlcnMgbWF5IGxpbWl0IGhvdyBtYW55IGFyZSBkcm9wcGVkIG9uIHRoZWlyIHBhZ2UuXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKG9iamVjdCk6IG9iamVjdH0gdHJhbnNmb3JtQmlkUGFyYW1zIFVwZGF0ZXMgYmlkIHBhcmFtcyBiZWZvcmUgY3JlYXRpbmcgYmlkIHJlcXVlc3RcbiB9fVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gQmlkUmVxdWVzdFxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaWRJZCBBIHN0cmluZyB3aGljaCB1bmlxdWVseSBpZGVudGlmaWVzIHRoaXMgQmlkUmVxdWVzdCBpbiB0aGUgY3VycmVudCBBdWN0aW9uLlxuICogQHByb3BlcnR5IHtvYmplY3R9IHBhcmFtcyBBbnkgYmlkZGVyLXNwZWNpZmljIHBhcmFtcyB3aGljaCB0aGUgcHVibGlzaGVyIHVzZWQgaW4gdGhlaXIgYmlkIHJlcXVlc3QuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBCaWRkZXJBdWN0aW9uUmVzcG9uc2UgQW4gb2JqZWN0IGVuY2Fwc3VsYXRpbmcgYW4gYWRhcHRlciByZXNwb25zZSBmb3IgY3VycmVudCBBdWN0aW9uXG4gKlxuICogQHByb3BlcnR5IHtBcnJheTxCaWQ+fSBiaWRzIENvbnRleHR1YWwgYmlkcyByZXR1cm5lZCBieSB0aGlzIGFkYXB0ZXIsIGlmIGFueVxuICogQHByb3BlcnR5IHtvYmplY3R8bnVsbH0gZmxlZGdlQXVjdGlvbkNvbmZpZ3MgT3B0aW9uYWwgRkxFREdFIHJlc3BvbnNlLCBhcyBhIG1hcCBvZiBpbXBpZCAtPiBhdWN0aW9uX2NvbmZpZ1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gU2VydmVyUmVxdWVzdFxuICpcbiAqIEBwcm9wZXJ0eSB7KCdHRVQnfCdQT1NUJyl9IG1ldGhvZCBUaGUgdHlwZSBvZiByZXF1ZXN0IHdoaWNoIHRoaXMgaXMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdXJsIFRoZSBlbmRwb2ludCBmb3IgdGhlIHJlcXVlc3QuIEZvciBleGFtcGxlLCBcIi8vYmlkcy5leGFtcGxlLmNvbVwiLlxuICogQHByb3BlcnR5IHtzdHJpbmd8b2JqZWN0fSBkYXRhIERhdGEgdG8gYmUgc2VudCBpbiB0aGUgcmVxdWVzdC5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBvcHRpb25zIENvbnRlbnQtVHlwZSBzZXQgaW4gdGhlIGhlYWRlciBvZiB0aGUgYmlkIHJlcXVlc3QsIG92ZXJyaWRlcyBkZWZhdWx0ICd0ZXh0L3BsYWluJy5cbiAqICAgSWYgdGhpcyBpcyBhIEdFVCByZXF1ZXN0LCB0aGV5J2xsIGJlY29tZSBxdWVyeSBwYXJhbXMuIElmIGl0J3MgYSBQT1NUIHJlcXVlc3QsIHRoZXknbGwgYmUgYWRkZWQgdG8gdGhlIGJvZHkuXG4gKiAgIFN0cmluZ3Mgd2lsbCBiZSBhZGRlZCBhcy1pcy4gT2JqZWN0cyB3aWxsIGJlIHVucGFja2VkIGludG8gcXVlcnkgcGFyYW1zIGJhc2VkIG9uIGtleS92YWx1ZSBtYXBwaW5ncywgb3JcbiAqICAgSlNPTi1zZXJpYWxpemVkIGludG8gdGhlIFJlcXVlc3QgYm9keS5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFNlcnZlclJlc3BvbnNlXG4gKlxuICogQHByb3BlcnR5IHsqfSBib2R5IFRoZSByZXNwb25zZSBib2R5LiBJZiB0aGlzIGlzIGxlZ2FsIEpTT04sIHRoZW4gaXQgd2lsbCBiZSBwYXJzZWQuIE90aGVyd2lzZSBpdCdsbCBiZSBhXG4gKiAgIHN0cmluZyB3aXRoIHRoZSBib2R5J3MgY29udGVudC5cbiAqIEBwcm9wZXJ0eSB7e2dldDogZnVuY3Rpb24oc3RyaW5nKTogc3RyaW5nfSBoZWFkZXJzIFRoZSByZXNwb25zZSBoZWFkZXJzLlxuICogICBDYWxsIHRoaXMgbGlrZSBgU2VydmVyUmVzcG9uc2UuaGVhZGVycy5nZXQoXCJDb250ZW50LVR5cGVcIilgXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBCaWRcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcmVxdWVzdElkIFRoZSBzcGVjaWZpYyBCaWRSZXF1ZXN0IHdoaWNoIHRoaXMgYmlkIGlzIGFpbWVkIGF0LlxuICogICBUaGlzIHNob3VsZCBtYXRjaCB0aGUgQmlkUmVxdWVzdC5iaWRJZCB3aGljaCB0aGlzIEJpZCB0YXJnZXRzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGFkIEEgVVJMIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGxvYWQgdGhpcyBhZCwgaWYgaXQncyBjaG9zZW4gYnkgdGhlIHB1Ymxpc2hlci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjdXJyZW5jeSBUaGUgY3VycmVuY3kgY29kZSBmb3IgdGhlIGNwbSB2YWx1ZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGNwbSBUaGUgYmlkIHByaWNlLCBpbiBVUyBjZW50cyBwZXIgdGhvdXNhbmQgaW1wcmVzc2lvbnMuXG4gKiBAcHJvcGVydHkge251bWJlcn0gdHRsIFRpbWUtdG8tbGl2ZSAtIGhvdyBsb25nIChpbiBzZWNvbmRzKSBQcmViaWQgY2FuIHVzZSB0aGlzIGJpZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbmV0UmV2ZW51ZSBCb29sZWFuIGRlZmluaW5nIHdoZXRoZXIgdGhlIGJpZCBpcyBOZXQgb3IgR3Jvc3MuICBUaGUgZGVmYXVsdCBpcyB0cnVlIChOZXQpLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBhZCwgaW4gcGl4ZWxzLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHdpZHRoIFRoZSB3aWR0aCBvZiB0aGUgYWQsIGluIHBpeGVscy5cbiAqXG4gKiBAcHJvcGVydHkge29iamVjdH0gW25hdGl2ZV0gT2JqZWN0IGZvciBzdG9yaW5nIG5hdGl2ZSBjcmVhdGl2ZSBhc3NldHNcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbdmlkZW9dIE9iamVjdCBmb3Igc3RvcmluZyB2aWRlbyByZXNwb25zZSBkYXRhXG4gKiBAcHJvcGVydHkge29iamVjdH0gW21ldGFdIE9iamVjdCBmb3Igc3RvcmluZyBiaWQgbWV0YSBkYXRhXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW21ldGEucHJpbWFyeUNhdElkXSBUaGUgSUFCIHByaW1hcnkgY2F0ZWdvcnkgSURcbiAqIEBwcm9wZXJ0eSBbUmVuZGVyZXJdIHJlbmRlcmVyIEEgUmVuZGVyZXIgd2hpY2ggY2FuIGJlIHVzZWQgYXMgYSBkZWZhdWx0IGZvciB0aGlzIGJpZCxcbiAqICAgaWYgdGhlIHB1Ymxpc2hlciBkb2Vzbid0IG92ZXJyaWRlIGl0LiBUaGlzIGlzIG9ubHkgcmVsZXZhbnQgZm9yIE91dHN0cmVhbSBWaWRlbyBiaWRzLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3luY09wdGlvbnNcbiAqXG4gKiBBbiBvYmplY3QgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB1c2Vyc3luY3Mgd2hpY2ggdGhlIGFkYXB0ZXIgc2hvdWxkIG9iZXkuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBpZnJhbWVFbmFibGVkIFRydWUgaWYgaWZyYW1lIHVzZXJzeW5jcyBhcmUgYWxsb3dlZCwgYW5kIGZhbHNlIG90aGVyd2lzZVxuICogQHByb3BlcnR5IHtib29sZWFufSBwaXhlbEVuYWJsZWQgVHJ1ZSBpZiBpbWFnZSB1c2Vyc3luY3MgYXJlIGFsbG93ZWQsIGFuZCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuXG4vKipcbiAqIFRPRE86IE1vdmUgdGhpcyB0byB0aGUgVXNlclN5bmMgbW9kdWxlIGFmdGVyIHRoYXQgUFIgaXMgbWVyZ2VkLlxuICpcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFVzZXJTeW5jXG4gKlxuICogQHByb3BlcnR5IHsoJ2ltYWdlJ3wnaWZyYW1lJyl9IHR5cGUgVGhlIHR5cGUgb2YgdXNlciBzeW5jIHRvIGJlIGRvbmUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdXJsIFRoZSBVUkwgd2hpY2ggbWFrZXMgdGhlIHN5bmMgaGFwcGVuLlxuICovXG5cbi8vIGNvbW1vbiBwYXJhbXMgZm9yIGFsbCBtZWRpYVR5cGVzXG5jb25zdCBDT01NT05fQklEX1JFU1BPTlNFX0tFWVMgPSBbJ2NwbScsICd0dGwnLCAnY3JlYXRpdmVJZCcsICduZXRSZXZlbnVlJywgJ2N1cnJlbmN5J107XG5jb25zdCBUSURTID0gWydhdWN0aW9uSWQnLCAndHJhbnNhY3Rpb25JZCddO1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgYmlkZGVyIHdpdGggcHJlYmlkLCB1c2luZyB0aGUgZ2l2ZW4gc3BlYy5cbiAqXG4gKiBJZiBwb3NzaWJsZSwgQWRhcHRlciBtb2R1bGVzIHNob3VsZCB1c2UgdGhpcyBmdW5jdGlvbiBpbnN0ZWFkIG9mIGFkYXB0ZXJNYW5hZ2VyLnJlZ2lzdGVyQmlkQWRhcHRlcigpLlxuICpcbiAqIEBwYXJhbSB7QmlkZGVyU3BlY30gc3BlYyBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgYmFyZS1ib25lcyBmdW5jdGlvbnMgd2UgbmVlZCB0byBtYWtlIGEgQmlkZGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJCaWRkZXIoc3BlYykge1xuICBjb25zdCBtZWRpYVR5cGVzID0gQXJyYXkuaXNBcnJheShzcGVjLnN1cHBvcnRlZE1lZGlhVHlwZXMpXG4gICAgPyB7IHN1cHBvcnRlZE1lZGlhVHlwZXM6IHNwZWMuc3VwcG9ydGVkTWVkaWFUeXBlcyB9XG4gICAgOiB1bmRlZmluZWQ7XG4gIGZ1bmN0aW9uIHB1dEJpZGRlcihzcGVjKSB7XG4gICAgY29uc3QgYmlkZGVyID0gbmV3QmlkZGVyKHNwZWMpO1xuICAgIGFkYXB0ZXJNYW5hZ2VyLnJlZ2lzdGVyQmlkQWRhcHRlcihiaWRkZXIsIHNwZWMuY29kZSwgbWVkaWFUeXBlcyk7XG4gIH1cblxuICBwdXRCaWRkZXIoc3BlYyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHNwZWMuYWxpYXNlcykpIHtcbiAgICBzcGVjLmFsaWFzZXMuZm9yRWFjaChhbGlhcyA9PiB7XG4gICAgICBsZXQgYWxpYXNDb2RlID0gYWxpYXM7XG4gICAgICBsZXQgZ3ZsaWQ7XG4gICAgICBsZXQgc2tpcFBic0FsaWFzaW5nO1xuICAgICAgaWYgKGlzUGxhaW5PYmplY3QoYWxpYXMpKSB7XG4gICAgICAgIGFsaWFzQ29kZSA9IGFsaWFzLmNvZGU7XG4gICAgICAgIGd2bGlkID0gYWxpYXMuZ3ZsaWQ7XG4gICAgICAgIHNraXBQYnNBbGlhc2luZyA9IGFsaWFzLnNraXBQYnNBbGlhc2luZ1xuICAgICAgfVxuICAgICAgYWRhcHRlck1hbmFnZXIuYWxpYXNSZWdpc3RyeVthbGlhc0NvZGVdID0gc3BlYy5jb2RlO1xuICAgICAgcHV0QmlkZGVyKE9iamVjdC5hc3NpZ24oe30sIHNwZWMsIHsgY29kZTogYWxpYXNDb2RlLCBndmxpZCwgc2tpcFBic0FsaWFzaW5nIH0pKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3VhcmRUaWRzKGJpZGRlckNvZGUpIHtcbiAgaWYgKGlzQWN0aXZpdHlBbGxvd2VkKEFDVElWSVRZX1RSQU5TTUlUX1RJRCwgYWN0aXZpdHlQYXJhbXMoTU9EVUxFX1RZUEVfQklEREVSLCBiaWRkZXJDb2RlKSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmlkUmVxdWVzdDogKGJyKSA9PiBicixcbiAgICAgIGJpZGRlclJlcXVlc3Q6IChicikgPT4gYnJcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgaWYgKFRJRFMuaW5jbHVkZXMocHJvcCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7XG4gIH1cbiAgZnVuY3Rpb24gcHJpdmF0ZUFjY2Vzc1Byb3h5KHRhcmdldCwgaGFuZGxlcikge1xuICAgIGNvbnN0IHByb3h5ID0gbmV3IFByb3h5KHRhcmdldCwgaGFuZGxlcik7XG4gICAgLy8gYWx3YXlzIGFsbG93IG1ldGhvZHMgKHN1Y2ggYXMgZ2V0Rmxvb3IpIHByaXZhdGUgYWNjZXNzIHRvIFRJRHNcbiAgICBPYmplY3QuZW50cmllcyh0YXJnZXQpXG4gICAgICAuZmlsdGVyKChbXywgdl0pID0+IHR5cGVvZiB2ID09PSAnZnVuY3Rpb24nKVxuICAgICAgLmZvckVhY2goKFtwcm9wLCBmbl0pID0+IHByb3h5W3Byb3BdID0gZm4uYmluZCh0YXJnZXQpKTtcbiAgICByZXR1cm4gcHJveHk7XG4gIH1cbiAgY29uc3QgYmlkUmVxdWVzdCA9IG1lbW9pemUoKGJyKSA9PiBwcml2YXRlQWNjZXNzUHJveHkoYnIsIHtnZXR9KSwgKGFyZykgPT4gYXJnLmJpZElkKTtcbiAgLyoqXG4gICAqIFJldHVybiBhIHZpZXcgb24gYmlkZChlcikgcmVxdWVzdHMgd2hlcmUgYXVjdGlvbklkL3RyYW5zYWN0aW9uSWQgYXJlIG51bGxlZCBpZiB0aGUgYmlkZGVyIGlzIG5vdCBhbGxvd2VkIGB0cmFuc21pdFRpZGAuXG4gICAqXG4gICAqIEJlY2F1c2UgYm90aCBhdWN0aW9uSWQgYW5kIHRyYW5zYWN0aW9uSWQgYXJlIHVzZWQgZm9yIFByZWJpZCdzIG93biBpbnRlcm5hbCBib29ra2VlcGluZywgd2UgY2Fubm90IHNpbXBseSBlcmFzZSB0aGVtXG4gICAqIGZyb20gcmVxdWVzdCBvYmplY3RzOyBhbmQgYmVjYXVzZSByZXF1ZXN0IG9iamVjdHMgYXJlIHF1aXRlIGNvbXBsZXggYW5kIG5vdCBlYXNpbHkgY2xvbmVhYmxlLCB3ZSBoaWRlIHRoZSBJRHNcbiAgICogd2l0aCBhIHByb3h5IGluc3RlYWQuIFRoaXMgc2hvdWxkIGJlIHVzZWQgb25seSBhcm91bmQgdGhlIGFkYXB0ZXIgbG9naWMuXG4gICAqL1xuICByZXR1cm4ge1xuICAgIGJpZFJlcXVlc3QsXG4gICAgYmlkZGVyUmVxdWVzdDogKGJyKSA9PiBwcml2YXRlQWNjZXNzUHJveHkoYnIsIHtcbiAgICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgIGlmIChwcm9wID09PSAnYmlkcycpIHJldHVybiBici5iaWRzLm1hcChiaWRSZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogTWFrZSBhIG5ldyBiaWRkZXIgZnJvbSB0aGUgZ2l2ZW4gc3BlYy4gVGhpcyBpcyBleHBvcnRlZCBtYWlubHkgZm9yIHRlc3RpbmcuXG4gKiBBZGFwdGVycyB3aWxsIHByb2JhYmx5IGZpbmQgaXQgbW9yZSBjb252ZW5pZW50IHRvIHVzZSByZWdpc3RlckJpZGRlciBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7QmlkZGVyU3BlY30gc3BlY1xuICovXG5leHBvcnQgZnVuY3Rpb24gbmV3QmlkZGVyKHNwZWMpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IEFkYXB0ZXIoc3BlYy5jb2RlKSwge1xuICAgIGdldFNwZWM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmFzc2lnbih7fSwgc3BlYykpO1xuICAgIH0sXG4gICAgcmVnaXN0ZXJTeW5jcyxcbiAgICBjYWxsQmlkczogZnVuY3Rpb24oYmlkZGVyUmVxdWVzdCwgYWRkQmlkUmVzcG9uc2UsIGRvbmUsIGFqYXgsIG9uVGltZWx5UmVzcG9uc2UsIGNvbmZpZ0VuYWJsZWRDYWxsYmFjaykge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGJpZGRlclJlcXVlc3QuYmlkcykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgdGlkR3VhcmQgPSBndWFyZFRpZHMoYmlkZGVyUmVxdWVzdC5iaWRkZXJDb2RlKTtcblxuICAgICAgY29uc3QgYWRVbml0Q29kZXNIYW5kbGVkID0ge307XG4gICAgICBmdW5jdGlvbiBhZGRCaWRXaXRoQ29kZShhZFVuaXRDb2RlLCBiaWQpIHtcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IHVzZU1ldHJpY3MoYmlkLm1ldHJpY3MpO1xuICAgICAgICBtZXRyaWNzLmNoZWNrcG9pbnQoJ2FkZEJpZFJlc3BvbnNlJyk7XG4gICAgICAgIGFkVW5pdENvZGVzSGFuZGxlZFthZFVuaXRDb2RlXSA9IHRydWU7XG4gICAgICAgIGlmIChtZXRyaWNzLm1lYXN1cmVUaW1lKCdhZGRCaWRSZXNwb25zZS52YWxpZGF0ZScsICgpID0+IGlzVmFsaWQoYWRVbml0Q29kZSwgYmlkKSkpIHtcbiAgICAgICAgICBhZGRCaWRSZXNwb25zZShhZFVuaXRDb2RlLCBiaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZEJpZFJlc3BvbnNlLnJlamVjdChhZFVuaXRDb2RlLCBiaWQsIENPTlNUQU5UUy5SRUpFQ1RJT05fUkVBU09OLklOVkFMSUQpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQWZ0ZXIgYWxsIHRoZSByZXNwb25zZXMgaGF2ZSBjb21lIGJhY2ssIGNhbGwgZG9uZSgpIGFuZFxuICAgICAgLy8gcmVnaXN0ZXIgYW55IHJlcXVpcmVkIHVzZXJzeW5jIHBpeGVscy5cbiAgICAgIGNvbnN0IHJlc3BvbnNlcyA9IFtdO1xuICAgICAgZnVuY3Rpb24gYWZ0ZXJBbGxSZXNwb25zZXMoKSB7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgICAgY29uZmlnLnJ1bldpdGhCaWRkZXIoc3BlYy5jb2RlLCAoKSA9PiB7XG4gICAgICAgICAgZXZlbnRzLmVtaXQoQ09OU1RBTlRTLkVWRU5UUy5CSURERVJfRE9ORSwgYmlkZGVyUmVxdWVzdCk7XG4gICAgICAgICAgcmVnaXN0ZXJTeW5jcyhyZXNwb25zZXMsIGJpZGRlclJlcXVlc3QuZ2RwckNvbnNlbnQsIGJpZGRlclJlcXVlc3QudXNwQ29uc2VudCwgYmlkZGVyUmVxdWVzdC5ncHBDb25zZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZhbGlkQmlkUmVxdWVzdHMgPSBhZGFwdGVyTWV0cmljcyhiaWRkZXJSZXF1ZXN0KVxuICAgICAgICAubWVhc3VyZVRpbWUoJ3ZhbGlkYXRlJywgKCkgPT4gYmlkZGVyUmVxdWVzdC5iaWRzLmZpbHRlcigoYnIpID0+IGZpbHRlckFuZFdhcm4odGlkR3VhcmQuYmlkUmVxdWVzdChicikpKSk7XG5cbiAgICAgIGlmICh2YWxpZEJpZFJlcXVlc3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBhZnRlckFsbFJlc3BvbnNlcygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBiaWRSZXF1ZXN0TWFwID0ge307XG4gICAgICB2YWxpZEJpZFJlcXVlc3RzLmZvckVhY2goYmlkID0+IHtcbiAgICAgICAgYmlkUmVxdWVzdE1hcFtiaWQuYmlkSWRdID0gYmlkO1xuICAgICAgICAvLyBEZWxldGUgdGhpcyBvbmNlIHdlIGFyZSAxLjBcbiAgICAgICAgaWYgKCFiaWQuYWRVbml0Q29kZSkge1xuICAgICAgICAgIGJpZC5hZFVuaXRDb2RlID0gYmlkLnBsYWNlbWVudENvZGVcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHByb2Nlc3NCaWRkZXJSZXF1ZXN0cyhzcGVjLCB2YWxpZEJpZFJlcXVlc3RzLm1hcCh0aWRHdWFyZC5iaWRSZXF1ZXN0KSwgdGlkR3VhcmQuYmlkZGVyUmVxdWVzdChiaWRkZXJSZXF1ZXN0KSwgYWpheCwgY29uZmlnRW5hYmxlZENhbGxiYWNrLCB7XG4gICAgICAgIG9uUmVxdWVzdDogcmVxdWVzdE9iamVjdCA9PiBldmVudHMuZW1pdChDT05TVEFOVFMuRVZFTlRTLkJFRk9SRV9CSURERVJfSFRUUCwgYmlkZGVyUmVxdWVzdCwgcmVxdWVzdE9iamVjdCksXG4gICAgICAgIG9uUmVzcG9uc2U6IChyZXNwKSA9PiB7XG4gICAgICAgICAgb25UaW1lbHlSZXNwb25zZShzcGVjLmNvZGUpO1xuICAgICAgICAgIHJlc3BvbnNlcy5wdXNoKHJlc3ApXG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBQcm9jZXNzIGV2ZW50dWFsIEJpZGRlckF1Y3Rpb25SZXNwb25zZS5mbGVkZ2VBdWN0aW9uQ29uZmlnIGZpZWxkIGluIHJlc3BvbnNlLlxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5PEZsZWRnZUF1Y3Rpb25Db25maWc+fSBmbGVkZ2VBdWN0aW9uQ29uZmlnc1xuICAgICAgICAgKi9cbiAgICAgICAgb25GbGVkZ2VBdWN0aW9uQ29uZmlnczogKGZsZWRnZUF1Y3Rpb25Db25maWdzKSA9PiB7XG4gICAgICAgICAgZmxlZGdlQXVjdGlvbkNvbmZpZ3MuZm9yRWFjaCgoZmxlZGdlQXVjdGlvbkNvbmZpZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgYmlkUmVxdWVzdCA9IGJpZFJlcXVlc3RNYXBbZmxlZGdlQXVjdGlvbkNvbmZpZy5iaWRJZF07XG4gICAgICAgICAgICBpZiAoYmlkUmVxdWVzdCkge1xuICAgICAgICAgICAgICBhZGRDb21wb25lbnRBdWN0aW9uKGJpZFJlcXVlc3QuYWRVbml0Q29kZSwgZmxlZGdlQXVjdGlvbkNvbmZpZy5jb25maWcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbG9nV2FybignUmVjZWl2ZWQgZmxlZGdlIGF1Y3Rpb24gY29uZmlndXJhdGlvbiBmb3IgYW4gdW5rbm93biBiaWRJZCcsIGZsZWRnZUF1Y3Rpb25Db25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyBJZiB0aGUgc2VydmVyIHJlc3BvbmRzIHdpdGggYW4gZXJyb3IsIHRoZXJlJ3Mgbm90IG11Y2ggd2UgY2FuIGRvIGJlc2lkZSBsb2dnaW5nLlxuICAgICAgICBvbkVycm9yOiAoZXJyb3JNZXNzYWdlLCBlcnJvcikgPT4ge1xuICAgICAgICAgIG9uVGltZWx5UmVzcG9uc2Uoc3BlYy5jb2RlKTtcbiAgICAgICAgICBhZGFwdGVyTWFuYWdlci5jYWxsQmlkZGVyRXJyb3Ioc3BlYy5jb2RlLCBlcnJvciwgYmlkZGVyUmVxdWVzdClcbiAgICAgICAgICBldmVudHMuZW1pdChDT05TVEFOVFMuRVZFTlRTLkJJRERFUl9FUlJPUiwgeyBlcnJvciwgYmlkZGVyUmVxdWVzdCB9KTtcbiAgICAgICAgICBsb2dFcnJvcihgU2VydmVyIGNhbGwgZm9yICR7c3BlYy5jb2RlfSBmYWlsZWQ6ICR7ZXJyb3JNZXNzYWdlfSAke2Vycm9yLnN0YXR1c30uIENvbnRpbnVpbmcgd2l0aG91dCBiaWRzLmApO1xuICAgICAgICB9LFxuICAgICAgICBvbkJpZDogKGJpZCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGJpZFJlcXVlc3QgPSBiaWRSZXF1ZXN0TWFwW2JpZC5yZXF1ZXN0SWRdO1xuICAgICAgICAgIGlmIChiaWRSZXF1ZXN0KSB7XG4gICAgICAgICAgICBiaWQuYWRhcHRlckNvZGUgPSBiaWRSZXF1ZXN0LmJpZGRlcjtcbiAgICAgICAgICAgIGlmIChpc0ludmFsaWRBbHRlcm5hdGVCaWRkZXIoYmlkLmJpZGRlckNvZGUsIGJpZFJlcXVlc3QuYmlkZGVyKSkge1xuICAgICAgICAgICAgICBsb2dXYXJuKGAke2JpZC5iaWRkZXJDb2RlfSBpcyBub3QgYSByZWdpc3RlcmVkIHBhcnRuZXIgb3Iga25vd24gYmlkZGVyIG9mICR7YmlkUmVxdWVzdC5iaWRkZXJ9LCBoZW5jZSBjb250aW51aW5nIHdpdGhvdXQgYmlkLiBJZiB5b3Ugd2lzaCB0byBzdXBwb3J0IHRoaXMgYmlkZGVyLCBwbGVhc2UgbWFyayBhbGxvd0FsdGVybmF0ZUJpZGRlckNvZGVzIGFzIHRydWUgaW4gYmlkZGVyU2V0dGluZ3MuYCk7XG4gICAgICAgICAgICAgIGFkZEJpZFJlc3BvbnNlLnJlamVjdChiaWRSZXF1ZXN0LmFkVW5pdENvZGUsIGJpZCwgQ09OU1RBTlRTLlJFSkVDVElPTl9SRUFTT04uQklEREVSX0RJU0FMTE9XRUQpXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNyZWF0aW5nIGEgY29weSBvZiBvcmlnaW5hbCB2YWx1ZXMgYXMgY3BtIGFuZCBjdXJyZW5jeSBhcmUgbW9kaWZpZWQgbGF0ZXJcbiAgICAgICAgICAgIGJpZC5vcmlnaW5hbENwbSA9IGJpZC5jcG07XG4gICAgICAgICAgICBiaWQub3JpZ2luYWxDdXJyZW5jeSA9IGJpZC5jdXJyZW5jeTtcbiAgICAgICAgICAgIGJpZC5tZXRhID0gYmlkLm1ldGEgfHwgT2JqZWN0LmFzc2lnbih7fSwgYmlkW2JpZFJlcXVlc3QuYmlkZGVyXSk7XG4gICAgICAgICAgICBjb25zdCBwcmViaWRCaWQgPSBPYmplY3QuYXNzaWduKGNyZWF0ZUJpZChDT05TVEFOVFMuU1RBVFVTLkdPT0QsIGJpZFJlcXVlc3QpLCBiaWQsIHBpY2soYmlkUmVxdWVzdCwgVElEUykpO1xuICAgICAgICAgICAgYWRkQmlkV2l0aENvZGUoYmlkUmVxdWVzdC5hZFVuaXRDb2RlLCBwcmViaWRCaWQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2dXYXJuKGBCaWRkZXIgJHtzcGVjLmNvZGV9IG1hZGUgYmlkIGZvciB1bmtub3duIHJlcXVlc3QgSUQ6ICR7YmlkLnJlcXVlc3RJZH0uIElnbm9yaW5nLmApO1xuICAgICAgICAgICAgYWRkQmlkUmVzcG9uc2UucmVqZWN0KG51bGwsIGJpZCwgQ09OU1RBTlRTLlJFSkVDVElPTl9SRUFTT04uSU5WQUxJRF9SRVFVRVNUX0lEKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ29tcGxldGlvbjogYWZ0ZXJBbGxSZXNwb25zZXMsXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGlzSW52YWxpZEFsdGVybmF0ZUJpZGRlcihyZXNwb25zZUJpZGRlciwgcmVxdWVzdEJpZGRlcikge1xuICAgIGxldCBhbGxvd0FsdGVybmF0ZUJpZGRlckNvZGVzID0gYmlkZGVyU2V0dGluZ3MuZ2V0KHJlcXVlc3RCaWRkZXIsICdhbGxvd0FsdGVybmF0ZUJpZGRlckNvZGVzJykgfHwgZmFsc2U7XG4gICAgbGV0IGFsdGVybmF0ZUJpZGRlcnNMaXN0ID0gYmlkZGVyU2V0dGluZ3MuZ2V0KHJlcXVlc3RCaWRkZXIsICdhbGxvd2VkQWx0ZXJuYXRlQmlkZGVyQ29kZXMnKTtcbiAgICBpZiAoISFyZXNwb25zZUJpZGRlciAmJiAhIXJlcXVlc3RCaWRkZXIgJiYgcmVxdWVzdEJpZGRlciAhPT0gcmVzcG9uc2VCaWRkZXIpIHtcbiAgICAgIGFsdGVybmF0ZUJpZGRlcnNMaXN0ID0gaXNBcnJheShhbHRlcm5hdGVCaWRkZXJzTGlzdCkgPyBhbHRlcm5hdGVCaWRkZXJzTGlzdC5tYXAodmFsID0+IHZhbC50cmltKCkudG9Mb3dlckNhc2UoKSkuZmlsdGVyKHZhbCA9PiAhIXZhbCkuZmlsdGVyKHVuaXF1ZXMpIDogYWx0ZXJuYXRlQmlkZGVyc0xpc3Q7XG4gICAgICBpZiAoIWFsbG93QWx0ZXJuYXRlQmlkZGVyQ29kZXMgfHwgKGlzQXJyYXkoYWx0ZXJuYXRlQmlkZGVyc0xpc3QpICYmIChhbHRlcm5hdGVCaWRkZXJzTGlzdFswXSAhPT0gJyonICYmICFhbHRlcm5hdGVCaWRkZXJzTGlzdC5pbmNsdWRlcyhyZXNwb25zZUJpZGRlcikpKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RlclN5bmNzKHJlc3BvbnNlcywgZ2RwckNvbnNlbnQsIHVzcENvbnNlbnQsIGdwcENvbnNlbnQpIHtcbiAgICByZWdpc3RlclN5bmNJbm5lcihzcGVjLCByZXNwb25zZXMsIGdkcHJDb25zZW50LCB1c3BDb25zZW50LCBncHBDb25zZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbHRlckFuZFdhcm4oYmlkKSB7XG4gICAgaWYgKCFzcGVjLmlzQmlkUmVxdWVzdFZhbGlkKGJpZCkpIHtcbiAgICAgIGxvZ1dhcm4oYEludmFsaWQgYmlkIHNlbnQgdG8gYmlkZGVyICR7c3BlYy5jb2RlfTogJHtKU09OLnN0cmluZ2lmeShiaWQpfWApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFJ1biBhIHNldCBvZiBiaWQgcmVxdWVzdHMgLSB0aGF0IGVudGFpbHMgY29udmVydGluZyB0aGVtIHRvIEhUVFAgcmVxdWVzdHMsIHNlbmRpbmdcbiAqIHRoZW0gb3ZlciB0aGUgbmV0d29yaywgYW5kIHBhcnNpbmcgdGhlIHJlc3BvbnNlcy5cbiAqXG4gKiBAcGFyYW0gc3BlYyBiaWQgYWRhcHRlciBzcGVjXG4gKiBAcGFyYW0gYmlkcyBiaWQgcmVxdWVzdHMgdG8gcnVuXG4gKiBAcGFyYW0gYmlkZGVyUmVxdWVzdCB0aGUgYmlkIHJlcXVlc3Qgb2JqZWN0IHRoYXQgYGJpZHNgIGlzIGNvbm5lY3RlZCB0b1xuICogQHBhcmFtIGFqYXggYWpheCBtZXRob2QgdG8gdXNlXG4gKiBAcGFyYW0gd3JhcENhbGxiYWNrIHtmdW5jdGlvbihjYWxsYmFjayl9IGEgZnVuY3Rpb24gdXNlZCB0byB3cmFwIGV2ZXJ5IGNhbGxiYWNrIChmb3IgdGhlIHB1cnBvc2Ugb2YgYGNvbmZpZy5jdXJyZW50QmlkZGVyYClcbiAqIEBwYXJhbSBvblJlcXVlc3Qge2Z1bmN0aW9uKHt9KX0gaW52b2tlZCBvbmNlIGZvciBlYWNoIEhUVFAgcmVxdWVzdCBidWlsdCBieSB0aGUgYWRhcHRlciAtIHdpdGggdGhlIHJhdyByZXF1ZXN0XG4gKiBAcGFyYW0gb25SZXNwb25zZSB7ZnVuY3Rpb24oe30pfSBpbnZva2VkIG9uY2Ugb24gZWFjaCBzdWNjZXNzZnVsIEhUVFAgcmVzcG9uc2UgLSB3aXRoIHRoZSByYXcgcmVzcG9uc2VcbiAqIEBwYXJhbSBvbkVycm9yIHtmdW5jdGlvbihTdHJpbmcsIHt9KX0gaW52b2tlZCBvbmNlIGZvciBlYWNoIEhUVFAgZXJyb3IgLSB3aXRoIHN0YXR1cyBjb2RlIGFuZCByZXNwb25zZVxuICogQHBhcmFtIG9uQmlkIHtmdW5jdGlvbih7fSl9IGludm9rZWQgb25jZSBmb3IgZWFjaCBiaWQgaW4gdGhlIHJlc3BvbnNlIC0gd2l0aCB0aGUgYmlkIGFzIHJldHVybmVkIGJ5IGludGVycHJldFJlc3BvbnNlXG4gKiBAcGFyYW0gb25Db21wbGV0aW9uIHtmdW5jdGlvbigpfSBpbnZva2VkIG9uY2Ugd2hlbiBhbGwgYmlkIHJlcXVlc3RzIGhhdmUgYmVlbiBwcm9jZXNzZWRcbiAqL1xuZXhwb3J0IGNvbnN0IHByb2Nlc3NCaWRkZXJSZXF1ZXN0cyA9IGhvb2soJ3N5bmMnLCBmdW5jdGlvbiAoc3BlYywgYmlkcywgYmlkZGVyUmVxdWVzdCwgYWpheCwgd3JhcENhbGxiYWNrLCB7b25SZXF1ZXN0LCBvblJlc3BvbnNlLCBvbkZsZWRnZUF1Y3Rpb25Db25maWdzLCBvbkVycm9yLCBvbkJpZCwgb25Db21wbGV0aW9ufSkge1xuICBjb25zdCBtZXRyaWNzID0gYWRhcHRlck1ldHJpY3MoYmlkZGVyUmVxdWVzdCk7XG4gIG9uQ29tcGxldGlvbiA9IG1ldHJpY3Muc3RhcnRUaW1pbmcoJ3RvdGFsJykuc3RvcEJlZm9yZShvbkNvbXBsZXRpb24pO1xuXG4gIGxldCByZXF1ZXN0cyA9IG1ldHJpY3MubWVhc3VyZVRpbWUoJ2J1aWxkUmVxdWVzdHMnLCAoKSA9PiBzcGVjLmJ1aWxkUmVxdWVzdHMoYmlkcywgYmlkZGVyUmVxdWVzdCkpO1xuXG4gIGlmICghcmVxdWVzdHMgfHwgcmVxdWVzdHMubGVuZ3RoID09PSAwKSB7XG4gICAgb25Db21wbGV0aW9uKCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghQXJyYXkuaXNBcnJheShyZXF1ZXN0cykpIHtcbiAgICByZXF1ZXN0cyA9IFtyZXF1ZXN0c107XG4gIH1cblxuICBjb25zdCByZXF1ZXN0RG9uZSA9IGRlbGF5RXhlY3V0aW9uKG9uQ29tcGxldGlvbiwgcmVxdWVzdHMubGVuZ3RoKTtcblxuICByZXF1ZXN0cy5mb3JFYWNoKChyZXF1ZXN0KSA9PiB7XG4gICAgY29uc3QgcmVxdWVzdE1ldHJpY3MgPSBtZXRyaWNzLmZvcmsoKTtcbiAgICBmdW5jdGlvbiBhZGRCaWQoYmlkKSB7XG4gICAgICBpZiAoYmlkICE9IG51bGwpIGJpZC5tZXRyaWNzID0gcmVxdWVzdE1ldHJpY3MuZm9yaygpLnJlbmFtZVdpdGgoKTtcbiAgICAgIG9uQmlkKGJpZCk7XG4gICAgfVxuICAgIC8vIElmIHRoZSBzZXJ2ZXIgcmVzcG9uZHMgc3VjY2Vzc2Z1bGx5LCB1c2UgdGhlIGFkYXB0ZXIgY29kZSB0byB1bnBhY2sgdGhlIEJpZHMgZnJvbSBpdC5cbiAgICAvLyBJZiB0aGUgYWRhcHRlciBjb2RlIGZhaWxzLCBubyBiaWRzIHNob3VsZCBiZSBhZGRlZC4gQWZ0ZXIgYWxsIHRoZSBiaWRzIGhhdmUgYmVlbiBhZGRlZCxcbiAgICAvLyBtYWtlIHN1cmUgdG8gY2FsbCB0aGUgYHJlcXVlc3REb25lYCBmdW5jdGlvbiBzbyB0aGF0IHdlJ3JlIG9uZSBzdGVwIGNsb3NlciB0byBjYWxsaW5nIG9uQ29tcGxldGlvbigpLlxuICAgIGNvbnN0IG9uU3VjY2VzcyA9IHdyYXBDYWxsYmFjayhmdW5jdGlvbihyZXNwb25zZSwgcmVzcG9uc2VPYmopIHtcbiAgICAgIG5ldHdvcmtEb25lKCk7XG4gICAgICB0cnkge1xuICAgICAgICByZXNwb25zZSA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiByZXNwb25zZSBtaWdodCBub3QgYmUgSlNPTi4uLiB0aGF0J3Mgb2suICovIH1cblxuICAgICAgLy8gTWFrZSByZXNwb25zZSBoZWFkZXJzIGF2YWlsYWJsZSBmb3IgIzE3NDIuIFRoZXNlIGFyZSBsYXp5LWxvYWRlZCBiZWNhdXNlIG1vc3QgYWRhcHRlcnMgd29uJ3QgbmVlZCB0aGVtLlxuICAgICAgcmVzcG9uc2UgPSB7XG4gICAgICAgIGJvZHk6IHJlc3BvbnNlLFxuICAgICAgICBoZWFkZXJzOiBoZWFkZXJQYXJzZXIocmVzcG9uc2VPYmopXG4gICAgICB9O1xuICAgICAgb25SZXNwb25zZShyZXNwb25zZSk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdE1ldHJpY3MubWVhc3VyZVRpbWUoJ2ludGVycHJldFJlc3BvbnNlJywgKCkgPT4gc3BlYy5pbnRlcnByZXRSZXNwb25zZShyZXNwb25zZSwgcmVxdWVzdCkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZ0Vycm9yKGBCaWRkZXIgJHtzcGVjLmNvZGV9IGZhaWxlZCB0byBpbnRlcnByZXQgdGhlIHNlcnZlcidzIHJlc3BvbnNlLiBDb250aW51aW5nIHdpdGhvdXQgYmlkc2AsIG51bGwsIGVycik7XG4gICAgICAgIHJlcXVlc3REb25lKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IGJpZHM7XG4gICAgICAvLyBFeHRyYWN0IGFkZGl0aW9uYWwgZGF0YSBmcm9tIGEgc3RydWN0dXJlZCB7QmlkZGVyQXVjdGlvblJlc3BvbnNlfSByZXNwb25zZVxuICAgICAgaWYgKHJlc3BvbnNlICYmIGlzQXJyYXkocmVzcG9uc2UuZmxlZGdlQXVjdGlvbkNvbmZpZ3MpKSB7XG4gICAgICAgIG9uRmxlZGdlQXVjdGlvbkNvbmZpZ3MocmVzcG9uc2UuZmxlZGdlQXVjdGlvbkNvbmZpZ3MpO1xuICAgICAgICBiaWRzID0gcmVzcG9uc2UuYmlkcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpZHMgPSByZXNwb25zZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJpZHMpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkoYmlkcykpIHtcbiAgICAgICAgICBiaWRzLmZvckVhY2goYWRkQmlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRCaWQoYmlkcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlcXVlc3REb25lKCk7XG5cbiAgICAgIGZ1bmN0aW9uIGhlYWRlclBhcnNlcih4bWxIdHRwUmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBnZXQ6IHJlc3BvbnNlT2JqLmdldFJlc3BvbnNlSGVhZGVyLmJpbmQocmVzcG9uc2VPYmopXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBvbkZhaWx1cmUgPSB3cmFwQ2FsbGJhY2soZnVuY3Rpb24gKGVycm9yTWVzc2FnZSwgZXJyb3IpIHtcbiAgICAgIG5ldHdvcmtEb25lKCk7XG4gICAgICBvbkVycm9yKGVycm9yTWVzc2FnZSwgZXJyb3IpO1xuICAgICAgcmVxdWVzdERvbmUoKTtcbiAgICB9KTtcblxuICAgIG9uUmVxdWVzdChyZXF1ZXN0KTtcblxuICAgIGNvbnN0IG5ldHdvcmtEb25lID0gcmVxdWVzdE1ldHJpY3Muc3RhcnRUaW1pbmcoJ25ldCcpO1xuXG4gICAgZnVuY3Rpb24gZ2V0T3B0aW9ucyhkZWZhdWx0cykge1xuICAgICAgY29uc3Qgcm8gPSByZXF1ZXN0Lm9wdGlvbnM7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgcm8sIHtcbiAgICAgICAgYnJvd3NpbmdUb3BpY3M6IHJvPy5oYXNPd25Qcm9wZXJ0eSgnYnJvd3NpbmdUb3BpY3MnKSAmJiAhcm8uYnJvd3NpbmdUb3BpY3NcbiAgICAgICAgICA/IGZhbHNlXG4gICAgICAgICAgOiBpc0FjdGl2aXR5QWxsb3dlZChBQ1RJVklUWV9UUkFOU01JVF9VRlBELCBhY3Rpdml0eVBhcmFtcyhNT0RVTEVfVFlQRV9CSURERVIsIHNwZWMuY29kZSkpXG4gICAgICB9KVxuICAgIH1cbiAgICBzd2l0Y2ggKHJlcXVlc3QubWV0aG9kKSB7XG4gICAgICBjYXNlICdHRVQnOlxuICAgICAgICBhamF4KFxuICAgICAgICAgIGAke3JlcXVlc3QudXJsfSR7Zm9ybWF0R2V0UGFyYW1ldGVycyhyZXF1ZXN0LmRhdGEpfWAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3VjY2Vzczogb25TdWNjZXNzLFxuICAgICAgICAgICAgZXJyb3I6IG9uRmFpbHVyZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIGdldE9wdGlvbnMoe1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnUE9TVCc6XG4gICAgICAgIGFqYXgoXG4gICAgICAgICAgcmVxdWVzdC51cmwsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3VjY2Vzczogb25TdWNjZXNzLFxuICAgICAgICAgICAgZXJyb3I6IG9uRmFpbHVyZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdHlwZW9mIHJlcXVlc3QuZGF0YSA9PT0gJ3N0cmluZycgPyByZXF1ZXN0LmRhdGEgOiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0LmRhdGEpLFxuICAgICAgICAgIGdldE9wdGlvbnMoe1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogJ3RleHQvcGxhaW4nLFxuICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsb2dXYXJuKGBTa2lwcGluZyBpbnZhbGlkIHJlcXVlc3QgZnJvbSAke3NwZWMuY29kZX0uIFJlcXVlc3QgdHlwZSAke3JlcXVlc3QudHlwZX0gbXVzdCBiZSBHRVQgb3IgUE9TVGApO1xuICAgICAgICByZXF1ZXN0RG9uZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdEdldFBhcmFtZXRlcnMoZGF0YSkge1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGA/JHt0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgPyBwYXJzZVF1ZXJ5U3RyaW5nUGFyYW1ldGVycyhkYXRhKSA6IGRhdGF9YDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfSlcbn0sICdwcm9jZXNzQmlkZGVyUmVxdWVzdHMnKVxuXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJTeW5jSW5uZXIgPSBob29rKCdhc3luYycsIGZ1bmN0aW9uKHNwZWMsIHJlc3BvbnNlcywgZ2RwckNvbnNlbnQsIHVzcENvbnNlbnQsIGdwcENvbnNlbnQpIHtcbiAgY29uc3QgYWxpYXNTeW5jRW5hYmxlZCA9IGNvbmZpZy5nZXRDb25maWcoJ3VzZXJTeW5jLmFsaWFzU3luY0VuYWJsZWQnKTtcbiAgaWYgKHNwZWMuZ2V0VXNlclN5bmNzICYmIChhbGlhc1N5bmNFbmFibGVkIHx8ICFhZGFwdGVyTWFuYWdlci5hbGlhc1JlZ2lzdHJ5W3NwZWMuY29kZV0pKSB7XG4gICAgbGV0IGZpbHRlckNvbmZpZyA9IGNvbmZpZy5nZXRDb25maWcoJ3VzZXJTeW5jLmZpbHRlclNldHRpbmdzJyk7XG4gICAgbGV0IHN5bmNzID0gc3BlYy5nZXRVc2VyU3luY3Moe1xuICAgICAgaWZyYW1lRW5hYmxlZDogISEoZmlsdGVyQ29uZmlnICYmIChmaWx0ZXJDb25maWcuaWZyYW1lIHx8IGZpbHRlckNvbmZpZy5hbGwpKSxcbiAgICAgIHBpeGVsRW5hYmxlZDogISEoZmlsdGVyQ29uZmlnICYmIChmaWx0ZXJDb25maWcuaW1hZ2UgfHwgZmlsdGVyQ29uZmlnLmFsbCkpLFxuICAgIH0sIHJlc3BvbnNlcywgZ2RwckNvbnNlbnQsIHVzcENvbnNlbnQsIGdwcENvbnNlbnQpO1xuICAgIGlmIChzeW5jcykge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHN5bmNzKSkge1xuICAgICAgICBzeW5jcyA9IFtzeW5jc107XG4gICAgICB9XG4gICAgICBzeW5jcy5mb3JFYWNoKChzeW5jKSA9PiB7XG4gICAgICAgIHVzZXJTeW5jLnJlZ2lzdGVyU3luYyhzeW5jLnR5cGUsIHNwZWMuY29kZSwgc3luYy51cmwpXG4gICAgICB9KTtcbiAgICAgIHVzZXJTeW5jLmJpZGRlckRvbmUoc3BlYy5jb2RlKTtcbiAgICB9XG4gIH1cbn0sICdyZWdpc3RlclN5bmNzJylcblxuZXhwb3J0IGNvbnN0IGFkZENvbXBvbmVudEF1Y3Rpb24gPSBob29rKCdzeW5jJywgKGFkVW5pdENvZGUsIGZsZWRnZUF1Y3Rpb25Db25maWcpID0+IHtcbn0sICdhZGRDb21wb25lbnRBdWN0aW9uJyk7XG5cbi8vIGNoZWNrIHRoYXQgdGhlIGJpZCBoYXMgYSB3aWR0aCBhbmQgaGVpZ2h0IHNldFxuZnVuY3Rpb24gdmFsaWRCaWRTaXplKGFkVW5pdENvZGUsIGJpZCwge2luZGV4ID0gYXVjdGlvbk1hbmFnZXIuaW5kZXh9ID0ge30pIHtcbiAgaWYgKChiaWQud2lkdGggfHwgcGFyc2VJbnQoYmlkLndpZHRoLCAxMCkgPT09IDApICYmIChiaWQuaGVpZ2h0IHx8IHBhcnNlSW50KGJpZC5oZWlnaHQsIDEwKSA9PT0gMCkpIHtcbiAgICBiaWQud2lkdGggPSBwYXJzZUludChiaWQud2lkdGgsIDEwKTtcbiAgICBiaWQuaGVpZ2h0ID0gcGFyc2VJbnQoYmlkLmhlaWdodCwgMTApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgYmlkUmVxdWVzdCA9IGluZGV4LmdldEJpZFJlcXVlc3QoYmlkKTtcbiAgY29uc3QgbWVkaWFUeXBlcyA9IGluZGV4LmdldE1lZGlhVHlwZXMoYmlkKTtcblxuICBjb25zdCBzaXplcyA9IChiaWRSZXF1ZXN0ICYmIGJpZFJlcXVlc3Quc2l6ZXMpIHx8IChtZWRpYVR5cGVzICYmIG1lZGlhVHlwZXMuYmFubmVyICYmIG1lZGlhVHlwZXMuYmFubmVyLnNpemVzKTtcbiAgY29uc3QgcGFyc2VkU2l6ZXMgPSBwYXJzZVNpemVzSW5wdXQoc2l6ZXMpO1xuXG4gIC8vIGlmIGEgYmFubmVyIGltcHJlc3Npb24gaGFzIG9uZSB2YWxpZCBzaXplLCB3ZSBhc3NpZ24gdGhhdCBzaXplIHRvIGFueSBiaWRcbiAgLy8gcmVzcG9uc2UgdGhhdCBkb2VzIG5vdCBleHBsaWNpdGx5IHNldCB3aWR0aCBvciBoZWlnaHRcbiAgaWYgKHBhcnNlZFNpemVzLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IFsgd2lkdGgsIGhlaWdodCBdID0gcGFyc2VkU2l6ZXNbMF0uc3BsaXQoJ3gnKTtcbiAgICBiaWQud2lkdGggPSBwYXJzZUludCh3aWR0aCwgMTApO1xuICAgIGJpZC5oZWlnaHQgPSBwYXJzZUludChoZWlnaHQsIDEwKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gVmFsaWRhdGUgdGhlIGFyZ3VtZW50cyBzZW50IHRvIHVzIGJ5IHRoZSBhZGFwdGVyLiBJZiB0aGlzIHJldHVybnMgZmFsc2UsIHRoZSBiaWQgc2hvdWxkIGJlIHRvdGFsbHkgaWdub3JlZC5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkKGFkVW5pdENvZGUsIGJpZCwge2luZGV4ID0gYXVjdGlvbk1hbmFnZXIuaW5kZXh9ID0ge30pIHtcbiAgZnVuY3Rpb24gaGFzVmFsaWRLZXlzKCkge1xuICAgIGxldCBiaWRLZXlzID0gT2JqZWN0LmtleXMoYmlkKTtcbiAgICByZXR1cm4gQ09NTU9OX0JJRF9SRVNQT05TRV9LRVlTLmV2ZXJ5KGtleSA9PiBpbmNsdWRlcyhiaWRLZXlzLCBrZXkpICYmICFpbmNsdWRlcyhbdW5kZWZpbmVkLCBudWxsXSwgYmlkW2tleV0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVycm9yTWVzc2FnZShtc2cpIHtcbiAgICByZXR1cm4gYEludmFsaWQgYmlkIGZyb20gJHtiaWQuYmlkZGVyQ29kZX0uIElnbm9yaW5nIGJpZDogJHttc2d9YDtcbiAgfVxuXG4gIGlmICghYWRVbml0Q29kZSkge1xuICAgIGxvZ1dhcm4oJ05vIGFkVW5pdENvZGUgd2FzIHN1cHBsaWVkIHRvIGFkZEJpZFJlc3BvbnNlLicpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghYmlkKSB7XG4gICAgbG9nV2FybihgU29tZSBhZGFwdGVyIHRyaWVkIHRvIGFkZCBhbiB1bmRlZmluZWQgYmlkIGZvciAke2FkVW5pdENvZGV9LmApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghaGFzVmFsaWRLZXlzKCkpIHtcbiAgICBsb2dFcnJvcihlcnJvck1lc3NhZ2UoYEJpZGRlciAke2JpZC5iaWRkZXJDb2RlfSBpcyBtaXNzaW5nIHJlcXVpcmVkIHBhcmFtcy4gQ2hlY2sgaHR0cDovL3ByZWJpZC5vcmcvZGV2LWRvY3MvYmlkZGVyLWFkYXB0ZXItMS5odG1sIGZvciBsaXN0IG9mIHBhcmFtcy5gKSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKEZFQVRVUkVTLk5BVElWRSAmJiBiaWQubWVkaWFUeXBlID09PSAnbmF0aXZlJyAmJiAhbmF0aXZlQmlkSXNWYWxpZChiaWQsIHtpbmRleH0pKSB7XG4gICAgbG9nRXJyb3IoZXJyb3JNZXNzYWdlKCdOYXRpdmUgYmlkIG1pc3Npbmcgc29tZSByZXF1aXJlZCBwcm9wZXJ0aWVzLicpKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKEZFQVRVUkVTLlZJREVPICYmIGJpZC5tZWRpYVR5cGUgPT09ICd2aWRlbycgJiYgIWlzVmFsaWRWaWRlb0JpZChiaWQsIHtpbmRleH0pKSB7XG4gICAgbG9nRXJyb3IoZXJyb3JNZXNzYWdlKGBWaWRlbyBiaWQgZG9lcyBub3QgaGF2ZSByZXF1aXJlZCB2YXN0VXJsIG9yIHJlbmRlcmVyIHByb3BlcnR5YCkpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYmlkLm1lZGlhVHlwZSA9PT0gJ2Jhbm5lcicgJiYgIXZhbGlkQmlkU2l6ZShhZFVuaXRDb2RlLCBiaWQsIHtpbmRleH0pKSB7XG4gICAgbG9nRXJyb3IoZXJyb3JNZXNzYWdlKGBCYW5uZXIgYmlkcyByZXF1aXJlIGEgd2lkdGggYW5kIGhlaWdodGApKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gYWRhcHRlck1ldHJpY3MoYmlkZGVyUmVxdWVzdCkge1xuICByZXR1cm4gdXNlTWV0cmljcyhiaWRkZXJSZXF1ZXN0Lm1ldHJpY3MpLnJlbmFtZVdpdGgobiA9PiBbYGFkYXB0ZXIuY2xpZW50LiR7bn1gLCBgYWRhcHRlcnMuY2xpZW50LiR7YmlkZGVyUmVxdWVzdC5iaWRkZXJDb2RlfS4ke259YF0pXG59XG4iLCJpbXBvcnQge1xuICBkZWVwQWNjZXNzLFxuICBkZWVwQ2xvbmUsXG4gIGdldEtleUJ5VmFsdWUsXG4gIGluc2VydEh0bWxJbnRvSWZyYW1lLFxuICBpc0FycmF5LFxuICBpc0Jvb2xlYW4sXG4gIGlzSW50ZWdlcixcbiAgaXNOdW1iZXIsXG4gIGlzUGxhaW5PYmplY3QsXG4gIGxvZ0Vycm9yLFxuICBwaWNrLFxuICB0cmlnZ2VyUGl4ZWxcbn0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQge2luY2x1ZGVzfSBmcm9tICcuL3BvbHlmaWxsLmpzJztcbmltcG9ydCB7YXVjdGlvbk1hbmFnZXJ9IGZyb20gJy4vYXVjdGlvbk1hbmFnZXIuanMnO1xuaW1wb3J0IENPTlNUQU5UUyBmcm9tICcuL2NvbnN0YW50cy5qc29uJztcbmltcG9ydCB7TkFUSVZFfSBmcm9tICcuL21lZGlhVHlwZXMuanMnO1xuXG5leHBvcnQgY29uc3QgbmF0aXZlQWRhcHRlcnMgPSBbXTtcblxuZXhwb3J0IGNvbnN0IE5BVElWRV9UQVJHRVRJTkdfS0VZUyA9IE9iamVjdC5rZXlzKENPTlNUQU5UUy5OQVRJVkVfS0VZUykubWFwKFxuICBrZXkgPT4gQ09OU1RBTlRTLk5BVElWRV9LRVlTW2tleV1cbik7XG5cbmV4cG9ydCBjb25zdCBJTUFHRSA9IHtcbiAgb3J0Yjoge1xuICAgIHZlcjogJzEuMicsXG4gICAgYXNzZXRzOiBbXG4gICAgICB7XG4gICAgICAgIHJlcXVpcmVkOiAxLFxuICAgICAgICBpZDogMSxcbiAgICAgICAgaW1nOiB7XG4gICAgICAgICAgdHlwZTogMyxcbiAgICAgICAgICB3bWluOiAxMDAsXG4gICAgICAgICAgaG1pbjogMTAwLFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICByZXF1aXJlZDogMSxcbiAgICAgICAgaWQ6IDIsXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgbGVuOiAxNDAsXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlcXVpcmVkOiAxLFxuICAgICAgICBpZDogMyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHR5cGU6IDEsXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlcXVpcmVkOiAwLFxuICAgICAgICBpZDogNCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHR5cGU6IDIsXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlcXVpcmVkOiAwLFxuICAgICAgICBpZDogNSxcbiAgICAgICAgaW1nOiB7XG4gICAgICAgICAgdHlwZTogMSxcbiAgICAgICAgICB3bWluOiAyMCxcbiAgICAgICAgICBobWluOiAyMCxcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICBpbWFnZTogeyByZXF1aXJlZDogdHJ1ZSB9LFxuICB0aXRsZTogeyByZXF1aXJlZDogdHJ1ZSB9LFxuICBzcG9uc29yZWRCeTogeyByZXF1aXJlZDogdHJ1ZSB9LFxuICBjbGlja1VybDogeyByZXF1aXJlZDogdHJ1ZSB9LFxuICBib2R5OiB7IHJlcXVpcmVkOiBmYWxzZSB9LFxuICBpY29uOiB7IHJlcXVpcmVkOiBmYWxzZSB9LFxufTtcblxuY29uc3QgU1VQUE9SVEVEX1RZUEVTID0ge1xuICBpbWFnZTogSU1BR0Vcbn07XG5cbmNvbnN0IHsgTkFUSVZFX0FTU0VUX1RZUEVTLCBOQVRJVkVfSU1BR0VfVFlQRVMsIFBSRUJJRF9OQVRJVkVfREFUQV9LRVlTX1RPX09SVEIsIE5BVElWRV9LRVlTX1RIQVRfQVJFX05PVF9BU1NFVFMsIE5BVElWRV9LRVlTIH0gPSBDT05TVEFOVFM7XG5cbi8vIGludmVyc2UgbmF0aXZlIG1hcHMgdXNlZnVsIGZvciBjb252ZXJ0aW5nIHRvIGxlZ2FjeVxuY29uc3QgUFJFQklEX05BVElWRV9EQVRBX0tFWVNfVE9fT1JUQl9JTlZFUlNFID0gaW52ZXJzZShQUkVCSURfTkFUSVZFX0RBVEFfS0VZU19UT19PUlRCKTtcbmNvbnN0IE5BVElWRV9BU1NFVF9UWVBFU19JTlZFUlNFID0gaW52ZXJzZShOQVRJVkVfQVNTRVRfVFlQRVMpO1xuXG5jb25zdCBUUkFDS0VSX01FVEhPRFMgPSB7XG4gIGltZzogMSxcbiAganM6IDIsXG4gIDE6ICdpbWcnLFxuICAyOiAnanMnXG59XG5cbmNvbnN0IFRSQUNLRVJfRVZFTlRTID0ge1xuICBpbXByZXNzaW9uOiAxLFxuICAndmlld2FibGUtbXJjNTAnOiAyLFxuICAndmlld2FibGUtbXJjMTAwJzogMyxcbiAgJ3ZpZXdhYmxlLXZpZGVvNTAnOiA0LFxufVxuXG4vKipcbiAqIFJlY2lldmVzIG5hdGl2ZVBhcmFtcyBmcm9tIGFuIGFkVW5pdC4gSWYgdGhlIHBhcmFtcyB3ZXJlIG5vdCBvZiB0eXBlICd0eXBlJyxcbiAqIHBhc3NlcyB0aGVtIG9uIGRpcmVjdGx5LiBJZiB0aGV5IHdlcmUgb2YgdHlwZSAndHlwZScsIHRyYW5zbGF0ZVxuICogdGhlbSBpbnRvIHRoZSBwcmVkZWZpbmVkIHNwZWNpZmljIGFzc2V0IHJlcXVlc3RzIGZvciB0aGF0IHR5cGUgb2YgbmF0aXZlIGFkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc05hdGl2ZUFkVW5pdFBhcmFtcyhwYXJhbXMpIHtcbiAgaWYgKHBhcmFtcyAmJiBwYXJhbXMudHlwZSAmJiB0eXBlSXNTdXBwb3J0ZWQocGFyYW1zLnR5cGUpKSB7XG4gICAgcGFyYW1zID0gU1VQUE9SVEVEX1RZUEVTW3BhcmFtcy50eXBlXTtcbiAgfVxuXG4gIGlmIChwYXJhbXMgJiYgcGFyYW1zLm9ydGIgJiYgIWlzT3BlblJUQkJpZFJlcXVlc3RWYWxpZChwYXJhbXMub3J0YikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29yYXRlQWRVbml0c1dpdGhOYXRpdmVQYXJhbXMoYWRVbml0cykge1xuICBhZFVuaXRzLmZvckVhY2goYWRVbml0ID0+IHtcbiAgICBjb25zdCBuYXRpdmVQYXJhbXMgPVxuICAgICAgYWRVbml0Lm5hdGl2ZVBhcmFtcyB8fCBkZWVwQWNjZXNzKGFkVW5pdCwgJ21lZGlhVHlwZXMubmF0aXZlJyk7XG4gICAgaWYgKG5hdGl2ZVBhcmFtcykge1xuICAgICAgYWRVbml0Lm5hdGl2ZVBhcmFtcyA9IHByb2Nlc3NOYXRpdmVBZFVuaXRQYXJhbXMobmF0aXZlUGFyYW1zKTtcbiAgICB9XG4gICAgaWYgKGFkVW5pdC5uYXRpdmVQYXJhbXMpIHtcbiAgICAgIGFkVW5pdC5uYXRpdmVPcnRiUmVxdWVzdCA9IGFkVW5pdC5uYXRpdmVQYXJhbXMub3J0YiB8fCB0b09ydGJOYXRpdmVSZXF1ZXN0KGFkVW5pdC5uYXRpdmVQYXJhbXMpO1xuICAgIH1cbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNPcGVuUlRCQmlkUmVxdWVzdFZhbGlkKG9ydGIpIHtcbiAgY29uc3QgYXNzZXRzID0gb3J0Yi5hc3NldHM7XG4gIGlmICghQXJyYXkuaXNBcnJheShhc3NldHMpIHx8IGFzc2V0cy5sZW5ndGggPT09IDApIHtcbiAgICBsb2dFcnJvcihgYXNzZXRzIGluIG1lZGlhVHlwZXMubmF0aXZlLm9ydGIgaXMgbm90IGFuIGFycmF5LCBvciBpdCdzIGVtcHR5LiBBc3NldHM6IGAsIGFzc2V0cyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gdmFsaWRhdGUgdGhhdCBpZHMgZXhpc3QsIHRoYXQgdGhleSBhcmUgdW5pcXVlIGFuZCB0aGF0IHRoZXkgYXJlIG51bWJlcnNcbiAgY29uc3QgaWRzID0gYXNzZXRzLm1hcChhc3NldCA9PiBhc3NldC5pZCk7XG4gIGlmIChhc3NldHMubGVuZ3RoICE9PSBuZXcgU2V0KGlkcykuc2l6ZSB8fCBpZHMuc29tZShpZCA9PiBpZCAhPT0gcGFyc2VJbnQoaWQsIDEwKSkpIHtcbiAgICBsb2dFcnJvcihgZWFjaCBhc3NldCBvYmplY3QgbXVzdCBoYXZlICdpZCcgcHJvcGVydHksIGl0IG11c3QgYmUgdW5pcXVlIGFuZCBpdCBtdXN0IGJlIGFuIGludGVnZXJgKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAob3J0Yi5oYXNPd25Qcm9wZXJ0eSgnZXZlbnR0cmFja2VycycpICYmICFBcnJheS5pc0FycmF5KG9ydGIuZXZlbnR0cmFja2VycykpIHtcbiAgICBsb2dFcnJvcignb3J0Yi5ldmVudHRyYWNrZXJzIGlzIG5vdCBhbiBhcnJheS4gRXZlbnR0cmFja2VyczogJywgb3J0Yi5ldmVudHRyYWNrZXJzKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gYXNzZXRzLmV2ZXJ5KGFzc2V0ID0+IGlzT3BlblJUQkFzc2V0VmFsaWQoYXNzZXQpKVxufVxuXG5mdW5jdGlvbiBpc09wZW5SVEJBc3NldFZhbGlkKGFzc2V0KSB7XG4gIGlmICghaXNQbGFpbk9iamVjdChhc3NldCkpIHtcbiAgICBsb2dFcnJvcihgYXNzZXQgbXVzdCBiZSBhbiBvYmplY3QuIFByb3ZpZGVkIGFzc2V0OiBgLCBhc3NldCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChhc3NldC5pbWcpIHtcbiAgICBpZiAoIWlzTnVtYmVyKGFzc2V0LmltZy53KSAmJiAhaXNOdW1iZXIoYXNzZXQuaW1nLndtaW4pKSB7XG4gICAgICBsb2dFcnJvcihgZm9yIGltZyBhc3NldCB0aGVyZSBtdXN0IGJlICd3JyBvciAnd21pbicgcHJvcGVydHlgKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFpc051bWJlcihhc3NldC5pbWcuaCkgJiYgIWlzTnVtYmVyKGFzc2V0LmltZy5obWluKSkge1xuICAgICAgbG9nRXJyb3IoYGZvciBpbWcgYXNzZXQgdGhlcmUgbXVzdCBiZSAnaCcgb3IgJ2htaW4nIHByb3BlcnR5YCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGFzc2V0LnRpdGxlKSB7XG4gICAgaWYgKCFpc051bWJlcihhc3NldC50aXRsZS5sZW4pKSB7XG4gICAgICBsb2dFcnJvcihgZm9yIHRpdGxlIGFzc2V0IHRoZXJlIG11c3QgYmUgJ2xlbicgcHJvcGVydHkgZGVmaW5lZGApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhc3NldC5kYXRhKSB7XG4gICAgaWYgKCFpc051bWJlcihhc3NldC5kYXRhLnR5cGUpKSB7XG4gICAgICBsb2dFcnJvcihgZm9yIGRhdGEgYXNzZXQgJ3R5cGUnIHByb3BlcnR5IG11c3QgYmUgYSBudW1iZXJgKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYXNzZXQudmlkZW8pIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXNzZXQudmlkZW8ubWltZXMpIHx8ICFBcnJheS5pc0FycmF5KGFzc2V0LnZpZGVvLnByb3RvY29scykgfHxcbiAgICAgICFpc051bWJlcihhc3NldC52aWRlby5taW5kdXJhdGlvbikgfHwgIWlzTnVtYmVyKGFzc2V0LnZpZGVvLm1heGR1cmF0aW9uKSkge1xuICAgICAgbG9nRXJyb3IoJ3ZpZGVvIGFzc2V0IGlzIG5vdCBwcm9wZXJseSBjb25maWd1cmVkJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBuYXRpdmUgdHlwZSBzcGVjaWZpZWQgaW4gdGhlIGFkVW5pdCBpcyBzdXBwb3J0ZWQgYnkgUHJlYmlkLlxuICovXG5mdW5jdGlvbiB0eXBlSXNTdXBwb3J0ZWQodHlwZSkge1xuICBpZiAoISh0eXBlICYmIGluY2x1ZGVzKE9iamVjdC5rZXlzKFNVUFBPUlRFRF9UWVBFUyksIHR5cGUpKSkge1xuICAgIGxvZ0Vycm9yKGAke3R5cGV9IG5hdGl2ZVBhcmFtIGlzIG5vdCBzdXBwb3J0ZWRgKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciB3b3JraW5nIHdpdGggbmF0aXZlLWVuYWJsZWQgYWRVbml0c1xuICogVE9ETzogYWJzdHJhY3QgdGhpcyBhbmQgdGhlIHZpZGVvIGhlbHBlciBmdW5jdGlvbnMgaW50byBnZW5lcmFsXG4gKiBhZHVuaXQgdmFsaWRhdGlvbiBoZWxwZXIgZnVuY3Rpb25zXG4gKi9cbmV4cG9ydCBjb25zdCBuYXRpdmVBZFVuaXQgPSBhZFVuaXQgPT4ge1xuICBjb25zdCBtZWRpYVR5cGUgPSBhZFVuaXQubWVkaWFUeXBlID09PSAnbmF0aXZlJztcbiAgY29uc3QgbWVkaWFUeXBlcyA9IGRlZXBBY2Nlc3MoYWRVbml0LCAnbWVkaWFUeXBlcy5uYXRpdmUnKTtcbiAgcmV0dXJuIG1lZGlhVHlwZSB8fCBtZWRpYVR5cGVzO1xufVxuZXhwb3J0IGNvbnN0IG5hdGl2ZUJpZGRlciA9IGJpZCA9PiBpbmNsdWRlcyhuYXRpdmVBZGFwdGVycywgYmlkLmJpZGRlcik7XG5leHBvcnQgY29uc3QgaGFzTm9uTmF0aXZlQmlkZGVyID0gYWRVbml0ID0+XG4gIGFkVW5pdC5iaWRzLmZpbHRlcihiaWQgPT4gIW5hdGl2ZUJpZGRlcihiaWQpKS5sZW5ndGg7XG5cbi8qKlxuICogVmFsaWRhdGUgdGhhdCB0aGUgbmF0aXZlIGFzc2V0cyBvbiB0aGlzIGJpZCBjb250YWluIGFsbCBhc3NldHMgdGhhdCB3ZXJlXG4gKiBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gdGhlIGFkVW5pdCBjb25maWd1cmF0aW9uLlxuICogQHBhcmFtIHtCaWR9IGJpZCBOYXRpdmUgYmlkIHRvIHZhbGlkYXRlXG4gKiBAcGFyYW0ge0JpZFJlcXVlc3RbXX0gYmlkUmVxdWVzdHMgQWxsIGJpZCByZXF1ZXN0cyBmb3IgYW4gYXVjdGlvblxuICogQHJldHVybiB7Qm9vbGVhbn0gSWYgb2JqZWN0IGlzIHZhbGlkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuYXRpdmVCaWRJc1ZhbGlkKGJpZCwge2luZGV4ID0gYXVjdGlvbk1hbmFnZXIuaW5kZXh9ID0ge30pIHtcbiAgY29uc3QgYWRVbml0ID0gaW5kZXguZ2V0QWRVbml0KGJpZCk7XG4gIGlmICghYWRVbml0KSB7IHJldHVybiBmYWxzZTsgfVxuICBsZXQgb3J0YlJlcXVlc3QgPSBhZFVuaXQubmF0aXZlT3J0YlJlcXVlc3RcbiAgbGV0IG9ydGJSZXNwb25zZSA9IGJpZC5uYXRpdmU/Lm9ydGIgfHwgdG9PcnRiTmF0aXZlUmVzcG9uc2UoYmlkLm5hdGl2ZSwgb3J0YlJlcXVlc3QpO1xuICByZXR1cm4gaXNOYXRpdmVPcGVuUlRCQmlkVmFsaWQob3J0YlJlc3BvbnNlLCBvcnRiUmVxdWVzdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05hdGl2ZU9wZW5SVEJCaWRWYWxpZChiaWRPUlRCLCBiaWRSZXF1ZXN0T1JUQikge1xuICBpZiAoIWRlZXBBY2Nlc3MoYmlkT1JUQiwgJ2xpbmsudXJsJykpIHtcbiAgICBsb2dFcnJvcihgbmF0aXZlIHJlc3BvbnNlIGRvZXNuJ3QgaGF2ZSAnbGluaycgcHJvcGVydHkuIE9ydGIgcmVzcG9uc2U6IGAsIGJpZE9SVEIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxldCByZXF1aXJlZEFzc2V0SWRzID0gYmlkUmVxdWVzdE9SVEIuYXNzZXRzLmZpbHRlcihhc3NldCA9PiBhc3NldC5yZXF1aXJlZCA9PT0gMSkubWFwKGEgPT4gYS5pZCk7XG4gIGxldCByZXR1cm5lZEFzc2V0SWRzID0gYmlkT1JUQi5hc3NldHMubWFwKGFzc2V0ID0+IGFzc2V0LmlkKTtcblxuICBjb25zdCBtYXRjaCA9IHJlcXVpcmVkQXNzZXRJZHMuZXZlcnkoYXNzZXRJZCA9PiBpbmNsdWRlcyhyZXR1cm5lZEFzc2V0SWRzLCBhc3NldElkKSk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICBsb2dFcnJvcihgZGlkbid0IHJlY2VpdmUgYSBiaWQgd2l0aCBhbGwgcmVxdWlyZWQgYXNzZXRzLiBSZXF1aXJlZCBpZHM6ICR7cmVxdWlyZWRBc3NldElkc30sIGJ1dCByZWNlaXZlZCBpZHMgaW4gcmVzcG9uc2U6ICR7cmV0dXJuZWRBc3NldElkc31gKTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaDtcbn1cblxuLypcbiAqIE5hdGl2ZSByZXNwb25zZXMgbWF5IGhhdmUgYXNzb2NpYXRlZCBpbXByZXNzaW9uIG9yIGNsaWNrIHRyYWNrZXJzLlxuICogVGhpcyByZXRyaWV2ZXMgdGhlIGFwcHJvcHJpYXRlIHRyYWNrZXIgdXJscyBmb3IgdGhlIGdpdmVuIGFkIG9iamVjdCBhbmRcbiAqIGZpcmVzIHRoZW0uIEFzIGEgbmF0aXZlIGNyZWF0aXZlcyBtYXkgYmUgaW4gYSBjcm9zcy1vcmlnaW4gZnJhbWUsIGl0IG1heSBiZVxuICogbmVjZXNzYXJ5IHRvIGludm9rZSB0aGlzIGZ1bmN0aW9uIHZpYSBwb3N0TWVzc2FnZS4gc2VjdXJlQ3JlYXRpdmVzIGlzXG4gKiBjb25maWd1cmVkIHRvIGZpcmUgdGhpcyBmdW5jdGlvbiB3aGVuIGl0IHJlY2VpdmVzIGEgYG1lc3NhZ2VgIG9mICdQcmViaWQgTmF0aXZlJ1xuICogYW5kIGFuIGBhZElkYCB3aXRoIHRoZSB2YWx1ZSBvZiB0aGUgYGJpZC5hZElkYC4gV2hlbiBhIG1lc3NhZ2UgaXMgcG9zdGVkIHdpdGhcbiAqIHRoZXNlIHBhcmFtZXRlcnMsIGltcHJlc3Npb24gdHJhY2tlcnMgYXJlIGZpcmVkLiBUbyBmaXJlIGNsaWNrIHRyYWNrZXJzLCB0aGVcbiAqIG1lc3NhZ2Ugc2hvdWxkIGNvbnRhaW4gYW4gYGFjdGlvbmAgc2V0IHRvICdjbGljaycuXG4gKlxuICogLy8gTmF0aXZlIGNyZWF0aXZlIHRlbXBsYXRlIGV4YW1wbGUgdXNhZ2VcbiAqIDxhIGhyZWY9XCIlJUNMSUNLX1VSTF9VTkVTQyUlJSVQQVRURVJOOmhiX25hdGl2ZV9saW5rdXJsJSVcIlxuICogICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAqICAgIG9uY2xpY2s9XCJmaXJlVHJhY2tlcnMoJ2NsaWNrJylcIj5cbiAqICAgICUlUEFUVEVSTjpoYl9uYXRpdmVfdGl0bGUlJVxuICogPC9hPlxuICpcbiAqIDxzY3JpcHQ+XG4gKiAgIGZ1bmN0aW9uIGZpcmVUcmFja2VycyhhY3Rpb24pIHtcbiAqICAgICB2YXIgbWVzc2FnZSA9IHttZXNzYWdlOiAnUHJlYmlkIE5hdGl2ZScsIGFkSWQ6ICclJVBBVFRFUk46aGJfYWRpZCUlJ307XG4gKiAgICAgaWYgKGFjdGlvbiA9PT0gJ2NsaWNrJykge21lc3NhZ2UuYWN0aW9uID0gJ2NsaWNrJzt9IC8vIGZpcmVzIGNsaWNrIHRyYWNrZXJzXG4gKiAgICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeShtZXNzYWdlKSwgJyonKTtcbiAqICAgfVxuICogICBmaXJlVHJhY2tlcnMoKTsgLy8gZmlyZXMgaW1wcmVzc2lvbnMgd2hlbiBjcmVhdGl2ZSBpcyBsb2FkZWRcbiAqIDwvc2NyaXB0PlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlyZU5hdGl2ZVRyYWNrZXJzKG1lc3NhZ2UsIGJpZFJlc3BvbnNlKSB7XG4gIGNvbnN0IG5hdGl2ZVJlc3BvbnNlID0gYmlkUmVzcG9uc2UubmF0aXZlLm9ydGIgfHwgbGVnYWN5UHJvcGVydGllc1RvT3J0Yk5hdGl2ZShiaWRSZXNwb25zZS5uYXRpdmUpO1xuXG4gIGlmIChtZXNzYWdlLmFjdGlvbiA9PT0gJ2NsaWNrJykge1xuICAgIGZpcmVDbGlja1RyYWNrZXJzKG5hdGl2ZVJlc3BvbnNlLCBtZXNzYWdlPy5hc3NldElkKTtcbiAgfSBlbHNlIHtcbiAgICBmaXJlSW1wcmVzc2lvblRyYWNrZXJzKG5hdGl2ZVJlc3BvbnNlKTtcbiAgfVxuICByZXR1cm4gbWVzc2FnZS5hY3Rpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXJlSW1wcmVzc2lvblRyYWNrZXJzKG5hdGl2ZVJlc3BvbnNlLCB7cnVuTWFya3VwID0gKG1rdXApID0+IGluc2VydEh0bWxJbnRvSWZyYW1lKG1rdXApLCBmZXRjaFVSTCA9IHRyaWdnZXJQaXhlbH0gPSB7fSkge1xuICBjb25zdCBpbXBUcmFja2VycyA9IChuYXRpdmVSZXNwb25zZS5ldmVudHRyYWNrZXJzIHx8IFtdKVxuICAgIC5maWx0ZXIodHJhY2tlciA9PiB0cmFja2VyLmV2ZW50ID09PSBUUkFDS0VSX0VWRU5UUy5pbXByZXNzaW9uKTtcblxuICBsZXQge2ltZywganN9ID0gaW1wVHJhY2tlcnMucmVkdWNlKCh0YWxseSwgdHJhY2tlcikgPT4ge1xuICAgIGlmIChUUkFDS0VSX01FVEhPRFMuaGFzT3duUHJvcGVydHkodHJhY2tlci5tZXRob2QpKSB7XG4gICAgICB0YWxseVtUUkFDS0VSX01FVEhPRFNbdHJhY2tlci5tZXRob2RdXS5wdXNoKHRyYWNrZXIudXJsKVxuICAgIH1cbiAgICByZXR1cm4gdGFsbHk7XG4gIH0sIHtpbWc6IFtdLCBqczogW119KTtcblxuICBpZiAobmF0aXZlUmVzcG9uc2UuaW1wdHJhY2tlcnMpIHtcbiAgICBpbWcgPSBpbWcuY29uY2F0KG5hdGl2ZVJlc3BvbnNlLmltcHRyYWNrZXJzKTtcbiAgfVxuICBpbWcuZm9yRWFjaCh1cmwgPT4gZmV0Y2hVUkwodXJsKSk7XG5cbiAganMgPSBqcy5tYXAodXJsID0+IGA8c2NyaXB0IGFzeW5jIHNyYz1cIiR7dXJsfVwiPjwvc2NyaXB0PmApO1xuICBpZiAobmF0aXZlUmVzcG9uc2UuanN0cmFja2VyKSB7XG4gICAgLy8ganN0cmFja2VyIGlzIGFscmVhZHkgSFRNTCBtYXJrdXBcbiAgICBqcyA9IGpzLmNvbmNhdChbbmF0aXZlUmVzcG9uc2UuanN0cmFja2VyXSk7XG4gIH1cbiAgaWYgKGpzLmxlbmd0aCkge1xuICAgIHJ1bk1hcmt1cChqcy5qb2luKCdcXG4nKSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpcmVDbGlja1RyYWNrZXJzKG5hdGl2ZVJlc3BvbnNlLCBhc3NldElkID0gbnVsbCwge2ZldGNoVVJMID0gdHJpZ2dlclBpeGVsfSA9IHt9KSB7XG4gIC8vIGxlZ2FjeSBjbGljayB0cmFja2VyXG4gIGlmICghYXNzZXRJZCkge1xuICAgIChuYXRpdmVSZXNwb25zZS5saW5rPy5jbGlja3RyYWNrZXJzIHx8IFtdKS5mb3JFYWNoKHVybCA9PiBmZXRjaFVSTCh1cmwpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBvcnRiIGNsaWNrIHRyYWNrZXIuIFRoaXMgd2lsbCB0cnkgdG8gY2FsbCB0aGUgY2xpY2t0cmFja2VyIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXNzZXQ7XG4gICAgLy8gd2lsbCBmYWxsYmFjayB0byB0aGUgbGluayBpZiBub25lIGlzIGZvdW5kLlxuICAgIGNvbnN0IGFzc2V0SWRMaW5rTWFwID0gKG5hdGl2ZVJlc3BvbnNlLmFzc2V0cyB8fCBbXSlcbiAgICAgIC5maWx0ZXIoYSA9PiBhLmxpbmspXG4gICAgICAucmVkdWNlKChtYXAsIGFzc2V0KSA9PiB7XG4gICAgICAgIG1hcFthc3NldC5pZF0gPSBhc3NldC5saW5rO1xuICAgICAgICByZXR1cm4gbWFwXG4gICAgICB9LCB7fSk7XG4gICAgY29uc3QgbWFzdGVyQ2xpY2tUcmFja2VycyA9IG5hdGl2ZVJlc3BvbnNlLmxpbms/LmNsaWNrdHJhY2tlcnMgfHwgW107XG4gICAgbGV0IGFzc2V0TGluayA9IGFzc2V0SWRMaW5rTWFwW2Fzc2V0SWRdO1xuICAgIGxldCBjbGlja1RyYWNrZXJzID0gbWFzdGVyQ2xpY2tUcmFja2VycztcbiAgICBpZiAoYXNzZXRMaW5rKSB7XG4gICAgICBjbGlja1RyYWNrZXJzID0gYXNzZXRMaW5rLmNsaWNrdHJhY2tlcnMgfHwgW107XG4gICAgfVxuICAgIGNsaWNrVHJhY2tlcnMuZm9yRWFjaCh1cmwgPT4gZmV0Y2hVUkwodXJsKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIG5hdGl2ZSB0YXJnZXRpbmcga2V5LXZhbHVlIHBhaXJzXG4gKiBAcGFyYW0ge09iamVjdH0gYmlkXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRhcmdldGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmF0aXZlVGFyZ2V0aW5nKGJpZCwge2luZGV4ID0gYXVjdGlvbk1hbmFnZXIuaW5kZXh9ID0ge30pIHtcbiAgbGV0IGtleVZhbHVlcyA9IHt9O1xuICBjb25zdCBhZFVuaXQgPSBpbmRleC5nZXRBZFVuaXQoYmlkKTtcbiAgaWYgKGRlZXBBY2Nlc3MoYWRVbml0LCAnbmF0aXZlUGFyYW1zLnJlbmRlcmVyVXJsJykpIHtcbiAgICBiaWRbJ25hdGl2ZSddWydyZW5kZXJlclVybCddID0gZ2V0QXNzZXRWYWx1ZShhZFVuaXQubmF0aXZlUGFyYW1zWydyZW5kZXJlclVybCddKTtcbiAgfSBlbHNlIGlmIChkZWVwQWNjZXNzKGFkVW5pdCwgJ25hdGl2ZVBhcmFtcy5hZFRlbXBsYXRlJykpIHtcbiAgICBiaWRbJ25hdGl2ZSddWydhZFRlbXBsYXRlJ10gPSBnZXRBc3NldFZhbHVlKGFkVW5pdC5uYXRpdmVQYXJhbXNbJ2FkVGVtcGxhdGUnXSk7XG4gIH1cblxuICBjb25zdCBnbG9iYWxTZW5kVGFyZ2V0aW5nS2V5cyA9IGRlZXBBY2Nlc3MoXG4gICAgYWRVbml0LFxuICAgIGBuYXRpdmVQYXJhbXMuc2VuZFRhcmdldGluZ0tleXNgXG4gICkgIT09IGZhbHNlO1xuXG4gIGNvbnN0IG5hdGl2ZUtleXMgPSBnZXROYXRpdmVLZXlzKGFkVW5pdCk7XG5cbiAgY29uc3QgZmxhdEJpZE5hdGl2ZUtleXMgPSB7IC4uLmJpZC5uYXRpdmUsIC4uLmJpZC5uYXRpdmUuZXh0IH07XG4gIGRlbGV0ZSBmbGF0QmlkTmF0aXZlS2V5cy5leHQ7XG5cbiAgT2JqZWN0LmtleXMoZmxhdEJpZE5hdGl2ZUtleXMpLmZvckVhY2goYXNzZXQgPT4ge1xuICAgIGNvbnN0IGtleSA9IG5hdGl2ZUtleXNbYXNzZXRdO1xuICAgIGxldCB2YWx1ZSA9IGdldEFzc2V0VmFsdWUoYmlkLm5hdGl2ZVthc3NldF0pIHx8IGdldEFzc2V0VmFsdWUoZGVlcEFjY2VzcyhiaWQsIGBuYXRpdmUuZXh0LiR7YXNzZXR9YCkpO1xuXG4gICAgaWYgKGFzc2V0ID09PSAnYWRUZW1wbGF0ZScgfHwgIWtleSB8fCAhdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgc2VuZFBsYWNlaG9sZGVyID0gZGVlcEFjY2VzcyhhZFVuaXQsIGBuYXRpdmVQYXJhbXMuJHthc3NldH0uc2VuZElkYCk7XG4gICAgaWYgKHR5cGVvZiBzZW5kUGxhY2Vob2xkZXIgIT09ICdib29sZWFuJykge1xuICAgICAgc2VuZFBsYWNlaG9sZGVyID0gZGVlcEFjY2VzcyhhZFVuaXQsIGBuYXRpdmVQYXJhbXMuZXh0LiR7YXNzZXR9LnNlbmRJZGApO1xuICAgIH1cblxuICAgIGlmIChzZW5kUGxhY2Vob2xkZXIpIHtcbiAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gYCR7a2V5fToke2JpZC5hZElkfWA7XG4gICAgICB2YWx1ZSA9IHBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIGxldCBhc3NldFNlbmRUYXJnZXRpbmdLZXlzID0gZGVlcEFjY2VzcyhhZFVuaXQsIGBuYXRpdmVQYXJhbXMuJHthc3NldH0uc2VuZFRhcmdldGluZ0tleXNgKTtcbiAgICBpZiAodHlwZW9mIGFzc2V0U2VuZFRhcmdldGluZ0tleXMgIT09ICdib29sZWFuJykge1xuICAgICAgYXNzZXRTZW5kVGFyZ2V0aW5nS2V5cyA9IGRlZXBBY2Nlc3MoYWRVbml0LCBgbmF0aXZlUGFyYW1zLmV4dC4ke2Fzc2V0fS5zZW5kVGFyZ2V0aW5nS2V5c2ApO1xuICAgIH1cblxuICAgIGNvbnN0IHNlbmRUYXJnZXRpbmcgPSB0eXBlb2YgYXNzZXRTZW5kVGFyZ2V0aW5nS2V5cyA9PT0gJ2Jvb2xlYW4nID8gYXNzZXRTZW5kVGFyZ2V0aW5nS2V5cyA6IGdsb2JhbFNlbmRUYXJnZXRpbmdLZXlzO1xuXG4gICAgaWYgKHNlbmRUYXJnZXRpbmcpIHtcbiAgICAgIGtleVZhbHVlc1trZXldID0gdmFsdWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4ga2V5VmFsdWVzO1xufVxuXG5mdW5jdGlvbiBhc3NldHNNZXNzYWdlKGRhdGEsIGFkT2JqZWN0LCBrZXlzLCB7aW5kZXggPSBhdWN0aW9uTWFuYWdlci5pbmRleH0gPSB7fSkge1xuICBjb25zdCBtZXNzYWdlID0ge1xuICAgIG1lc3NhZ2U6ICdhc3NldFJlc3BvbnNlJyxcbiAgICBhZElkOiBkYXRhLmFkSWQsXG4gIH07XG5cbiAgY29uc3QgYWRVbml0ID0gaW5kZXguZ2V0QWRVbml0KGFkT2JqZWN0KTtcbiAgbGV0IG5hdGl2ZVJlc3AgPSBhZE9iamVjdC5uYXRpdmU7XG5cbiAgaWYgKGFkT2JqZWN0Lm5hdGl2ZS5vcnRiKSB7XG4gICAgbWVzc2FnZS5vcnRiID0gYWRPYmplY3QubmF0aXZlLm9ydGI7XG4gIH0gZWxzZSBpZiAoYWRVbml0Lm1lZGlhVHlwZXM/Lm5hdGl2ZT8ub3J0Yikge1xuICAgIG1lc3NhZ2Uub3J0YiA9IHRvT3J0Yk5hdGl2ZVJlc3BvbnNlKGFkT2JqZWN0Lm5hdGl2ZSwgYWRVbml0Lm5hdGl2ZU9ydGJSZXF1ZXN0KTtcbiAgfVxuICBtZXNzYWdlLmFzc2V0cyA9IFtdO1xuXG4gIChrZXlzID09IG51bGwgPyBPYmplY3Qua2V5cyhuYXRpdmVSZXNwKSA6IGtleXMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGtleSA9PT0gJ2FkVGVtcGxhdGUnICYmIG5hdGl2ZVJlc3Bba2V5XSkge1xuICAgICAgbWVzc2FnZS5hZFRlbXBsYXRlID0gZ2V0QXNzZXRWYWx1ZShuYXRpdmVSZXNwW2tleV0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncmVuZGVyZXJVcmwnICYmIG5hdGl2ZVJlc3Bba2V5XSkge1xuICAgICAgbWVzc2FnZS5yZW5kZXJlclVybCA9IGdldEFzc2V0VmFsdWUobmF0aXZlUmVzcFtrZXldKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2V4dCcpIHtcbiAgICAgIE9iamVjdC5rZXlzKG5hdGl2ZVJlc3Bba2V5XSkuZm9yRWFjaChleHRLZXkgPT4ge1xuICAgICAgICBpZiAobmF0aXZlUmVzcFtrZXldW2V4dEtleV0pIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGdldEFzc2V0VmFsdWUobmF0aXZlUmVzcFtrZXldW2V4dEtleV0pO1xuICAgICAgICAgIG1lc3NhZ2UuYXNzZXRzLnB1c2goeyBrZXk6IGV4dEtleSwgdmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmIChuYXRpdmVSZXNwW2tleV0gJiYgQ09OU1RBTlRTLk5BVElWRV9LRVlTLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZ2V0QXNzZXRWYWx1ZShuYXRpdmVSZXNwW2tleV0pO1xuXG4gICAgICBtZXNzYWdlLmFzc2V0cy5wdXNoKHsga2V5LCB2YWx1ZSB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbWVzc2FnZTtcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbWVzc2FnZSBvYmplY3QgY29udGFpbmluZyBhc3NldCB2YWx1ZXMgZm9yIGVhY2ggb2YgdGhlXG4gKiByZXF1ZXN0ZWQgZGF0YSBrZXlzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXNzZXRNZXNzYWdlKGRhdGEsIGFkT2JqZWN0KSB7XG4gIGNvbnN0IGtleXMgPSBkYXRhLmFzc2V0cy5tYXAoKGspID0+IGdldEtleUJ5VmFsdWUoQ09OU1RBTlRTLk5BVElWRV9LRVlTLCBrKSk7XG4gIHJldHVybiBhc3NldHNNZXNzYWdlKGRhdGEsIGFkT2JqZWN0LCBrZXlzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbEFzc2V0c01lc3NhZ2UoZGF0YSwgYWRPYmplY3QpIHtcbiAgcmV0dXJuIGFzc2V0c01lc3NhZ2UoZGF0YSwgYWRPYmplY3QsIG51bGwpO1xufVxuXG4vKipcbiAqIE5hdGl2ZSBhc3NldHMgY2FuIGJlIGEgc3RyaW5nIG9yIGFuIG9iamVjdCB3aXRoIGEgdXJsIHByb3AuIFJldHVybnMgdGhlIHZhbHVlXG4gKiBhcHByb3ByaWF0ZSBmb3Igc2VuZGluZyBpbiBhZHNlcnZlciB0YXJnZXRpbmcgb3IgcGxhY2Vob2xkZXIgcmVwbGFjZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGdldEFzc2V0VmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlPy51cmwgfHwgdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdldE5hdGl2ZUtleXMoYWRVbml0KSB7XG4gIGNvbnN0IGV4dHJhTmF0aXZlS2V5cyA9IHt9XG5cbiAgaWYgKGRlZXBBY2Nlc3MoYWRVbml0LCAnbmF0aXZlUGFyYW1zLmV4dCcpKSB7XG4gICAgT2JqZWN0LmtleXMoYWRVbml0Lm5hdGl2ZVBhcmFtcy5leHQpLmZvckVhY2goZXh0S2V5ID0+IHtcbiAgICAgIGV4dHJhTmF0aXZlS2V5c1tleHRLZXldID0gYGhiX25hdGl2ZV8ke2V4dEtleX1gO1xuICAgIH0pXG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLkNPTlNUQU5UUy5OQVRJVkVfS0VZUyxcbiAgICAuLi5leHRyYU5hdGl2ZUtleXNcbiAgfVxufVxuXG4vKipcbiAqIGNvbnZlcnRzIFByZWJpZCBsZWdhY3kgbmF0aXZlIGFzc2V0cyByZXF1ZXN0IHRvIE9wZW5SVEIgZm9ybWF0XG4gKiBAcGFyYW0ge29iamVjdH0gbGVnYWN5TmF0aXZlQXNzZXRzIGFuIG9iamVjdCB0aGF0IGRlc2NyaWJlcyBhIG5hdGl2ZSBiaWQgcmVxdWVzdCBpbiBQcmViaWQgcHJvcHJpZXRhcnkgZm9ybWF0XG4gKiBAcmV0dXJucyBhbiBPcGVuUlRCIGZvcm1hdCBvZiB0aGUgc2FtZSBiaWQgcmVxdWVzdFxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9PcnRiTmF0aXZlUmVxdWVzdChsZWdhY3lOYXRpdmVBc3NldHMpIHtcbiAgaWYgKCFsZWdhY3lOYXRpdmVBc3NldHMgJiYgIWlzUGxhaW5PYmplY3QobGVnYWN5TmF0aXZlQXNzZXRzKSkge1xuICAgIGxvZ0Vycm9yKCdOYXRpdmUgYXNzZXRzIG9iamVjdCBpcyBlbXB0eSBvciBub3QgYW4gb2JqZWN0OiAnLCBsZWdhY3lOYXRpdmVBc3NldHMpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBvcnRiID0ge1xuICAgIHZlcjogJzEuMicsXG4gICAgYXNzZXRzOiBbXVxuICB9O1xuICBmb3IgKGxldCBrZXkgaW4gbGVnYWN5TmF0aXZlQXNzZXRzKSB7XG4gICAgLy8gc2tpcCBjb252ZXJzaW9uIGZvciBub24tYXNzZXQga2V5c1xuICAgIGlmIChOQVRJVkVfS0VZU19USEFUX0FSRV9OT1RfQVNTRVRTLmluY2x1ZGVzKGtleSkpIGNvbnRpbnVlO1xuICAgIGlmICghTkFUSVZFX0tFWVMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgbG9nRXJyb3IoYFVucmVjb2duaXplZCBuYXRpdmUgYXNzZXQgY29kZTogJHtrZXl9LiBBc3NldCB3aWxsIGJlIGlnbm9yZWQuYCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAncHJpdmFjeUxpbmsnKSB7XG4gICAgICBvcnRiLnByaXZhY3kgPSAxO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgYXNzZXQgPSBsZWdhY3lOYXRpdmVBc3NldHNba2V5XTtcbiAgICBsZXQgcmVxdWlyZWQgPSAwO1xuICAgIGlmIChhc3NldC5yZXF1aXJlZCAmJiBpc0Jvb2xlYW4oYXNzZXQucmVxdWlyZWQpKSB7XG4gICAgICByZXF1aXJlZCA9IE51bWJlcihhc3NldC5yZXF1aXJlZCk7XG4gICAgfVxuICAgIGNvbnN0IG9ydGJBc3NldCA9IHtcbiAgICAgIGlkOiBvcnRiLmFzc2V0cy5sZW5ndGgsXG4gICAgICByZXF1aXJlZFxuICAgIH07XG4gICAgLy8gZGF0YSBjYXNlc1xuICAgIGlmIChrZXkgaW4gUFJFQklEX05BVElWRV9EQVRBX0tFWVNfVE9fT1JUQikge1xuICAgICAgb3J0YkFzc2V0LmRhdGEgPSB7XG4gICAgICAgIHR5cGU6IE5BVElWRV9BU1NFVF9UWVBFU1tQUkVCSURfTkFUSVZFX0RBVEFfS0VZU19UT19PUlRCW2tleV1dXG4gICAgICB9XG4gICAgICBpZiAoYXNzZXQubGVuKSB7XG4gICAgICAgIG9ydGJBc3NldC5kYXRhLmxlbiA9IGFzc2V0LmxlbjtcbiAgICAgIH1cbiAgICAvLyBpY29uIG9yIGltYWdlIGNhc2VcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2ljb24nIHx8IGtleSA9PT0gJ2ltYWdlJykge1xuICAgICAgb3J0YkFzc2V0LmltZyA9IHtcbiAgICAgICAgdHlwZToga2V5ID09PSAnaWNvbicgPyBOQVRJVkVfSU1BR0VfVFlQRVMuSUNPTiA6IE5BVElWRV9JTUFHRV9UWVBFUy5NQUlOLFxuICAgICAgfVxuICAgICAgLy8gaWYgbWluX3dpZHRoIGFuZCBtaW5faGVpZ2h0IGFyZSBkZWZpbmVkIGluIGFzcGVjdF9yYXRpbywgdGhleSBhcmUgcHJlZmVycmVkXG4gICAgICBpZiAoYXNzZXQuYXNwZWN0X3JhdGlvcykge1xuICAgICAgICBpZiAoIWlzQXJyYXkoYXNzZXQuYXNwZWN0X3JhdGlvcykpIHtcbiAgICAgICAgICBsb2dFcnJvcihcImltYWdlLmFzcGVjdF9yYXRpb3Mgd2FzIHBhc3NlZCwgYnV0IGl0J3Mgbm90IGEgYW4gYXJyYXk6XCIsIGFzc2V0LmFzcGVjdF9yYXRpb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKCFhc3NldC5hc3BlY3RfcmF0aW9zLmxlbmd0aCkge1xuICAgICAgICAgIGxvZ0Vycm9yKFwiaW1hZ2UuYXNwZWN0X3JhdGlvcyB3YXMgcGFzc2VkLCBidXQgaXQncyBlbXB0eTpcIiwgYXNzZXQuYXNwZWN0X3JhdGlvcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgeyBtaW5fd2lkdGg6IG1pbldpZHRoLCBtaW5faGVpZ2h0OiBtaW5IZWlnaHQgfSA9IGFzc2V0LmFzcGVjdF9yYXRpb3NbMF07XG4gICAgICAgICAgaWYgKCFpc0ludGVnZXIobWluV2lkdGgpIHx8ICFpc0ludGVnZXIobWluSGVpZ2h0KSkge1xuICAgICAgICAgICAgbG9nRXJyb3IoJ2ltYWdlLmFzcGVjdF9yYXRpb3MgbWluX3dpZHRoIG9yIG1pbl9oZWlnaHQgYXJlIGludmFsaWQ6ICcsIG1pbldpZHRoLCBtaW5IZWlnaHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcnRiQXNzZXQuaW1nLndtaW4gPSBtaW5XaWR0aDtcbiAgICAgICAgICAgIG9ydGJBc3NldC5pbWcuaG1pbiA9IG1pbkhlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgYXNwZWN0UmF0aW9zID0gYXNzZXQuYXNwZWN0X3JhdGlvc1xuICAgICAgICAgICAgLmZpbHRlcigoYXIpID0+IGFyLnJhdGlvX3dpZHRoICYmIGFyLnJhdGlvX2hlaWdodClcbiAgICAgICAgICAgIC5tYXAocmF0aW8gPT4gYCR7cmF0aW8ucmF0aW9fd2lkdGh9OiR7cmF0aW8ucmF0aW9faGVpZ2h0fWApO1xuICAgICAgICAgIGlmIChhc3BlY3RSYXRpb3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgb3J0YkFzc2V0LmltZy5leHQgPSB7XG4gICAgICAgICAgICAgIGFzcGVjdHJhdGlvczogYXNwZWN0UmF0aW9zXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGFzc2V0LnNpemVzIGV4aXN0LCBieSBPcGVuUlRCIHNwZWMgd2Ugc2hvdWxkIHJlbW92ZSB3bWluIGFuZCBobWluXG4gICAgICBpZiAoYXNzZXQuc2l6ZXMpIHtcbiAgICAgICAgaWYgKGFzc2V0LnNpemVzLmxlbmd0aCAhPT0gMiB8fCAhaXNJbnRlZ2VyKGFzc2V0LnNpemVzWzBdKSB8fCAhaXNJbnRlZ2VyKGFzc2V0LnNpemVzWzFdKSkge1xuICAgICAgICAgIGxvZ0Vycm9yKCdpbWFnZS5zaXplcyB3YXMgcGFzc2VkLCBidXQgaXRzIHZhbHVlIGlzIG5vdCBhbiBhcnJheSBvZiBpbnRlZ2VyczonLCBhc3NldC5zaXplcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3J0YkFzc2V0LmltZy53ID0gYXNzZXQuc2l6ZXNbMF07XG4gICAgICAgICAgb3J0YkFzc2V0LmltZy5oID0gYXNzZXQuc2l6ZXNbMV07XG4gICAgICAgICAgZGVsZXRlIG9ydGJBc3NldC5pbWcuaG1pbjtcbiAgICAgICAgICBkZWxldGUgb3J0YkFzc2V0LmltZy53bWluO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgLy8gdGl0bGUgY2FzZVxuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAndGl0bGUnKSB7XG4gICAgICBvcnRiQXNzZXQudGl0bGUgPSB7XG4gICAgICAgIC8vIGluIG9wZW5SVEIsIGxlbiBpcyByZXF1aXJlZCBmb3IgdGl0bGVzLCB3aGlsZSBpbiBsZWdhY3kgcHJlYmlkIHdhcyBub3QuXG4gICAgICAgIC8vIGZvciB0aGlzIHJlYXNvbiwgaWYgbGVuIGlzIG1pc3NpbmcgaW4gbGVnYWN5IHByZWJpZCwgd2UncmUgYWRkaW5nIGEgZGVmYXVsdCB2YWx1ZSBvZiAxNDAuXG4gICAgICAgIGxlbjogYXNzZXQubGVuIHx8IDE0MFxuICAgICAgfVxuICAgIC8vIGFsbCBleHRlbnNpb25zIHRvIHRoZSBuYXRpdmUgYmlkIHJlcXVlc3QgYXJlIHBhc3NlZCBhcyBpc1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZXh0Jykge1xuICAgICAgb3J0YkFzc2V0LmV4dCA9IGFzc2V0O1xuICAgICAgLy8gaW4gYGV4dGAgY2FzZSwgcmVxdWlyZWQgZmllbGQgaXMgbm90IG5lZWRlZFxuICAgICAgZGVsZXRlIG9ydGJBc3NldC5yZXF1aXJlZDtcbiAgICB9XG4gICAgb3J0Yi5hc3NldHMucHVzaChvcnRiQXNzZXQpO1xuICB9XG4gIHJldHVybiBvcnRiO1xufVxuXG4vKipcbiAqIEdyZWF0ZXN0IGNvbW1vbiBkaXZpc29yIGJldHdlZW4gdHdvIHBvc2l0aXZlIGludGVnZXJzXG4gKiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FdWNsaWRlYW5fYWxnb3JpdGhtXG4gKi9cbmZ1bmN0aW9uIGdjZChhLCBiKSB7XG4gIHdoaWxlIChhICYmIGIgJiYgYSAhPT0gYikge1xuICAgIGlmIChhID4gYikge1xuICAgICAgYSA9IGEgLSBiO1xuICAgIH0gZWxzZSB7XG4gICAgICBiID0gYiAtIGE7XG4gICAgfVxuICB9XG4gIHJldHVybiBhIHx8IGI7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjb252ZXJ0cyBhbiBPcGVuUlRCIG5hdGl2ZSByZXF1ZXN0IG9iamVjdCB0byBQcmViaWQgcHJvcHJpZXRhcnlcbiAqIGZvcm1hdC4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBmdW5jdGlvbiBpcyB0byBoZWxwIGFkYXB0ZXJzIHRvIGhhbmRsZSB0aGVcbiAqIHRyYW5zaXRpb24gcGhhc2Ugd2hlcmUgcHVibGlzaGVycyBtYXkgYmUgdXNpbmcgT3BlblJUQiBvYmplY3RzIGJ1dCB0aGVcbiAqICBiaWRkZXIgZG9lcyBub3QgeWV0IHN1cHBvcnQgaXQuXG4gKiBAcGFyYW0ge29iamVjdH0gb3BlblJUQlJlcXVlc3QgYW4gT3BlblJUQiB2MS4yIHJlcXVlc3Qgb2JqZWN0XG4gKiBAcmV0dXJucyBhIFByZWJpZCBsZWdhY3kgbmF0aXZlIGZvcm1hdCByZXF1ZXN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tT3J0Yk5hdGl2ZVJlcXVlc3Qob3BlblJUQlJlcXVlc3QpIHtcbiAgaWYgKCFpc09wZW5SVEJCaWRSZXF1ZXN0VmFsaWQob3BlblJUQlJlcXVlc3QpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgb2xkTmF0aXZlT2JqZWN0ID0ge307XG4gIGZvciAoY29uc3QgYXNzZXQgb2Ygb3BlblJUQlJlcXVlc3QuYXNzZXRzKSB7XG4gICAgaWYgKGFzc2V0LnRpdGxlKSB7XG4gICAgICBjb25zdCB0aXRsZSA9IHtcbiAgICAgICAgcmVxdWlyZWQ6IGFzc2V0LnJlcXVpcmVkID8gQm9vbGVhbihhc3NldC5yZXF1aXJlZCkgOiBmYWxzZSxcbiAgICAgICAgbGVuOiBhc3NldC50aXRsZS5sZW5cbiAgICAgIH1cbiAgICAgIG9sZE5hdGl2ZU9iamVjdC50aXRsZSA9IHRpdGxlO1xuICAgIH0gZWxzZSBpZiAoYXNzZXQuaW1nKSB7XG4gICAgICBjb25zdCBpbWFnZSA9IHtcbiAgICAgICAgcmVxdWlyZWQ6IGFzc2V0LnJlcXVpcmVkID8gQm9vbGVhbihhc3NldC5yZXF1aXJlZCkgOiBmYWxzZSxcbiAgICAgIH1cbiAgICAgIGlmIChhc3NldC5pbWcudyAmJiBhc3NldC5pbWcuaCkge1xuICAgICAgICBpbWFnZS5zaXplcyA9IFthc3NldC5pbWcudywgYXNzZXQuaW1nLmhdO1xuICAgICAgfSBlbHNlIGlmIChhc3NldC5pbWcud21pbiAmJiBhc3NldC5pbWcuaG1pbikge1xuICAgICAgICBjb25zdCBzY2FsZSA9IGdjZChhc3NldC5pbWcud21pbiwgYXNzZXQuaW1nLmhtaW4pXG4gICAgICAgIGltYWdlLmFzcGVjdF9yYXRpb3MgPSBbe1xuICAgICAgICAgIG1pbl93aWR0aDogYXNzZXQuaW1nLndtaW4sXG4gICAgICAgICAgbWluX2hlaWdodDogYXNzZXQuaW1nLmhtaW4sXG4gICAgICAgICAgcmF0aW9fd2lkdGg6IGFzc2V0LmltZy53bWluIC8gc2NhbGUsXG4gICAgICAgICAgcmF0aW9faGVpZ2h0OiBhc3NldC5pbWcuaG1pbiAvIHNjYWxlXG4gICAgICAgIH1dXG4gICAgICB9XG5cbiAgICAgIGlmIChhc3NldC5pbWcudHlwZSA9PT0gTkFUSVZFX0lNQUdFX1RZUEVTLk1BSU4pIHtcbiAgICAgICAgb2xkTmF0aXZlT2JqZWN0LmltYWdlID0gaW1hZ2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbGROYXRpdmVPYmplY3QuaWNvbiA9IGltYWdlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXNzZXQuZGF0YSkge1xuICAgICAgbGV0IGFzc2V0VHlwZSA9IE9iamVjdC5rZXlzKE5BVElWRV9BU1NFVF9UWVBFUykuZmluZChrID0+IE5BVElWRV9BU1NFVF9UWVBFU1trXSA9PT0gYXNzZXQuZGF0YS50eXBlKTtcbiAgICAgIGxldCBwcmViaWRBc3NldE5hbWUgPSBPYmplY3Qua2V5cyhQUkVCSURfTkFUSVZFX0RBVEFfS0VZU19UT19PUlRCKS5maW5kKGsgPT4gUFJFQklEX05BVElWRV9EQVRBX0tFWVNfVE9fT1JUQltrXSA9PT0gYXNzZXRUeXBlKTtcbiAgICAgIG9sZE5hdGl2ZU9iamVjdFtwcmViaWRBc3NldE5hbWVdID0ge1xuICAgICAgICByZXF1aXJlZDogYXNzZXQucmVxdWlyZWQgPyBCb29sZWFuKGFzc2V0LnJlcXVpcmVkKSA6IGZhbHNlLFxuICAgICAgfVxuICAgICAgaWYgKGFzc2V0LmRhdGEubGVuKSB7XG4gICAgICAgIG9sZE5hdGl2ZU9iamVjdFtwcmViaWRBc3NldE5hbWVdLmxlbiA9IGFzc2V0LmRhdGEubGVuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3BlblJUQlJlcXVlc3QucHJpdmFjeSkge1xuICAgICAgb2xkTmF0aXZlT2JqZWN0LnByaXZhY3lMaW5rID0geyByZXF1aXJlZDogZmFsc2UgfTtcbiAgICB9XG4gICAgLy8gdmlkZW8gd2FzIG5vdCBzdXBwb3J0ZWQgYnkgb2xkIHByZWJpZCBhc3NldHNcbiAgfVxuICByZXR1cm4gb2xkTmF0aXZlT2JqZWN0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIE9wZW5SVEIgcmVxdWVzdCB0byBhIHByb3ByaWV0YXJ5IFByZWJpZC5qcyBmb3JtYXQuXG4gKiBUaGUgcHJvcHJpZXRhcnkgUHJlYmlkIGZvcm1hdCBoYXMgbWFueSBsaW1pdGF0aW9ucyBhbmQgd2lsbCBiZSBkcm9wcGVkIGluXG4gKiB0aGUgZnV0dXJlOyBhZGFwdGVycyBhcmUgZW5jb3VyYWdlZCB0byBzdG9wIHVzaW5nIGl0IGluIGZhdm91ciBvZiBPcGVuUlRCIGZvcm1hdC5cbiAqIElNUExFTUVOVEFUSU9OIERFVEFJTFM6IFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgc2FtZSBleGFjdCBvYmplY3QgaWYgbm9cbiAqIGNvbnZlcnNpb24gaXMgbmVlZGVkLiBJZiBhIGNvbnZlcnNpb24gaXMgbmVlZGVkIChtZWFuaW5nLCBhdCBsZWFzdCBvbmVcbiAqIGJpZFJlcXVlc3QgY29udGFpbnMgYSBuYXRpdmUub3J0YiBkZWZpbml0aW9uKSwgaXQgd2lsbCByZXR1cm4gYSBjb3B5LlxuICpcbiAqIEBwYXJhbSB7QmlkUmVxdWVzdFtdfSBiaWRSZXF1ZXN0cyBhbiBhcnJheSBvZiB2YWxpZCBiaWQgcmVxdWVzdHNcbiAqIEByZXR1cm5zIGFuIGFycmF5IG9mIHZhbGlkIGJpZCByZXF1ZXN0cyB3aGVyZSB0aGUgb3BlblJUQiBiaWRzIGFyZSBjb252ZXJ0ZWQgdG8gcHJvcHJpZXRhcnkgZm9ybWF0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydE9ydGJSZXF1ZXN0VG9Qcm9wcmlldGFyeU5hdGl2ZShiaWRSZXF1ZXN0cykge1xuICBpZiAoRkVBVFVSRVMuTkFUSVZFKSB7XG4gICAgaWYgKCFiaWRSZXF1ZXN0cyB8fCAhaXNBcnJheShiaWRSZXF1ZXN0cykpIHJldHVybiBiaWRSZXF1ZXN0cztcbiAgICAvLyBjaGVjayBpZiBhIGNvbnZlcnNpb24gaXMgbmVlZGVkXG4gICAgaWYgKCFiaWRSZXF1ZXN0cy5zb21lKGJpZFJlcXVlc3QgPT4gKGJpZFJlcXVlc3Q/Lm1lZGlhVHlwZXMgfHwge30pW05BVElWRV0/Lm9ydGIpKSB7XG4gICAgICByZXR1cm4gYmlkUmVxdWVzdHM7XG4gICAgfVxuICAgIGxldCBiaWRSZXF1ZXN0c0NvcHkgPSBkZWVwQ2xvbmUoYmlkUmVxdWVzdHMpO1xuICAgIC8vIGNvbnZlcnQgTmF0aXZlIE9SVEIgZGVmaW5pdGlvbiB0byBvbGQtc3R5bGUgcHJlYmlkIG5hdGl2ZSBkZWZpbml0aW9uXG4gICAgZm9yIChjb25zdCBiaWRSZXF1ZXN0IG9mIGJpZFJlcXVlc3RzQ29weSkge1xuICAgICAgaWYgKGJpZFJlcXVlc3QubWVkaWFUeXBlcyAmJiBiaWRSZXF1ZXN0Lm1lZGlhVHlwZXNbTkFUSVZFXSAmJiBiaWRSZXF1ZXN0Lm1lZGlhVHlwZXNbTkFUSVZFXS5vcnRiKSB7XG4gICAgICAgIGJpZFJlcXVlc3QubWVkaWFUeXBlc1tOQVRJVkVdID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICBwaWNrKGJpZFJlcXVlc3QubWVkaWFUeXBlc1tOQVRJVkVdLCBOQVRJVkVfS0VZU19USEFUX0FSRV9OT1RfQVNTRVRTKSxcbiAgICAgICAgICBmcm9tT3J0Yk5hdGl2ZVJlcXVlc3QoYmlkUmVxdWVzdC5tZWRpYVR5cGVzW05BVElWRV0ub3J0YilcbiAgICAgICAgKTtcbiAgICAgICAgYmlkUmVxdWVzdC5uYXRpdmVQYXJhbXMgPSBwcm9jZXNzTmF0aXZlQWRVbml0UGFyYW1zKGJpZFJlcXVlc3QubWVkaWFUeXBlc1tOQVRJVkVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJpZFJlcXVlc3RzQ29weTtcbiAgfVxuICByZXR1cm4gYmlkUmVxdWVzdHM7XG59XG5cbi8qKlxuICogY29udmVydCBQQkpTIHByb3ByaWV0YXJ5IG5hdGl2ZSBwcm9wZXJ0aWVzIHRoYXQgYXJlICpub3QqIGFzc2V0cyB0byB0aGUgT1JUQiBuYXRpdmUgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSBsZWdhY3lOYXRpdmUgYGJpZFJlc3BvbnNlLm5hdGl2ZWAgb2JqZWN0IGFzIHJldHVybmVkIGJ5IGFkYXB0ZXJzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZWdhY3lQcm9wZXJ0aWVzVG9PcnRiTmF0aXZlKGxlZ2FjeU5hdGl2ZSkge1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICBsaW5rOiB7fSxcbiAgICBldmVudHRyYWNrZXJzOiBbXVxuICB9XG4gIE9iamVjdC5lbnRyaWVzKGxlZ2FjeU5hdGl2ZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ2NsaWNrVXJsJzpcbiAgICAgICAgcmVzcG9uc2UubGluay51cmwgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjbGlja1RyYWNrZXJzJzpcbiAgICAgICAgcmVzcG9uc2UubGluay5jbGlja3RyYWNrZXJzID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaW1wcmVzc2lvblRyYWNrZXJzJzpcbiAgICAgICAgKEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdKS5mb3JFYWNoKHVybCA9PiB7XG4gICAgICAgICAgcmVzcG9uc2UuZXZlbnR0cmFja2Vycy5wdXNoKHtcbiAgICAgICAgICAgIGV2ZW50OiBUUkFDS0VSX0VWRU5UUy5pbXByZXNzaW9uLFxuICAgICAgICAgICAgbWV0aG9kOiBUUkFDS0VSX01FVEhPRFMuaW1nLFxuICAgICAgICAgICAgdXJsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2phdmFzY3JpcHRUcmFja2Vycyc6XG4gICAgICAgIC8vIGpzdHJhY2tlciBpcyBkZXByZWNhdGVkLCBidXQgd2UgbmVlZCB0byB1c2UgaXQgaGVyZSBzaW5jZSAnamF2YXNjcmlwdFRyYWNrZXJzJyBpcyBtYXJrdXAsIG5vdCBhbiB1cmxcbiAgICAgICAgLy8gVE9ETzogYXQgdGhlIHRpbWUgb2Ygd3JpdGluZyB0aGlzLCBjb3JlIGV4cGVjdGVkIGphdmFzY3JpcHRUcmFja2VycyB0byBiZSBhIHN0cmluZyAoZGVzcGl0ZSB0aGUgbmFtZSksXG4gICAgICAgIC8vIGJ1dCBtYW55IGFkYXB0ZXJzIGFyZSBwYXNzaW5nIGFuIGFycmF5LiBJdCdzIHBvc3NpYmxlIHRoYXQgc29tZSBvZiB0aGVtIGFyZSwgaW4gZmFjdCwgcGFzc2luZyBVUkxzIGFuZCBub3QgbWFya3VwXG4gICAgICAgIC8vIGluIGdlbmVyYWwsIG5hdGl2ZSB0cmFja2VycyBzZWVtIHRvIGJlIG5lZ2xlY3RlZCBhbmQvb3IgYnJva2VuXG4gICAgICAgIHJlc3BvbnNlLmpzdHJhY2tlciA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignJykgOiB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwcml2YWN5TGluayc6XG4gICAgICAgIHJlc3BvbnNlLnByaXZhY3kgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9PcnRiTmF0aXZlUmVzcG9uc2UobGVnYWN5UmVzcG9uc2UsIG9ydGJSZXF1ZXN0KSB7XG4gIGNvbnN0IG9ydGJSZXNwb25zZSA9IHtcbiAgICAuLi5sZWdhY3lQcm9wZXJ0aWVzVG9PcnRiTmF0aXZlKGxlZ2FjeVJlc3BvbnNlKSxcbiAgICBhc3NldHM6IFtdXG4gIH07XG5cbiAgZnVuY3Rpb24gdXNlUmVxdWVzdEFzc2V0KHByZWRpY2F0ZSwgZm4pIHtcbiAgICBsZXQgYXNzZXQgPSBvcnRiUmVxdWVzdC5hc3NldHMuZmluZChwcmVkaWNhdGUpO1xuICAgIGlmIChhc3NldCAhPSBudWxsKSB7XG4gICAgICBhc3NldCA9IGRlZXBDbG9uZShhc3NldCk7XG4gICAgICBmbihhc3NldCk7XG4gICAgICBvcnRiUmVzcG9uc2UuYXNzZXRzLnB1c2goYXNzZXQpO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGxlZ2FjeVJlc3BvbnNlKS5maWx0ZXIoa2V5ID0+ICEhbGVnYWN5UmVzcG9uc2Vba2V5XSkuZm9yRWFjaChrZXkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gZ2V0QXNzZXRWYWx1ZShsZWdhY3lSZXNwb25zZVtrZXldKTtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgLy8gcHJvY2VzcyB0aXRsZXNcbiAgICAgIGNhc2UgJ3RpdGxlJzpcbiAgICAgICAgdXNlUmVxdWVzdEFzc2V0KGFzc2V0ID0+IGFzc2V0LnRpdGxlICE9IG51bGwsIHRpdGxlQXNzZXQgPT4ge1xuICAgICAgICAgIHRpdGxlQXNzZXQudGl0bGUgPSB7XG4gICAgICAgICAgICB0ZXh0OiB2YWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaW1hZ2UnOlxuICAgICAgY2FzZSAnaWNvbic6XG4gICAgICAgIGNvbnN0IGltYWdlVHlwZSA9IGtleSA9PT0gJ2ltYWdlJyA/IE5BVElWRV9JTUFHRV9UWVBFUy5NQUlOIDogTkFUSVZFX0lNQUdFX1RZUEVTLklDT047XG4gICAgICAgIHVzZVJlcXVlc3RBc3NldChhc3NldCA9PiBhc3NldC5pbWcgIT0gbnVsbCAmJiBhc3NldC5pbWcudHlwZSA9PT0gaW1hZ2VUeXBlLCBpbWFnZUFzc2V0ID0+IHtcbiAgICAgICAgICBpbWFnZUFzc2V0LmltZyA9IHtcbiAgICAgICAgICAgIHVybDogdmFsdWVcbiAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChrZXkgaW4gUFJFQklEX05BVElWRV9EQVRBX0tFWVNfVE9fT1JUQikge1xuICAgICAgICAgIHVzZVJlcXVlc3RBc3NldChhc3NldCA9PiBhc3NldC5kYXRhICE9IG51bGwgJiYgYXNzZXQuZGF0YS50eXBlID09PSBOQVRJVkVfQVNTRVRfVFlQRVNbUFJFQklEX05BVElWRV9EQVRBX0tFWVNfVE9fT1JUQltrZXldXSwgZGF0YUFzc2V0ID0+IHtcbiAgICAgICAgICAgIGRhdGFBc3NldC5kYXRhID0ge1xuICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvcnRiUmVzcG9uc2U7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgbGVnYWN5IHJlc3BvbnNlIGZyb20gYW4gb3J0YiByZXNwb25zZS4gVXNlZnVsIGR1cmluZyB0aGUgdHJhbnNpdGlvbiBwZXJpb2QuXG4gKiBAcGFyYW0geyp9IG9ydGJSZXNwb25zZSBhIHN0YW5kYXJkIG9ydGIgcmVzcG9uc2Ugb2JqZWN0XG4gKiBAcGFyYW0geyp9IG9ydGJSZXF1ZXN0IHRoZSBvcnRiIHJlcXVlc3QsIHVzZWZ1bCB0byBtYXRjaCBpZHMuXG4gKiBAcmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgcmVzcG9uc2UgaW4gbGVnYWN5IG5hdGl2ZSBmb3JtYXQ6IHsgdGl0bGU6IFwidGhpcyBpcyBhIHRpdGxlXCIsIGltYWdlOiAuLi4gfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9MZWdhY3lSZXNwb25zZShvcnRiUmVzcG9uc2UsIG9ydGJSZXF1ZXN0KSB7XG4gIGNvbnN0IGxlZ2FjeVJlc3BvbnNlID0ge307XG4gIGNvbnN0IHJlcXVlc3RBc3NldHMgPSBvcnRiUmVxdWVzdD8uYXNzZXRzIHx8IFtdO1xuICBsZWdhY3lSZXNwb25zZS5jbGlja1VybCA9IG9ydGJSZXNwb25zZS5saW5rLnVybDtcbiAgbGVnYWN5UmVzcG9uc2UucHJpdmFjeUxpbmsgPSBvcnRiUmVzcG9uc2UucHJpdmFjeTtcbiAgZm9yIChjb25zdCBhc3NldCBvZiBvcnRiUmVzcG9uc2U/LmFzc2V0cyB8fCBbXSkge1xuICAgIGNvbnN0IHJlcXVlc3RBc3NldCA9IHJlcXVlc3RBc3NldHMuZmluZChyZXFBc3NldCA9PiBhc3NldC5pZCA9PT0gcmVxQXNzZXQuaWQpO1xuICAgIGlmIChhc3NldC50aXRsZSkge1xuICAgICAgbGVnYWN5UmVzcG9uc2UudGl0bGUgPSBhc3NldC50aXRsZS50ZXh0O1xuICAgIH0gZWxzZSBpZiAoYXNzZXQuaW1nKSB7XG4gICAgICBsZWdhY3lSZXNwb25zZVtyZXF1ZXN0QXNzZXQuaW1nLnR5cGUgPT09IE5BVElWRV9JTUFHRV9UWVBFUy5NQUlOID8gJ2ltYWdlJyA6ICdpY29uJ10gPSB7XG4gICAgICAgIHVybDogYXNzZXQuaW1nLnVybCxcbiAgICAgICAgd2lkdGg6IGFzc2V0LmltZy53LFxuICAgICAgICBoZWlnaHQ6IGFzc2V0LmltZy5oXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoYXNzZXQuZGF0YSkge1xuICAgICAgbGVnYWN5UmVzcG9uc2VbUFJFQklEX05BVElWRV9EQVRBX0tFWVNfVE9fT1JUQl9JTlZFUlNFW05BVElWRV9BU1NFVF9UWVBFU19JTlZFUlNFW3JlcXVlc3RBc3NldC5kYXRhLnR5cGVdXV0gPSBhc3NldC5kYXRhLnZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEhhbmRsZSB0cmFja2Vyc1xuICBsZWdhY3lSZXNwb25zZS5pbXByZXNzaW9uVHJhY2tlcnMgPSBbXTtcbiAgbGV0IGpzVHJhY2tlcnMgPSBbXTtcblxuICBpZiAob3J0YlJlc3BvbnNlLmltcHRyYWNrZXJzKSB7XG4gICAgbGVnYWN5UmVzcG9uc2UuaW1wcmVzc2lvblRyYWNrZXJzLnB1c2goLi4ub3J0YlJlc3BvbnNlLmltcHRyYWNrZXJzKTtcbiAgfVxuICBmb3IgKGNvbnN0IGV2ZW50VHJhY2tlciBvZiBvcnRiUmVzcG9uc2U/LmV2ZW50dHJhY2tlcnMgfHwgW10pIHtcbiAgICBpZiAoZXZlbnRUcmFja2VyLmV2ZW50ID09PSBUUkFDS0VSX0VWRU5UUy5pbXByZXNzaW9uICYmIGV2ZW50VHJhY2tlci5tZXRob2QgPT09IFRSQUNLRVJfTUVUSE9EUy5pbWcpIHtcbiAgICAgIGxlZ2FjeVJlc3BvbnNlLmltcHJlc3Npb25UcmFja2Vycy5wdXNoKGV2ZW50VHJhY2tlci51cmwpO1xuICAgIH1cbiAgICBpZiAoZXZlbnRUcmFja2VyLmV2ZW50ID09PSBUUkFDS0VSX0VWRU5UUy5pbXByZXNzaW9uICYmIGV2ZW50VHJhY2tlci5tZXRob2QgPT09IFRSQUNLRVJfTUVUSE9EUy5qcykge1xuICAgICAganNUcmFja2Vycy5wdXNoKGV2ZW50VHJhY2tlci51cmwpO1xuICAgIH1cbiAgfVxuXG4gIGpzVHJhY2tlcnMgPSBqc1RyYWNrZXJzLm1hcCh1cmwgPT4gYDxzY3JpcHQgYXN5bmMgc3JjPVwiJHt1cmx9XCI+PC9zY3JpcHQ+YCk7XG4gIGlmIChvcnRiUmVzcG9uc2U/LmpzdHJhY2tlcikgeyBqc1RyYWNrZXJzLnB1c2gob3J0YlJlc3BvbnNlLmpzdHJhY2tlcik7IH1cbiAgaWYgKGpzVHJhY2tlcnMubGVuZ3RoKSB7XG4gICAgbGVnYWN5UmVzcG9uc2UuamF2YXNjcmlwdFRyYWNrZXJzID0ganNUcmFja2Vycy5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBsZWdhY3lSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBJbnZlcnRzIGtleS12YWx1ZXMgb2YgYW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpbnZlcnNlKG9iaikge1xuICB2YXIgcmV0b2JqID0ge307XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICByZXRvYmpbb2JqW2tleV1dID0ga2V5O1xuICB9XG4gIHJldHVybiByZXRvYmo7XG59XG4iLCJpbXBvcnQgeyBkZWVwQWNjZXNzIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbmxldCBhZFVuaXRzID0ge307XG5cbmZ1bmN0aW9uIGVuc3VyZUFkVW5pdChhZHVuaXQsIGJpZGRlckNvZGUpIHtcbiAgbGV0IGFkVW5pdCA9IGFkVW5pdHNbYWR1bml0XSA9IGFkVW5pdHNbYWR1bml0XSB8fCB7IGJpZGRlcnM6IHt9IH07XG4gIGlmIChiaWRkZXJDb2RlKSB7XG4gICAgcmV0dXJuIGFkVW5pdC5iaWRkZXJzW2JpZGRlckNvZGVdID0gYWRVbml0LmJpZGRlcnNbYmlkZGVyQ29kZV0gfHwge31cbiAgfVxuICByZXR1cm4gYWRVbml0O1xufVxuXG5mdW5jdGlvbiBpbmNyZW1lbnRBZFVuaXRDb3VudChhZHVuaXQsIGNvdW50ZXIsIGJpZGRlckNvZGUpIHtcbiAgbGV0IGFkVW5pdCA9IGVuc3VyZUFkVW5pdChhZHVuaXQsIGJpZGRlckNvZGUpO1xuICBhZFVuaXRbY291bnRlcl0gPSAoYWRVbml0W2NvdW50ZXJdIHx8IDApICsgMTtcbiAgcmV0dXJuIGFkVW5pdFtjb3VudGVyXTtcbn1cblxuLyoqXG4gKiBJbmNyZW1lbnRzIGFuZCByZXR1cm5zIGN1cnJlbnQgQWR1bml0IGNvdW50ZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZHVuaXQgaWRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGN1cnJlbnQgYWR1bml0IGNvdW50XG4gKi9cbmZ1bmN0aW9uIGluY3JlbWVudFJlcXVlc3RzQ291bnRlcihhZHVuaXQpIHtcbiAgcmV0dXJuIGluY3JlbWVudEFkVW5pdENvdW50KGFkdW5pdCwgJ3JlcXVlc3RzQ291bnRlcicpO1xufVxuXG4vKipcbiAqIEluY3JlbWVudHMgYW5kIHJldHVybnMgY3VycmVudCBBZHVuaXQgcmVxdWVzdHMgY291bnRlciBmb3IgYSBiaWRkZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZHVuaXQgaWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaWRkZXJDb2RlIGNvZGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGN1cnJlbnQgYWR1bml0IGJpZGRlciByZXF1ZXN0cyBjb3VudFxuICovXG5mdW5jdGlvbiBpbmNyZW1lbnRCaWRkZXJSZXF1ZXN0c0NvdW50ZXIoYWR1bml0LCBiaWRkZXJDb2RlKSB7XG4gIHJldHVybiBpbmNyZW1lbnRBZFVuaXRDb3VudChhZHVuaXQsICdyZXF1ZXN0c0NvdW50ZXInLCBiaWRkZXJDb2RlKTtcbn1cblxuLyoqXG4gKiBJbmNyZW1lbnRzIGFuZCByZXR1cm5zIGN1cnJlbnQgQWR1bml0IHdpbnMgY291bnRlciBmb3IgYSBiaWRkZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZHVuaXQgaWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaWRkZXJDb2RlIGNvZGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGN1cnJlbnQgYWR1bml0IGJpZGRlciByZXF1ZXN0cyBjb3VudFxuICovXG5mdW5jdGlvbiBpbmNyZW1lbnRCaWRkZXJXaW5zQ291bnRlcihhZHVuaXQsIGJpZGRlckNvZGUpIHtcbiAgcmV0dXJuIGluY3JlbWVudEFkVW5pdENvdW50KGFkdW5pdCwgJ3dpbnNDb3VudGVyJywgYmlkZGVyQ29kZSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBjdXJyZW50IEFkdW5pdCBjb3VudGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gYWR1bml0IGlkXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBjdXJyZW50IGFkdW5pdCBjb3VudFxuICovXG5mdW5jdGlvbiBnZXRSZXF1ZXN0c0NvdW50ZXIoYWR1bml0KSB7XG4gIHJldHVybiBkZWVwQWNjZXNzKGFkVW5pdHMsIGAke2FkdW5pdH0ucmVxdWVzdHNDb3VudGVyYCkgfHwgMDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGN1cnJlbnQgQWR1bml0IHJlcXVlc3RzIGNvdW50ZXIgZm9yIGEgc3BlY2lmaWMgYmlkZGVyIGNvZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZHVuaXQgaWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaWRkZXIgY29kZVxuICogQHJldHVybnMge251bWJlcn0gY3VycmVudCBhZHVuaXQgYmlkZGVyIHJlcXVlc3RzIGNvdW50XG4gKi9cbmZ1bmN0aW9uIGdldEJpZGRlclJlcXVlc3RzQ291bnRlcihhZHVuaXQsIGJpZGRlcikge1xuICByZXR1cm4gZGVlcEFjY2VzcyhhZFVuaXRzLCBgJHthZHVuaXR9LmJpZGRlcnMuJHtiaWRkZXJ9LnJlcXVlc3RzQ291bnRlcmApIHx8IDA7XG59XG5cbi8qKlxuICogUmV0dXJucyBjdXJyZW50IEFkdW5pdCByZXF1ZXN0cyBjb3VudGVyIGZvciBhIHNwZWNpZmljIGJpZGRlciBjb2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gYWR1bml0IGlkXG4gKiBAcGFyYW0ge3N0cmluZ30gYmlkZGVyIGNvZGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGN1cnJlbnQgYWR1bml0IGJpZGRlciByZXF1ZXN0cyBjb3VudFxuICovXG5mdW5jdGlvbiBnZXRCaWRkZXJXaW5zQ291bnRlcihhZHVuaXQsIGJpZGRlcikge1xuICByZXR1cm4gZGVlcEFjY2VzcyhhZFVuaXRzLCBgJHthZHVuaXR9LmJpZGRlcnMuJHtiaWRkZXJ9LndpbnNDb3VudGVyYCkgfHwgMDtcbn1cblxuLyoqXG4gKiBBIG1vZHVsZSB3aGljaCBjb3VudHMgaG93IG1hbnkgdGltZXMgYW4gYWR1bml0IHdhcyBjYWxsZWRcbiAqIEBtb2R1bGUgYWR1bml0Q291bnRlclxuICovXG5sZXQgYWR1bml0Q291bnRlciA9IHtcbiAgaW5jcmVtZW50UmVxdWVzdHNDb3VudGVyLFxuICBpbmNyZW1lbnRCaWRkZXJSZXF1ZXN0c0NvdW50ZXIsXG4gIGluY3JlbWVudEJpZGRlcldpbnNDb3VudGVyLFxuICBnZXRSZXF1ZXN0c0NvdW50ZXIsXG4gIGdldEJpZGRlclJlcXVlc3RzQ291bnRlcixcbiAgZ2V0QmlkZGVyV2luc0NvdW50ZXJcbn1cblxuZXhwb3J0IHsgYWR1bml0Q291bnRlciB9O1xuIiwiLyoqXG4gKiBUaGUgcmVmZXJlciBkZXRlY3Rpb24gbW9kdWxlIGF0dGVtcHRzIHRvIGdhdGhlciByZWZlcmVyIGluZm9ybWF0aW9uIGZyb20gdGhlIGN1cnJlbnQgcGFnZSB0aGF0IHByZWJpZC5qcyByZXNpZGVzIGluLlxuICogVGhlIGluZm9ybWF0aW9uIHRoYXQgaXQgdHJpZXMgdG8gY29sbGVjdCBpbmNsdWRlczpcbiAqIFRoZSBkZXRlY3RlZCB0b3AgdXJsIGluIHRoZSBuYXYgYmFyLFxuICogV2hldGhlciBpdCB3YXMgYWJsZSB0byByZWFjaCB0aGUgdG9wIG1vc3Qgd2luZG93IChpZiBmb3IgZXhhbXBsZSBpdCB3YXMgZW1iZWRkZWQgaW4gc2V2ZXJhbCBpZnJhbWVzKSxcbiAqIFRoZSBudW1iZXIgb2YgaWZyYW1lcyBpdCB3YXMgZW1iZWRkZWQgaW4gaWYgYXBwbGljYWJsZSAoYnkgZGVmYXVsdCBtYXggdGVuIGlmcmFtZXMpLFxuICogQSBsaXN0IG9mIHRoZSBkb21haW5zIG9mIGVhY2ggZW1iZWRkZWQgd2luZG93IGlmIGFwcGxpY2FibGUuXG4gKiBDYW5vbmljYWwgVVJMIHdoaWNoIHJlZmVycyB0byBhbiBIVE1MIGxpbmsgZWxlbWVudCwgd2l0aCB0aGUgYXR0cmlidXRlIG9mIHJlbD1cImNhbm9uaWNhbFwiLCBmb3VuZCBpbiB0aGUgPGhlYWQ+IGVsZW1lbnQgb2YgeW91ciB3ZWJwYWdlXG4gKi9cblxuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcuanMnO1xuaW1wb3J0IHtsb2dXYXJufSBmcm9tICcuL3V0aWxzLmpzJztcblxuLyoqXG4gKiBQcmVwZW5kIGEgVVJMIHdpdGggdGhlIHBhZ2UncyBwcm90b2NvbCAoaHR0cC9odHRwcyksIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZVByb3RvY29sKHVybCwgd2luID0gd2luZG93KSB7XG4gIGlmICghdXJsKSByZXR1cm4gdXJsO1xuICBpZiAoL1xcdys6XFwvXFwvLy5leGVjKHVybCkpIHtcbiAgICAvLyB1cmwgYWxyZWFkeSBoYXMgcHJvdG9jb2xcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIGxldCB3aW5kb3dQcm90byA9IHdpbi5sb2NhdGlvbi5wcm90b2NvbDtcbiAgdHJ5IHtcbiAgICB3aW5kb3dQcm90byA9IHdpbi50b3AubG9jYXRpb24ucHJvdG9jb2w7XG4gIH0gY2F0Y2ggKGUpIHt9XG4gIGlmICgvXlxcL1xcLy8uZXhlYyh1cmwpKSB7XG4gICAgLy8gdXJsIHVzZXMgcmVsYXRpdmUgcHJvdG9jb2wgKFwiLy9leGFtcGxlLmNvbVwiKVxuICAgIHJldHVybiB3aW5kb3dQcm90byArIHVybDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYCR7d2luZG93UHJvdG99Ly8ke3VybH1gO1xuICB9XG59XG5cbi8qKlxuICogRXh0cmFjdCB0aGUgZG9tYWluIHBvcnRpb24gZnJvbSBhIFVSTC5cbiAqIEBwYXJhbSB1cmxcbiAqIEBwYXJhbSBub0xlYWRpbmdXd3c6IGlmIHRydWUsIHJlbW92ZSAnd3d3LicgYXBwZWFyaW5nIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGRvbWFpbi5cbiAqIEBwYXJhbSBub1BvcnQ6IGlmIHRydWUsIGRvIG5vdCBpbmNsdWRlIHRoZSAnOltwb3J0XScgcG9ydGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEb21haW4odXJsLCB7bm9MZWFkaW5nV3d3ID0gZmFsc2UsIG5vUG9ydCA9IGZhbHNlfSA9IHt9KSB7XG4gIHRyeSB7XG4gICAgdXJsID0gbmV3IFVSTChlbnN1cmVQcm90b2NvbCh1cmwpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybjtcbiAgfVxuICB1cmwgPSBub1BvcnQgPyB1cmwuaG9zdG5hbWUgOiB1cmwuaG9zdDtcbiAgaWYgKG5vTGVhZGluZ1d3dyAmJiB1cmwuc3RhcnRzV2l0aCgnd3d3LicpKSB7XG4gICAgdXJsID0gdXJsLnN1YnN0cmluZyg0KTtcbiAgfVxuICByZXR1cm4gdXJsO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBjYW5vbmljYWwgVVJMIHdoaWNoIHJlZmVycyB0byBhbiBIVE1MIGxpbmsgZWxlbWVudCwgd2l0aCB0aGUgYXR0cmlidXRlIG9mIHJlbD1cImNhbm9uaWNhbFwiLCBmb3VuZCBpbiB0aGUgPGhlYWQ+IGVsZW1lbnQgb2YgeW91ciB3ZWJwYWdlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBkb2N1bWVudFxuICogQHJldHVybnMge3N0cmluZ3xudWxsfVxuICovXG5mdW5jdGlvbiBnZXRDYW5vbmljYWxVcmwoZG9jKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvYy5xdWVyeVNlbGVjdG9yKFwibGlua1tyZWw9J2Nhbm9uaWNhbCddXCIpO1xuXG4gICAgaWYgKGVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmhyZWY7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSWdub3JlIGVycm9yXG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1dpbmRvd30gd2luIFdpbmRvd1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0UmVmZXJlcih3aW4pIHtcbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gd291bGQgcmV0dXJuIGEgcmVhZC1vbmx5IGFycmF5IG9mIGhvc3RuYW1lcyBmb3IgYWxsIHRoZSBwYXJlbnQgZnJhbWVzLlxuICAgKiB3aW4ubG9jYXRpb24uYW5jZXN0b3JPcmlnaW5zIGlzIG9ubHkgc3VwcG9ydGVkIGluIHdlYmtpdCBicm93c2Vycy4gRm9yIG5vbi13ZWJraXQgYnJvd3NlcnMgaXQgd2lsbCByZXR1cm4gdW5kZWZpbmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge1dpbmRvd30gd2luIFdpbmRvdyBvYmplY3RcbiAgICogQHJldHVybnMgeyh1bmRlZmluZWR8QXJyYXkpfSBBbmNlc3RvciBvcmlnaW5zIG9yIHVuZGVmaW5lZFxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0QW5jZXN0b3JPcmlnaW5zKHdpbikge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIXdpbi5sb2NhdGlvbi5hbmNlc3Rvck9yaWdpbnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2luLmxvY2F0aW9uLmFuY2VzdG9yT3JpZ2lucztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZ25vcmUgZXJyb3JcbiAgICB9XG4gIH1cblxuICAvLyBUT0RPOiB0aGUgbWVhbmluZyBvZiBcInJlYWNoZWRUb3BcIiBzZWVtcyB0byBiZSBpbnRlbnRpb25hbGx5IGFtYmlndW91cyAtIGJlc3QgdG8gbGVhdmUgdGhlbSBvdXQgb2ZcbiAgLy8gdGhlIHR5cGVkZWYgZm9yIG5vdy4gKGZvciBleGFtcGxlLCB1bml0IHRlc3RzIGVuZm9yY2UgdGhhdCBcInJlYWNoZWRUb3BcIiBzaG91bGQgYmUgZmFsc2UgaW4gc29tZSBzaXR1YXRpb25zIHdoZXJlIHdlXG4gIC8vIGhhcHBpbHkgcHJvdmlkZSBhIGxvY2F0aW9uIGZvciB0aGUgdG9wKS5cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gcmVmZXJlckluZm9cbiAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gbG9jYXRpb24gdGhlIGJyb3dzZXIncyBsb2NhdGlvbiwgb3IgbnVsbCBpZiBub3QgYXZhaWxhYmxlIChkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9ucylcbiAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gY2Fub25pY2FsVXJsIHRoZSBzaXRlJ3MgY2Fub25pY2FsIFVSTCBhcyBzZXQgYnkgdGhlIHB1Ymxpc2hlciwgdGhyb3VnaCBzZXRDb25maWcoe3BhZ2VVcmx9KSBvciA8bGluayByZWw9XCJjYW5vbmljYWxcIiAvPlxuICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBwYWdlIHRoZSBiZXN0IGNhbmRpZGF0ZSBmb3IgdGhlIGN1cnJlbnQgcGFnZSBVUkw6IGBjYW5vbmljYWxVcmxgLCBmYWxsaW5nIGJhY2sgdG8gYGxvY2F0aW9uYFxuICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBkb21haW4gdGhlIGRvbWFpbiBwb3J0aW9uIG9mIGBwYWdlYFxuICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSByZWYgdGhlIHJlZmVycmVyIChkb2N1bWVudC5yZWZlcnJlcikgdG8gdGhlIGN1cnJlbnQgcGFnZSwgb3IgbnVsbCBpZiBub3QgYXZhaWxhYmxlIChkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9ucylcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHRvcG1vc3RMb2NhdGlvbiBvZiB0aGUgdG9wLW1vc3QgZnJhbWUgZm9yIHdoaWNoIHdlIGNvdWxkIGd1ZXNzIHRoZSBsb2NhdGlvbi4gT3V0c2lkZSBvZiBjcm9zcy1vcmlnaW4gc2NlbmFyaW9zLCB0aGlzIGlzIGVxdWl2YWxlbnQgdG8gYGxvY2F0aW9uYC5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IG51bUlmcmFtZXMgbnVtYmVyIG9mIHN0ZXBzIGJldHdlZW4gd2luZG93LnNlbGYgYW5kIHdpbmRvdy50b3BcbiAgICogQHByb3BlcnR5IHtBcnJheVtzdHJpbmd8bnVsbF19IHN0YWNrIG91ciBiZXN0IGd1ZXNzIGF0IHRoZSBsb2NhdGlvbiBmb3IgZWFjaCBmcmFtZSwgaW4gdGhlIGRpcmVjdGlvbiB0b3AgLT4gc2VsZi5cbiAgICovXG5cbiAgLyoqXG4gICAqIFdhbGsgdXAgdGhlIHdpbmRvd3MgdG8gZ2V0IHRoZSBvcmlnaW4gc3RhY2sgYW5kIGJlc3QgYXZhaWxhYmxlIHJlZmVycmVyLCBjYW5vbmljYWwgVVJMLCBldGMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtyZWZlcmVySW5mb31cbiAgICovXG4gIGZ1bmN0aW9uIHJlZmVyZXJJbmZvKCkge1xuICAgIGNvbnN0IHN0YWNrID0gW107XG4gICAgY29uc3QgYW5jZXN0b3JzID0gZ2V0QW5jZXN0b3JPcmlnaW5zKHdpbik7XG4gICAgY29uc3QgbWF4TmVzdGVkSWZyYW1lcyA9IGNvbmZpZy5nZXRDb25maWcoJ21heE5lc3RlZElmcmFtZXMnKTtcblxuICAgIGxldCBjdXJyZW50V2luZG93O1xuICAgIGxldCBiZXN0TG9jYXRpb247XG4gICAgbGV0IGJlc3RDYW5vbmljYWxVcmw7XG4gICAgbGV0IHJlYWNoZWRUb3AgPSBmYWxzZTtcbiAgICBsZXQgbGV2ZWwgPSAwO1xuICAgIGxldCB2YWx1ZXNGcm9tQW1wID0gZmFsc2U7XG4gICAgbGV0IGluQW1wRnJhbWUgPSBmYWxzZTtcbiAgICBsZXQgaGFzVG9wTG9jYXRpb24gPSBmYWxzZTtcblxuICAgIGRvIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzV2luZG93ID0gY3VycmVudFdpbmRvdztcbiAgICAgIGNvbnN0IHdhc0luQW1wRnJhbWUgPSBpbkFtcEZyYW1lO1xuICAgICAgbGV0IGN1cnJlbnRMb2NhdGlvbjtcbiAgICAgIGxldCBjcm9zc09yaWdpbiA9IGZhbHNlO1xuICAgICAgbGV0IGZvdW5kTG9jYXRpb24gPSBudWxsO1xuXG4gICAgICBpbkFtcEZyYW1lID0gZmFsc2U7XG4gICAgICBjdXJyZW50V2luZG93ID0gY3VycmVudFdpbmRvdyA/IGN1cnJlbnRXaW5kb3cucGFyZW50IDogd2luO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjdXJyZW50TG9jYXRpb24gPSBjdXJyZW50V2luZG93LmxvY2F0aW9uLmhyZWYgfHwgbnVsbDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY3Jvc3NPcmlnaW4gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3Jvc3NPcmlnaW4pIHtcbiAgICAgICAgaWYgKHdhc0luQW1wRnJhbWUpIHtcbiAgICAgICAgICBjb25zdCBjb250ZXh0ID0gcHJldmlvdXNXaW5kb3cuY29udGV4dDtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3VuZExvY2F0aW9uID0gY29udGV4dC5zb3VyY2VVcmw7XG4gICAgICAgICAgICBiZXN0TG9jYXRpb24gPSBmb3VuZExvY2F0aW9uO1xuICAgICAgICAgICAgaGFzVG9wTG9jYXRpb24gPSB0cnVlO1xuXG4gICAgICAgICAgICB2YWx1ZXNGcm9tQW1wID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRXaW5kb3cgPT09IHdpbi50b3ApIHtcbiAgICAgICAgICAgICAgcmVhY2hlZFRvcCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb250ZXh0LmNhbm9uaWNhbFVybCkge1xuICAgICAgICAgICAgICBiZXN0Q2Fub25pY2FsVXJsID0gY29udGV4dC5jYW5vbmljYWxVcmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkgeyAvKiBEbyBub3RoaW5nICovIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2dXYXJuKCdUcnlpbmcgdG8gYWNjZXNzIGNyb3NzIGRvbWFpbiBpZnJhbWUuIENvbnRpbnVpbmcgd2l0aG91dCByZWZlcnJlciBhbmQgbG9jYXRpb24nKTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyB0aGUgcmVmZXJyZXIgdG8gYW4gaWZyYW1lIGlzIHRoZSBwYXJlbnQgd2luZG93XG4gICAgICAgICAgICBjb25zdCByZWZlcnJlciA9IHByZXZpb3VzV2luZG93LmRvY3VtZW50LnJlZmVycmVyO1xuXG4gICAgICAgICAgICBpZiAocmVmZXJyZXIpIHtcbiAgICAgICAgICAgICAgZm91bmRMb2NhdGlvbiA9IHJlZmVycmVyO1xuXG4gICAgICAgICAgICAgIGlmIChjdXJyZW50V2luZG93ID09PSB3aW4udG9wKSB7XG4gICAgICAgICAgICAgICAgcmVhY2hlZFRvcCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7IC8qIERvIG5vdGhpbmcgKi8gfVxuXG4gICAgICAgICAgaWYgKCFmb3VuZExvY2F0aW9uICYmIGFuY2VzdG9ycyAmJiBhbmNlc3RvcnNbbGV2ZWwgLSAxXSkge1xuICAgICAgICAgICAgZm91bmRMb2NhdGlvbiA9IGFuY2VzdG9yc1tsZXZlbCAtIDFdO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRXaW5kb3cgPT09IHdpbi50b3ApIHtcbiAgICAgICAgICAgICAgaGFzVG9wTG9jYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmb3VuZExvY2F0aW9uICYmICF2YWx1ZXNGcm9tQW1wKSB7XG4gICAgICAgICAgICBiZXN0TG9jYXRpb24gPSBmb3VuZExvY2F0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgICAgICAgIGZvdW5kTG9jYXRpb24gPSBjdXJyZW50TG9jYXRpb247XG4gICAgICAgICAgYmVzdExvY2F0aW9uID0gZm91bmRMb2NhdGlvbjtcbiAgICAgICAgICB2YWx1ZXNGcm9tQW1wID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAoY3VycmVudFdpbmRvdyA9PT0gd2luLnRvcCkge1xuICAgICAgICAgICAgcmVhY2hlZFRvcCA9IHRydWU7XG5cbiAgICAgICAgICAgIGNvbnN0IGNhbm9uaWNhbFVybCA9IGdldENhbm9uaWNhbFVybChjdXJyZW50V2luZG93LmRvY3VtZW50KTtcblxuICAgICAgICAgICAgaWYgKGNhbm9uaWNhbFVybCkge1xuICAgICAgICAgICAgICBiZXN0Q2Fub25pY2FsVXJsID0gY2Fub25pY2FsVXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJyZW50V2luZG93LmNvbnRleHQgJiYgY3VycmVudFdpbmRvdy5jb250ZXh0LnNvdXJjZVVybCkge1xuICAgICAgICAgIGluQW1wRnJhbWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0YWNrLnB1c2goZm91bmRMb2NhdGlvbik7XG4gICAgICBsZXZlbCsrO1xuICAgIH0gd2hpbGUgKGN1cnJlbnRXaW5kb3cgIT09IHdpbi50b3AgJiYgbGV2ZWwgPCBtYXhOZXN0ZWRJZnJhbWVzKTtcblxuICAgIHN0YWNrLnJldmVyc2UoKTtcblxuICAgIGxldCByZWY7XG4gICAgdHJ5IHtcbiAgICAgIHJlZiA9IHdpbi50b3AuZG9jdW1lbnQucmVmZXJyZXI7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIGNvbnN0IGxvY2F0aW9uID0gcmVhY2hlZFRvcCB8fCBoYXNUb3BMb2NhdGlvbiA/IGJlc3RMb2NhdGlvbiA6IG51bGw7XG4gICAgY29uc3QgY2Fub25pY2FsVXJsID0gY29uZmlnLmdldENvbmZpZygncGFnZVVybCcpIHx8IGJlc3RDYW5vbmljYWxVcmwgfHwgbnVsbDtcbiAgICBsZXQgcGFnZSA9IGNvbmZpZy5nZXRDb25maWcoJ3BhZ2VVcmwnKSB8fCBsb2NhdGlvbiB8fCBlbnN1cmVQcm90b2NvbChjYW5vbmljYWxVcmwsIHdpbik7XG5cbiAgICBpZiAobG9jYXRpb24gJiYgbG9jYXRpb24uaW5kZXhPZignPycpID4gLTEgJiYgcGFnZS5pbmRleE9mKCc/JykgPT09IC0xKSB7XG4gICAgICBwYWdlID0gYCR7cGFnZX0ke2xvY2F0aW9uLnN1YnN0cmluZyhsb2NhdGlvbi5pbmRleE9mKCc/JykpfWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlYWNoZWRUb3AsXG4gICAgICBpc0FtcDogdmFsdWVzRnJvbUFtcCxcbiAgICAgIG51bUlmcmFtZXM6IGxldmVsIC0gMSxcbiAgICAgIHN0YWNrLFxuICAgICAgdG9wbW9zdExvY2F0aW9uOiBiZXN0TG9jYXRpb24gfHwgbnVsbCxcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgY2Fub25pY2FsVXJsLFxuICAgICAgcGFnZSxcbiAgICAgIGRvbWFpbjogcGFyc2VEb21haW4ocGFnZSkgfHwgbnVsbCxcbiAgICAgIHJlZjogcmVmIHx8IG51bGwsXG4gICAgICAvLyBUT0RPOiB0aGUgXCJsZWdhY3lcIiByZWZlcmVySW5mbyBvYmplY3QgaXMgcHJvdmlkZWQgaGVyZSwgZm9yIG5vdywgdG8gYWNjb21vZGF0ZVxuICAgICAgLy8gYWRhcHRlcnMgdGhhdCBkZWNpZGVkIHRvIGp1c3Qgc2VuZCBpdCB2ZXJiYXRpbSB0byB0aGVpciBiYWNrZW5kLlxuICAgICAgbGVnYWN5OiB7XG4gICAgICAgIHJlYWNoZWRUb3AsXG4gICAgICAgIGlzQW1wOiB2YWx1ZXNGcm9tQW1wLFxuICAgICAgICBudW1JZnJhbWVzOiBsZXZlbCAtIDEsXG4gICAgICAgIHN0YWNrLFxuICAgICAgICByZWZlcmVyOiBiZXN0TG9jYXRpb24gfHwgbnVsbCxcbiAgICAgICAgY2Fub25pY2FsVXJsXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiByZWZlcmVySW5mbztcbn1cblxuLy8gY2FjaGUgcmVzdWx0IG9mIGZuICg9IHJlZmVyZXIgaW5mbykgYXMgbG9uZyBhczpcbi8vIC0gd2UgYXJlIHRoZSB0b3Agd2luZG93XG4vLyAtIGNhbm9uaWNhbCBVUkwgdGFnIGFuZCB3aW5kb3cgbG9jYXRpb24gaGF2ZSBub3QgY2hhbmdlZFxuZXhwb3J0IGZ1bmN0aW9uIGNhY2hlV2l0aExvY2F0aW9uKGZuLCB3aW4gPSB3aW5kb3cpIHtcbiAgaWYgKHdpbi50b3AgIT09IHdpbikgcmV0dXJuIGZuO1xuICBsZXQgY2Fub25pY2FsLCBocmVmLCB2YWx1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBuZXdDYW5vbmljYWwgPSBnZXRDYW5vbmljYWxVcmwod2luLmRvY3VtZW50KTtcbiAgICBjb25zdCBuZXdIcmVmID0gd2luLmxvY2F0aW9uLmhyZWY7XG4gICAgaWYgKGNhbm9uaWNhbCAhPT0gbmV3Q2Fub25pY2FsIHx8IG5ld0hyZWYgIT09IGhyZWYpIHtcbiAgICAgIGNhbm9uaWNhbCA9IG5ld0Nhbm9uaWNhbDtcbiAgICAgIGhyZWYgPSBuZXdIcmVmO1xuICAgICAgdmFsdWUgPSBmbigpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBAdHlwZSB7ZnVuY3Rpb24oKTogcmVmZXJlckluZm99XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRSZWZlcmVySW5mbyA9IGNhY2hlV2l0aExvY2F0aW9uKGRldGVjdFJlZmVyZXIod2luZG93KSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuICByZXR1cm4gc2VsZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmltcG9ydCBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO1xuICB9XG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59IiwiaW1wb3J0IHtjeXJiNTNIYXNoLCBpc1N0ciwgdGltZXN0YW1wfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7ZGVmZXIsIEdyZWVkeVByb21pc2V9IGZyb20gJy4vdXRpbHMvcHJvbWlzZS5qcyc7XG5pbXBvcnQge2NvbmZpZ30gZnJvbSAnLi9jb25maWcuanMnO1xuXG4vKipcbiAqIFBsYWNlaG9sZGVyIGd2bGlkIGZvciB3aGVuIHZlbmRvciBjb25zZW50IGlzIG5vdCByZXF1aXJlZC4gV2hlbiB0aGlzIHZhbHVlIGlzIHVzZWQgYXMgZ3ZsaWQsIHRoZSBnZHByXG4gKiBlbmZvcmNlbWVudCBtb2R1bGUgd2lsbCB0YWtlIGl0IHRvIG1lYW4gXCJ2ZW5kb3IgY29uc2VudCB3YXMgZ2l2ZW5cIi5cbiAqXG4gKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3ByZWJpZC9QcmViaWQuanMvaXNzdWVzLzgxNjFcbiAqL1xuZXhwb3J0IGNvbnN0IFZFTkRPUkxFU1NfR1ZMSUQgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuZXhwb3J0IGNsYXNzIENvbnNlbnRIYW5kbGVyIHtcbiAgI2VuYWJsZWQ7XG4gICNkYXRhO1xuICAjZGVmZXI7XG4gICNyZWFkeTtcbiAgI2RpcnR5ID0gdHJ1ZTtcbiAgI2hhc2g7XG4gIGdlbmVyYXRlZFRpbWU7XG4gIGhhc2hGaWVsZHM7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgI3Jlc29sdmUoZGF0YSkge1xuICAgIHRoaXMuI3JlYWR5ID0gdHJ1ZTtcbiAgICB0aGlzLiNkYXRhID0gZGF0YTtcbiAgICB0aGlzLiNkZWZlci5yZXNvbHZlKGRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlc2V0IHRoaXMgaGFuZGxlciAobWFpbmx5IGZvciB0ZXN0cylcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuI2RlZmVyID0gZGVmZXIoKTtcbiAgICB0aGlzLiNlbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy4jZGF0YSA9IG51bGw7XG4gICAgdGhpcy4jcmVhZHkgPSBmYWxzZTtcbiAgICB0aGlzLmdlbmVyYXRlZFRpbWUgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZSB0aGlzIGNvbnNlbnQgaGFuZGxlci4gVGhpcyBzaG91bGQgYmUgY2FsbGVkIGJ5IHRoZSByZWxldmFudCBjb25zZW50IG1hbmFnZW1lbnQgbW9kdWxlXG4gICAqIG9uIGluaXRpYWxpemF0aW9uLlxuICAgKi9cbiAgZW5hYmxlKCkge1xuICAgIHRoaXMuI2VuYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSByZWxhdGVkIGNvbnNlbnQgbWFuYWdlbWVudCBtb2R1bGUgaXMgZW5hYmxlZC5cbiAgICovXG4gIGdldCBlbmFibGVkKCkge1xuICAgIHJldHVybiB0aGlzLiNlbmFibGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGNvbnNlbnQgZGF0YSBoYXMgYmVlbiByZXNvbHZlZCAoaXQgbWF5IGJlIGBudWxsYCBpZiB0aGUgcmVzb2x1dGlvbiBmYWlsZWQpLlxuICAgKi9cbiAgZ2V0IHJlYWR5KCkge1xuICAgIHJldHVybiB0aGlzLiNyZWFkeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyBhIHByb21pc2UgdGhhbiByZXNvbHZlcyB0byB0aGUgY29uc2VudCBkYXRhLCBvciBudWxsIGlmIG5vIGNvbnNlbnQgZGF0YSBpcyBhdmFpbGFibGVcbiAgICovXG4gIGdldCBwcm9taXNlKCkge1xuICAgIGlmICh0aGlzLiNyZWFkeSkge1xuICAgICAgcmV0dXJuIEdyZWVkeVByb21pc2UucmVzb2x2ZSh0aGlzLiNkYXRhKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLiNlbmFibGVkKSB7XG4gICAgICB0aGlzLiNyZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4jZGVmZXIucHJvbWlzZTtcbiAgfVxuXG4gIHNldENvbnNlbnREYXRhKGRhdGEsIHRpbWUgPSB0aW1lc3RhbXAoKSkge1xuICAgIHRoaXMuZ2VuZXJhdGVkVGltZSA9IHRpbWU7XG4gICAgdGhpcy4jZGlydHkgPSB0cnVlO1xuICAgIHRoaXMuI3Jlc29sdmUoZGF0YSk7XG4gIH1cblxuICBnZXRDb25zZW50RGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy4jZGF0YTtcbiAgfVxuXG4gIGdldCBoYXNoKCkge1xuICAgIGlmICh0aGlzLiNkaXJ0eSkge1xuICAgICAgdGhpcy4jaGFzaCA9IGN5cmI1M0hhc2goSlNPTi5zdHJpbmdpZnkodGhpcy4jZGF0YSAmJiB0aGlzLmhhc2hGaWVsZHMgPyB0aGlzLmhhc2hGaWVsZHMubWFwKGYgPT4gdGhpcy4jZGF0YVtmXSkgOiB0aGlzLiNkYXRhKSlcbiAgICAgIHRoaXMuI2RpcnR5ID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiNoYXNoO1xuICB9XG59XG5cbmNsYXNzIFVzcENvbnNlbnRIYW5kbGVyIGV4dGVuZHMgQ29uc2VudEhhbmRsZXIge1xuICBnZXRDb25zZW50TWV0YSgpIHtcbiAgICBjb25zdCBjb25zZW50RGF0YSA9IHRoaXMuZ2V0Q29uc2VudERhdGEoKTtcbiAgICBpZiAoY29uc2VudERhdGEgJiYgdGhpcy5nZW5lcmF0ZWRUaW1lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1c3A6IGNvbnNlbnREYXRhLFxuICAgICAgICBnZW5lcmF0ZWRBdDogdGhpcy5nZW5lcmF0ZWRUaW1lXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBHZHByQ29uc2VudEhhbmRsZXIgZXh0ZW5kcyBDb25zZW50SGFuZGxlciB7XG4gIGhhc2hGaWVsZHMgPSBbJ2dkcHJBcHBsaWVzJywgJ2NvbnNlbnRTdHJpbmcnXVxuICBnZXRDb25zZW50TWV0YSgpIHtcbiAgICBjb25zdCBjb25zZW50RGF0YSA9IHRoaXMuZ2V0Q29uc2VudERhdGEoKTtcbiAgICBpZiAoY29uc2VudERhdGEgJiYgY29uc2VudERhdGEudmVuZG9yRGF0YSAmJiB0aGlzLmdlbmVyYXRlZFRpbWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdkcHJBcHBsaWVzOiBjb25zZW50RGF0YS5nZHByQXBwbGllcyxcbiAgICAgICAgY29uc2VudFN0cmluZ1NpemU6IChpc1N0cihjb25zZW50RGF0YS52ZW5kb3JEYXRhLnRjU3RyaW5nKSkgPyBjb25zZW50RGF0YS52ZW5kb3JEYXRhLnRjU3RyaW5nLmxlbmd0aCA6IDAsXG4gICAgICAgIGdlbmVyYXRlZEF0OiB0aGlzLmdlbmVyYXRlZFRpbWUsXG4gICAgICAgIGFwaVZlcnNpb246IGNvbnNlbnREYXRhLmFwaVZlcnNpb25cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgR3BwQ29uc2VudEhhbmRsZXIgZXh0ZW5kcyBDb25zZW50SGFuZGxlciB7XG4gIGhhc2hGaWVsZHMgPSBbJ2FwcGxpY2FibGVTZWN0aW9ucycsICdncHBTdHJpbmcnXTtcbiAgZ2V0Q29uc2VudE1ldGEoKSB7XG4gICAgY29uc3QgY29uc2VudERhdGEgPSB0aGlzLmdldENvbnNlbnREYXRhKCk7XG4gICAgaWYgKGNvbnNlbnREYXRhICYmIHRoaXMuZ2VuZXJhdGVkVGltZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZ2VuZXJhdGVkQXQ6IHRoaXMuZ2VuZXJhdGVkVGltZSxcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGd2bGlkUmVnaXN0cnkoKSB7XG4gIGNvbnN0IHJlZ2lzdHJ5ID0ge307XG4gIGNvbnN0IGZsYXQgPSB7fTtcbiAgY29uc3Qgbm9uZSA9IHt9O1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgbW9kdWxlJ3MgR1ZMIElELlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVUeXBlIGRlZmluZWQgaW4gYGFjdGl2aXRpZXMvbW9kdWxlcy5qc2BcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlTmFtZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBndmxpZFxuICAgICAqL1xuICAgIHJlZ2lzdGVyKG1vZHVsZVR5cGUsIG1vZHVsZU5hbWUsIGd2bGlkKSB7XG4gICAgICBpZiAoZ3ZsaWQpIHtcbiAgICAgICAgKHJlZ2lzdHJ5W21vZHVsZU5hbWVdID0gcmVnaXN0cnlbbW9kdWxlTmFtZV0gfHwge30pW21vZHVsZVR5cGVdID0gZ3ZsaWQ7XG4gICAgICAgIGlmIChmbGF0Lmhhc093blByb3BlcnR5KG1vZHVsZU5hbWUpKSB7XG4gICAgICAgICAgaWYgKGZsYXRbbW9kdWxlTmFtZV0gIT09IGd2bGlkKSBmbGF0W21vZHVsZU5hbWVdID0gbm9uZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmbGF0W21vZHVsZU5hbWVdID0gZ3ZsaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEdldCBhIG1vZHVsZSdzIEdWTCBJRChzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lXG4gICAgICogQHJldHVybiB7e21vZHVsZXM6IHtbbW9kdWxlVHlwZV06IG51bWJlcn0sIGd2bGlkPzogbnVtYmVyfX0gYW4gb2JqZWN0IHdoZXJlOlxuICAgICAqICAgYG1vZHVsZXNgIGlzIGEgbWFwIGZyb20gbW9kdWxlIHR5cGUgdG8gdGhhdCBtb2R1bGUncyBHVkwgSUQ7XG4gICAgICogICBgZ3ZsaWRgIGlzIHRoZSBzaW5nbGUgR1ZMIElEIGZvciB0aGlzIGZhbWlseSBvZiBtb2R1bGVzIChvbmx5IGRlZmluZWRcbiAgICAgKiAgIGlmIGFsbCBtb2R1bGVzIHdpdGggdGhpcyBuYW1lIGRlY2xhcmVkIHRoZSBzYW1lIElEKS5cbiAgICAgKi9cbiAgICBnZXQobW9kdWxlTmFtZSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0ge21vZHVsZXM6IHJlZ2lzdHJ5W21vZHVsZU5hbWVdIHx8IHt9fTtcbiAgICAgIGlmIChmbGF0Lmhhc093blByb3BlcnR5KG1vZHVsZU5hbWUpICYmIGZsYXRbbW9kdWxlTmFtZV0gIT09IG5vbmUpIHtcbiAgICAgICAgcmVzdWx0Lmd2bGlkID0gZmxhdFttb2R1bGVOYW1lXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZHByRGF0YUhhbmRsZXIgPSBuZXcgR2RwckNvbnNlbnRIYW5kbGVyKCk7XG5leHBvcnQgY29uc3QgdXNwRGF0YUhhbmRsZXIgPSBuZXcgVXNwQ29uc2VudEhhbmRsZXIoKTtcbmV4cG9ydCBjb25zdCBncHBEYXRhSGFuZGxlciA9IG5ldyBHcHBDb25zZW50SGFuZGxlcigpO1xuZXhwb3J0IGNvbnN0IGNvcHBhRGF0YUhhbmRsZXIgPSAoKCkgPT4ge1xuICBmdW5jdGlvbiBnZXRDb3BwYSgpIHtcbiAgICByZXR1cm4gISEoY29uZmlnLmdldENvbmZpZygnY29wcGEnKSlcbiAgfVxuICByZXR1cm4ge1xuICAgIGdldENvcHBhLFxuICAgIGdldENvbnNlbnREYXRhOiBnZXRDb3BwYSxcbiAgICBnZXRDb25zZW50TWV0YTogZ2V0Q29wcGEsXG4gICAgcmVzZXQoKSB7fSxcbiAgICBnZXQgcHJvbWlzZSgpIHtcbiAgICAgIHJldHVybiBHcmVlZHlQcm9taXNlLnJlc29sdmUoZ2V0Q29wcGEoKSlcbiAgICB9LFxuICAgIGdldCBoYXNoKCkge1xuICAgICAgcmV0dXJuIGdldENvcHBhKCkgPyAnMScgOiAnMCdcbiAgICB9XG4gIH1cbn0pKCk7XG5cbmV4cG9ydCBjb25zdCBHRFBSX0dWTElEUyA9IGd2bGlkUmVnaXN0cnkoKTtcblxuY29uc3QgQUxMX0hBTkRMRVJTID0ge1xuICBnZHByOiBnZHByRGF0YUhhbmRsZXIsXG4gIHVzcDogdXNwRGF0YUhhbmRsZXIsXG4gIGdwcDogZ3BwRGF0YUhhbmRsZXIsXG4gIGNvcHBhOiBjb3BwYURhdGFIYW5kbGVyLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlIYW5kbGVyKGhhbmRsZXJzID0gQUxMX0hBTkRMRVJTKSB7XG4gIGhhbmRsZXJzID0gT2JqZWN0LmVudHJpZXMoaGFuZGxlcnMpO1xuICBmdW5jdGlvbiBjb2xsZWN0b3IobWV0aG9kKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoaGFuZGxlcnMubWFwKChbbmFtZSwgaGFuZGxlcl0pID0+IFtuYW1lLCBoYW5kbGVyW21ldGhvZF0oKV0pKVxuICAgIH1cbiAgfVxuICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICB7XG4gICAgICBnZXQgcHJvbWlzZSgpIHtcbiAgICAgICAgcmV0dXJuIEdyZWVkeVByb21pc2UuYWxsKGhhbmRsZXJzLm1hcCgoW25hbWUsIGhhbmRsZXJdKSA9PiBoYW5kbGVyLnByb21pc2UudGhlbih2YWwgPT4gW25hbWUsIHZhbF0pKSlcbiAgICAgICAgICAudGhlbihlbnRyaWVzID0+IE9iamVjdC5mcm9tRW50cmllcyhlbnRyaWVzKSk7XG4gICAgICB9LFxuICAgICAgZ2V0IGhhc2goKSB7XG4gICAgICAgIHJldHVybiBjeXJiNTNIYXNoKGhhbmRsZXJzLm1hcCgoW18sIGhhbmRsZXJdKSA9PiBoYW5kbGVyLmhhc2gpLmpvaW4oJzonKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBPYmplY3QuZnJvbUVudHJpZXMoWydnZXRDb25zZW50RGF0YScsICdnZXRDb25zZW50TWV0YScsICdyZXNldCddLm1hcChuID0+IFtuLCBjb2xsZWN0b3IobildKSksXG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IGFsbENvbnNlbnQgPSBtdWx0aUhhbmRsZXIoKTtcbiIsImltcG9ydCB7ZGVlcEFjY2Vzc30gZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHtjb25maWd9IGZyb20gJy4uL2NvbmZpZy5qcyc7XG5pbXBvcnQge2lzQWN0aXZpdHlBbGxvd2VkLCByZWdpc3RlckFjdGl2aXR5Q29udHJvbH0gZnJvbSAnLi9ydWxlcy5qcyc7XG5pbXBvcnQge1xuICBBQ1RJVklUWV9UUkFOU01JVF9FSURTLFxuICBBQ1RJVklUWV9UUkFOU01JVF9QUkVDSVNFX0dFTyxcbiAgQUNUSVZJVFlfVFJBTlNNSVRfVElELFxuICBBQ1RJVklUWV9UUkFOU01JVF9VRlBEXG59IGZyb20gJy4vYWN0aXZpdGllcy5qcyc7XG5cbmV4cG9ydCBjb25zdCBPUlRCX1VGUERfUEFUSFMgPSBbJ3VzZXIuZGF0YScsICd1c2VyLmV4dC5kYXRhJywgJ3VzZXIueW9iJywgJ3VzZXIuZ2VuZGVyJywgJ3VzZXIua2V5d29yZHMnLCAndXNlci5rd2FycmF5J107XG5leHBvcnQgY29uc3QgT1JUQl9FSURTX1BBVEhTID0gWyd1c2VyLmVpZHMnLCAndXNlci5leHQuZWlkcyddO1xuZXhwb3J0IGNvbnN0IE9SVEJfR0VPX1BBVEhTID0gWyd1c2VyLmdlby5sYXQnLCAndXNlci5nZW8ubG9uJywgJ2RldmljZS5nZW8ubGF0JywgJ2RldmljZS5nZW8ubG9uJ107XG5cbi8qKlxuICogQHR5cGVkZWYgVHJhbnNmb3JtYXRpb25SdWxlRGVmXG4gKiBAcHJvcGVydHkge25hbWV9XG4gKiBAcHJvcGVydHkge0FycmF5W3N0cmluZ119IHBhdGhzIGRvdC1zZXBhcmF0ZWQgbGlzdCBvZiBwYXRocyB0aGF0IHRoaXMgcnVsZSBhcHBsaWVzIHRvLlxuICogQHByb3BlcnR5IHtmdW5jdGlvbigqKTogYm9vbGVhbn0gYXBwbGllcyBhIHByZWRpY2F0ZSB0aGF0IHNob3VsZCByZXR1cm4gdHJ1ZSBpZiB0aGlzIHJ1bGUgYXBwbGllc1xuICogKGFuZCB0aGUgdHJhbnNmb3JtYXRpb24gZGVmaW5lZCBoZXJlaW4gc2hvdWxkIGJlIGFwcGxpZWQpLiBUaGUgYXJndW1lbnRzIGFyZSB0aG9zZSBwYXNzZWQgdG8gdGhlIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uLlxuICogQHByb3BlcnR5IHtuYW1lfSBhIG5hbWUgZm9yIHRoZSBydWxlOyB1c2VkIHRvIGRlYm91bmNlIGNhbGxzIHRvIGBhcHBsaWVzYCAoYW5kIGF2b2lkIGV4Y2Vzc2l2ZSBsb2dnaW5nKTpcbiAqIGlmIGEgcnVsZSB3aXRoIHRoZSBzYW1lIG5hbWUgd2FzIGFscmVhZHkgZm91bmQgdG8gYXBwbHkgKG9yIG5vdCksIHRoaXMgb25lIHdpbGwgKG9yIHdvbid0KSBhcyB3ZWxsLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgUmVkYWN0UnVsZURlZiBBIHJ1bGUgdGhhdCByZW1vdmVzLCBvciByZXBsYWNlcywgdmFsdWVzIGZyb20gYW4gb2JqZWN0IChtb2RpZmljYXRpb25zIGFyZSBkb25lIGluLXBsYWNlKS5cbiAqIEBhdWdtZW50cyBUcmFuc2Zvcm1hdGlvblJ1bGVEZWZcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oKik6ICp9IGdldD8gc3Vic3RpdHV0aW9uIGZ1bmN0aW9ucyBmb3IgdmFsdWVzIHRoYXQgc2hvdWxkIGJlIHJlZGFjdGVkO1xuICogIHRha2VzIGluIHRoZSBvcmlnaW5hbCAodW5yZWRhY3RlZCkgdmFsdWUgYXMgYW4gaW5wdXQsIGFuZCByZXR1cm5zIGEgc3Vic3RpdHV0ZSB0byB1c2UgaW4gdGhlIHJlZGFjdGVkXG4gKiAgdmVyc2lvbi4gSWYgaXQgcmV0dXJucyB1bmRlZmluZWQsIG9yIHRoaXMgb3B0aW9uIGlzIG9taXR0ZWQsIHByb3RlY3RlZCBwYXRocyB3aWxsIGJlIHJlbW92ZWRcbiAqICBmcm9tIHRoZSByZWRhY3RlZCBvYmplY3QuXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge1JlZGFjdFJ1bGVEZWZ9IHJ1bGVEZWZcbiAqIEByZXR1cm4ge1RyYW5zZm9ybWF0aW9uUnVsZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZGFjdFJ1bGUocnVsZURlZikge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7XG4gICAgZ2V0KCkge30sXG4gICAgcnVuKHJvb3QsIHBhdGgsIG9iamVjdCwgcHJvcGVydHksIGFwcGxpZXMpIHtcbiAgICAgIGNvbnN0IHZhbCA9IG9iamVjdCAmJiBvYmplY3RbcHJvcGVydHldO1xuICAgICAgaWYgKGlzRGF0YSh2YWwpICYmIGFwcGxpZXMoKSkge1xuICAgICAgICBjb25zdCByZXBsID0gdGhpcy5nZXQodmFsKTtcbiAgICAgICAgaWYgKHJlcGwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSByZXBsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCBydWxlRGVmKVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIFRyYW5zZm9ybWF0aW9uUnVsZVxuICogQGF1Z21lbnRzIFRyYW5zZm9ybWF0aW9uUnVsZURlZlxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gcnVuIHJ1bGUgbG9naWMgLSBzZWUgYHJlZGFjdFJ1bGVgIGZvciBhbiBleGFtcGxlLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge0Z1bmN0aW9ufSBUcmFuc2Zvcm1hdGlvbkZ1bmN0aW9uXG4gKiBAcGFyYW0gb2JqZWN0IG9iamVjdCB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSAuLi5hcmdzIGFyZ3VtZW50cyB0byBwYXNzIGRvd24gdG8gcnVsZSdzIGBhcHBseWAgbWV0aG9kcy5cbiAqL1xuXG4vKipcbiAqIFJldHVybiBhIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIHRoYXQgd2lsbCBhcHBseSB0aGUgZ2l2ZW4gcnVsZXMgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXlbVHJhbnNmb3JtYXRpb25SdWxlXX0gcnVsZXNcbiAqIEByZXR1cm4ge1RyYW5zZm9ybWF0aW9uRnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvYmplY3RUcmFuc2Zvcm1lcihydWxlcykge1xuICBydWxlcy5mb3JFYWNoKHJ1bGUgPT4ge1xuICAgIHJ1bGUucGF0aHMgPSBydWxlLnBhdGhzLm1hcCgocGF0aCkgPT4ge1xuICAgICAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgICBjb25zdCB0YWlsID0gcGFydHMucG9wKCk7XG4gICAgICByZXR1cm4gW3BhcnRzLmxlbmd0aCA+IDAgPyBwYXJ0cy5qb2luKCcuJykgOiBudWxsLCB0YWlsXVxuICAgIH0pXG4gIH0pXG4gIHJldHVybiBmdW5jdGlvbiBhcHBseVRyYW5zZm9ybShzZXNzaW9uLCBvYmosIC4uLmFyZ3MpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBhcHBsaWVzID0gc2Vzc2lvbmVkQXBwbGllcyhzZXNzaW9uLCAuLi5hcmdzKTtcbiAgICBydWxlcy5mb3JFYWNoKHJ1bGUgPT4ge1xuICAgICAgaWYgKHNlc3Npb25bcnVsZS5uYW1lXSA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgIGZvciAoY29uc3QgW2hlYWQsIHRhaWxdIG9mIHJ1bGUucGF0aHMpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gaGVhZCA9PSBudWxsID8gb2JqIDogZGVlcEFjY2VzcyhvYmosIGhlYWQpO1xuICAgICAgICByZXN1bHQucHVzaChydWxlLnJ1bihvYmosIGhlYWQsIHBhcmVudCwgdGFpbCwgYXBwbGllcy5iaW5kKG51bGwsIHJ1bGUpKSk7XG4gICAgICAgIGlmIChzZXNzaW9uW3J1bGUubmFtZV0gPT09IGZhbHNlKSByZXR1cm47XG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gcmVzdWx0LmZpbHRlcihlbCA9PiBlbCAhPSBudWxsKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2Vzc2lvbmVkQXBwbGllcyhzZXNzaW9uLCAuLi5hcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhcHBsaWVzKHJ1bGUpIHtcbiAgICBpZiAoIXNlc3Npb24uaGFzT3duUHJvcGVydHkocnVsZS5uYW1lKSkge1xuICAgICAgc2Vzc2lvbltydWxlLm5hbWVdID0gISFydWxlLmFwcGxpZXMoLi4uYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBzZXNzaW9uW3J1bGUubmFtZV07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0YSh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPSBudWxsICYmICh0eXBlb2YgdmFsICE9PSAnb2JqZWN0JyB8fCBPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCA+IDApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBsaWVzV2hlbkFjdGl2aXR5RGVuaWVkKGFjdGl2aXR5LCBpc0FsbG93ZWQgPSBpc0FjdGl2aXR5QWxsb3dlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gYXBwbGllcyhwYXJhbXMpIHtcbiAgICByZXR1cm4gIWlzQWxsb3dlZChhY3Rpdml0eSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmlkUmVxdWVzdFRyYW5zbWl0UnVsZXMoaXNBbGxvd2VkID0gaXNBY3Rpdml0eUFsbG93ZWQpIHtcbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICBuYW1lOiBBQ1RJVklUWV9UUkFOU01JVF9FSURTLFxuICAgICAgcGF0aHM6IFsndXNlcklkJywgJ3VzZXJJZEFzRWlkcyddLFxuICAgICAgYXBwbGllczogYXBwbGllc1doZW5BY3Rpdml0eURlbmllZChBQ1RJVklUWV9UUkFOU01JVF9FSURTLCBpc0FsbG93ZWQpLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogQUNUSVZJVFlfVFJBTlNNSVRfVElELFxuICAgICAgcGF0aHM6IFsnb3J0YjJJbXAuZXh0LnRpZCddLFxuICAgICAgYXBwbGllczogYXBwbGllc1doZW5BY3Rpdml0eURlbmllZChBQ1RJVklUWV9UUkFOU01JVF9USUQsIGlzQWxsb3dlZClcbiAgICB9XG4gIF0ubWFwKHJlZGFjdFJ1bGUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvcnRiMlRyYW5zbWl0UnVsZXMoaXNBbGxvd2VkID0gaXNBY3Rpdml0eUFsbG93ZWQpIHtcbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICBuYW1lOiBBQ1RJVklUWV9UUkFOU01JVF9VRlBELFxuICAgICAgcGF0aHM6IE9SVEJfVUZQRF9QQVRIUyxcbiAgICAgIGFwcGxpZXM6IGFwcGxpZXNXaGVuQWN0aXZpdHlEZW5pZWQoQUNUSVZJVFlfVFJBTlNNSVRfVUZQRCwgaXNBbGxvd2VkKSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IEFDVElWSVRZX1RSQU5TTUlUX0VJRFMsXG4gICAgICBwYXRoczogT1JUQl9FSURTX1BBVEhTLFxuICAgICAgYXBwbGllczogYXBwbGllc1doZW5BY3Rpdml0eURlbmllZChBQ1RJVklUWV9UUkFOU01JVF9FSURTLCBpc0FsbG93ZWQpLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogQUNUSVZJVFlfVFJBTlNNSVRfUFJFQ0lTRV9HRU8sXG4gICAgICBwYXRoczogT1JUQl9HRU9fUEFUSFMsXG4gICAgICBhcHBsaWVzOiBhcHBsaWVzV2hlbkFjdGl2aXR5RGVuaWVkKEFDVElWSVRZX1RSQU5TTUlUX1BSRUNJU0VfR0VPLCBpc0FsbG93ZWQpLFxuICAgICAgZ2V0KHZhbCkge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgodmFsICsgTnVtYmVyLkVQU0lMT04pICogMTAwKSAvIDEwMDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IEFDVElWSVRZX1RSQU5TTUlUX1RJRCxcbiAgICAgIHBhdGhzOiBbJ3NvdXJjZS50aWQnXSxcbiAgICAgIGFwcGxpZXM6IGFwcGxpZXNXaGVuQWN0aXZpdHlEZW5pZWQoQUNUSVZJVFlfVFJBTlNNSVRfVElELCBpc0FsbG93ZWQpLFxuICAgIH1cbiAgXS5tYXAocmVkYWN0UnVsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWRhY3RvckZhY3RvcnkoaXNBbGxvd2VkID0gaXNBY3Rpdml0eUFsbG93ZWQpIHtcbiAgY29uc3QgcmVkYWN0T3J0YjIgPSBvYmplY3RUcmFuc2Zvcm1lcihvcnRiMlRyYW5zbWl0UnVsZXMoaXNBbGxvd2VkKSk7XG4gIGNvbnN0IHJlZGFjdEJpZFJlcXVlc3QgPSBvYmplY3RUcmFuc2Zvcm1lcihiaWRSZXF1ZXN0VHJhbnNtaXRSdWxlcyhpc0FsbG93ZWQpKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlZGFjdG9yKHBhcmFtcykge1xuICAgIGNvbnN0IHNlc3Npb24gPSB7fTtcbiAgICByZXR1cm4ge1xuICAgICAgb3J0YjIob2JqKSB7IHJlZGFjdE9ydGIyKHNlc3Npb24sIG9iaiwgcGFyYW1zKTsgcmV0dXJuIG9iaiB9LFxuICAgICAgYmlkUmVxdWVzdChvYmopIHsgcmVkYWN0QmlkUmVxdWVzdChzZXNzaW9uLCBvYmosIHBhcmFtcyk7IHJldHVybiBvYmogfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY2FuIHJlZGFjdCBvdGhlciBwcml2YWN5LXNlbnNpdGl2ZSBvYmplY3RzIGFjY29yZGluZ1xuICogdG8gYWN0aXZpdHkgcnVsZXMuXG4gKlxuICogQHBhcmFtIHt7fX0gcGFyYW1zIGFjdGl2aXR5IHBhcmFtZXRlcnMgdG8gdXNlIGZvciBhY3Rpdml0eSBjaGVja3NcbiAqIEByZXR1cm4ge3tvcnRiMjogZnVuY3Rpb24oe30pOiB7fSwgYmlkUmVxdWVzdDogZnVuY3Rpb24oe30pOiB7fX19IG1ldGhvZHNcbiAqICB0aGF0IGNhbiByZWRhY3QgZGlzYWxsb3dlZCBkYXRhIGZyb20gT1JUQjIgYW5kL29yIGJpZCByZXF1ZXN0IG9iamVjdHMuXG4gKi9cbmV4cG9ydCBjb25zdCByZWRhY3RvciA9IHJlZGFjdG9yRmFjdG9yeSgpO1xuXG4vLyBieSBkZWZhdWx0LCBUSURzIGFyZSBvZmYgc2luY2UgdmVyc2lvbiA4XG5yZWdpc3RlckFjdGl2aXR5Q29udHJvbChBQ1RJVklUWV9UUkFOU01JVF9USUQsICdlbmFibGVUSURzIGNvbmZpZycsICgpID0+IHtcbiAgaWYgKCFjb25maWcuZ2V0Q29uZmlnKCdlbmFibGVUSURzJykpIHtcbiAgICByZXR1cm4ge2FsbG93OiBmYWxzZSwgcmVhc29uOiAnVElEcyBhcmUgZGlzYWJsZWQnfVxuICB9XG59KTtcbiIsIi8qKiBAbW9kdWxlIGFkYXB0ZXJtYW5nZXIgKi9cblxuaW1wb3J0IHtcbiAgX2VhY2gsXG4gIGJpbmQsXG4gIGRlZXBBY2Nlc3MsXG4gIGRlZXBDbG9uZSxcbiAgZmxhdHRlbixcbiAgZ2VuZXJhdGVVVUlELFxuICBnZXRCaWRkZXJDb2RlcyxcbiAgZ2V0RGVmaW5lZFBhcmFtcyxcbiAgZ2V0VW5pcXVlSWRlbnRpZmllclN0cixcbiAgZ2V0VXNlckNvbmZpZ3VyZWRQYXJhbXMsXG4gIGdyb3VwQnksXG4gIGlzQXJyYXksXG4gIGlzUGxhaW5PYmplY3QsXG4gIGlzVmFsaWRNZWRpYVR5cGVzLFxuICBsb2dFcnJvcixcbiAgbG9nSW5mbyxcbiAgbG9nTWVzc2FnZSxcbiAgbG9nV2FybixcbiAgbWVyZ2VEZWVwLFxuICBzaHVmZmxlLFxuICB0aW1lc3RhbXAsXG59IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHtkZWNvcmF0ZUFkVW5pdHNXaXRoTmF0aXZlUGFyYW1zLCBuYXRpdmVBZGFwdGVyc30gZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHtuZXdCaWRkZXJ9IGZyb20gJy4vYWRhcHRlcnMvYmlkZGVyRmFjdG9yeS5qcyc7XG5pbXBvcnQge2FqYXhCdWlsZGVyfSBmcm9tICcuL2FqYXguanMnO1xuaW1wb3J0IHtjb25maWcsIFJBTkRPTX0gZnJvbSAnLi9jb25maWcuanMnO1xuaW1wb3J0IHtob29rfSBmcm9tICcuL2hvb2suanMnO1xuaW1wb3J0IHtmaW5kLCBpbmNsdWRlc30gZnJvbSAnLi9wb2x5ZmlsbC5qcyc7XG5pbXBvcnQge2FkdW5pdENvdW50ZXJ9IGZyb20gJy4vYWRVbml0cy5qcyc7XG5pbXBvcnQge2dldFJlZmVyZXJJbmZvfSBmcm9tICcuL3JlZmVyZXJEZXRlY3Rpb24uanMnO1xuaW1wb3J0IHtcbiAgR0RQUl9HVkxJRFMsXG4gIGdkcHJEYXRhSGFuZGxlcixcbiAgdXNwRGF0YUhhbmRsZXIsXG4gIGdwcERhdGFIYW5kbGVyLFxufSBmcm9tICcuL2NvbnNlbnRIYW5kbGVyLmpzJztcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tICcuL2V2ZW50cy5qcyc7XG5pbXBvcnQgQ09OU1RBTlRTIGZyb20gJy4vY29uc3RhbnRzLmpzb24nO1xuaW1wb3J0IHt1c2VNZXRyaWNzfSBmcm9tICcuL3V0aWxzL3BlcmZNZXRyaWNzLmpzJztcbmltcG9ydCB7YXVjdGlvbk1hbmFnZXJ9IGZyb20gJy4vYXVjdGlvbk1hbmFnZXIuanMnO1xuaW1wb3J0IHtNT0RVTEVfVFlQRV9BTkFMWVRJQ1MsIE1PRFVMRV9UWVBFX0JJRERFUiwgTU9EVUxFX1RZUEVfUFJFQklEfSBmcm9tICcuL2FjdGl2aXRpZXMvbW9kdWxlcy5qcyc7XG5pbXBvcnQge2lzQWN0aXZpdHlBbGxvd2VkfSBmcm9tICcuL2FjdGl2aXRpZXMvcnVsZXMuanMnO1xuaW1wb3J0IHtBQ1RJVklUWV9GRVRDSF9CSURTLCBBQ1RJVklUWV9SRVBPUlRfQU5BTFlUSUNTfSBmcm9tICcuL2FjdGl2aXRpZXMvYWN0aXZpdGllcy5qcyc7XG5pbXBvcnQge0FDVElWSVRZX1BBUkFNX0FOTF9DT05GSUcsIEFDVElWSVRZX1BBUkFNX1MyU19OQU1FLCBhY3Rpdml0eVBhcmFtc0J1aWxkZXJ9IGZyb20gJy4vYWN0aXZpdGllcy9wYXJhbXMuanMnO1xuaW1wb3J0IHtyZWRhY3Rvcn0gZnJvbSAnLi9hY3Rpdml0aWVzL3JlZGFjdG9yLmpzJztcblxuZXhwb3J0IHtnZHByRGF0YUhhbmRsZXIsIGdwcERhdGFIYW5kbGVyLCB1c3BEYXRhSGFuZGxlciwgY29wcGFEYXRhSGFuZGxlcn0gZnJvbSAnLi9jb25zZW50SGFuZGxlci5qcyc7XG5cbmV4cG9ydCBjb25zdCBQQlNfQURBUFRFUl9OQU1FID0gJ3Bic0JpZEFkYXB0ZXInO1xuZXhwb3J0IGNvbnN0IFBBUlRJVElPTlMgPSB7XG4gIENMSUVOVDogJ2NsaWVudCcsXG4gIFNFUlZFUjogJ3NlcnZlcidcbn1cblxuZXhwb3J0IGNvbnN0IGRlcCA9IHtcbiAgaXNBbGxvd2VkOiBpc0FjdGl2aXR5QWxsb3dlZCxcbiAgcmVkYWN0OiByZWRhY3RvclxufVxuXG5sZXQgYWRhcHRlck1hbmFnZXIgPSB7fTtcblxubGV0IF9iaWRkZXJSZWdpc3RyeSA9IGFkYXB0ZXJNYW5hZ2VyLmJpZGRlclJlZ2lzdHJ5ID0ge307XG5sZXQgX2FsaWFzUmVnaXN0cnkgPSBhZGFwdGVyTWFuYWdlci5hbGlhc1JlZ2lzdHJ5ID0ge307XG5cbmxldCBfczJzQ29uZmlncyA9IFtdO1xuY29uZmlnLmdldENvbmZpZygnczJzQ29uZmlnJywgY29uZmlnID0+IHtcbiAgaWYgKGNvbmZpZyAmJiBjb25maWcuczJzQ29uZmlnKSB7XG4gICAgX3Myc0NvbmZpZ3MgPSBpc0FycmF5KGNvbmZpZy5zMnNDb25maWcpID8gY29uZmlnLnMyc0NvbmZpZyA6IFtjb25maWcuczJzQ29uZmlnXTtcbiAgfVxufSk7XG5cbnZhciBfYW5hbHl0aWNzUmVnaXN0cnkgPSB7fTtcblxuY29uc3QgYWN0aXZpdHlQYXJhbXMgPSBhY3Rpdml0eVBhcmFtc0J1aWxkZXIoKGFsaWFzKSA9PiBhZGFwdGVyTWFuYWdlci5yZXNvbHZlQWxpYXMoYWxpYXMpKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHMyc0FjdGl2aXR5UGFyYW1zKHMyc0NvbmZpZykge1xuICByZXR1cm4gYWN0aXZpdHlQYXJhbXMoTU9EVUxFX1RZUEVfUFJFQklELCBQQlNfQURBUFRFUl9OQU1FLCB7XG4gICAgW0FDVElWSVRZX1BBUkFNX1MyU19OQU1FXTogczJzQ29uZmlnLmNvbmZpZ05hbWVcbiAgfSk7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gTGFiZWxEZXNjcmlwdG9yXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGxhYmVsQWxsIGRlc2NyaWJlcyB3aGV0aGVyIG9yIG5vdCB0aGlzIG9iamVjdCBleHBlY3RzIGFsbCBsYWJlbHMgdG8gbWF0Y2gsIG9yIGFueSBsYWJlbCB0byBtYXRjaFxuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBsYWJlbHMgdGhlIGxhYmVscyBsaXN0ZWQgb24gdGhlIGJpZGRlciBvciBhZFVuaXRcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nPn0gYWN0aXZlTGFiZWxzIHRoZSBsYWJlbHMgc3BlY2lmaWVkIGFzIGJlaW5nIGFjdGl2ZSBieSByZXF1ZXN0Qmlkc1xuICovXG5cbmZ1bmN0aW9uIGdldEJpZHMoe2JpZGRlckNvZGUsIGF1Y3Rpb25JZCwgYmlkZGVyUmVxdWVzdElkLCBhZFVuaXRzLCBzcmMsIG1ldHJpY3N9KSB7XG4gIHJldHVybiBhZFVuaXRzLnJlZHVjZSgocmVzdWx0LCBhZFVuaXQpID0+IHtcbiAgICBjb25zdCBiaWRzID0gYWRVbml0LmJpZHMuZmlsdGVyKGJpZCA9PiBiaWQuYmlkZGVyID09PSBiaWRkZXJDb2RlKTtcbiAgICBpZiAoYmlkZGVyQ29kZSA9PSBudWxsICYmIGJpZHMubGVuZ3RoID09PSAwICYmIGFkVW5pdC5zMnNCaWQgIT0gbnVsbCkge1xuICAgICAgYmlkcy5wdXNoKHtiaWRkZXI6IG51bGx9KTtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2goXG4gICAgICBiaWRzLnJlZHVjZSgoYmlkcywgYmlkKSA9PiB7XG4gICAgICAgIGJpZCA9IE9iamVjdC5hc3NpZ24oe30sIGJpZCxcbiAgICAgICAgICB7b3J0YjJJbXA6IG1lcmdlRGVlcCh7fSwgYWRVbml0Lm9ydGIySW1wLCBiaWQub3J0YjJJbXApfSxcbiAgICAgICAgICBnZXREZWZpbmVkUGFyYW1zKGFkVW5pdCwgW1xuICAgICAgICAgICAgJ25hdGl2ZVBhcmFtcycsXG4gICAgICAgICAgICAnbmF0aXZlT3J0YlJlcXVlc3QnLFxuICAgICAgICAgICAgJ21lZGlhVHlwZScsXG4gICAgICAgICAgICAncmVuZGVyZXInXG4gICAgICAgICAgXSlcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBtZWRpYVR5cGVzID0gYmlkLm1lZGlhVHlwZXMgPT0gbnVsbCA/IGFkVW5pdC5tZWRpYVR5cGVzIDogYmlkLm1lZGlhVHlwZXNcblxuICAgICAgICBpZiAoaXNWYWxpZE1lZGlhVHlwZXMobWVkaWFUeXBlcykpIHtcbiAgICAgICAgICBiaWQgPSBPYmplY3QuYXNzaWduKHt9LCBiaWQsIHtcbiAgICAgICAgICAgIG1lZGlhVHlwZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2dFcnJvcihcbiAgICAgICAgICAgIGBtZWRpYVR5cGVzIGlzIG5vdCBjb3JyZWN0bHkgY29uZmlndXJlZCBmb3IgYWR1bml0ICR7YWRVbml0LmNvZGV9YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBiaWRzLnB1c2goT2JqZWN0LmFzc2lnbih7fSwgYmlkLCB7XG4gICAgICAgICAgYWRVbml0Q29kZTogYWRVbml0LmNvZGUsXG4gICAgICAgICAgdHJhbnNhY3Rpb25JZDogYWRVbml0LnRyYW5zYWN0aW9uSWQsXG4gICAgICAgICAgc2l6ZXM6IGRlZXBBY2Nlc3MobWVkaWFUeXBlcywgJ2Jhbm5lci5zaXplcycpIHx8IGRlZXBBY2Nlc3MobWVkaWFUeXBlcywgJ3ZpZGVvLnBsYXllclNpemUnKSB8fCBbXSxcbiAgICAgICAgICBiaWRJZDogYmlkLmJpZF9pZCB8fCBnZXRVbmlxdWVJZGVudGlmaWVyU3RyKCksXG4gICAgICAgICAgYmlkZGVyUmVxdWVzdElkLFxuICAgICAgICAgIGF1Y3Rpb25JZCxcbiAgICAgICAgICBzcmMsXG4gICAgICAgICAgbWV0cmljcyxcbiAgICAgICAgICBiaWRSZXF1ZXN0c0NvdW50OiBhZHVuaXRDb3VudGVyLmdldFJlcXVlc3RzQ291bnRlcihhZFVuaXQuY29kZSksXG4gICAgICAgICAgYmlkZGVyUmVxdWVzdHNDb3VudDogYWR1bml0Q291bnRlci5nZXRCaWRkZXJSZXF1ZXN0c0NvdW50ZXIoYWRVbml0LmNvZGUsIGJpZC5iaWRkZXIpLFxuICAgICAgICAgIGJpZGRlcldpbnNDb3VudDogYWR1bml0Q291bnRlci5nZXRCaWRkZXJXaW5zQ291bnRlcihhZFVuaXQuY29kZSwgYmlkLmJpZGRlciksXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIGJpZHM7XG4gICAgICB9LCBbXSlcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIFtdKS5yZWR1Y2UoZmxhdHRlbiwgW10pLmZpbHRlcih2YWwgPT4gdmFsICE9PSAnJyk7XG59XG5cbmNvbnN0IGhvb2tlZEdldEJpZHMgPSBob29rKCdzeW5jJywgZ2V0QmlkcywgJ2dldEJpZHMnKTtcblxuLyoqXG4gKiBGaWx0ZXIgYW4gYWRVbml0J3MgIGJpZHMgZm9yIGJ1aWxkaW5nIGNsaWVudCBhbmQvb3Igc2VydmVyIHJlcXVlc3RzXG4gKlxuICogQHBhcmFtIGJpZHMgYW4gYXJyYXkgb2YgYmlkcyBhcyBkZWZpbmVkIGluIGFuIGFkVW5pdFxuICogQHBhcmFtIHMyc0NvbmZpZyBudWxsIGlmIHRoZSBhZFVuaXQgaXMgYmVpbmcgcm91dGVkIHRvIGEgY2xpZW50IGFkYXB0ZXI7IG90aGVyd2lzZSB0aGUgczJzIGFkYXB0ZXIncyBjb25maWdcbiAqIEByZXR1cm5zIHRoZSBzdWJzZXQgb2YgYGJpZHNgIHRoYXQgYXJlIHBlcnRpbmVudCBmb3IgdGhlIGdpdmVuIGBzMnNDb25maWdgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfZmlsdGVyQmlkc0ZvckFkVW5pdChiaWRzLCBzMnNDb25maWcsIHtnZXRTMlNCaWRkZXJzID0gZ2V0UzJTQmlkZGVyU2V0fSA9IHt9KSB7XG4gIGlmIChzMnNDb25maWcgPT0gbnVsbCkge1xuICAgIHJldHVybiBiaWRzO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNlcnZlckJpZGRlcnMgPSBnZXRTMlNCaWRkZXJzKHMyc0NvbmZpZyk7XG4gICAgcmV0dXJuIGJpZHMuZmlsdGVyKChiaWQpID0+IHNlcnZlckJpZGRlcnMuaGFzKGJpZC5iaWRkZXIpKVxuICB9XG59XG5leHBvcnQgY29uc3QgZmlsdGVyQmlkc0ZvckFkVW5pdCA9IGhvb2soJ3N5bmMnLCBfZmlsdGVyQmlkc0ZvckFkVW5pdCwgJ2ZpbHRlckJpZHNGb3JBZFVuaXQnKTtcblxuZnVuY3Rpb24gZ2V0QWRVbml0Q29weUZvclByZWJpZFNlcnZlcihhZFVuaXRzLCBzMnNDb25maWcpIHtcbiAgbGV0IGFkVW5pdHNDb3B5ID0gZGVlcENsb25lKGFkVW5pdHMpO1xuICBsZXQgaGFzTW9kdWxlQmlkcyA9IGZhbHNlO1xuXG4gIGFkVW5pdHNDb3B5LmZvckVhY2goKGFkVW5pdCkgPT4ge1xuICAgIC8vIGZpbHRlciBvdXQgY2xpZW50IHNpZGUgYmlkc1xuICAgIGNvbnN0IHMyc0JpZHMgPSBhZFVuaXQuYmlkcy5maWx0ZXIoKGIpID0+IGIubW9kdWxlID09PSBQQlNfQURBUFRFUl9OQU1FICYmIGIucGFyYW1zPy5jb25maWdOYW1lID09PSBzMnNDb25maWcuY29uZmlnTmFtZSk7XG4gICAgaWYgKHMyc0JpZHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBhZFVuaXQuczJzQmlkID0gczJzQmlkc1swXTtcbiAgICAgIGhhc01vZHVsZUJpZHMgPSB0cnVlO1xuICAgICAgYWRVbml0Lm9ydGIySW1wID0gbWVyZ2VEZWVwKHt9LCBhZFVuaXQuczJzQmlkLm9ydGIySW1wLCBhZFVuaXQub3J0YjJJbXApO1xuICAgIH0gZWxzZSBpZiAoczJzQmlkcy5sZW5ndGggPiAxKSB7XG4gICAgICBsb2dXYXJuKCdNdWx0aXBsZSBcIm1vZHVsZVwiIGJpZHMgZm9yIHRoZSBzYW1lIHMycyBjb25maWd1cmF0aW9uOyBhbGwgd2lsbCBiZSBpZ25vcmVkJywgczJzQmlkcyk7XG4gICAgfVxuICAgIGFkVW5pdC5iaWRzID0gZmlsdGVyQmlkc0ZvckFkVW5pdChhZFVuaXQuYmlkcywgczJzQ29uZmlnKVxuICAgICAgLm1hcCgoYmlkKSA9PiB7XG4gICAgICAgIGJpZC5iaWRfaWQgPSBnZXRVbmlxdWVJZGVudGlmaWVyU3RyKCk7XG4gICAgICAgIHJldHVybiBiaWQ7XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgLy8gZG9uJ3Qgc2VuZCBlbXB0eSByZXF1ZXN0c1xuICBhZFVuaXRzQ29weSA9IGFkVW5pdHNDb3B5LmZpbHRlcihhZFVuaXQgPT4ge1xuICAgIHJldHVybiBhZFVuaXQuYmlkcy5sZW5ndGggIT09IDAgfHwgYWRVbml0LnMyc0JpZCAhPSBudWxsO1xuICB9KTtcbiAgcmV0dXJuIHthZFVuaXRzOiBhZFVuaXRzQ29weSwgaGFzTW9kdWxlQmlkc307XG59XG5cbmZ1bmN0aW9uIGdldEFkVW5pdENvcHlGb3JDbGllbnRBZGFwdGVycyhhZFVuaXRzKSB7XG4gIGxldCBhZFVuaXRzQ2xpZW50Q29weSA9IGRlZXBDbG9uZShhZFVuaXRzKTtcbiAgYWRVbml0c0NsaWVudENvcHkuZm9yRWFjaCgoYWRVbml0KSA9PiB7XG4gICAgYWRVbml0LmJpZHMgPSBmaWx0ZXJCaWRzRm9yQWRVbml0KGFkVW5pdC5iaWRzLCBudWxsKTtcbiAgfSk7XG5cbiAgLy8gZG9uJ3Qgc2VuZCBlbXB0eSByZXF1ZXN0c1xuICBhZFVuaXRzQ2xpZW50Q29weSA9IGFkVW5pdHNDbGllbnRDb3B5LmZpbHRlcihhZFVuaXQgPT4ge1xuICAgIHJldHVybiBhZFVuaXQuYmlkcy5sZW5ndGggIT09IDA7XG4gIH0pO1xuXG4gIHJldHVybiBhZFVuaXRzQ2xpZW50Q29weTtcbn1cblxuLyoqXG4gKiBGaWx0ZXIgYW5kL29yIG1vZGlmeSBtZWRpYSB0eXBlcyBmb3IgYWQgdW5pdHMgYmFzZWQgb24gdGhlIGdpdmVuIGxhYmVscy5cbiAqXG4gKiBUaGlzIHNob3VsZCByZXR1cm4gYWRVbml0cyB0aGF0IGFyZSBhY3RpdmUgZm9yIHRoZSBnaXZlbiBsYWJlbHMsIG1vZGlmaWVkIHRvIGhhdmUgdGhlaXIgYG1lZGlhVHlwZXNgXG4gKiBjb25mb3JtIHRvIHNpemUgbWFwcGluZyBjb25maWd1cmF0aW9uLiBJZiBkaWZmZXJlbnQgYmlkcyBmb3IgdGhlIHNhbWUgYWRVbml0IHNob3VsZCB1c2UgZGlmZmVyZW50IGBtZWRpYVR5cGVzYCxcbiAqIHRoZXkgc2hvdWxkIGJlIGV4cG9zZWQgdW5kZXIgYGFkVW5pdC5iaWRzW10ubWVkaWFUeXBlc2AuXG4gKi9cbmV4cG9ydCBjb25zdCBzZXR1cEFkVW5pdE1lZGlhVHlwZXMgPSBob29rKCdzeW5jJywgKGFkVW5pdHMsIGxhYmVscykgPT4ge1xuICByZXR1cm4gYWRVbml0cztcbn0sICdzZXR1cEFkVW5pdE1lZGlhVHlwZXMnKVxuXG4vKipcbiAqIEBwYXJhbSB7e318QXJyYXk8e30+fSBzMnNDb25maWdzXG4gKiBAcmV0dXJucyB7U2V0PFN0cmluZz59IGEgc2V0IG9mIGFsbCB0aGUgYmlkZGVyIGNvZGVzIHRoYXQgc2hvdWxkIGJlIHJvdXRlZCB0aHJvdWdoIHRoZSBTMlMgYWRhcHRlcihzKVxuICogICAgICAgICAgICAgICAgICAgICAgICBhcyBkZWZpbmVkIGluIGBzMnNDb25maWdzYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UzJTQmlkZGVyU2V0KHMyc0NvbmZpZ3MpIHtcbiAgaWYgKCFpc0FycmF5KHMyc0NvbmZpZ3MpKSBzMnNDb25maWdzID0gW3Myc0NvbmZpZ3NdO1xuICAvLyBgbnVsbGAgcmVwcmVzZW50cyB0aGUgXCJubyBiaWQgYmlkZGVyXCIgLSB3aGVuIGFuIGFkIHVuaXQgaXMgbWVhbnQgb25seSBmb3IgUzJTIGFkYXB0ZXJzLCBsaWtlIHN0b3JlZCBpbXByZXNzaW9uc1xuICBjb25zdCBzZXJ2ZXJCaWRkZXJzID0gbmV3IFNldChbbnVsbF0pO1xuICBzMnNDb25maWdzLmZpbHRlcigoczJzKSA9PiBzMnMgJiYgczJzLmVuYWJsZWQpXG4gICAgLmZsYXRNYXAoKHMycykgPT4gczJzLmJpZGRlcnMpXG4gICAgLmZvckVhY2goKGJpZGRlcikgPT4gc2VydmVyQmlkZGVycy5hZGQoYmlkZGVyKSk7XG4gIHJldHVybiBzZXJ2ZXJCaWRkZXJzO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt7W1BBUlRJVElPTlMuQ0xJRU5UXTogQXJyYXk8U3RyaW5nPiwgW1BBUlRJVElPTlMuU0VSVkVSXTogQXJyYXk8U3RyaW5nPn19XG4gKiAgICAgICAgICAgQWxsIHRoZSBiaWRkZXIgY29kZXMgaW4gdGhlIGdpdmVuIGBhZFVuaXRzYCwgZGl2aWRlZCBpbiB0d28gYXJyYXlzIC1cbiAqICAgICAgICAgICB0aG9zZSB0aGF0IHNob3VsZCBiZSByb3V0ZWQgdG8gY2xpZW50LCBhbmQgc2VydmVyIGFkYXB0ZXJzIChhY2NvcmRpbmcgdG8gdGhlIGNvbmZpZ3VyYXRpb24gaW4gYHMyc0NvbmZpZ3NgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9wYXJ0aXRpb25CaWRkZXJzIChhZFVuaXRzLCBzMnNDb25maWdzLCB7Z2V0UzJTQmlkZGVycyA9IGdldFMyU0JpZGRlclNldH0gPSB7fSkge1xuICBjb25zdCBzZXJ2ZXJCaWRkZXJzID0gZ2V0UzJTQmlkZGVycyhzMnNDb25maWdzKTtcbiAgcmV0dXJuIGdldEJpZGRlckNvZGVzKGFkVW5pdHMpLnJlZHVjZSgobWVtbywgYmlkZGVyKSA9PiB7XG4gICAgY29uc3QgcGFydGl0aW9uID0gc2VydmVyQmlkZGVycy5oYXMoYmlkZGVyKSA/IFBBUlRJVElPTlMuU0VSVkVSIDogUEFSVElUSU9OUy5DTElFTlQ7XG4gICAgbWVtb1twYXJ0aXRpb25dLnB1c2goYmlkZGVyKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfSwge1tQQVJUSVRJT05TLkNMSUVOVF06IFtdLCBbUEFSVElUSU9OUy5TRVJWRVJdOiBbXX0pXG59XG5cbmV4cG9ydCBjb25zdCBwYXJ0aXRpb25CaWRkZXJzID0gaG9vaygnc3luYycsIF9wYXJ0aXRpb25CaWRkZXJzLCAncGFydGl0aW9uQmlkZGVycycpO1xuXG5hZGFwdGVyTWFuYWdlci5tYWtlQmlkUmVxdWVzdHMgPSBob29rKCdzeW5jJywgZnVuY3Rpb24gKGFkVW5pdHMsIGF1Y3Rpb25TdGFydCwgYXVjdGlvbklkLCBjYlRpbWVvdXQsIGxhYmVscywgb3J0YjJGcmFnbWVudHMgPSB7fSwgYXVjdGlvbk1ldHJpY3MpIHtcbiAgYXVjdGlvbk1ldHJpY3MgPSB1c2VNZXRyaWNzKGF1Y3Rpb25NZXRyaWNzKTtcbiAgLyoqXG4gICAqIGVtaXQgYW5kIHBhc3MgYWR1bml0cyBmb3IgZXh0ZXJuYWwgbW9kaWZpY2F0aW9uXG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmViaWQvUHJlYmlkLmpzL2lzc3Vlcy80MTQ5fElzc3VlfVxuICAgKi9cbiAgZXZlbnRzLmVtaXQoQ09OU1RBTlRTLkVWRU5UUy5CRUZPUkVfUkVRVUVTVF9CSURTLCBhZFVuaXRzKTtcbiAgaWYgKEZFQVRVUkVTLk5BVElWRSkge1xuICAgIGRlY29yYXRlQWRVbml0c1dpdGhOYXRpdmVQYXJhbXMoYWRVbml0cyk7XG4gIH1cblxuICBhZFVuaXRzLmZvckVhY2goYXUgPT4ge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhdS5tZWRpYVR5cGVzKSkge1xuICAgICAgYXUubWVkaWFUeXBlcyA9IHt9O1xuICAgIH1cbiAgICAvLyBmaWx0ZXIgb3V0IGJpZGRlcnMgdGhhdCBjYW5ub3QgcGFydGljaXBhdGUgaW4gdGhlIGF1Y3Rpb25cbiAgICBhdS5iaWRzID0gYXUuYmlkcy5maWx0ZXIoKGJpZCkgPT4gIWJpZC5iaWRkZXIgfHwgZGVwLmlzQWxsb3dlZChBQ1RJVklUWV9GRVRDSF9CSURTLCBhY3Rpdml0eVBhcmFtcyhNT0RVTEVfVFlQRV9CSURERVIsIGJpZC5iaWRkZXIpKSlcbiAgfSk7XG5cbiAgYWRVbml0cyA9IHNldHVwQWRVbml0TWVkaWFUeXBlcyhhZFVuaXRzLCBsYWJlbHMpO1xuXG4gIGxldCB7W1BBUlRJVElPTlMuQ0xJRU5UXTogY2xpZW50QmlkZGVycywgW1BBUlRJVElPTlMuU0VSVkVSXTogc2VydmVyQmlkZGVyc30gPSBwYXJ0aXRpb25CaWRkZXJzKGFkVW5pdHMsIF9zMnNDb25maWdzKTtcblxuICBpZiAoY29uZmlnLmdldENvbmZpZygnYmlkZGVyU2VxdWVuY2UnKSA9PT0gUkFORE9NKSB7XG4gICAgY2xpZW50QmlkZGVycyA9IHNodWZmbGUoY2xpZW50QmlkZGVycyk7XG4gIH1cbiAgY29uc3QgcmVmZXJlckluZm8gPSBnZXRSZWZlcmVySW5mbygpO1xuXG4gIGxldCBiaWRSZXF1ZXN0cyA9IFtdO1xuXG4gIGNvbnN0IG9ydGIyID0gb3J0YjJGcmFnbWVudHMuZ2xvYmFsIHx8IHt9O1xuICBjb25zdCBiaWRkZXJPcnRiMiA9IG9ydGIyRnJhZ21lbnRzLmJpZGRlciB8fCB7fTtcblxuICBmdW5jdGlvbiBhZGRPcnRiMihiaWRkZXJSZXF1ZXN0LCBzMnNBY3Rpdml0eVBhcmFtcykge1xuICAgIGNvbnN0IHJlZGFjdCA9IGRlcC5yZWRhY3QoXG4gICAgICBzMnNBY3Rpdml0eVBhcmFtcyAhPSBudWxsXG4gICAgICAgID8gczJzQWN0aXZpdHlQYXJhbXNcbiAgICAgICAgOiBhY3Rpdml0eVBhcmFtcyhNT0RVTEVfVFlQRV9CSURERVIsIGJpZGRlclJlcXVlc3QuYmlkZGVyQ29kZSlcbiAgICApO1xuICAgIGNvbnN0IGZwZCA9IE9iamVjdC5mcmVlemUocmVkYWN0Lm9ydGIyKG1lcmdlRGVlcCh7c291cmNlOiB7dGlkOiBhdWN0aW9uSWR9fSwgb3J0YjIsIGJpZGRlck9ydGIyW2JpZGRlclJlcXVlc3QuYmlkZGVyQ29kZV0pKSk7XG4gICAgYmlkZGVyUmVxdWVzdC5vcnRiMiA9IGZwZDtcbiAgICBiaWRkZXJSZXF1ZXN0LmJpZHMgPSBiaWRkZXJSZXF1ZXN0LmJpZHMubWFwKChiaWQpID0+IHtcbiAgICAgIGJpZC5vcnRiMiA9IGZwZDtcbiAgICAgIHJldHVybiByZWRhY3QuYmlkUmVxdWVzdChiaWQpO1xuICAgIH0pXG4gICAgcmV0dXJuIGJpZGRlclJlcXVlc3Q7XG4gIH1cblxuICBfczJzQ29uZmlncy5mb3JFYWNoKHMyc0NvbmZpZyA9PiB7XG4gICAgY29uc3QgczJzUGFyYW1zID0gczJzQWN0aXZpdHlQYXJhbXMoczJzQ29uZmlnKTtcbiAgICBpZiAoczJzQ29uZmlnICYmIHMyc0NvbmZpZy5lbmFibGVkICYmIGRlcC5pc0FsbG93ZWQoQUNUSVZJVFlfRkVUQ0hfQklEUywgczJzUGFyYW1zKSkge1xuICAgICAgbGV0IHthZFVuaXRzOiBhZFVuaXRzUzJTQ29weSwgaGFzTW9kdWxlQmlkc30gPSBnZXRBZFVuaXRDb3B5Rm9yUHJlYmlkU2VydmVyKGFkVW5pdHMsIHMyc0NvbmZpZyk7XG5cbiAgICAgIC8vIHVuaXF1ZVBic1RpZCBpcyBzbyB3ZSBrbm93IHdoaWNoIHNlcnZlciB0byBzZW5kIHdoaWNoIGJpZHMgdG8gZHVyaW5nIHRoZSBjYWxsQmlkcyBmdW5jdGlvblxuICAgICAgbGV0IHVuaXF1ZVBic1RpZCA9IGdlbmVyYXRlVVVJRCgpO1xuXG4gICAgICAoc2VydmVyQmlkZGVycy5sZW5ndGggPT09IDAgJiYgaGFzTW9kdWxlQmlkcyA/IFtudWxsXSA6IHNlcnZlckJpZGRlcnMpLmZvckVhY2goYmlkZGVyQ29kZSA9PiB7XG4gICAgICAgIGNvbnN0IGJpZGRlclJlcXVlc3RJZCA9IGdldFVuaXF1ZUlkZW50aWZpZXJTdHIoKTtcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IGF1Y3Rpb25NZXRyaWNzLmZvcmsoKTtcbiAgICAgICAgY29uc3QgYmlkZGVyUmVxdWVzdCA9IGFkZE9ydGIyKHtcbiAgICAgICAgICBiaWRkZXJDb2RlLFxuICAgICAgICAgIGF1Y3Rpb25JZCxcbiAgICAgICAgICBiaWRkZXJSZXF1ZXN0SWQsXG4gICAgICAgICAgdW5pcXVlUGJzVGlkLFxuICAgICAgICAgIGJpZHM6IGhvb2tlZEdldEJpZHMoe2JpZGRlckNvZGUsIGF1Y3Rpb25JZCwgYmlkZGVyUmVxdWVzdElkLCAnYWRVbml0cyc6IGRlZXBDbG9uZShhZFVuaXRzUzJTQ29weSksIHNyYzogQ09OU1RBTlRTLlMyUy5TUkMsIG1ldHJpY3N9KSxcbiAgICAgICAgICBhdWN0aW9uU3RhcnQ6IGF1Y3Rpb25TdGFydCxcbiAgICAgICAgICB0aW1lb3V0OiBzMnNDb25maWcudGltZW91dCxcbiAgICAgICAgICBzcmM6IENPTlNUQU5UUy5TMlMuU1JDLFxuICAgICAgICAgIHJlZmVyZXJJbmZvLFxuICAgICAgICAgIG1ldHJpY3MsXG4gICAgICAgIH0sIHMyc1BhcmFtcyk7XG4gICAgICAgIGlmIChiaWRkZXJSZXF1ZXN0LmJpZHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgYmlkUmVxdWVzdHMucHVzaChiaWRkZXJSZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIHVwZGF0ZSB0aGUgczJzQWRVbml0cyBvYmplY3QgYW5kIHJlbW92ZSBhbGwgYmlkcyB0aGF0IGRpZG4ndCBwYXNzIHNpemVDb25maWcvbGFiZWwgY2hlY2tzIGZyb20gZ2V0QmlkcygpXG4gICAgICAvLyB0aGlzIGlzIHRvIGtlZXAgY29uc2lzdGVuY3kgYW5kIG9ubHkgYWxsb3cgYmlkcy9hZHVuaXRzIHRoYXQgcGFzc2VkIHRoZSBjaGVja3MgdG8gZ28gdG8gcGJzXG4gICAgICBhZFVuaXRzUzJTQ29weS5mb3JFYWNoKChhZFVuaXRDb3B5KSA9PiB7XG4gICAgICAgIGxldCB2YWxpZEJpZHMgPSBhZFVuaXRDb3B5LmJpZHMuZmlsdGVyKChhZFVuaXRCaWQpID0+XG4gICAgICAgICAgZmluZChiaWRSZXF1ZXN0cywgcmVxdWVzdCA9PlxuICAgICAgICAgICAgZmluZChyZXF1ZXN0LmJpZHMsIChyZXFCaWQpID0+IHJlcUJpZC5iaWRJZCA9PT0gYWRVbml0QmlkLmJpZF9pZCkpKTtcbiAgICAgICAgYWRVbml0Q29weS5iaWRzID0gdmFsaWRCaWRzO1xuICAgICAgfSk7XG5cbiAgICAgIGJpZFJlcXVlc3RzLmZvckVhY2gocmVxdWVzdCA9PiB7XG4gICAgICAgIGlmIChyZXF1ZXN0LmFkVW5pdHNTMlNDb3B5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXF1ZXN0LmFkVW5pdHNTMlNDb3B5ID0gYWRVbml0c1MyU0NvcHkuZmlsdGVyKGF1ID0+IGF1LmJpZHMubGVuZ3RoID4gMCB8fCBhdS5zMnNCaWQgIT0gbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gY2xpZW50IGFkYXB0ZXJzXG4gIGxldCBhZFVuaXRzQ2xpZW50Q29weSA9IGdldEFkVW5pdENvcHlGb3JDbGllbnRBZGFwdGVycyhhZFVuaXRzKTtcbiAgY2xpZW50QmlkZGVycy5mb3JFYWNoKGJpZGRlckNvZGUgPT4ge1xuICAgIGNvbnN0IGJpZGRlclJlcXVlc3RJZCA9IGdldFVuaXF1ZUlkZW50aWZpZXJTdHIoKTtcbiAgICBjb25zdCBtZXRyaWNzID0gYXVjdGlvbk1ldHJpY3MuZm9yaygpO1xuICAgIGNvbnN0IGJpZGRlclJlcXVlc3QgPSBhZGRPcnRiMih7XG4gICAgICBiaWRkZXJDb2RlLFxuICAgICAgYXVjdGlvbklkLFxuICAgICAgYmlkZGVyUmVxdWVzdElkLFxuICAgICAgYmlkczogaG9va2VkR2V0Qmlkcyh7YmlkZGVyQ29kZSwgYXVjdGlvbklkLCBiaWRkZXJSZXF1ZXN0SWQsICdhZFVuaXRzJzogZGVlcENsb25lKGFkVW5pdHNDbGllbnRDb3B5KSwgbGFiZWxzLCBzcmM6ICdjbGllbnQnLCBtZXRyaWNzfSksXG4gICAgICBhdWN0aW9uU3RhcnQ6IGF1Y3Rpb25TdGFydCxcbiAgICAgIHRpbWVvdXQ6IGNiVGltZW91dCxcbiAgICAgIHJlZmVyZXJJbmZvLFxuICAgICAgbWV0cmljcyxcbiAgICB9KTtcbiAgICBjb25zdCBhZGFwdGVyID0gX2JpZGRlclJlZ2lzdHJ5W2JpZGRlckNvZGVdO1xuICAgIGlmICghYWRhcHRlcikge1xuICAgICAgbG9nRXJyb3IoYFRyeWluZyB0byBtYWtlIGEgcmVxdWVzdCBmb3IgYmlkZGVyIHRoYXQgZG9lcyBub3QgZXhpc3Q6ICR7YmlkZGVyQ29kZX1gKTtcbiAgICB9XG5cbiAgICBpZiAoYWRhcHRlciAmJiBiaWRkZXJSZXF1ZXN0LmJpZHMgJiYgYmlkZGVyUmVxdWVzdC5iaWRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgYmlkUmVxdWVzdHMucHVzaChiaWRkZXJSZXF1ZXN0KTtcbiAgICB9XG4gIH0pO1xuXG4gIGJpZFJlcXVlc3RzLmZvckVhY2goYmlkUmVxdWVzdCA9PiB7XG4gICAgaWYgKGdkcHJEYXRhSGFuZGxlci5nZXRDb25zZW50RGF0YSgpKSB7XG4gICAgICBiaWRSZXF1ZXN0WydnZHByQ29uc2VudCddID0gZ2RwckRhdGFIYW5kbGVyLmdldENvbnNlbnREYXRhKCk7XG4gICAgfVxuICAgIGlmICh1c3BEYXRhSGFuZGxlci5nZXRDb25zZW50RGF0YSgpKSB7XG4gICAgICBiaWRSZXF1ZXN0Wyd1c3BDb25zZW50J10gPSB1c3BEYXRhSGFuZGxlci5nZXRDb25zZW50RGF0YSgpO1xuICAgIH1cbiAgICBpZiAoZ3BwRGF0YUhhbmRsZXIuZ2V0Q29uc2VudERhdGEoKSkge1xuICAgICAgYmlkUmVxdWVzdFsnZ3BwQ29uc2VudCddID0gZ3BwRGF0YUhhbmRsZXIuZ2V0Q29uc2VudERhdGEoKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYmlkUmVxdWVzdHM7XG59LCAnbWFrZUJpZFJlcXVlc3RzJyk7XG5cbmFkYXB0ZXJNYW5hZ2VyLmNhbGxCaWRzID0gKGFkVW5pdHMsIGJpZFJlcXVlc3RzLCBhZGRCaWRSZXNwb25zZSwgZG9uZUNiLCByZXF1ZXN0Q2FsbGJhY2tzLCByZXF1ZXN0Qmlkc1RpbWVvdXQsIG9uVGltZWx5UmVzcG9uc2UsIG9ydGIyRnJhZ21lbnRzID0ge30pID0+IHtcbiAgaWYgKCFiaWRSZXF1ZXN0cy5sZW5ndGgpIHtcbiAgICBsb2dXYXJuKCdjYWxsQmlkcyBleGVjdXRlZCB3aXRoIG5vIGJpZFJlcXVlc3RzLiAgV2VyZSB0aGV5IGZpbHRlcmVkIGJ5IGxhYmVscyBvciBzaXppbmc/Jyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IFtjbGllbnRCaWRkZXJSZXF1ZXN0cywgc2VydmVyQmlkZGVyUmVxdWVzdHNdID0gYmlkUmVxdWVzdHMucmVkdWNlKChwYXJ0aXRpb25zLCBiaWRSZXF1ZXN0KSA9PiB7XG4gICAgcGFydGl0aW9uc1tOdW1iZXIodHlwZW9mIGJpZFJlcXVlc3Quc3JjICE9PSAndW5kZWZpbmVkJyAmJiBiaWRSZXF1ZXN0LnNyYyA9PT0gQ09OU1RBTlRTLlMyUy5TUkMpXS5wdXNoKGJpZFJlcXVlc3QpO1xuICAgIHJldHVybiBwYXJ0aXRpb25zO1xuICB9LCBbW10sIFtdXSk7XG5cbiAgdmFyIHVuaXF1ZVNlcnZlckJpZFJlcXVlc3RzID0gW107XG4gIHNlcnZlckJpZGRlclJlcXVlc3RzLmZvckVhY2goc2VydmVyQmlkUmVxdWVzdCA9PiB7XG4gICAgdmFyIGluZGV4ID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmlxdWVTZXJ2ZXJCaWRSZXF1ZXN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKHNlcnZlckJpZFJlcXVlc3QudW5pcXVlUGJzVGlkID09PSB1bmlxdWVTZXJ2ZXJCaWRSZXF1ZXN0c1tpXS51bmlxdWVQYnNUaWQpIHtcbiAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGluZGV4IDw9IC0xKSB7XG4gICAgICB1bmlxdWVTZXJ2ZXJCaWRSZXF1ZXN0cy5wdXNoKHNlcnZlckJpZFJlcXVlc3QpO1xuICAgIH1cbiAgfSk7XG5cbiAgbGV0IGNvdW50ZXIgPSAwO1xuXG4gIF9zMnNDb25maWdzLmZvckVhY2goKHMyc0NvbmZpZykgPT4ge1xuICAgIGlmIChzMnNDb25maWcgJiYgdW5pcXVlU2VydmVyQmlkUmVxdWVzdHNbY291bnRlcl0gJiYgZ2V0UzJTQmlkZGVyU2V0KHMyc0NvbmZpZykuaGFzKHVuaXF1ZVNlcnZlckJpZFJlcXVlc3RzW2NvdW50ZXJdLmJpZGRlckNvZGUpKSB7XG4gICAgICAvLyBzMnMgc2hvdWxkIGdldCB0aGUgc2FtZSBjbGllbnQgc2lkZSB0aW1lb3V0IGFzIG90aGVyIGNsaWVudCBzaWRlIHJlcXVlc3RzLlxuICAgICAgY29uc3QgczJzQWpheCA9IGFqYXhCdWlsZGVyKHJlcXVlc3RCaWRzVGltZW91dCwgcmVxdWVzdENhbGxiYWNrcyA/IHtcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdENhbGxiYWNrcy5yZXF1ZXN0LmJpbmQobnVsbCwgJ3MycycpLFxuICAgICAgICBkb25lOiByZXF1ZXN0Q2FsbGJhY2tzLmRvbmVcbiAgICAgIH0gOiB1bmRlZmluZWQpO1xuICAgICAgbGV0IGFkYXB0ZXJzU2VydmVyU2lkZSA9IHMyc0NvbmZpZy5iaWRkZXJzO1xuICAgICAgY29uc3QgczJzQWRhcHRlciA9IF9iaWRkZXJSZWdpc3RyeVtzMnNDb25maWcuYWRhcHRlcl07XG4gICAgICBsZXQgdW5pcXVlUGJzVGlkID0gdW5pcXVlU2VydmVyQmlkUmVxdWVzdHNbY291bnRlcl0udW5pcXVlUGJzVGlkO1xuICAgICAgbGV0IGFkVW5pdHNTMlNDb3B5ID0gdW5pcXVlU2VydmVyQmlkUmVxdWVzdHNbY291bnRlcl0uYWRVbml0c1MyU0NvcHk7XG5cbiAgICAgIGxldCB1bmlxdWVTZXJ2ZXJSZXF1ZXN0cyA9IHNlcnZlckJpZGRlclJlcXVlc3RzLmZpbHRlcihzZXJ2ZXJCaWRSZXF1ZXN0ID0+IHNlcnZlckJpZFJlcXVlc3QudW5pcXVlUGJzVGlkID09PSB1bmlxdWVQYnNUaWQpO1xuXG4gICAgICBpZiAoczJzQWRhcHRlcikge1xuICAgICAgICBsZXQgczJzQmlkUmVxdWVzdCA9IHsnYWRfdW5pdHMnOiBhZFVuaXRzUzJTQ29weSwgczJzQ29uZmlnLCBvcnRiMkZyYWdtZW50c307XG4gICAgICAgIGlmIChzMnNCaWRSZXF1ZXN0LmFkX3VuaXRzLmxlbmd0aCkge1xuICAgICAgICAgIGxldCBkb25lQ2JzID0gdW5pcXVlU2VydmVyUmVxdWVzdHMubWFwKGJpZFJlcXVlc3QgPT4ge1xuICAgICAgICAgICAgYmlkUmVxdWVzdC5zdGFydCA9IHRpbWVzdGFtcCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgb25UaW1lbHlSZXNwb25zZShiaWRSZXF1ZXN0LmJpZGRlclJlcXVlc3RJZCk7XG4gICAgICAgICAgICAgIGRvbmVDYnMuYXBwbHkoYmlkUmVxdWVzdCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNvbnN0IGJpZGRlcnMgPSBnZXRCaWRkZXJDb2RlcyhzMnNCaWRSZXF1ZXN0LmFkX3VuaXRzKS5maWx0ZXIoKGJpZGRlcikgPT4gYWRhcHRlcnNTZXJ2ZXJTaWRlLmluY2x1ZGVzKGJpZGRlcikpO1xuICAgICAgICAgIGxvZ01lc3NhZ2UoYENBTExJTkcgUzJTIEhFQURFUiBCSURERVJTID09PT0gJHtiaWRkZXJzLmxlbmd0aCA+IDAgPyBiaWRkZXJzLmpvaW4oJywgJykgOiAnTm8gYmlkZGVyIHNwZWNpZmllZCwgdXNpbmcgXCJvcnRiMkltcFwiIGRlZmluaXRpb24ocykgb25seSd9YCk7XG5cbiAgICAgICAgICAvLyBmaXJlIEJJRF9SRVFVRVNURUQgZXZlbnQgZm9yIGVhY2ggczJzIGJpZFJlcXVlc3RcbiAgICAgICAgICB1bmlxdWVTZXJ2ZXJSZXF1ZXN0cy5mb3JFYWNoKGJpZFJlcXVlc3QgPT4ge1xuICAgICAgICAgICAgLy8gYWRkIHRoZSBuZXcgc291cmNlVGlkXG4gICAgICAgICAgICBldmVudHMuZW1pdChDT05TVEFOVFMuRVZFTlRTLkJJRF9SRVFVRVNURUQsIHsuLi5iaWRSZXF1ZXN0LCB0aWQ6IGJpZFJlcXVlc3QuYXVjdGlvbklkfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBtYWtlIGJpZCByZXF1ZXN0c1xuICAgICAgICAgIHMyc0FkYXB0ZXIuY2FsbEJpZHMoXG4gICAgICAgICAgICBzMnNCaWRSZXF1ZXN0LFxuICAgICAgICAgICAgc2VydmVyQmlkZGVyUmVxdWVzdHMsXG4gICAgICAgICAgICBhZGRCaWRSZXNwb25zZSxcbiAgICAgICAgICAgICgpID0+IGRvbmVDYnMuZm9yRWFjaChkb25lID0+IGRvbmUoKSksXG4gICAgICAgICAgICBzMnNBamF4XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nRXJyb3IoJ21pc3NpbmcgJyArIHMyc0NvbmZpZy5hZGFwdGVyKTtcbiAgICAgIH1cbiAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGhhbmRsZSBjbGllbnQgYWRhcHRlciByZXF1ZXN0c1xuICBjbGllbnRCaWRkZXJSZXF1ZXN0cy5mb3JFYWNoKGJpZGRlclJlcXVlc3QgPT4ge1xuICAgIGJpZGRlclJlcXVlc3Quc3RhcnQgPSB0aW1lc3RhbXAoKTtcbiAgICAvLyBUT0RPIDogRG8gd2UgY2hlY2sgZm9yIGJpZCBpbiBwb29sIGZyb20gaGVyZSBhbmQgc2tpcCBjYWxsaW5nIGFkYXB0ZXIgYWdhaW4gP1xuICAgIGNvbnN0IGFkYXB0ZXIgPSBfYmlkZGVyUmVnaXN0cnlbYmlkZGVyUmVxdWVzdC5iaWRkZXJDb2RlXTtcbiAgICBjb25maWcucnVuV2l0aEJpZGRlcihiaWRkZXJSZXF1ZXN0LmJpZGRlckNvZGUsICgpID0+IHtcbiAgICAgIGxvZ01lc3NhZ2UoYENBTExJTkcgQklEREVSYCk7XG4gICAgICBldmVudHMuZW1pdChDT05TVEFOVFMuRVZFTlRTLkJJRF9SRVFVRVNURUQsIGJpZGRlclJlcXVlc3QpO1xuICAgIH0pO1xuICAgIGxldCBhamF4ID0gYWpheEJ1aWxkZXIocmVxdWVzdEJpZHNUaW1lb3V0LCByZXF1ZXN0Q2FsbGJhY2tzID8ge1xuICAgICAgcmVxdWVzdDogcmVxdWVzdENhbGxiYWNrcy5yZXF1ZXN0LmJpbmQobnVsbCwgYmlkZGVyUmVxdWVzdC5iaWRkZXJDb2RlKSxcbiAgICAgIGRvbmU6IHJlcXVlc3RDYWxsYmFja3MuZG9uZVxuICAgIH0gOiB1bmRlZmluZWQpO1xuICAgIGNvbnN0IGFkYXB0ZXJEb25lID0gZG9uZUNiLmJpbmQoYmlkZGVyUmVxdWVzdCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbmZpZy5ydW5XaXRoQmlkZGVyKFxuICAgICAgICBiaWRkZXJSZXF1ZXN0LmJpZGRlckNvZGUsXG4gICAgICAgIGJpbmQuY2FsbChcbiAgICAgICAgICBhZGFwdGVyLmNhbGxCaWRzLFxuICAgICAgICAgIGFkYXB0ZXIsXG4gICAgICAgICAgYmlkZGVyUmVxdWVzdCxcbiAgICAgICAgICBhZGRCaWRSZXNwb25zZSxcbiAgICAgICAgICBhZGFwdGVyRG9uZSxcbiAgICAgICAgICBhamF4LFxuICAgICAgICAgICgpID0+IG9uVGltZWx5UmVzcG9uc2UoYmlkZGVyUmVxdWVzdC5iaWRkZXJSZXF1ZXN0SWQpLFxuICAgICAgICAgIGNvbmZpZy5jYWxsYmFja1dpdGhCaWRkZXIoYmlkZGVyUmVxdWVzdC5iaWRkZXJDb2RlKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ0Vycm9yKGAke2JpZGRlclJlcXVlc3QuYmlkZGVyQ29kZX0gQmlkIEFkYXB0ZXIgZW1pdHRlZCBhbiB1bmNhdWdodCBlcnJvciB3aGVuIHBhcnNpbmcgdGhlaXIgYmlkUmVxdWVzdGAsIHtlLCBiaWRSZXF1ZXN0OiBiaWRkZXJSZXF1ZXN0fSk7XG4gICAgICBhZGFwdGVyRG9uZSgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBnZXRTdXBwb3J0ZWRNZWRpYVR5cGVzKGJpZGRlckNvZGUpIHtcbiAgbGV0IHN1cHBvcnRlZE1lZGlhVHlwZXMgPSBbXTtcbiAgaWYgKEZFQVRVUkVTLlZJREVPICYmIGluY2x1ZGVzKGFkYXB0ZXJNYW5hZ2VyLnZpZGVvQWRhcHRlcnMsIGJpZGRlckNvZGUpKSBzdXBwb3J0ZWRNZWRpYVR5cGVzLnB1c2goJ3ZpZGVvJyk7XG4gIGlmIChGRUFUVVJFUy5OQVRJVkUgJiYgaW5jbHVkZXMobmF0aXZlQWRhcHRlcnMsIGJpZGRlckNvZGUpKSBzdXBwb3J0ZWRNZWRpYVR5cGVzLnB1c2goJ25hdGl2ZScpO1xuICByZXR1cm4gc3VwcG9ydGVkTWVkaWFUeXBlcztcbn1cblxuYWRhcHRlck1hbmFnZXIudmlkZW9BZGFwdGVycyA9IFtdOyAvLyBhZGRlZCBieSBhZGFwdGVyTG9hZGVyIGZvciBub3dcblxuYWRhcHRlck1hbmFnZXIucmVnaXN0ZXJCaWRBZGFwdGVyID0gZnVuY3Rpb24gKGJpZEFkYXB0ZXIsIGJpZGRlckNvZGUsIHtzdXBwb3J0ZWRNZWRpYVR5cGVzID0gW119ID0ge30pIHtcbiAgaWYgKGJpZEFkYXB0ZXIgJiYgYmlkZGVyQ29kZSkge1xuICAgIGlmICh0eXBlb2YgYmlkQWRhcHRlci5jYWxsQmlkcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgX2JpZGRlclJlZ2lzdHJ5W2JpZGRlckNvZGVdID0gYmlkQWRhcHRlcjtcbiAgICAgIEdEUFJfR1ZMSURTLnJlZ2lzdGVyKE1PRFVMRV9UWVBFX0JJRERFUiwgYmlkZGVyQ29kZSwgYmlkQWRhcHRlci5nZXRTcGVjPy4oKS5ndmxpZCk7XG5cbiAgICAgIGlmIChGRUFUVVJFUy5WSURFTyAmJiBpbmNsdWRlcyhzdXBwb3J0ZWRNZWRpYVR5cGVzLCAndmlkZW8nKSkge1xuICAgICAgICBhZGFwdGVyTWFuYWdlci52aWRlb0FkYXB0ZXJzLnB1c2goYmlkZGVyQ29kZSk7XG4gICAgICB9XG4gICAgICBpZiAoRkVBVFVSRVMuTkFUSVZFICYmIGluY2x1ZGVzKHN1cHBvcnRlZE1lZGlhVHlwZXMsICduYXRpdmUnKSkge1xuICAgICAgICBuYXRpdmVBZGFwdGVycy5wdXNoKGJpZGRlckNvZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2dFcnJvcignQmlkZGVyIGFkYXB0b3IgZXJyb3IgZm9yIGJpZGRlciBjb2RlOiAnICsgYmlkZGVyQ29kZSArICdiaWRkZXIgbXVzdCBpbXBsZW1lbnQgYSBjYWxsQmlkcygpIGZ1bmN0aW9uJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxvZ0Vycm9yKCdiaWRBZGFwdGVyIG9yIGJpZGRlckNvZGUgbm90IHNwZWNpZmllZCcpO1xuICB9XG59O1xuXG5hZGFwdGVyTWFuYWdlci5hbGlhc0JpZEFkYXB0ZXIgPSBmdW5jdGlvbiAoYmlkZGVyQ29kZSwgYWxpYXMsIG9wdGlvbnMpIHtcbiAgbGV0IGV4aXN0aW5nQWxpYXMgPSBfYmlkZGVyUmVnaXN0cnlbYWxpYXNdO1xuXG4gIGlmICh0eXBlb2YgZXhpc3RpbmdBbGlhcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsZXQgYmlkQWRhcHRlciA9IF9iaWRkZXJSZWdpc3RyeVtiaWRkZXJDb2RlXTtcbiAgICBpZiAodHlwZW9mIGJpZEFkYXB0ZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBjaGVjayBpZiBhbGlhcyBpcyBwYXJ0IG9mIHMyc0NvbmZpZyBhbmQgYWxsb3cgdGhlbSB0byByZWdpc3RlciBpZiBzbyAoYXMgYmFzZSBiaWRkZXIgbWF5IGJlIHMycy1vbmx5KVxuICAgICAgY29uc3Qgbm9uUzJTQWxpYXMgPSBbXTtcbiAgICAgIF9zMnNDb25maWdzLmZvckVhY2goczJzQ29uZmlnID0+IHtcbiAgICAgICAgaWYgKHMyc0NvbmZpZy5iaWRkZXJzICYmIHMyc0NvbmZpZy5iaWRkZXJzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IHMyc0JpZGRlcnMgPSBzMnNDb25maWcgJiYgczJzQ29uZmlnLmJpZGRlcnM7XG4gICAgICAgICAgaWYgKCEoczJzQ29uZmlnICYmIGluY2x1ZGVzKHMyc0JpZGRlcnMsIGFsaWFzKSkpIHtcbiAgICAgICAgICAgIG5vblMyU0FsaWFzLnB1c2goYmlkZGVyQ29kZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9hbGlhc1JlZ2lzdHJ5W2FsaWFzXSA9IGJpZGRlckNvZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIG5vblMyU0FsaWFzLmZvckVhY2goYmlkZGVyQ29kZSA9PiB7XG4gICAgICAgIGxvZ0Vycm9yKCdiaWRkZXJDb2RlIFwiJyArIGJpZGRlckNvZGUgKyAnXCIgaXMgbm90IGFuIGV4aXN0aW5nIGJpZGRlci4nLCAnYWRhcHRlck1hbmFnZXIuYWxpYXNCaWRBZGFwdGVyJyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IG5ld0FkYXB0ZXI7XG4gICAgICAgIGxldCBzdXBwb3J0ZWRNZWRpYVR5cGVzID0gZ2V0U3VwcG9ydGVkTWVkaWFUeXBlcyhiaWRkZXJDb2RlKTtcbiAgICAgICAgLy8gSGF2ZSBrZXB0IG9sZCBjb2RlIHRvIHN1cHBvcnQgYmFja3dhcmQgY29tcGF0aWJpbGl0aXkuXG4gICAgICAgIC8vIFJlbW92ZSB0aGlzIGlmIGxvb3Agd2hlbiBhbGwgYWRhcHRlcnMgYXJlIHN1cHBvcnRpbmcgYmlkZGVyRmFjdG9yeS4gaS5lIFdoZW4gUHJlYmlkLmpzIGlzIDEuMFxuICAgICAgICBpZiAoYmlkQWRhcHRlci5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgIT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgICAgICAgIG5ld0FkYXB0ZXIgPSBuZXcgYmlkQWRhcHRlci5jb25zdHJ1Y3RvcigpO1xuICAgICAgICAgIG5ld0FkYXB0ZXIuc2V0QmlkZGVyQ29kZShhbGlhcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IHNwZWMgPSBiaWRBZGFwdGVyLmdldFNwZWMoKTtcbiAgICAgICAgICBsZXQgZ3ZsaWQgPSBvcHRpb25zICYmIG9wdGlvbnMuZ3ZsaWQ7XG4gICAgICAgICAgaWYgKHNwZWMuZ3ZsaWQgIT0gbnVsbCAmJiBndmxpZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBsb2dXYXJuKGBBbGlhcyAnJHthbGlhc30nIHdpbGwgTk9UIHJlLXVzZSB0aGUgR1ZMIElEIG9mIHRoZSBvcmlnaW5hbCBhZGFwdGVyICgnJHtzcGVjLmNvZGV9JywgZ3ZsaWQ6ICR7c3BlYy5ndmxpZH0pLiBGdW5jdGlvbmFsaXR5IHRoYXQgcmVxdWlyZXMgVENGIGNvbnNlbnQgbWF5IG5vdCB3b3JrIGFzIGV4cGVjdGVkLmApXG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBza2lwUGJzQWxpYXNpbmcgPSBvcHRpb25zICYmIG9wdGlvbnMuc2tpcFBic0FsaWFzaW5nO1xuICAgICAgICAgIG5ld0FkYXB0ZXIgPSBuZXdCaWRkZXIoT2JqZWN0LmFzc2lnbih7fSwgc3BlYywgeyBjb2RlOiBhbGlhcywgZ3ZsaWQsIHNraXBQYnNBbGlhc2luZyB9KSk7XG4gICAgICAgICAgX2FsaWFzUmVnaXN0cnlbYWxpYXNdID0gYmlkZGVyQ29kZTtcbiAgICAgICAgfVxuICAgICAgICBhZGFwdGVyTWFuYWdlci5yZWdpc3RlckJpZEFkYXB0ZXIobmV3QWRhcHRlciwgYWxpYXMsIHtcbiAgICAgICAgICBzdXBwb3J0ZWRNZWRpYVR5cGVzXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2dFcnJvcihiaWRkZXJDb2RlICsgJyBiaWRkZXIgZG9lcyBub3QgY3VycmVudGx5IHN1cHBvcnQgYWxpYXNpbmcuJywgJ2FkYXB0ZXJNYW5hZ2VyLmFsaWFzQmlkQWRhcHRlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsb2dNZXNzYWdlKCdhbGlhcyBuYW1lIFwiJyArIGFsaWFzICsgJ1wiIGhhcyBiZWVuIGFscmVhZHkgc3BlY2lmaWVkLicpO1xuICB9XG59O1xuXG5hZGFwdGVyTWFuYWdlci5yZXNvbHZlQWxpYXMgPSBmdW5jdGlvbiAoYWxpYXMpIHtcbiAgbGV0IGNvZGUgPSBhbGlhcztcbiAgbGV0IHZpc2l0ZWQ7XG4gIHdoaWxlIChfYWxpYXNSZWdpc3RyeVtjb2RlXSAmJiAoIXZpc2l0ZWQgfHwgIXZpc2l0ZWQuaGFzKGNvZGUpKSkge1xuICAgIGNvZGUgPSBfYWxpYXNSZWdpc3RyeVtjb2RlXTtcbiAgICAodmlzaXRlZCA9IHZpc2l0ZWQgfHwgbmV3IFNldCgpKS5hZGQoY29kZSk7XG4gIH1cbiAgcmV0dXJuIGNvZGU7XG59XG5cbmFkYXB0ZXJNYW5hZ2VyLnJlZ2lzdGVyQW5hbHl0aWNzQWRhcHRlciA9IGZ1bmN0aW9uICh7YWRhcHRlciwgY29kZSwgZ3ZsaWR9KSB7XG4gIGlmIChhZGFwdGVyICYmIGNvZGUpIHtcbiAgICBpZiAodHlwZW9mIGFkYXB0ZXIuZW5hYmxlQW5hbHl0aWNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhZGFwdGVyLmNvZGUgPSBjb2RlO1xuICAgICAgX2FuYWx5dGljc1JlZ2lzdHJ5W2NvZGVdID0geyBhZGFwdGVyLCBndmxpZCB9O1xuICAgICAgR0RQUl9HVkxJRFMucmVnaXN0ZXIoTU9EVUxFX1RZUEVfQU5BTFlUSUNTLCBjb2RlLCBndmxpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ0Vycm9yKGBQcmViaWQgRXJyb3I6IEFuYWx5dGljcyBhZGFwdG9yIGVycm9yIGZvciBhbmFseXRpY3MgXCIke2NvZGV9XCJcbiAgICAgICAgYW5hbHl0aWNzIGFkYXB0ZXIgbXVzdCBpbXBsZW1lbnQgYW4gZW5hYmxlQW5hbHl0aWNzKCkgZnVuY3Rpb25gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbG9nRXJyb3IoJ1ByZWJpZCBFcnJvcjogYW5hbHl0aWNzQWRhcHRlciBvciBhbmFseXRpY3NDb2RlIG5vdCBzcGVjaWZpZWQnKTtcbiAgfVxufTtcblxuYWRhcHRlck1hbmFnZXIuZW5hYmxlQW5hbHl0aWNzID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICBpZiAoIWlzQXJyYXkoY29uZmlnKSkge1xuICAgIGNvbmZpZyA9IFtjb25maWddO1xuICB9XG5cbiAgX2VhY2goY29uZmlnLCBhZGFwdGVyQ29uZmlnID0+IHtcbiAgICBjb25zdCBlbnRyeSA9IF9hbmFseXRpY3NSZWdpc3RyeVthZGFwdGVyQ29uZmlnLnByb3ZpZGVyXTtcbiAgICBpZiAoZW50cnkgJiYgZW50cnkuYWRhcHRlcikge1xuICAgICAgaWYgKGRlcC5pc0FsbG93ZWQoQUNUSVZJVFlfUkVQT1JUX0FOQUxZVElDUywgYWN0aXZpdHlQYXJhbXMoTU9EVUxFX1RZUEVfQU5BTFlUSUNTLCBhZGFwdGVyQ29uZmlnLnByb3ZpZGVyLCB7W0FDVElWSVRZX1BBUkFNX0FOTF9DT05GSUddOiBhZGFwdGVyQ29uZmlnfSkpKSB7XG4gICAgICAgIGVudHJ5LmFkYXB0ZXIuZW5hYmxlQW5hbHl0aWNzKGFkYXB0ZXJDb25maWcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2dFcnJvcihgUHJlYmlkIEVycm9yOiBubyBhbmFseXRpY3MgYWRhcHRlciBmb3VuZCBpbiByZWdpc3RyeSBmb3IgJyR7YWRhcHRlckNvbmZpZy5wcm92aWRlcn0nLmApO1xuICAgIH1cbiAgfSk7XG59XG5cbmFkYXB0ZXJNYW5hZ2VyLmdldEJpZEFkYXB0ZXIgPSBmdW5jdGlvbihiaWRkZXIpIHtcbiAgcmV0dXJuIF9iaWRkZXJSZWdpc3RyeVtiaWRkZXJdO1xufTtcblxuYWRhcHRlck1hbmFnZXIuZ2V0QW5hbHl0aWNzQWRhcHRlciA9IGZ1bmN0aW9uKGNvZGUpIHtcbiAgcmV0dXJuIF9hbmFseXRpY3NSZWdpc3RyeVtjb2RlXTtcbn1cblxuZnVuY3Rpb24gZ2V0QmlkZGVyTWV0aG9kKGJpZGRlciwgbWV0aG9kKSB7XG4gIGNvbnN0IGFkYXB0ZXIgPSBfYmlkZGVyUmVnaXN0cnlbYmlkZGVyXTtcbiAgY29uc3Qgc3BlYyA9IGFkYXB0ZXI/LmdldFNwZWMgJiYgYWRhcHRlci5nZXRTcGVjKCk7XG4gIGlmIChzcGVjICYmIHNwZWNbbWV0aG9kXSAmJiB0eXBlb2Ygc3BlY1ttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIFtzcGVjLCBzcGVjW21ldGhvZF1dXG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlQmlkZGVyTWV0aG9kKGJpZGRlciwgbWV0aG9kLCBzcGVjLCBmbiwgLi4ucGFyYW1zKSB7XG4gIHRyeSB7XG4gICAgbG9nSW5mbyhgSW52b2tpbmcgJHtiaWRkZXJ9LiR7bWV0aG9kfWApO1xuICAgIGNvbmZpZy5ydW5XaXRoQmlkZGVyKGJpZGRlciwgZm4uYmluZChzcGVjLCAuLi5wYXJhbXMpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ1dhcm4oYEVycm9yIGNhbGxpbmcgJHttZXRob2R9IG9mICR7YmlkZGVyfWApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyeUNhbGxCaWRkZXJNZXRob2QoYmlkZGVyLCBtZXRob2QsIHBhcmFtKSB7XG4gIGlmIChwYXJhbT8uc3JjICE9PSBDT05TVEFOVFMuUzJTLlNSQykge1xuICAgIGNvbnN0IHRhcmdldCA9IGdldEJpZGRlck1ldGhvZChiaWRkZXIsIG1ldGhvZCk7XG4gICAgaWYgKHRhcmdldCAhPSBudWxsKSB7XG4gICAgICBpbnZva2VCaWRkZXJNZXRob2QoYmlkZGVyLCBtZXRob2QsIC4uLnRhcmdldCwgcGFyYW0pO1xuICAgIH1cbiAgfVxufVxuXG5hZGFwdGVyTWFuYWdlci5jYWxsVGltZWRPdXRCaWRkZXJzID0gZnVuY3Rpb24oYWRVbml0cywgdGltZWRPdXRCaWRkZXJzLCBjYlRpbWVvdXQpIHtcbiAgdGltZWRPdXRCaWRkZXJzID0gdGltZWRPdXRCaWRkZXJzLm1hcCgodGltZWRPdXRCaWRkZXIpID0+IHtcbiAgICAvLyBBZGRpbmcgdXNlciBjb25maWd1cmVkIHBhcmFtcyAmIHRpbWVvdXQgdG8gdGltZW91dCBldmVudCBkYXRhXG4gICAgdGltZWRPdXRCaWRkZXIucGFyYW1zID0gZ2V0VXNlckNvbmZpZ3VyZWRQYXJhbXMoYWRVbml0cywgdGltZWRPdXRCaWRkZXIuYWRVbml0Q29kZSwgdGltZWRPdXRCaWRkZXIuYmlkZGVyKTtcbiAgICB0aW1lZE91dEJpZGRlci50aW1lb3V0ID0gY2JUaW1lb3V0O1xuICAgIHJldHVybiB0aW1lZE91dEJpZGRlcjtcbiAgfSk7XG4gIHRpbWVkT3V0QmlkZGVycyA9IGdyb3VwQnkodGltZWRPdXRCaWRkZXJzLCAnYmlkZGVyJyk7XG5cbiAgT2JqZWN0LmtleXModGltZWRPdXRCaWRkZXJzKS5mb3JFYWNoKChiaWRkZXIpID0+IHtcbiAgICB0cnlDYWxsQmlkZGVyTWV0aG9kKGJpZGRlciwgJ29uVGltZW91dCcsIHRpbWVkT3V0QmlkZGVyc1tiaWRkZXJdKTtcbiAgfSk7XG59XG5cbmFkYXB0ZXJNYW5hZ2VyLmNhbGxCaWRXb25CaWRkZXIgPSBmdW5jdGlvbihiaWRkZXIsIGJpZCwgYWRVbml0cykge1xuICAvLyBBZGRpbmcgdXNlciBjb25maWd1cmVkIHBhcmFtcyB0byBiaWRXb24gZXZlbnQgZGF0YVxuICBiaWQucGFyYW1zID0gZ2V0VXNlckNvbmZpZ3VyZWRQYXJhbXMoYWRVbml0cywgYmlkLmFkVW5pdENvZGUsIGJpZC5iaWRkZXIpO1xuICBhZHVuaXRDb3VudGVyLmluY3JlbWVudEJpZGRlcldpbnNDb3VudGVyKGJpZC5hZFVuaXRDb2RlLCBiaWQuYmlkZGVyKTtcbiAgdHJ5Q2FsbEJpZGRlck1ldGhvZChiaWRkZXIsICdvbkJpZFdvbicsIGJpZCk7XG59O1xuXG5hZGFwdGVyTWFuYWdlci5jYWxsQmlkQmlsbGFibGVCaWRkZXIgPSBmdW5jdGlvbihiaWQpIHtcbiAgdHJ5Q2FsbEJpZGRlck1ldGhvZChiaWQuYmlkZGVyLCAnb25CaWRCaWxsYWJsZScsIGJpZCk7XG59O1xuXG5hZGFwdGVyTWFuYWdlci5jYWxsU2V0VGFyZ2V0aW5nQmlkZGVyID0gZnVuY3Rpb24oYmlkZGVyLCBiaWQpIHtcbiAgdHJ5Q2FsbEJpZGRlck1ldGhvZChiaWRkZXIsICdvblNldFRhcmdldGluZycsIGJpZCk7XG59O1xuXG5hZGFwdGVyTWFuYWdlci5jYWxsQmlkVmlld2FibGVCaWRkZXIgPSBmdW5jdGlvbihiaWRkZXIsIGJpZCkge1xuICB0cnlDYWxsQmlkZGVyTWV0aG9kKGJpZGRlciwgJ29uQmlkVmlld2FibGUnLCBiaWQpO1xufTtcblxuYWRhcHRlck1hbmFnZXIuY2FsbEJpZGRlckVycm9yID0gZnVuY3Rpb24oYmlkZGVyLCBlcnJvciwgYmlkZGVyUmVxdWVzdCkge1xuICBjb25zdCBwYXJhbSA9IHsgZXJyb3IsIGJpZGRlclJlcXVlc3QgfTtcbiAgdHJ5Q2FsbEJpZGRlck1ldGhvZChiaWRkZXIsICdvbkJpZGRlckVycm9yJywgcGFyYW0pO1xufTtcblxuZnVuY3Rpb24gcmVzb2x2ZUFsaWFzKGFsaWFzKSB7XG4gIGNvbnN0IHNlZW4gPSBuZXcgU2V0KCk7XG4gIHdoaWxlIChfYWxpYXNSZWdpc3RyeS5oYXNPd25Qcm9wZXJ0eShhbGlhcykgJiYgIXNlZW4uaGFzKGFsaWFzKSkge1xuICAgIHNlZW4uYWRkKGFsaWFzKTtcbiAgICBhbGlhcyA9IF9hbGlhc1JlZ2lzdHJ5W2FsaWFzXTtcbiAgfVxuICByZXR1cm4gYWxpYXM7XG59XG4vKipcbiAqIEFzayBldmVyeSBhZGFwdGVyIHRvIGRlbGV0ZSBQSUkuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ByZWJpZC9QcmViaWQuanMvaXNzdWVzLzkwODFcbiAqL1xuYWRhcHRlck1hbmFnZXIuY2FsbERhdGFEZWxldGlvblJlcXVlc3QgPSBob29rKCdzeW5jJywgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgY29uc3QgbWV0aG9kID0gJ29uRGF0YURlbGV0aW9uUmVxdWVzdCc7XG4gIE9iamVjdC5rZXlzKF9iaWRkZXJSZWdpc3RyeSlcbiAgICAuZmlsdGVyKChiaWRkZXIpID0+ICFfYWxpYXNSZWdpc3RyeS5oYXNPd25Qcm9wZXJ0eShiaWRkZXIpKVxuICAgIC5mb3JFYWNoKGJpZGRlciA9PiB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBnZXRCaWRkZXJNZXRob2QoYmlkZGVyLCBtZXRob2QpO1xuICAgICAgaWYgKHRhcmdldCAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGJpZGRlclJlcXVlc3RzID0gYXVjdGlvbk1hbmFnZXIuZ2V0Qmlkc1JlcXVlc3RlZCgpLmZpbHRlcigoYnIpID0+XG4gICAgICAgICAgcmVzb2x2ZUFsaWFzKGJyLmJpZGRlckNvZGUpID09PSBiaWRkZXJcbiAgICAgICAgKTtcbiAgICAgICAgaW52b2tlQmlkZGVyTWV0aG9kKGJpZGRlciwgbWV0aG9kLCAuLi50YXJnZXQsIGJpZGRlclJlcXVlc3RzLCAuLi5hcmdzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgT2JqZWN0LmVudHJpZXMoX2FuYWx5dGljc1JlZ2lzdHJ5KS5mb3JFYWNoKChbbmFtZSwgZW50cnldKSA9PiB7XG4gICAgY29uc3QgZm4gPSBlbnRyeT8uYWRhcHRlcj8uW21ldGhvZF07XG4gICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4uYXBwbHkoZW50cnkuYWRhcHRlciwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZ0Vycm9yKGBlcnJvciBjYWxsaW5nICR7bWV0aG9kfSBvZiAke25hbWV9YCwgZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBhZGFwdGVyTWFuYWdlcjtcbiIsImltcG9ydCB7Y2hlY2tDb29raWVTdXBwb3J0LCBoYXNEZXZpY2VBY2Nlc3MsIGxvZ0Vycm9yfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7YmlkZGVyU2V0dGluZ3N9IGZyb20gJy4vYmlkZGVyU2V0dGluZ3MuanMnO1xuaW1wb3J0IHtNT0RVTEVfVFlQRV9CSURERVIsIE1PRFVMRV9UWVBFX1BSRUJJRH0gZnJvbSAnLi9hY3Rpdml0aWVzL21vZHVsZXMuanMnO1xuaW1wb3J0IHtpc0FjdGl2aXR5QWxsb3dlZCwgcmVnaXN0ZXJBY3Rpdml0eUNvbnRyb2x9IGZyb20gJy4vYWN0aXZpdGllcy9ydWxlcy5qcyc7XG5pbXBvcnQge1xuICBBQ1RJVklUWV9QQVJBTV9BREFQVEVSX0NPREUsXG4gIEFDVElWSVRZX1BBUkFNX0NPTVBPTkVOVF9UWVBFLFxuICBBQ1RJVklUWV9QQVJBTV9TVE9SQUdFX1RZUEVcbn0gZnJvbSAnLi9hY3Rpdml0aWVzL3BhcmFtcy5qcyc7XG5cbmltcG9ydCB7QUNUSVZJVFlfQUNDRVNTX0RFVklDRX0gZnJvbSAnLi9hY3Rpdml0aWVzL2FjdGl2aXRpZXMuanMnO1xuaW1wb3J0IHtjb25maWd9IGZyb20gJy4vY29uZmlnLmpzJztcbmltcG9ydCBhZGFwdGVyTWFuYWdlciBmcm9tICcuL2FkYXB0ZXJNYW5hZ2VyLmpzJztcbmltcG9ydCB7YWN0aXZpdHlQYXJhbXN9IGZyb20gJy4vYWN0aXZpdGllcy9hY3Rpdml0eVBhcmFtcy5qcyc7XG5cbmV4cG9ydCBjb25zdCBTVE9SQUdFX1RZUEVfTE9DQUxTVE9SQUdFID0gJ2h0bWw1JztcbmV4cG9ydCBjb25zdCBTVE9SQUdFX1RZUEVfQ09PS0lFUyA9ICdjb29raWUnO1xuXG5leHBvcnQgbGV0IHN0b3JhZ2VDYWxsYmFja3MgPSBbXTtcblxuLypcbiAqICBTdG9yYWdlIG1hbmFnZXIgY29uc3RydWN0b3IuIENvbnN1bWVycyBzaG91bGQgcHJlZmVyIG9uZSBvZiBgZ2V0U3RvcmFnZU1hbmFnZXJgIG9yIGBnZXRDb3JlU3RvcmFnZU1hbmFnZXJgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbmV3U3RvcmFnZU1hbmFnZXIoe21vZHVsZU5hbWUsIG1vZHVsZVR5cGV9ID0ge30sIHtpc0FsbG93ZWQgPSBpc0FjdGl2aXR5QWxsb3dlZH0gPSB7fSkge1xuICBmdW5jdGlvbiBpc1ZhbGlkKGNiLCBzdG9yYWdlVHlwZSkge1xuICAgIGxldCBtb2QgPSBtb2R1bGVOYW1lO1xuICAgIGNvbnN0IGN1ckJpZGRlciA9IGNvbmZpZy5nZXRDdXJyZW50QmlkZGVyKCk7XG4gICAgaWYgKGN1ckJpZGRlciAmJiBtb2R1bGVUeXBlID09PSBNT0RVTEVfVFlQRV9CSURERVIgJiYgYWRhcHRlck1hbmFnZXIuYWxpYXNSZWdpc3RyeVtjdXJCaWRkZXJdID09PSBtb2R1bGVOYW1lKSB7XG4gICAgICBtb2QgPSBjdXJCaWRkZXI7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIHZhbGlkOiBpc0FsbG93ZWQoQUNUSVZJVFlfQUNDRVNTX0RFVklDRSwgYWN0aXZpdHlQYXJhbXMobW9kdWxlVHlwZSwgbW9kLCB7XG4gICAgICAgIFtBQ1RJVklUWV9QQVJBTV9TVE9SQUdFX1RZUEVdOiBzdG9yYWdlVHlwZVxuICAgICAgfSkpXG4gICAgfTtcbiAgICByZXR1cm4gY2IocmVzdWx0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKG9wZXJhdGlvbiwgc3RvcmFnZVR5cGUsIGRvbmUpIHtcbiAgICBpZiAoZG9uZSAmJiB0eXBlb2YgZG9uZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RvcmFnZUNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gaXNWYWxpZChvcGVyYXRpb24sIHN0b3JhZ2VUeXBlKTtcbiAgICAgICAgZG9uZShyZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpc1ZhbGlkKG9wZXJhdGlvbiwgc3RvcmFnZVR5cGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2V4cGlyZXM9JyddXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc2FtZVNpdGU9Jy8nXVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2RvbWFpbl0gZG9tYWluIChlLmcuLCAnZXhhbXBsZS5jb20nIG9yICdzdWJkb21haW4uZXhhbXBsZS5jb20nKS5cbiAgICogSWYgbm90IHNwZWNpZmllZCwgZGVmYXVsdHMgdG8gdGhlIGhvc3QgcG9ydGlvbiBvZiB0aGUgY3VycmVudCBkb2N1bWVudCBsb2NhdGlvbi5cbiAgICogSWYgYSBkb21haW4gaXMgc3BlY2lmaWVkLCBzdWJkb21haW5zIGFyZSBhbHdheXMgaW5jbHVkZWQuXG4gICAqIERvbWFpbiBtdXN0IG1hdGNoIHRoZSBkb21haW4gb2YgdGhlIEphdmFTY3JpcHQgb3JpZ2luLiBTZXR0aW5nIGNvb2tpZXMgdG8gZm9yZWlnbiBkb21haW5zIHdpbGwgYmUgc2lsZW50bHkgaWdub3JlZC5cbiAgICovXG4gIGNvbnN0IHNldENvb2tpZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBleHBpcmVzLCBzYW1lU2l0ZSwgZG9tYWluLCBkb25lKSB7XG4gICAgbGV0IGNiID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQudmFsaWQpIHtcbiAgICAgICAgY29uc3QgZG9tYWluUG9ydGlvbiA9IChkb21haW4gJiYgZG9tYWluICE9PSAnJykgPyBgIDtkb21haW49JHtlbmNvZGVVUklDb21wb25lbnQoZG9tYWluKX1gIDogJyc7XG4gICAgICAgIGNvbnN0IGV4cGlyZXNQb3J0aW9uID0gKGV4cGlyZXMgJiYgZXhwaXJlcyAhPT0gJycpID8gYCA7ZXhwaXJlcz0ke2V4cGlyZXN9YCA6ICcnO1xuICAgICAgICBjb25zdCBpc05vbmUgPSAoc2FtZVNpdGUgIT0gbnVsbCAmJiBzYW1lU2l0ZS50b0xvd2VyQ2FzZSgpID09ICdub25lJylcbiAgICAgICAgY29uc3Qgc2VjdXJlID0gKGlzTm9uZSkgPyAnOyBTZWN1cmUnIDogJyc7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke2tleX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfSR7ZXhwaXJlc1BvcnRpb259OyBwYXRoPS8ke2RvbWFpblBvcnRpb259JHtzYW1lU2l0ZSA/IGA7IFNhbWVTaXRlPSR7c2FtZVNpdGV9YCA6ICcnfSR7c2VjdXJlfWA7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzY2hlZHVsZShjYiwgU1RPUkFHRV9UWVBFX0NPT0tJRVMsIGRvbmUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJucyB7KHN0cmluZ3xudWxsKX1cbiAgICovXG4gIGNvbnN0IGdldENvb2tpZSA9IGZ1bmN0aW9uKG5hbWUsIGRvbmUpIHtcbiAgICBsZXQgY2IgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC52YWxpZCkge1xuICAgICAgICBsZXQgbSA9IHdpbmRvdy5kb2N1bWVudC5jb29raWUubWF0Y2goJyhefDspXFxcXHMqJyArIG5hbWUgKyAnXFxcXHMqPVxcXFxzKihbXjtdKilcXFxccyooO3wkKScpO1xuICAgICAgICByZXR1cm4gbSA/IGRlY29kZVVSSUNvbXBvbmVudChtWzJdKSA6IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHNjaGVkdWxlKGNiLCBTVE9SQUdFX1RZUEVfQ09PS0lFUywgZG9uZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgY29uc3QgbG9jYWxTdG9yYWdlSXNFbmFibGVkID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgICBsZXQgY2IgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC52YWxpZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcmViaWQuY29va2llVGVzdCcsICcxJyk7XG4gICAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcmViaWQuY29va2llVGVzdCcpID09PSAnMSc7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdwcmViaWQuY29va2llVGVzdCcpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzY2hlZHVsZShjYiwgU1RPUkFHRV9UWVBFX0xPQ0FMU1RPUkFHRSwgZG9uZSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBjb25zdCBjb29raWVzQXJlRW5hYmxlZCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gICAgbGV0IGNiID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQudmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrQ29va2llU3VwcG9ydCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZWR1bGUoY2IsIFNUT1JBR0VfVFlQRV9DT09LSUVTLCBkb25lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgY29uc3Qgc2V0RGF0YUluTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGRvbmUpIHtcbiAgICBsZXQgY2IgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC52YWxpZCAmJiBoYXNMb2NhbFN0b3JhZ2UoKSkge1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzY2hlZHVsZShjYiwgU1RPUkFHRV9UWVBFX0xPQ0FMU1RPUkFHRSwgZG9uZSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcmV0dXJucyB7KHN0cmluZ3xudWxsKX1cbiAgICovXG4gIGNvbnN0IGdldERhdGFGcm9tTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24gKGtleSwgZG9uZSkge1xuICAgIGxldCBjYiA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnZhbGlkICYmIGhhc0xvY2FsU3RvcmFnZSgpKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZWR1bGUoY2IsIFNUT1JBR0VfVFlQRV9MT0NBTFNUT1JBR0UsIGRvbmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICovXG4gIGNvbnN0IHJlbW92ZURhdGFGcm9tTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24gKGtleSwgZG9uZSkge1xuICAgIGxldCBjYiA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnZhbGlkICYmIGhhc0xvY2FsU3RvcmFnZSgpKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2NoZWR1bGUoY2IsIFNUT1JBR0VfVFlQRV9MT0NBTFNUT1JBR0UsIGRvbmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgY29uc3QgaGFzTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgICBsZXQgY2IgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC52YWxpZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAhIXdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBsb2dFcnJvcignTG9jYWwgc3RvcmFnZSBhcGkgZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZWR1bGUoY2IsIFNUT1JBR0VfVFlQRV9MT0NBTFNUT1JBR0UsIGRvbmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIGNvb2tpZSB2YWx1ZXMgZnJvbSB0aGUgamFyIHdob3NlIG5hbWVzIGNvbnRhaW4gdGhlIGBrZXlMaWtlYFxuICAgKiBOZWVkcyB0byBleGlzdCBpbiBgdXRpbHMuanNgIGFzIGl0IGZvbGxvd3MgdGhlIFN0b3JhZ2VIYW5kbGVyIGludGVyZmFjZSBkZWZpbmVkIGluIGxpdmUtY29ubmVjdC1qcy4gSWYgdGhhdCBtb2R1bGUgd2VyZSB0byBiZSByZW1vdmVkLCB0aGlzIGZ1bmN0aW9uIGNhbiBnbyBhcyB3ZWxsLlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5TGlrZVxuICAgKiBAcmV0dXJuIHtbXX1cbiAgICovXG4gIGNvbnN0IGZpbmRTaW1pbGFyQ29va2llcyA9IGZ1bmN0aW9uKGtleUxpa2UsIGRvbmUpIHtcbiAgICBsZXQgY2IgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC52YWxpZCkge1xuICAgICAgICBjb25zdCBhbGwgPSBbXTtcbiAgICAgICAgaWYgKGhhc0RldmljZUFjY2VzcygpKSB7XG4gICAgICAgICAgY29uc3QgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuICAgICAgICAgIHdoaWxlIChjb29raWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgY29va2llID0gY29va2llcy5wb3AoKTtcbiAgICAgICAgICAgIGxldCBzZXBhcmF0b3JJbmRleCA9IGNvb2tpZS5pbmRleE9mKCc9Jyk7XG4gICAgICAgICAgICBzZXBhcmF0b3JJbmRleCA9IHNlcGFyYXRvckluZGV4IDwgMCA/IGNvb2tpZS5sZW5ndGggOiBzZXBhcmF0b3JJbmRleDtcbiAgICAgICAgICAgIGNvbnN0IGNvb2tpZU5hbWUgPSBkZWNvZGVVUklDb21wb25lbnQoY29va2llLnNsaWNlKDAsIHNlcGFyYXRvckluZGV4KS5yZXBsYWNlKC9eXFxzKy8sICcnKSk7XG4gICAgICAgICAgICBpZiAoY29va2llTmFtZS5pbmRleE9mKGtleUxpa2UpID49IDApIHtcbiAgICAgICAgICAgICAgYWxsLnB1c2goZGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zbGljZShzZXBhcmF0b3JJbmRleCArIDEpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjaGVkdWxlKGNiLCBTVE9SQUdFX1RZUEVfQ09PS0lFUywgZG9uZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldENvb2tpZSxcbiAgICBnZXRDb29raWUsXG4gICAgbG9jYWxTdG9yYWdlSXNFbmFibGVkLFxuICAgIGNvb2tpZXNBcmVFbmFibGVkLFxuICAgIHNldERhdGFJbkxvY2FsU3RvcmFnZSxcbiAgICBnZXREYXRhRnJvbUxvY2FsU3RvcmFnZSxcbiAgICByZW1vdmVEYXRhRnJvbUxvY2FsU3RvcmFnZSxcbiAgICBoYXNMb2NhbFN0b3JhZ2UsXG4gICAgZmluZFNpbWlsYXJDb29raWVzXG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgYSBzdG9yYWdlIG1hbmFnZXIgZm9yIGEgcGFydGljdWxhciBtb2R1bGUuXG4gKlxuICogRWl0aGVyIGJpZGRlckNvZGUgb3IgYSBjb21iaW5hdGlvbiBvZiBtb2R1bGVUeXBlICsgbW9kdWxlTmFtZSBtdXN0IGJlIHByb3ZpZGVkLiBUaGUgZm9ybWVyIGlzIGEgc2hvcnRoYW5kXG4gKiAgZm9yIGB7bW9kdWxlVHlwZTogJ2JpZGRlcicsIG1vZHVsZU5hbWU6IGJpZGRlckNvZGV9YC5cbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdG9yYWdlTWFuYWdlcih7bW9kdWxlVHlwZSwgbW9kdWxlTmFtZSwgYmlkZGVyQ29kZX0gPSB7fSkge1xuICBmdW5jdGlvbiBlcnIoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGludm9jYXRpb24gZm9yIGdldFN0b3JhZ2VNYW5hZ2VyOiBtdXN0IHNldCBlaXRoZXIgYmlkZGVyQ29kZSwgb3IgbW9kdWxlVHlwZSArIG1vZHVsZU5hbWVgKVxuICB9XG4gIGlmIChiaWRkZXJDb2RlKSB7XG4gICAgaWYgKChtb2R1bGVUeXBlICYmIG1vZHVsZVR5cGUgIT09IE1PRFVMRV9UWVBFX0JJRERFUikgfHwgbW9kdWxlTmFtZSkgZXJyKClcbiAgICBtb2R1bGVUeXBlID0gTU9EVUxFX1RZUEVfQklEREVSO1xuICAgIG1vZHVsZU5hbWUgPSBiaWRkZXJDb2RlO1xuICB9IGVsc2UgaWYgKCFtb2R1bGVOYW1lIHx8ICFtb2R1bGVUeXBlKSB7XG4gICAgZXJyKClcbiAgfVxuICByZXR1cm4gbmV3U3RvcmFnZU1hbmFnZXIoe21vZHVsZVR5cGUsIG1vZHVsZU5hbWV9KTtcbn1cblxuLyoqXG4gKiBHZXQgYSBzdG9yYWdlIG1hbmFnZXIgZm9yIFwiY29yZVwiICh2ZW5kb3JsZXNzLCBvciBmaXJzdC1wYXJ0eSkgbW9kdWxlcy4gU2hvcnRoYW5kIGZvciBgZ2V0U3RvcmFnZU1hbmFnZXIoe21vZHVsZU5hbWUsIG1vZHVsZVR5cGU6ICdjb3JlJ30pYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlTmFtZSBNb2R1bGUgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29yZVN0b3JhZ2VNYW5hZ2VyKG1vZHVsZU5hbWUpIHtcbiAgcmV0dXJuIG5ld1N0b3JhZ2VNYW5hZ2VyKHttb2R1bGVOYW1lOiBtb2R1bGVOYW1lLCBtb2R1bGVUeXBlOiBNT0RVTEVfVFlQRV9QUkVCSUR9KTtcbn1cblxuLyoqXG4gKiBCbG9jayBhbGwgYWNjZXNzIHRvIHN0b3JhZ2Ugd2hlbiBkZXZpY2VBY2Nlc3MgPSBmYWxzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV2aWNlQWNjZXNzUnVsZSgpIHtcbiAgaWYgKCFoYXNEZXZpY2VBY2Nlc3MoKSkge1xuICAgIHJldHVybiB7YWxsb3c6IGZhbHNlfVxuICB9XG59XG5yZWdpc3RlckFjdGl2aXR5Q29udHJvbChBQ1RJVklUWV9BQ0NFU1NfREVWSUNFLCAnZGV2aWNlQWNjZXNzIGNvbmZpZycsIGRldmljZUFjY2Vzc1J1bGUpO1xuXG4vKipcbiAqIEJ5IGRlZmF1bHQsIGRlbnkgYmlkZGVycyBhY2Nlc3NEZXZpY2UgdW5sZXNzIHRoZXkgZW5hYmxlIGl0IHRocm91Z2ggYmlkZGVyU2V0dGluZ3NcbiAqXG4gKiAvLyBUT0RPOiBmb3IgYmFja3dhcmRzIGNvbXBhdCwgdGhlIGNoZWNrIGlzIGRvbmUgb24gdGhlIGFkYXB0ZXIgLSByYXRoZXIgdGhhbiBiaWRkZXIncyBjb2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RvcmFnZUFsbG93ZWRSdWxlKHBhcmFtcywgYnMgPSBiaWRkZXJTZXR0aW5ncykge1xuICBpZiAocGFyYW1zW0FDVElWSVRZX1BBUkFNX0NPTVBPTkVOVF9UWVBFXSAhPT0gTU9EVUxFX1RZUEVfQklEREVSKSByZXR1cm47XG4gIGxldCBhbGxvdyA9IGJzLmdldChwYXJhbXNbQUNUSVZJVFlfUEFSQU1fQURBUFRFUl9DT0RFXSwgJ3N0b3JhZ2VBbGxvd2VkJyk7XG4gIGlmICghYWxsb3cgfHwgYWxsb3cgPT09IHRydWUpIHtcbiAgICBhbGxvdyA9ICEhYWxsb3dcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzdG9yYWdlVHlwZSA9IHBhcmFtc1tBQ1RJVklUWV9QQVJBTV9TVE9SQUdFX1RZUEVdO1xuICAgIGFsbG93ID0gQXJyYXkuaXNBcnJheShhbGxvdykgPyBhbGxvdy5zb21lKChlKSA9PiBlID09PSBzdG9yYWdlVHlwZSkgOiBhbGxvdyA9PT0gc3RvcmFnZVR5cGU7XG4gIH1cbiAgaWYgKCFhbGxvdykge1xuICAgIHJldHVybiB7YWxsb3d9O1xuICB9XG59XG5cbnJlZ2lzdGVyQWN0aXZpdHlDb250cm9sKEFDVElWSVRZX0FDQ0VTU19ERVZJQ0UsICdiaWRkZXJTZXR0aW5ncy4qLnN0b3JhZ2VBbGxvd2VkJywgc3RvcmFnZUFsbG93ZWRSdWxlKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0RGF0YSgpIHtcbiAgc3RvcmFnZUNhbGxiYWNrcyA9IFtdO1xufVxuIiwiaW1wb3J0IHtcbiAgZGVlcENsb25lLCBpc1BsYWluT2JqZWN0LCBsb2dFcnJvciwgc2h1ZmZsZSwgbG9nTWVzc2FnZSwgdHJpZ2dlclBpeGVsLCBpbnNlcnRVc2VyU3luY0lmcmFtZSwgaXNBcnJheSxcbiAgbG9nV2FybiwgaXNTdHIsIGlzU2FmYXJpQnJvd3NlclxufSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnLmpzJztcbmltcG9ydCB7aW5jbHVkZXN9IGZyb20gJy4vcG9seWZpbGwuanMnO1xuaW1wb3J0IHsgZ2V0Q29yZVN0b3JhZ2VNYW5hZ2VyIH0gZnJvbSAnLi9zdG9yYWdlTWFuYWdlci5qcyc7XG5pbXBvcnQge2lzQWN0aXZpdHlBbGxvd2VkLCByZWdpc3RlckFjdGl2aXR5Q29udHJvbH0gZnJvbSAnLi9hY3Rpdml0aWVzL3J1bGVzLmpzJztcbmltcG9ydCB7QUNUSVZJVFlfU1lOQ19VU0VSfSBmcm9tICcuL2FjdGl2aXRpZXMvYWN0aXZpdGllcy5qcyc7XG5pbXBvcnQge1xuICBBQ1RJVklUWV9QQVJBTV9DT01QT05FTlRfTkFNRSxcbiAgQUNUSVZJVFlfUEFSQU1fQ09NUE9ORU5UX1RZUEUsXG4gIEFDVElWSVRZX1BBUkFNX1NZTkNfVFlQRSwgQUNUSVZJVFlfUEFSQU1fU1lOQ19VUkxcbn0gZnJvbSAnLi9hY3Rpdml0aWVzL3BhcmFtcy5qcyc7XG5pbXBvcnQge01PRFVMRV9UWVBFX0JJRERFUn0gZnJvbSAnLi9hY3Rpdml0aWVzL21vZHVsZXMuanMnO1xuaW1wb3J0IHthY3Rpdml0eVBhcmFtc30gZnJvbSAnLi9hY3Rpdml0aWVzL2FjdGl2aXR5UGFyYW1zLmpzJztcblxuZXhwb3J0IGNvbnN0IFVTRVJTWU5DX0RFRkFVTFRfQ09ORklHID0ge1xuICBzeW5jRW5hYmxlZDogdHJ1ZSxcbiAgZmlsdGVyU2V0dGluZ3M6IHtcbiAgICBpbWFnZToge1xuICAgICAgYmlkZGVyczogJyonLFxuICAgICAgZmlsdGVyOiAnaW5jbHVkZSdcbiAgICB9XG4gIH0sXG4gIHN5bmNzUGVyQmlkZGVyOiA1LFxuICBzeW5jRGVsYXk6IDMwMDAsXG4gIGF1Y3Rpb25EZWxheTogMFxufTtcblxuLy8gU2V0IHVzZXJTeW5jIGRlZmF1bHQgdmFsdWVzXG5jb25maWcuc2V0RGVmYXVsdHMoe1xuICAndXNlclN5bmMnOiBkZWVwQ2xvbmUoVVNFUlNZTkNfREVGQVVMVF9DT05GSUcpXG59KTtcblxuY29uc3Qgc3RvcmFnZSA9IGdldENvcmVTdG9yYWdlTWFuYWdlcigndXNlcnN5bmMnKTtcblxuLyoqXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgVXNlclN5bmNQb29sLlxuICpcbiAqIEBwYXJhbSB7fSBkZXBzIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBhbmQgZGVwZW5kZW5jaWVzIHdoaWNoIHRoZVxuICogICBVc2VyU3luYyBvYmplY3QgbmVlZHMgaW4gb3JkZXIgdG8gYmVoYXZlIHByb3Blcmx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbmV3VXNlclN5bmMoZGVwcykge1xuICBsZXQgcHVibGljQXBpID0ge307XG4gIC8vIEEgcXVldWUgb2YgdXNlciBzeW5jcyBmb3IgZWFjaCBhZGFwdGVyXG4gIC8vIExldCBnZXREZWZhdWx0UXVldWUoKSBzZXQgdGhlIGRlZmF1bHRzXG4gIGxldCBxdWV1ZSA9IGdldERlZmF1bHRRdWV1ZSgpO1xuXG4gIC8vIFdoZXRoZXIgb3Igbm90IHVzZXIgc3luY3MgaGF2ZSBiZWVuIHRyaWdnZXIgb24gdGhpcyBwYWdlIGxvYWQgZm9yIGEgc3BlY2lmaWMgYmlkZGVyXG4gIGxldCBoYXNGaXJlZEJpZGRlciA9IG5ldyBTZXQoKTtcbiAgLy8gSG93IG1hbnkgYmlkcyBmb3IgZWFjaCBhZGFwdGVyXG4gIGxldCBudW1BZGFwdGVyQmlkcyA9IHt9O1xuXG4gIC8vIGZvciBub3cgLSBkZWZhdWx0IGJvdGggdG8gZmFsc2UgaW4gY2FzZSBmaWx0ZXJTZXR0aW5ncyBjb25maWcgaXMgYWJzZW50L21pc2NvbmZpZ3VyZWRcbiAgbGV0IHBlcm1pdHRlZFBpeGVscyA9IHtcbiAgICBpbWFnZTogdHJ1ZSxcbiAgICBpZnJhbWU6IGZhbHNlXG4gIH07XG5cbiAgLy8gVXNlIHdoYXQgaXMgaW4gY29uZmlnIGJ5IGRlZmF1bHRcbiAgbGV0IHVzQ29uZmlnID0gZGVwcy5jb25maWc7XG4gIC8vIFVwZGF0ZSBpZiBpdCdzIChyZSlzZXRcbiAgY29uZmlnLmdldENvbmZpZygndXNlclN5bmMnLCAoY29uZikgPT4ge1xuICAgIC8vIEFkZGVkIHRoaXMgbG9naWMgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmViaWQvUHJlYmlkLmpzL2lzc3Vlcy80ODY0XG4gICAgLy8gaWYgdXNlclN5bmMuZmlsdGVyU2V0dGluZ3MgZG9lcyBub3QgY29udGFpbiBpbWFnZS9hbGwgY29uZmlncywgbWVyZ2UgaW4gZGVmYXVsdCBpbWFnZSBjb25maWcgdG8gZW5zdXJlIGltYWdlIHBpeGVscyBhcmUgZmlyZWRcbiAgICBpZiAoY29uZi51c2VyU3luYykge1xuICAgICAgbGV0IGZzID0gY29uZi51c2VyU3luYy5maWx0ZXJTZXR0aW5ncztcbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KGZzKSkge1xuICAgICAgICBpZiAoIWZzLmltYWdlICYmICFmcy5hbGwpIHtcbiAgICAgICAgICBjb25mLnVzZXJTeW5jLmZpbHRlclNldHRpbmdzLmltYWdlID0ge1xuICAgICAgICAgICAgYmlkZGVyczogJyonLFxuICAgICAgICAgICAgZmlsdGVyOiAnaW5jbHVkZSdcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXNDb25maWcgPSBPYmplY3QuYXNzaWduKHVzQ29uZmlnLCBjb25mLnVzZXJTeW5jKTtcbiAgfSk7XG5cbiAgZGVwcy5yZWdSdWxlKEFDVElWSVRZX1NZTkNfVVNFUiwgJ3VzZXJTeW5jIGNvbmZpZycsIChwYXJhbXMpID0+IHtcbiAgICBpZiAoIXVzQ29uZmlnLnN5bmNFbmFibGVkKSB7XG4gICAgICByZXR1cm4ge2FsbG93OiBmYWxzZSwgcmVhc29uOiAnc3luY3MgYXJlIGRpc2FibGVkJ31cbiAgICB9XG4gICAgaWYgKHBhcmFtc1tBQ1RJVklUWV9QQVJBTV9DT01QT05FTlRfVFlQRV0gPT09IE1PRFVMRV9UWVBFX0JJRERFUikge1xuICAgICAgY29uc3Qgc3luY1R5cGUgPSBwYXJhbXNbQUNUSVZJVFlfUEFSQU1fU1lOQ19UWVBFXTtcbiAgICAgIGNvbnN0IGJpZGRlciA9IHBhcmFtc1tBQ1RJVklUWV9QQVJBTV9DT01QT05FTlRfTkFNRV07XG4gICAgICBpZiAoIXB1YmxpY0FwaS5jYW5CaWRkZXJSZWdpc3RlclN5bmMoc3luY1R5cGUsIGJpZGRlcikpIHtcbiAgICAgICAgcmV0dXJuIHthbGxvdzogZmFsc2UsIHJlYXNvbjogYCR7c3luY1R5cGV9IHN5bmNzIGFyZSBub3QgZW5hYmxlZCBmb3IgJHtiaWRkZXJ9YH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb24gZ2V0RGVmYXVsdFF1ZXVlXG4gICAqIEBzdW1tYXJ5IFJldHVybnMgdGhlIGRlZmF1bHQgZW1wdHkgcXVldWVcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybiB7b2JqZWN0fSBBIHF1ZXVlIHdpdGggbm8gc3luY3NcbiAgICovXG4gIGZ1bmN0aW9uIGdldERlZmF1bHRRdWV1ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW1hZ2U6IFtdLFxuICAgICAgaWZyYW1lOiBbXVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQGZ1bmN0aW9uIGZpcmVTeW5jc1xuICAgKiBAc3VtbWFyeSBUcmlnZ2VyIGFsbCB1c2VyIHN5bmNzIGluIHRoZSBxdWV1ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZmlyZVN5bmNzKCkge1xuICAgIGlmICghdXNDb25maWcuc3luY0VuYWJsZWQgfHwgIWRlcHMuYnJvd3NlclN1cHBvcnRzQ29va2llcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBJZnJhbWUgc3luY3NcbiAgICAgIGxvYWRJZnJhbWVzKCk7XG4gICAgICAvLyBJbWFnZSBwaXhlbHNcbiAgICAgIGZpcmVJbWFnZVBpeGVscygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBsb2dFcnJvcignRXJyb3IgZmlyaW5nIHVzZXIgc3luY3MnLCBlKTtcbiAgICB9XG4gICAgLy8gUmVzZXQgdGhlIHVzZXIgc3luYyBxdWV1ZVxuICAgIHF1ZXVlID0gZ2V0RGVmYXVsdFF1ZXVlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JFYWNoRmlyZShxdWV1ZSwgZm4pIHtcbiAgICAvLyBSYW5kb21pemUgdGhlIG9yZGVyIG9mIHRoZSBwaXhlbHMgYmVmb3JlIGZpcmluZ1xuICAgIC8vIFRoaXMgaXMgdG8gYXZvaWQgZ2l2aW5nIGFueSBiaWRkZXIgd2hvIGhhcyByZWdpc3RlcmVkIG11bHRpcGxlIHN5bmNzXG4gICAgLy8gYW55IHByZWZlcmVudGlhbCB0cmVhdG1lbnQgYW5kIGJhbGFuY2luZyB0aGVtIG91dFxuICAgIHNodWZmbGUocXVldWUpLmZvckVhY2goZm4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvbiBmaXJlSW1hZ2VQaXhlbHNcbiAgICogQHN1bW1hcnkgTG9vcHMgdGhyb3VnaCB1c2VyIHN5bmMgcGl4ZWxzIGFuZCBmaXJlcyBlYWNoIG9uZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZmlyZUltYWdlUGl4ZWxzKCkge1xuICAgIGlmICghcGVybWl0dGVkUGl4ZWxzLmltYWdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvckVhY2hGaXJlKHF1ZXVlLmltYWdlLCAoc3luYykgPT4ge1xuICAgICAgbGV0IFtiaWRkZXJOYW1lLCB0cmFja2luZ1BpeGVsVXJsXSA9IHN5bmM7XG4gICAgICBsb2dNZXNzYWdlKGBJbnZva2luZyBpbWFnZSBwaXhlbCB1c2VyIHN5bmMgZm9yIGJpZGRlcjogJHtiaWRkZXJOYW1lfWApO1xuICAgICAgLy8gQ3JlYXRlIGltYWdlIG9iamVjdCBhbmQgYWRkIHRoZSBzcmMgdXJsXG4gICAgICB0cmlnZ2VyUGl4ZWwodHJhY2tpbmdQaXhlbFVybCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQGZ1bmN0aW9uIGxvYWRJZnJhbWVzXG4gICAqIEBzdW1tYXJ5IExvb3BzIHRocm91Z2ggaWZyYW1lIHN5bmNzIGFuZCBsb2FkcyBhbiBpZnJhbWUgZWxlbWVudCBpbnRvIHRoZSBwYWdlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBsb2FkSWZyYW1lcygpIHtcbiAgICBpZiAoIShwZXJtaXR0ZWRQaXhlbHMuaWZyYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvckVhY2hGaXJlKHF1ZXVlLmlmcmFtZSwgKHN5bmMpID0+IHtcbiAgICAgIGxldCBbYmlkZGVyTmFtZSwgaWZyYW1lVXJsXSA9IHN5bmM7XG4gICAgICBsb2dNZXNzYWdlKGBJbnZva2luZyBpZnJhbWUgdXNlciBzeW5jIGZvciBiaWRkZXI6ICR7YmlkZGVyTmFtZX1gKTtcbiAgICAgIC8vIEluc2VydCBpZnJhbWUgaW50byBET01cbiAgICAgIGluc2VydFVzZXJTeW5jSWZyYW1lKGlmcmFtZVVybCk7XG4gICAgICAvLyBmb3IgYSBiaWRkZXIsIGlmIGlmcmFtZSBzeW5jIGlzIHByZXNlbnQgdGhlbiByZW1vdmUgaW1hZ2UgcGl4ZWxcbiAgICAgIHJlbW92ZUltYWdlUGl4ZWxzRm9yQmlkZGVyKHF1ZXVlLCBiaWRkZXJOYW1lKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUltYWdlUGl4ZWxzRm9yQmlkZGVyKHF1ZXVlLCBpZnJhbWVTeW5jQmlkZGVyTmFtZSkge1xuICAgIHF1ZXVlLmltYWdlID0gcXVldWUuaW1hZ2UuZmlsdGVyKGltYWdlU3luYyA9PiB7XG4gICAgICBsZXQgaW1hZ2VTeW5jQmlkZGVyTmFtZSA9IGltYWdlU3luY1swXTtcbiAgICAgIHJldHVybiBpbWFnZVN5bmNCaWRkZXJOYW1lICE9PSBpZnJhbWVTeW5jQmlkZGVyTmFtZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvbiBpbmNyZW1lbnRBZGFwdGVyQmlkc1xuICAgKiBAc3VtbWFyeSBJbmNyZW1lbnQgdGhlIGNvdW50IG9mIHVzZXIgc3luY3MgcXVldWUgZm9yIHRoZSBhZGFwdGVyXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbXMge29iamVjdH0gbnVtQWRhcHRlckJpZHMgVGhlIG9iamVjdCBjb250YWluIGNvdW50cyBmb3IgYWxsIGFkYXB0ZXJzXG4gICAqIEBwYXJhbXMge3N0cmluZ30gYmlkZGVyIFRoZSBuYW1lIG9mIHRoZSBiaWRkZXIgYWRkaW5nIGEgc3luY1xuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgdXBkYXRlZCB2ZXJzaW9uIG9mIG51bUFkYXB0ZXJCaWRzXG4gICAqL1xuICBmdW5jdGlvbiBpbmNyZW1lbnRBZGFwdGVyQmlkcyhudW1BZGFwdGVyQmlkcywgYmlkZGVyKSB7XG4gICAgaWYgKCFudW1BZGFwdGVyQmlkc1tiaWRkZXJdKSB7XG4gICAgICBudW1BZGFwdGVyQmlkc1tiaWRkZXJdID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgbnVtQWRhcHRlckJpZHNbYmlkZGVyXSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gbnVtQWRhcHRlckJpZHM7XG4gIH1cblxuICAvKipcbiAgICogQGZ1bmN0aW9uIHJlZ2lzdGVyU3luY1xuICAgKiBAc3VtbWFyeSBBZGQgc3luYyBmb3IgdGhpcyBiaWRkZXIgdG8gYSBxdWV1ZSB0byBiZSBmaXJlZCBsYXRlclxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbXMge3N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiB0aGUgc3luYyBpbmNsdWRpbmcgaW1hZ2UsIGlmcmFtZVxuICAgKiBAcGFyYW1zIHtzdHJpbmd9IGJpZGRlciBUaGUgbmFtZSBvZiB0aGUgYWRhcHRlci4gZS5nLiBcInJ1Ymljb25cIlxuICAgKiBAcGFyYW1zIHtzdHJpbmd9IHVybCBFaXRoZXIgdGhlIHBpeGVsIHVybCBvciBpZnJhbWUgdXJsIGRlcGVuZGluZyBvbiB0aGUgdHlwZVxuXG4gICAqIEBleGFtcGxlIDxjYXB0aW9uPlVzaW5nIEltYWdlIFN5bmM8L2NhcHRpb24+XG4gICAqIC8vIHJlZ2lzdGVyU3luYyh0eXBlLCBhZGFwdGVyLCBwaXhlbFVybClcbiAgICogdXNlclN5bmMucmVnaXN0ZXJTeW5jKCdpbWFnZScsICdydWJpY29uJywgJ2h0dHA6Ly9leGFtcGxlLmNvbS9waXhlbCcpXG4gICAqL1xuICBwdWJsaWNBcGkucmVnaXN0ZXJTeW5jID0gKHR5cGUsIGJpZGRlciwgdXJsKSA9PiB7XG4gICAgaWYgKGhhc0ZpcmVkQmlkZGVyLmhhcyhiaWRkZXIpKSB7XG4gICAgICByZXR1cm4gbG9nTWVzc2FnZShgYWxyZWFkeSBmaXJlZCBzeW5jcyBmb3IgXCIke2JpZGRlcn1cIiwgaWdub3JpbmcgcmVnaXN0ZXJTeW5jIGNhbGxgKTtcbiAgICB9XG4gICAgaWYgKCF1c0NvbmZpZy5zeW5jRW5hYmxlZCB8fCAhaXNBcnJheShxdWV1ZVt0eXBlXSkpIHtcbiAgICAgIHJldHVybiBsb2dXYXJuKGBVc2VyIHN5bmMgdHlwZSBcIiR7dHlwZX1cIiBub3Qgc3VwcG9ydGVkYCk7XG4gICAgfVxuICAgIGlmICghYmlkZGVyKSB7XG4gICAgICByZXR1cm4gbG9nV2FybihgQmlkZGVyIGlzIHJlcXVpcmVkIGZvciByZWdpc3RlcmluZyBzeW5jYCk7XG4gICAgfVxuICAgIGlmICh1c0NvbmZpZy5zeW5jc1BlckJpZGRlciAhPT0gMCAmJiBOdW1iZXIobnVtQWRhcHRlckJpZHNbYmlkZGVyXSkgPj0gdXNDb25maWcuc3luY3NQZXJCaWRkZXIpIHtcbiAgICAgIHJldHVybiBsb2dXYXJuKGBOdW1iZXIgb2YgdXNlciBzeW5jcyBleGNlZWRlZCBmb3IgXCIke2JpZGRlcn1cImApO1xuICAgIH1cblxuICAgIGlmIChkZXBzLmlzQWxsb3dlZChBQ1RJVklUWV9TWU5DX1VTRVIsIGFjdGl2aXR5UGFyYW1zKE1PRFVMRV9UWVBFX0JJRERFUiwgYmlkZGVyLCB7XG4gICAgICBbQUNUSVZJVFlfUEFSQU1fU1lOQ19UWVBFXTogdHlwZSxcbiAgICAgIFtBQ1RJVklUWV9QQVJBTV9TWU5DX1VSTF06IHVybFxuICAgIH0pKSkge1xuICAgICAgLy8gdGhlIGJpZGRlcidzIHBpeGVsIGhhcyBwYXNzZWQgYWxsIGNoZWNrcyBhbmQgaXMgYWxsb3dlZCB0byByZWdpc3RlclxuICAgICAgcXVldWVbdHlwZV0ucHVzaChbYmlkZGVyLCB1cmxdKTtcbiAgICAgIG51bUFkYXB0ZXJCaWRzID0gaW5jcmVtZW50QWRhcHRlckJpZHMobnVtQWRhcHRlckJpZHMsIGJpZGRlcik7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBNYXJrIGEgYmlkZGVyIGFzIGRvbmUgd2l0aCBpdHMgdXNlciBzeW5jcyAtIG5vIG1vcmUgd2lsbCBiZSBhY2NlcHRlZCBmcm9tIHRoZW0gaW4gdGhpcyBzZXNzaW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYmlkZGVyQ29kZVxuICAgKi9cbiAgcHVibGljQXBpLmJpZGRlckRvbmUgPSBoYXNGaXJlZEJpZGRlci5hZGQuYmluZChoYXNGaXJlZEJpZGRlcik7XG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvbiBzaG91bGRCaWRkZXJCZUJsb2NrZWRcbiAgICogQHN1bW1hcnkgQ2hlY2sgZmlsdGVyU2V0dGluZ3MgbG9naWMgdG8gZGV0ZXJtaW5lIGlmIHRoZSBiaWRkZXIgc2hvdWxkIGJlIHByZXZlbnRlZCBmcm9tIHJlZ2lzdGVyaW5nIHRoZWlyIHVzZXJTeW5jIHRyYWNrZXJcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgdGhlIHN5bmM7IGVpdGhlciBpbWFnZSBvciBpZnJhbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJpZGRlciBUaGUgbmFtZSBvZiB0aGUgYWRhcHRlci4gZS5nLiBcInJ1Ymljb25cIlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSA9PiBiaWRkZXIgaXMgbm90IGFsbG93ZWQgdG8gcmVnaXN0ZXI7IGZhbHNlID0+IGJpZGRlciBjYW4gcmVnaXN0ZXJcbiAgICAqL1xuICBmdW5jdGlvbiBzaG91bGRCaWRkZXJCZUJsb2NrZWQodHlwZSwgYmlkZGVyKSB7XG4gICAgbGV0IGZpbHRlckNvbmZpZyA9IHVzQ29uZmlnLmZpbHRlclNldHRpbmdzO1xuXG4gICAgLy8gYXBwbHkgdGhlIGZpbHRlciBjaGVjayBpZiB0aGUgY29uZmlnIG9iamVjdCBpcyB0aGVyZSAoZWcgZmlsdGVyU2V0dGluZ3MuaWZyYW1lIGV4aXN0cykgYW5kIGlmIHRoZSBjb25maWcgb2JqZWN0IGlzIHByb3Blcmx5IHNldHVwXG4gICAgaWYgKGlzRmlsdGVyQ29uZmlnVmFsaWQoZmlsdGVyQ29uZmlnLCB0eXBlKSkge1xuICAgICAgcGVybWl0dGVkUGl4ZWxzW3R5cGVdID0gdHJ1ZTtcblxuICAgICAgbGV0IGFjdGl2ZUNvbmZpZyA9IChmaWx0ZXJDb25maWcuYWxsKSA/IGZpbHRlckNvbmZpZy5hbGwgOiBmaWx0ZXJDb25maWdbdHlwZV07XG4gICAgICBsZXQgYmlkZGVyc1RvRmlsdGVyID0gKGFjdGl2ZUNvbmZpZy5iaWRkZXJzID09PSAnKicpID8gW2JpZGRlcl0gOiBhY3RpdmVDb25maWcuYmlkZGVycztcbiAgICAgIGxldCBmaWx0ZXJUeXBlID0gYWN0aXZlQ29uZmlnLmZpbHRlciB8fCAnaW5jbHVkZSc7IC8vIHNldCBkZWZhdWx0IGlmIHVuZGVmaW5lZFxuXG4gICAgICAvLyByZXR1cm4gdHJ1ZSBpZiB0aGUgYmlkZGVyIGlzIGVpdGhlcjogbm90IHBhcnQgb2YgdGhlIGluY2x1ZGUgKGllIG91dHNpZGUgdGhlIHdoaXRlbGlzdCkgb3IgcGFydCBvZiB0aGUgZXhjbHVkZSAoaWUgaW5zaWRlIHRoZSBibGFja2xpc3QpXG4gICAgICBjb25zdCBjaGVja0ZvckZpbHRlcmluZyA9IHtcbiAgICAgICAgJ2luY2x1ZGUnOiAoYmlkZGVycywgYmlkZGVyKSA9PiAhaW5jbHVkZXMoYmlkZGVycywgYmlkZGVyKSxcbiAgICAgICAgJ2V4Y2x1ZGUnOiAoYmlkZGVycywgYmlkZGVyKSA9PiBpbmNsdWRlcyhiaWRkZXJzLCBiaWRkZXIpXG4gICAgICB9XG4gICAgICByZXR1cm4gY2hlY2tGb3JGaWx0ZXJpbmdbZmlsdGVyVHlwZV0oYmlkZGVyc1RvRmlsdGVyLCBiaWRkZXIpO1xuICAgIH1cbiAgICByZXR1cm4gIXBlcm1pdHRlZFBpeGVsc1t0eXBlXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb24gaXNGaWx0ZXJDb25maWdWYWxpZFxuICAgKiBAc3VtbWFyeSBDaGVjayBpZiB0aGUgZmlsdGVyU2V0dGluZ3Mgb2JqZWN0IGluIHRoZSB1c2VyU3luYyBjb25maWcgaXMgc2V0dXAgcHJvcGVybHlcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbHRlckNvbmZpZyBzdWItY29uZmlnIG9iamVjdCB0YWtlbiBmcm9tIGZpbHRlclNldHRpbmdzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBzeW5jOyBlaXRoZXIgaW1hZ2Ugb3IgaWZyYW1lXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlID0+IGNvbmZpZyBpcyBzZXR1cCBjb3JyZWN0bHksIGZhbHNlID0+IHNldHVwIGluY29ycmVjdGx5IG9yIGZpbHRlckNvbmZpZ1t0eXBlXSBpcyBub3QgcHJlc2VudFxuICAgKi9cbiAgZnVuY3Rpb24gaXNGaWx0ZXJDb25maWdWYWxpZChmaWx0ZXJDb25maWcsIHR5cGUpIHtcbiAgICBpZiAoZmlsdGVyQ29uZmlnLmFsbCAmJiBmaWx0ZXJDb25maWdbdHlwZV0pIHtcbiAgICAgIGxvZ1dhcm4oYERldGVjdGVkIHByZXNlbmNlIG9mIHRoZSBcImZpbHRlclNldHRpbmdzLmFsbFwiIGFuZCBcImZpbHRlclNldHRpbmdzLiR7dHlwZX1cIiBpbiB1c2VyU3luYyBjb25maWcuICBZb3UgY2Fubm90IG1peCBcImFsbFwiIHdpdGggXCJpZnJhbWUvaW1hZ2VcIiBjb25maWdzOyB0aGV5IGFyZSBtdXR1YWxseSBleGNsdXNpdmUuYCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IGFjdGl2ZUNvbmZpZyA9IChmaWx0ZXJDb25maWcuYWxsKSA/IGZpbHRlckNvbmZpZy5hbGwgOiBmaWx0ZXJDb25maWdbdHlwZV07XG4gICAgbGV0IGFjdGl2ZUNvbmZpZ05hbWUgPSAoZmlsdGVyQ29uZmlnLmFsbCkgPyAnYWxsJyA6IHR5cGU7XG5cbiAgICAvLyBpZiBjdXJyZW50IHBpeGVsIHR5cGUgaXNuJ3QgcGFydCBvZiB0aGUgY29uZmlnJ3MgbG9naWMsIHNraXAgcmVzdCBvZiB0aGUgY29uZmlnIGNoZWNrcy4uLlxuICAgIC8vIHdlIHJldHVybiBmYWxzZSB0byBza2lwIHN1YnNlcXVlbnQgZmlsdGVyIGNoZWNrcyBpbiBzaG91bGRCaWRkZXJCZUJsb2NrZWQoKSBmdW5jdGlvblxuICAgIGlmICghYWN0aXZlQ29uZmlnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IGZpbHRlckZpZWxkID0gYWN0aXZlQ29uZmlnLmZpbHRlcjtcbiAgICBsZXQgYmlkZGVyc0ZpZWxkID0gYWN0aXZlQ29uZmlnLmJpZGRlcnM7XG5cbiAgICBpZiAoZmlsdGVyRmllbGQgJiYgZmlsdGVyRmllbGQgIT09ICdpbmNsdWRlJyAmJiBmaWx0ZXJGaWVsZCAhPT0gJ2V4Y2x1ZGUnKSB7XG4gICAgICBsb2dXYXJuKGBVc2VyU3luYyBcImZpbHRlclNldHRpbmdzLiR7YWN0aXZlQ29uZmlnTmFtZX0uZmlsdGVyXCIgc2V0dGluZyAnJHtmaWx0ZXJGaWVsZH0nIGlzIG5vdCBhIHZhbGlkIG9wdGlvbjsgdXNlIGVpdGhlciAnaW5jbHVkZScgb3IgJ2V4Y2x1ZGUnLmApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChiaWRkZXJzRmllbGQgIT09ICcqJyAmJiAhKEFycmF5LmlzQXJyYXkoYmlkZGVyc0ZpZWxkKSAmJiBiaWRkZXJzRmllbGQubGVuZ3RoID4gMCAmJiBiaWRkZXJzRmllbGQuZXZlcnkoYmlkZGVySW5MaXN0ID0+IGlzU3RyKGJpZGRlckluTGlzdCkgJiYgYmlkZGVySW5MaXN0ICE9PSAnKicpKSkge1xuICAgICAgbG9nV2FybihgRGV0ZWN0ZWQgYW4gaW52YWxpZCBzZXR1cCBpbiB1c2VyU3luYyBcImZpbHRlclNldHRpbmdzLiR7YWN0aXZlQ29uZmlnTmFtZX0uYmlkZGVyc1wiOyB1c2UgZWl0aGVyICcqJyAodG8gcmVwcmVzZW50IGFsbCBiaWRkZXJzKSBvciBhbiBhcnJheSBvZiBiaWRkZXJzLmApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvbiBzeW5jVXNlcnNcbiAgICogQHN1bW1hcnkgVHJpZ2dlciBhbGwgdGhlIHVzZXIgc3luY3MgYmFzZWQgb24gcHVibGlzaGVyLWRlZmluZWQgdGltZW91dFxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbXMge2ludH0gdGltZW91dCBUaGUgZGVsYXkgaW4gbXMgYmVmb3JlIHN5bmNpbmcgZGF0YSAtIGRlZmF1bHQgMFxuICAgKi9cbiAgcHVibGljQXBpLnN5bmNVc2VycyA9ICh0aW1lb3V0ID0gMCkgPT4ge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmaXJlU3luY3MsIE51bWJlcih0aW1lb3V0KSk7XG4gICAgfVxuICAgIGZpcmVTeW5jcygpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb24gdHJpZ2dlclVzZXJTeW5jc1xuICAgKiBAc3VtbWFyeSBBIGBzeW5jVXNlcnNgIHdyYXBwZXIgZm9yIGRldGVybWluaW5nIGlmIGVuYWJsZU92ZXJyaWRlIGhhcyBiZWVuIHR1cm5lZCBvblxuICAgKiBAcHVibGljXG4gICAqL1xuICBwdWJsaWNBcGkudHJpZ2dlclVzZXJTeW5jcyA9ICgpID0+IHtcbiAgICBpZiAodXNDb25maWcuZW5hYmxlT3ZlcnJpZGUpIHtcbiAgICAgIHB1YmxpY0FwaS5zeW5jVXNlcnMoKTtcbiAgICB9XG4gIH07XG5cbiAgcHVibGljQXBpLmNhbkJpZGRlclJlZ2lzdGVyU3luYyA9ICh0eXBlLCBiaWRkZXIpID0+IHtcbiAgICBpZiAodXNDb25maWcuZmlsdGVyU2V0dGluZ3MpIHtcbiAgICAgIGlmIChzaG91bGRCaWRkZXJCZUJsb2NrZWQodHlwZSwgYmlkZGVyKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICByZXR1cm4gcHVibGljQXBpO1xufVxuXG5leHBvcnQgY29uc3QgdXNlclN5bmMgPSBuZXdVc2VyU3luYyhPYmplY3QuZGVmaW5lUHJvcGVydGllcyh7XG4gIGNvbmZpZzogY29uZmlnLmdldENvbmZpZygndXNlclN5bmMnKSxcbiAgaXNBbGxvd2VkOiBpc0FjdGl2aXR5QWxsb3dlZCxcbiAgcmVnUnVsZTogcmVnaXN0ZXJBY3Rpdml0eUNvbnRyb2wsXG59LCB7XG4gIGJyb3dzZXJTdXBwb3J0c0Nvb2tpZXM6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gY2FsbCBzdG9yYWdlIGxhemlseSB0byBnaXZlIHRpbWUgZm9yIGNvbnNlbnQgZGF0YSB0byBiZSBhdmFpbGFibGVcbiAgICAgIHJldHVybiAhaXNTYWZhcmlCcm93c2VyKCkgJiYgc3RvcmFnZS5jb29raWVzQXJlRW5hYmxlZCgpO1xuICAgIH1cbiAgfVxufSkpO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFVzZXJTeW5jQ29uZmlnXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBlbmFibGVPdmVycmlkZVxuICogQHByb3BlcnR5IHtib29sZWFufSBzeW5jRW5hYmxlZFxuICogQHByb3BlcnR5IHtpbnR9IHN5bmNzUGVyQmlkZGVyXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSBlbmFibGVkQmlkZGVyc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGZpbHRlclNldHRpbmdzXG4gKi9cbiIsIi8qKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSB2YWxpZCBNZWRpYSBUeXBlcyBpbiBQcmViaWQuXG4gKlxuICogQWxsIGFkYXB0ZXJzIGFyZSBhc3N1bWVkIHRvIHN1cHBvcnQgYmFubmVyIGFkcy4gT3RoZXIgbWVkaWEgdHlwZXMgYXJlIHNwZWNpZmllZCBieSBBZGFwdGVycyB3aGVuIHRoZXlcbiAqIHJlZ2lzdGVyIHRoZW1zZWx2ZXMgd2l0aCBwcmViaWQtY29yZS5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoJ25hdGl2ZSd8J3ZpZGVvJ3wnYmFubmVyJyl9IE1lZGlhVHlwZVxuICogQHR5cGVkZWYgeygnYWRwb2QnKX0gVmlkZW9Db250ZXh0XG4gKi9cblxuLyoqIEB0eXBlIE1lZGlhVHlwZSAqL1xuZXhwb3J0IGNvbnN0IE5BVElWRSA9ICduYXRpdmUnO1xuLyoqIEB0eXBlIE1lZGlhVHlwZSAqL1xuZXhwb3J0IGNvbnN0IFZJREVPID0gJ3ZpZGVvJztcbi8qKiBAdHlwZSBNZWRpYVR5cGUgKi9cbmV4cG9ydCBjb25zdCBCQU5ORVIgPSAnYmFubmVyJztcbi8qKiBAdHlwZSBWaWRlb0NvbnRleHQgKi9cbmV4cG9ydCBjb25zdCBBRFBPRCA9ICdhZHBvZCc7XG4iLCIvKipcbiAqIE1vZHVsZSBmb3IgYXVjdGlvbiBpbnN0YW5jZXMuXG4gKlxuICogSW4gUHJlYmlkIDAueCwgJCRQUkVCSURfR0xPQkFMJCQgaGFkIF9iaWRzUmVxdWVzdGVkIGFuZCBfYmlkc1JlY2VpdmVkIGFzIHB1YmxpYyBwcm9wZXJ0aWVzLlxuICogU3RhcnRpbmcgMS4wLCBQcmViaWQgd2lsbCBzdXBwb3J0IGNvbmN1cnJlbnQgYXVjdGlvbnMuIEVhY2ggYXVjdGlvbiBpbnN0YW5jZSB3aWxsIHN0b3JlIHByaXZhdGUgcHJvcGVydGllcywgYmlkc1JlcXVlc3RlZCBhbmQgYmlkc1JlY2VpdmVkLlxuICpcbiAqIEF1Y3Rpb25NYW5hZ2VyIHdpbGwgY3JlYXRlIGFuIGluc3RhbmNlIG9mIGF1Y3Rpb24gYW5kIHdpbGwgc3RvcmUgYWxsIHRoZSBhdWN0aW9ucy5cbiAqXG4gKi9cblxuLyoqXG4gICogQHR5cGVkZWYge09iamVjdH0gQWRVbml0IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBhZFVuaXQgY29uZmlndXJhdGlvbi5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb2RlIEEgY29kZSB3aGljaCB3aWxsIGJlIHVzZWQgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyBiaWRkZXIuIFRoaXMgc2hvdWxkIGJlIHRoZSBzYW1lXG4gICogICBvbmUgYXMgaXMgdXNlZCBpbiB0aGUgY2FsbCB0byByZWdpc3RlckJpZEFkYXB0ZXJcbiAgKiBAcHJvcGVydHkge0FycmF5LjxzaXplPn0gc2l6ZXMgQSBsaXN0IG9mIHNpemUgZm9yIGFkVW5pdC5cbiAgKiBAcHJvcGVydHkge29iamVjdH0gcGFyYW1zIEFueSBiaWRkZXItc3BlY2lmaWMgcGFyYW1zIHdoaWNoIHRoZSBwdWJsaXNoZXIgdXNlZCBpbiB0aGVpciBiaWQgcmVxdWVzdC5cbiAgKiAgIFRoaXMgaXMgZ3VhcmFudGVlZCB0byBoYXZlIHBhc3NlZCB0aGUgc3BlYy5hcmVQYXJhbXNWYWxpZCgpIHRlc3QuXG4gICovXG5cbi8qKlxuICogQHR5cGVkZWYge0FycmF5LjxudW1iZXI+fSBzaXplXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7QXJyYXkuPHN0cmluZz59IEFkVW5pdENvZGVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEJpZGRlclJlcXVlc3RcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmlkZGVyQ29kZSAtIGFkVW5pdCBiaWRkZXJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBhdWN0aW9uSWQgLSByYW5kb20gVVVJRFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpZGRlclJlcXVlc3RJZCAtIHJhbmRvbSBzdHJpbmcsIHVuaXF1ZSBrZXkgc2V0IG9uIGFsbCBiaWRSZXF1ZXN0LmJpZHNbXVxuICogQHByb3BlcnR5IHtBcnJheS48QmlkPn0gYmlkc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGF1Y3Rpb25TdGFydCAtIERhdGUubm93KCkgYXQgYXVjdGlvbiBzdGFydFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVvdXQgLSBjYWxsYmFjayB0aW1lb3V0XG4gKiBAcHJvcGVydHkge3JlZmVyZXJJbmZvfSByZWZlcmVySW5mbyAtIHJlZmVyZXIgaW5mbyBvYmplY3RcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGlkXSAtIHJhbmRvbSBVVUlEICh1c2VkIGZvciBzMnMpXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3NyY10gLSBzMnMgb3IgY2xpZW50ICh1c2VkIGZvciBzMnMpXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBCaWRSZWNlaXZlZFxuICogLy9UT0RPIGFkZCBhbGwgcHJvcGVydGllc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQXVjdGlvblxuICpcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oKTogc3RyaW5nfSBnZXRBdWN0aW9uU3RhdHVzIC0gcmV0dXJucyB0aGUgYXVjdGlvbiBzdGF0dXMgd2hpY2ggY2FuIGJlIGFueSBvbmUgb2YgJ3N0YXJ0ZWQnLCAnaW4gcHJvZ3Jlc3MnIG9yICdjb21wbGV0ZWQnXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IEFkVW5pdFtdfSBnZXRBZFVuaXRzIC0gcmV0dXJuIHRoZSBhZFVuaXRzIGZvciB0aGlzIGF1Y3Rpb24gaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oKTogQWRVbml0Q29kZVtdfSBnZXRBZFVuaXRDb2RlcyAtIHJldHVybiB0aGUgYWRVbml0Q29kZXMgZm9yIHRoaXMgYXVjdGlvbiBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiBCaWRSZXF1ZXN0W119IGdldEJpZFJlcXVlc3RzIC0gZ2V0IGFsbCBiaWQgcmVxdWVzdHMgZm9yIHRoaXMgYXVjdGlvbiBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiBCaWRSZWNlaXZlZFtdfSBnZXRCaWRzUmVjZWl2ZWQgLSBnZXQgYWxsIGJpZCByZWNlaXZlZCBmb3IgdGhpcyBhdWN0aW9uIGluc3RhbmNlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IHN0YXJ0QXVjdGlvblRpbWVyIC0gc2V0cyB0aGUgYmlkc0JhY2tIYW5kbGVyIGNhbGxiYWNrIGFuZCBzdGFydHMgdGhlIHRpbWVyIGZvciBhdWN0aW9uXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IGNhbGxCaWRzIC0gc2VuZHMgcmVxdWVzdHMgdG8gYWxsIGFkYXB0ZXJzIGZvciBiaWRzXG4gKi9cblxuaW1wb3J0IHtcbiAgX2VhY2gsXG4gIGFkVW5pdHNGaWx0ZXIsXG4gIGJpbmQsXG4gIGRlZXBBY2Nlc3MsXG4gIGdlbmVyYXRlVVVJRCxcbiAgZ2V0VmFsdWUsXG4gIGlzRW1wdHksXG4gIGlzRW1wdHlTdHIsXG4gIGlzRm4sXG4gIGxvZ0Vycm9yLFxuICBsb2dJbmZvLFxuICBsb2dNZXNzYWdlLFxuICBsb2dXYXJuLFxuICBwYXJzZVVybCxcbiAgdGltZXN0YW1wXG59IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHtnZXRQcmljZUJ1Y2tldFN0cmluZ30gZnJvbSAnLi9jcG1CdWNrZXRNYW5hZ2VyLmpzJztcbmltcG9ydCB7Z2V0TmF0aXZlVGFyZ2V0aW5nLCB0b0xlZ2FjeVJlc3BvbnNlfSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQge2dldENhY2hlVXJsLCBzdG9yZX0gZnJvbSAnLi92aWRlb0NhY2hlLmpzJztcbmltcG9ydCB7UmVuZGVyZXJ9IGZyb20gJy4vUmVuZGVyZXIuanMnO1xuaW1wb3J0IHtjb25maWd9IGZyb20gJy4vY29uZmlnLmpzJztcbmltcG9ydCB7dXNlclN5bmN9IGZyb20gJy4vdXNlclN5bmMuanMnO1xuaW1wb3J0IHtob29rfSBmcm9tICcuL2hvb2suanMnO1xuaW1wb3J0IHtmaW5kLCBpbmNsdWRlc30gZnJvbSAnLi9wb2x5ZmlsbC5qcyc7XG5pbXBvcnQge09VVFNUUkVBTX0gZnJvbSAnLi92aWRlby5qcyc7XG5pbXBvcnQge1ZJREVPfSBmcm9tICcuL21lZGlhVHlwZXMuanMnO1xuaW1wb3J0IHthdWN0aW9uTWFuYWdlcn0gZnJvbSAnLi9hdWN0aW9uTWFuYWdlci5qcyc7XG5pbXBvcnQge2JpZGRlclNldHRpbmdzfSBmcm9tICcuL2JpZGRlclNldHRpbmdzLmpzJztcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tICcuL2V2ZW50cy5qcyc7XG5pbXBvcnQgYWRhcHRlck1hbmFnZXIgZnJvbSAnLi9hZGFwdGVyTWFuYWdlci5qcyc7XG5pbXBvcnQgQ09OU1RBTlRTIGZyb20gJy4vY29uc3RhbnRzLmpzb24nO1xuaW1wb3J0IHtkZWZlciwgR3JlZWR5UHJvbWlzZX0gZnJvbSAnLi91dGlscy9wcm9taXNlLmpzJztcbmltcG9ydCB7dXNlTWV0cmljc30gZnJvbSAnLi91dGlscy9wZXJmTWV0cmljcy5qcyc7XG5pbXBvcnQge2FkanVzdENwbX0gZnJvbSAnLi91dGlscy9jcG0uanMnO1xuaW1wb3J0IHtnZXRHbG9iYWx9IGZyb20gJy4vcHJlYmlkR2xvYmFsLmpzJztcblxuY29uc3QgeyBzeW5jVXNlcnMgfSA9IHVzZXJTeW5jO1xuXG5leHBvcnQgY29uc3QgQVVDVElPTl9TVEFSVEVEID0gJ3N0YXJ0ZWQnO1xuZXhwb3J0IGNvbnN0IEFVQ1RJT05fSU5fUFJPR1JFU1MgPSAnaW5Qcm9ncmVzcyc7XG5leHBvcnQgY29uc3QgQVVDVElPTl9DT01QTEVURUQgPSAnY29tcGxldGVkJztcblxuLy8gcmVnaXN0ZXIgZXZlbnQgZm9yIGJpZCBhZGp1c3RtZW50XG5ldmVudHMub24oQ09OU1RBTlRTLkVWRU5UUy5CSURfQURKVVNUTUVOVCwgZnVuY3Rpb24gKGJpZCkge1xuICBhZGp1c3RCaWRzKGJpZCk7XG59KTtcblxuY29uc3QgTUFYX1JFUVVFU1RTX1BFUl9PUklHSU4gPSA0O1xuY29uc3Qgb3V0c3RhbmRpbmdSZXF1ZXN0cyA9IHt9O1xuY29uc3Qgc291cmNlSW5mbyA9IHt9O1xuY29uc3QgcXVldWVkQ2FsbHMgPSBbXTtcblxuY29uc3QgcGJqc0luc3RhbmNlID0gZ2V0R2xvYmFsKCk7XG5cbi8qKlxuICogQ2xlYXIgZ2xvYmFsIHN0YXRlIGZvciB0ZXN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRBdWN0aW9uU3RhdGUoKSB7XG4gIHF1ZXVlZENhbGxzLmxlbmd0aCA9IDA7XG4gIFtvdXRzdGFuZGluZ1JlcXVlc3RzLCBzb3VyY2VJbmZvXS5mb3JFYWNoKChvYikgPT4gT2JqZWN0LmtleXMob2IpLmZvckVhY2goKGspID0+IHsgZGVsZXRlIG9iW2tdIH0pKTtcbn1cblxuLyoqXG4gICogQ3JlYXRlcyBuZXcgYXVjdGlvbiBpbnN0YW5jZVxuICAqXG4gICogQHBhcmFtIHtPYmplY3R9IHJlcXVlc3RDb25maWdcbiAgKiBAcGFyYW0ge0FkVW5pdH0gcmVxdWVzdENvbmZpZy5hZFVuaXRzXG4gICogQHBhcmFtIHtBZFVuaXRDb2RlfSByZXF1ZXN0Q29uZmlnLmFkVW5pdENvZGVzXG4gICogQHBhcmFtIHtmdW5jdGlvbigpOnZvaWR9IHJlcXVlc3RDb25maWcuY2FsbGJhY2tcbiAgKiBAcGFyYW0ge251bWJlcn0gcmVxdWVzdENvbmZpZy5jYlRpbWVvdXRcbiAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSByZXF1ZXN0Q29uZmlnLmxhYmVsc1xuICAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0Q29uZmlnLmF1Y3Rpb25JZFxuICAqIEBwYXJhbSB7e2dsb2JhbDoge30sIGJpZGRlcjoge319fSBvcnRiMkZyYWdtZW50cyBmaXJzdCBwYXJ0eSBkYXRhLCBzZXBhcmF0ZWQgaW50byBnbG9iYWxcbiAgKiAgICAoZnJvbSBnZXRDb25maWcoJ29ydGIyJykgKyByZXF1ZXN0Qmlkcyh7b3J0YjJ9KSkgYW5kIGJpZGRlciAoYSBtYXAgZnJvbSBiaWRkZXJDb2RlIHRvIG9ydGIyKVxuICAqIEByZXR1cm5zIHtBdWN0aW9ufSBhdWN0aW9uIGluc3RhbmNlXG4gICovXG5leHBvcnQgZnVuY3Rpb24gbmV3QXVjdGlvbih7YWRVbml0cywgYWRVbml0Q29kZXMsIGNhbGxiYWNrLCBjYlRpbWVvdXQsIGxhYmVscywgYXVjdGlvbklkLCBvcnRiMkZyYWdtZW50cywgbWV0cmljc30pIHtcbiAgbWV0cmljcyA9IHVzZU1ldHJpY3MobWV0cmljcyk7XG4gIGNvbnN0IF9hZFVuaXRzID0gYWRVbml0cztcbiAgY29uc3QgX2xhYmVscyA9IGxhYmVscztcbiAgY29uc3QgX2FkVW5pdENvZGVzID0gYWRVbml0Q29kZXM7XG4gIGNvbnN0IF9hdWN0aW9uSWQgPSBhdWN0aW9uSWQgfHwgZ2VuZXJhdGVVVUlEKCk7XG4gIGNvbnN0IF90aW1lb3V0ID0gY2JUaW1lb3V0O1xuICBjb25zdCBfdGltZWx5UmVxdWVzdHMgPSBuZXcgU2V0KCk7XG4gIGNvbnN0IGRvbmUgPSBkZWZlcigpO1xuICBsZXQgX2JpZHNSZWplY3RlZCA9IFtdO1xuICBsZXQgX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gIGxldCBfYmlkZGVyUmVxdWVzdHMgPSBbXTtcbiAgbGV0IF9iaWRzUmVjZWl2ZWQgPSBbXTtcbiAgbGV0IF9ub0JpZHMgPSBbXTtcbiAgbGV0IF93aW5uaW5nQmlkcyA9IFtdO1xuICBsZXQgX2F1Y3Rpb25TdGFydDtcbiAgbGV0IF9hdWN0aW9uRW5kO1xuICBsZXQgX3RpbWVvdXRUaW1lcjtcbiAgbGV0IF9hdWN0aW9uU3RhdHVzO1xuICBsZXQgX25vbkJpZHMgPSBbXTtcblxuICBmdW5jdGlvbiBhZGRCaWRSZXF1ZXN0cyhiaWRkZXJSZXF1ZXN0cykgeyBfYmlkZGVyUmVxdWVzdHMgPSBfYmlkZGVyUmVxdWVzdHMuY29uY2F0KGJpZGRlclJlcXVlc3RzKTsgfVxuICBmdW5jdGlvbiBhZGRCaWRSZWNlaXZlZChiaWRzUmVjZWl2ZWQpIHsgX2JpZHNSZWNlaXZlZCA9IF9iaWRzUmVjZWl2ZWQuY29uY2F0KGJpZHNSZWNlaXZlZCk7IH1cbiAgZnVuY3Rpb24gYWRkQmlkUmVqZWN0ZWQoYmlkc1JlamVjdGVkKSB7IF9iaWRzUmVqZWN0ZWQgPSBfYmlkc1JlamVjdGVkLmNvbmNhdChiaWRzUmVqZWN0ZWQpOyB9XG4gIGZ1bmN0aW9uIGFkZE5vQmlkKG5vQmlkKSB7IF9ub0JpZHMgPSBfbm9CaWRzLmNvbmNhdChub0JpZCk7IH1cbiAgZnVuY3Rpb24gYWRkTm9uQmlkcyhzZWF0bm9uYmlkcykgeyBfbm9uQmlkcyA9IF9ub25CaWRzLmNvbmNhdChzZWF0bm9uYmlkcyk7IH1cblxuICBmdW5jdGlvbiBnZXRQcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhdWN0aW9uSWQ6IF9hdWN0aW9uSWQsXG4gICAgICB0aW1lc3RhbXA6IF9hdWN0aW9uU3RhcnQsXG4gICAgICBhdWN0aW9uRW5kOiBfYXVjdGlvbkVuZCxcbiAgICAgIGF1Y3Rpb25TdGF0dXM6IF9hdWN0aW9uU3RhdHVzLFxuICAgICAgYWRVbml0czogX2FkVW5pdHMsXG4gICAgICBhZFVuaXRDb2RlczogX2FkVW5pdENvZGVzLFxuICAgICAgbGFiZWxzOiBfbGFiZWxzLFxuICAgICAgYmlkZGVyUmVxdWVzdHM6IF9iaWRkZXJSZXF1ZXN0cyxcbiAgICAgIG5vQmlkczogX25vQmlkcyxcbiAgICAgIGJpZHNSZWNlaXZlZDogX2JpZHNSZWNlaXZlZCxcbiAgICAgIGJpZHNSZWplY3RlZDogX2JpZHNSZWplY3RlZCxcbiAgICAgIHdpbm5pbmdCaWRzOiBfd2lubmluZ0JpZHMsXG4gICAgICB0aW1lb3V0OiBfdGltZW91dCxcbiAgICAgIG1ldHJpY3M6IG1ldHJpY3MsXG4gICAgICBzZWF0Tm9uQmlkczogX25vbkJpZHNcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnRBdWN0aW9uVGltZXIoKSB7XG4gICAgX3RpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gZXhlY3V0ZUNhbGxiYWNrKHRydWUpLCBfdGltZW91dCk7XG4gIH1cblxuICBmdW5jdGlvbiBleGVjdXRlQ2FsbGJhY2sodGltZWRPdXQpIHtcbiAgICBpZiAoIXRpbWVkT3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RpbWVvdXRUaW1lcik7XG4gICAgfVxuICAgIGlmIChfYXVjdGlvbkVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgdGltZWRPdXRSZXF1ZXN0cyA9IFtdO1xuICAgICAgaWYgKHRpbWVkT3V0KSB7XG4gICAgICAgIGxvZ01lc3NhZ2UoYEF1Y3Rpb24gJHtfYXVjdGlvbklkfSB0aW1lZE91dGApO1xuICAgICAgICB0aW1lZE91dFJlcXVlc3RzID0gX2JpZGRlclJlcXVlc3RzLmZpbHRlcihycSA9PiAhX3RpbWVseVJlcXVlc3RzLmhhcyhycS5iaWRkZXJSZXF1ZXN0SWQpKS5mbGF0TWFwKGJyID0+IGJyLmJpZHMpXG4gICAgICAgIGlmICh0aW1lZE91dFJlcXVlc3RzLmxlbmd0aCkge1xuICAgICAgICAgIGV2ZW50cy5lbWl0KENPTlNUQU5UUy5FVkVOVFMuQklEX1RJTUVPVVQsIHRpbWVkT3V0UmVxdWVzdHMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF9hdWN0aW9uU3RhdHVzID0gQVVDVElPTl9DT01QTEVURUQ7XG4gICAgICBfYXVjdGlvbkVuZCA9IERhdGUubm93KCk7XG4gICAgICBtZXRyaWNzLmNoZWNrcG9pbnQoJ2F1Y3Rpb25FbmQnKTtcbiAgICAgIG1ldHJpY3MudGltZUJldHdlZW4oJ3JlcXVlc3RCaWRzJywgJ2F1Y3Rpb25FbmQnLCAncmVxdWVzdEJpZHMudG90YWwnKTtcbiAgICAgIG1ldHJpY3MudGltZUJldHdlZW4oJ2NhbGxCaWRzJywgJ2F1Y3Rpb25FbmQnLCAncmVxdWVzdEJpZHMuY2FsbEJpZHMnKTtcbiAgICAgIGRvbmUucmVzb2x2ZSgpO1xuXG4gICAgICBldmVudHMuZW1pdChDT05TVEFOVFMuRVZFTlRTLkFVQ1RJT05fRU5ELCBnZXRQcm9wZXJ0aWVzKCkpO1xuICAgICAgYmlkc0JhY2tDYWxsYmFjayhfYWRVbml0cywgZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChfY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgYWRVbml0Q29kZXMgPSBfYWRVbml0Q29kZXM7XG4gICAgICAgICAgICBjb25zdCBiaWRzID0gX2JpZHNSZWNlaXZlZFxuICAgICAgICAgICAgICAuZmlsdGVyKGJpbmQuY2FsbChhZFVuaXRzRmlsdGVyLCB0aGlzLCBhZFVuaXRDb2RlcykpXG4gICAgICAgICAgICAgIC5yZWR1Y2UoZ3JvdXBCeVBsYWNlbWVudCwge30pO1xuICAgICAgICAgICAgX2NhbGxiYWNrLmFwcGx5KHBianNJbnN0YW5jZSwgW2JpZHMsIHRpbWVkT3V0LCBfYXVjdGlvbklkXSk7XG4gICAgICAgICAgICBfY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGxvZ0Vycm9yKCdFcnJvciBleGVjdXRpbmcgYmlkc0JhY2tIYW5kbGVyJywgbnVsbCwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgLy8gQ2FsbGluZyB0aW1lZCBvdXQgYmlkZGVyc1xuICAgICAgICAgIGlmICh0aW1lZE91dFJlcXVlc3RzLmxlbmd0aCkge1xuICAgICAgICAgICAgYWRhcHRlck1hbmFnZXIuY2FsbFRpbWVkT3V0QmlkZGVycyhhZFVuaXRzLCB0aW1lZE91dFJlcXVlc3RzLCBfdGltZW91dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIE9ubHkgYXV0b21hdGljYWxseSBzeW5jIGlmIHRoZSBwdWJsaXNoZXIgaGFzIG5vdCBjaG9zZW4gdG8gXCJlbmFibGVPdmVycmlkZVwiXG4gICAgICAgICAgbGV0IHVzZXJTeW5jQ29uZmlnID0gY29uZmlnLmdldENvbmZpZygndXNlclN5bmMnKSB8fCB7fTtcbiAgICAgICAgICBpZiAoIXVzZXJTeW5jQ29uZmlnLmVuYWJsZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICAvLyBEZWxheSB0aGUgYXV0byBzeW5jIGJ5IHRoZSBjb25maWcgZGVsYXlcbiAgICAgICAgICAgIHN5bmNVc2Vycyh1c2VyU3luY0NvbmZpZy5zeW5jRGVsYXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhdWN0aW9uRG9uZSgpIHtcbiAgICBjb25maWcucmVzZXRCaWRkZXIoKTtcbiAgICAvLyB3aGVuIGFsbCBiaWRkZXJzIGhhdmUgY2FsbGVkIGRvbmUgY2FsbGJhY2sgYXRsZWFzdCBvbmNlIGl0IG1lYW5zIGF1Y3Rpb24gaXMgY29tcGxldGVcbiAgICBsb2dJbmZvKGBCaWRzIFJlY2VpdmVkIGZvciBBdWN0aW9uIHdpdGggaWQ6ICR7X2F1Y3Rpb25JZH1gLCBfYmlkc1JlY2VpdmVkKTtcbiAgICBfYXVjdGlvblN0YXR1cyA9IEFVQ1RJT05fQ09NUExFVEVEO1xuICAgIGV4ZWN1dGVDYWxsYmFjayhmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblRpbWVseVJlc3BvbnNlKGJpZGRlclJlcXVlc3RJZCkge1xuICAgIF90aW1lbHlSZXF1ZXN0cy5hZGQoYmlkZGVyUmVxdWVzdElkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGxCaWRzKCkge1xuICAgIF9hdWN0aW9uU3RhdHVzID0gQVVDVElPTl9TVEFSVEVEO1xuICAgIF9hdWN0aW9uU3RhcnQgPSBEYXRlLm5vdygpO1xuXG4gICAgbGV0IGJpZFJlcXVlc3RzID0gbWV0cmljcy5tZWFzdXJlVGltZSgncmVxdWVzdEJpZHMubWFrZVJlcXVlc3RzJyxcbiAgICAgICgpID0+IGFkYXB0ZXJNYW5hZ2VyLm1ha2VCaWRSZXF1ZXN0cyhfYWRVbml0cywgX2F1Y3Rpb25TdGFydCwgX2F1Y3Rpb25JZCwgX3RpbWVvdXQsIF9sYWJlbHMsIG9ydGIyRnJhZ21lbnRzLCBtZXRyaWNzKSk7XG4gICAgbG9nSW5mbyhgQmlkcyBSZXF1ZXN0ZWQgZm9yIEF1Y3Rpb24gd2l0aCBpZDogJHtfYXVjdGlvbklkfWAsIGJpZFJlcXVlc3RzKTtcblxuICAgIG1ldHJpY3MuY2hlY2twb2ludCgnY2FsbEJpZHMnKVxuXG4gICAgaWYgKGJpZFJlcXVlc3RzLmxlbmd0aCA8IDEpIHtcbiAgICAgIGxvZ1dhcm4oJ05vIHZhbGlkIGJpZCByZXF1ZXN0cyByZXR1cm5lZCBmb3IgYXVjdGlvbicpO1xuICAgICAgYXVjdGlvbkRvbmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkQmlkZGVyUmVxdWVzdHMuY2FsbCh7XG4gICAgICAgIGRpc3BhdGNoOiBhZGRCaWRkZXJSZXF1ZXN0c0NhbGxiYWNrLFxuICAgICAgICBjb250ZXh0OiB0aGlzXG4gICAgICB9LCBiaWRSZXF1ZXN0cyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIGNhbGxiYWNrIGV4ZWN1dGVkIGFmdGVyIGFkZEJpZGRlclJlcXVlc3RzIGNvbXBsZXRlc1xuICAgKiBAcGFyYW0ge0JpZFJlcXVlc3RbXX0gYmlkUmVxdWVzdHNcbiAgICovXG4gIGZ1bmN0aW9uIGFkZEJpZGRlclJlcXVlc3RzQ2FsbGJhY2soYmlkUmVxdWVzdHMpIHtcbiAgICBiaWRSZXF1ZXN0cy5mb3JFYWNoKGJpZFJlcXVlc3QgPT4ge1xuICAgICAgYWRkQmlkUmVxdWVzdHMoYmlkUmVxdWVzdCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcmVxdWVzdHMgPSB7fTtcbiAgICBsZXQgY2FsbCA9IHtcbiAgICAgIGJpZFJlcXVlc3RzLFxuICAgICAgcnVuOiAoKSA9PiB7XG4gICAgICAgIHN0YXJ0QXVjdGlvblRpbWVyKCk7XG5cbiAgICAgICAgX2F1Y3Rpb25TdGF0dXMgPSBBVUNUSU9OX0lOX1BST0dSRVNTO1xuXG4gICAgICAgIGV2ZW50cy5lbWl0KENPTlNUQU5UUy5FVkVOVFMuQVVDVElPTl9JTklULCBnZXRQcm9wZXJ0aWVzKCkpO1xuXG4gICAgICAgIGxldCBjYWxsYmFja3MgPSBhdWN0aW9uQ2FsbGJhY2tzKGF1Y3Rpb25Eb25lLCB0aGlzKTtcbiAgICAgICAgYWRhcHRlck1hbmFnZXIuY2FsbEJpZHMoX2FkVW5pdHMsIGJpZFJlcXVlc3RzLCBjYWxsYmFja3MuYWRkQmlkUmVzcG9uc2UsIGNhbGxiYWNrcy5hZGFwdGVyRG9uZSwge1xuICAgICAgICAgIHJlcXVlc3Qoc291cmNlLCBvcmlnaW4pIHtcbiAgICAgICAgICAgIGluY3JlbWVudChvdXRzdGFuZGluZ1JlcXVlc3RzLCBvcmlnaW4pO1xuICAgICAgICAgICAgaW5jcmVtZW50KHJlcXVlc3RzLCBzb3VyY2UpO1xuXG4gICAgICAgICAgICBpZiAoIXNvdXJjZUluZm9bc291cmNlXSkge1xuICAgICAgICAgICAgICBzb3VyY2VJbmZvW3NvdXJjZV0gPSB7XG4gICAgICAgICAgICAgICAgU1JBOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9yaWdpblxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcXVlc3RzW3NvdXJjZV0gPiAxKSB7XG4gICAgICAgICAgICAgIHNvdXJjZUluZm9bc291cmNlXS5TUkEgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGRvbmUob3JpZ2luKSB7XG4gICAgICAgICAgICBvdXRzdGFuZGluZ1JlcXVlc3RzW29yaWdpbl0tLTtcbiAgICAgICAgICAgIGlmIChxdWV1ZWRDYWxsc1swXSkge1xuICAgICAgICAgICAgICBpZiAocnVuSWZPcmlnaW5IYXNDYXBhY2l0eShxdWV1ZWRDYWxsc1swXSkpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZWRDYWxscy5zaGlmdCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfdGltZW91dCwgb25UaW1lbHlSZXNwb25zZSwgb3J0YjJGcmFnbWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIXJ1bklmT3JpZ2luSGFzQ2FwYWNpdHkoY2FsbCkpIHtcbiAgICAgIGxvZ1dhcm4oJ3F1ZXVlaW5nIGF1Y3Rpb24gZHVlIHRvIGxpbWl0ZWQgZW5kcG9pbnQgY2FwYWNpdHknKTtcbiAgICAgIHF1ZXVlZENhbGxzLnB1c2goY2FsbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZPcmlnaW5IYXNDYXBhY2l0eShjYWxsKSB7XG4gICAgICBsZXQgaGFzQ2FwYWNpdHkgPSB0cnVlO1xuXG4gICAgICBsZXQgbWF4UmVxdWVzdHMgPSBjb25maWcuZ2V0Q29uZmlnKCdtYXhSZXF1ZXN0c1Blck9yaWdpbicpIHx8IE1BWF9SRVFVRVNUU19QRVJfT1JJR0lOO1xuXG4gICAgICBjYWxsLmJpZFJlcXVlc3RzLnNvbWUoYmlkUmVxdWVzdCA9PiB7XG4gICAgICAgIGxldCByZXF1ZXN0cyA9IDE7XG4gICAgICAgIGxldCBzb3VyY2UgPSAodHlwZW9mIGJpZFJlcXVlc3Quc3JjICE9PSAndW5kZWZpbmVkJyAmJiBiaWRSZXF1ZXN0LnNyYyA9PT0gQ09OU1RBTlRTLlMyUy5TUkMpID8gJ3MycydcbiAgICAgICAgICA6IGJpZFJlcXVlc3QuYmlkZGVyQ29kZTtcbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBubyBwcmV2aW91cyBpbmZvIG9uIHRoaXMgc291cmNlIGp1c3QgbGV0IHRoZW0gdGhyb3VnaFxuICAgICAgICBpZiAoc291cmNlSW5mb1tzb3VyY2VdKSB7XG4gICAgICAgICAgaWYgKHNvdXJjZUluZm9bc291cmNlXS5TUkEgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAvLyBzb21lIGJpZGRlcnMgbWlnaHQgdXNlIG1vcmUgdGhhbiB0aGUgTUFYX1JFUVVFU1RTX1BFUl9PUklHSU4gaW4gYSBzaW5nbGUgYXVjdGlvbi4gIEluIHRob3NlIGNhc2VzXG4gICAgICAgICAgICAvLyBzZXQgdGhlaXIgcmVxdWVzdCBjb3VudCB0byBNQVhfUkVRVUVTVFNfUEVSX09SSUdJTiBzbyB0aGUgYXVjdGlvbiBpc24ndCBwZXJtYW5lbnRseSBxdWV1ZWQgd2FpdGluZ1xuICAgICAgICAgICAgLy8gZm9yIGNhcGFjaXR5IGZvciB0aGF0IGJpZGRlclxuICAgICAgICAgICAgcmVxdWVzdHMgPSBNYXRoLm1pbihiaWRSZXF1ZXN0LmJpZHMubGVuZ3RoLCBtYXhSZXF1ZXN0cyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RzW3NvdXJjZUluZm9bc291cmNlXS5vcmlnaW5dICsgcmVxdWVzdHMgPiBtYXhSZXF1ZXN0cykge1xuICAgICAgICAgICAgaGFzQ2FwYWNpdHkgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmV0dXJuIG9ubHkgdXNlZCBmb3IgdGVybWluYXRpbmcgdGhpcyAuc29tZSgpIGl0ZXJhdGlvbiBlYXJseSBpZiBpdCBpcyBkZXRlcm1pbmVkIHdlIGRvbid0IGhhdmUgY2FwYWNpdHlcbiAgICAgICAgcmV0dXJuICFoYXNDYXBhY2l0eTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaGFzQ2FwYWNpdHkpIHtcbiAgICAgICAgY2FsbC5ydW4oKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhhc0NhcGFjaXR5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluY3JlbWVudChvYmosIHByb3ApIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqW3Byb3BdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBvYmpbcHJvcF0gPSAxXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmpbcHJvcF0rKztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRXaW5uaW5nQmlkKHdpbm5pbmdCaWQpIHtcbiAgICBjb25zdCB3aW5uaW5nQWQgPSBhZFVuaXRzLmZpbmQoYWRVbml0ID0+IGFkVW5pdC50cmFuc2FjdGlvbklkID09PSB3aW5uaW5nQmlkLnRyYW5zYWN0aW9uSWQpO1xuICAgIF93aW5uaW5nQmlkcyA9IF93aW5uaW5nQmlkcy5jb25jYXQod2lubmluZ0JpZCk7XG4gICAgYWRhcHRlck1hbmFnZXIuY2FsbEJpZFdvbkJpZGRlcih3aW5uaW5nQmlkLmFkYXB0ZXJDb2RlIHx8IHdpbm5pbmdCaWQuYmlkZGVyLCB3aW5uaW5nQmlkLCBhZFVuaXRzKTtcbiAgICBpZiAod2lubmluZ0FkICYmICF3aW5uaW5nQWQuZGVmZXJCaWxsaW5nKSBhZGFwdGVyTWFuYWdlci5jYWxsQmlkQmlsbGFibGVCaWRkZXIod2lubmluZ0JpZCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRCaWRUYXJnZXRpbmcoYmlkKSB7XG4gICAgYWRhcHRlck1hbmFnZXIuY2FsbFNldFRhcmdldGluZ0JpZGRlcihiaWQuYWRhcHRlckNvZGUgfHwgYmlkLmJpZGRlciwgYmlkKTtcbiAgfVxuXG4gIGV2ZW50cy5vbihDT05TVEFOVFMuRVZFTlRTLlNFQVRfTk9OX0JJRCwgKGV2ZW50KSA9PiB7XG4gICAgaWYgKGV2ZW50LmF1Y3Rpb25JZCA9PT0gX2F1Y3Rpb25JZCkge1xuICAgICAgYWRkTm9uQmlkcyhldmVudC5zZWF0bm9uYmlkKVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBhZGRCaWRSZWNlaXZlZCxcbiAgICBhZGRCaWRSZWplY3RlZCxcbiAgICBhZGROb0JpZCxcbiAgICBjYWxsQmlkcyxcbiAgICBhZGRXaW5uaW5nQmlkLFxuICAgIHNldEJpZFRhcmdldGluZyxcbiAgICBnZXRXaW5uaW5nQmlkczogKCkgPT4gX3dpbm5pbmdCaWRzLFxuICAgIGdldEF1Y3Rpb25TdGFydDogKCkgPT4gX2F1Y3Rpb25TdGFydCxcbiAgICBnZXRBdWN0aW9uRW5kOiAoKSA9PiBfYXVjdGlvbkVuZCxcbiAgICBnZXRUaW1lb3V0OiAoKSA9PiBfdGltZW91dCxcbiAgICBnZXRBdWN0aW9uSWQ6ICgpID0+IF9hdWN0aW9uSWQsXG4gICAgZ2V0QXVjdGlvblN0YXR1czogKCkgPT4gX2F1Y3Rpb25TdGF0dXMsXG4gICAgZ2V0QWRVbml0czogKCkgPT4gX2FkVW5pdHMsXG4gICAgZ2V0QWRVbml0Q29kZXM6ICgpID0+IF9hZFVuaXRDb2RlcyxcbiAgICBnZXRCaWRSZXF1ZXN0czogKCkgPT4gX2JpZGRlclJlcXVlc3RzLFxuICAgIGdldEJpZHNSZWNlaXZlZDogKCkgPT4gX2JpZHNSZWNlaXZlZCxcbiAgICBnZXROb0JpZHM6ICgpID0+IF9ub0JpZHMsXG4gICAgZ2V0Tm9uQmlkczogKCkgPT4gX25vbkJpZHMsXG4gICAgZ2V0RlBEOiAoKSA9PiBvcnRiMkZyYWdtZW50cyxcbiAgICBnZXRNZXRyaWNzOiAoKSA9PiBtZXRyaWNzLFxuICAgIGVuZDogZG9uZS5wcm9taXNlXG4gIH07XG59XG5cbi8qKlxuICogSG9vayBpbnRvIHRoaXMgdG8gaW50ZXJjZXB0IGJpZHMgYmVmb3JlIHRoZXkgYXJlIGFkZGVkIHRvIGFuIGF1Y3Rpb24uXG4gKlxuICogQHBhcmFtIGFkVW5pdENvZGVcbiAqIEBwYXJhbSBiaWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oU3RyaW5nKX0gcmVqZWN0OiBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCByZWplY3RzIGBiaWRgIHdpdGggdGhlIGdpdmVuIHJlYXNvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGFkZEJpZFJlc3BvbnNlID0gaG9vaygnc3luYycsIGZ1bmN0aW9uKGFkVW5pdENvZGUsIGJpZCwgcmVqZWN0KSB7XG4gIHRoaXMuZGlzcGF0Y2guY2FsbChudWxsLCBhZFVuaXRDb2RlLCBiaWQpO1xufSwgJ2FkZEJpZFJlc3BvbnNlJyk7XG5cbmV4cG9ydCBjb25zdCBhZGRCaWRkZXJSZXF1ZXN0cyA9IGhvb2soJ3N5bmMnLCBmdW5jdGlvbihiaWRkZXJSZXF1ZXN0cykge1xuICB0aGlzLmRpc3BhdGNoLmNhbGwodGhpcy5jb250ZXh0LCBiaWRkZXJSZXF1ZXN0cyk7XG59LCAnYWRkQmlkZGVyUmVxdWVzdHMnKTtcblxuZXhwb3J0IGNvbnN0IGJpZHNCYWNrQ2FsbGJhY2sgPSBob29rKCdhc3luYycsIGZ1bmN0aW9uIChhZFVuaXRzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59LCAnYmlkc0JhY2tDYWxsYmFjaycpO1xuXG5leHBvcnQgZnVuY3Rpb24gYXVjdGlvbkNhbGxiYWNrcyhhdWN0aW9uRG9uZSwgYXVjdGlvbkluc3RhbmNlLCB7aW5kZXggPSBhdWN0aW9uTWFuYWdlci5pbmRleH0gPSB7fSkge1xuICBsZXQgb3V0c3RhbmRpbmdCaWRzQWRkZWQgPSAwO1xuICBsZXQgYWxsQWRhcHRlckNhbGxlZERvbmUgPSBmYWxzZTtcbiAgbGV0IGJpZGRlclJlcXVlc3RzRG9uZSA9IG5ldyBTZXQoKTtcbiAgbGV0IGJpZFJlc3BvbnNlTWFwID0ge307XG4gIGNvbnN0IHJlYWR5ID0ge307XG5cbiAgZnVuY3Rpb24gd2FpdEZvcihyZXF1ZXN0SWQsIHJlc3VsdCkge1xuICAgIGlmIChyZWFkeVtyZXF1ZXN0SWRdID09IG51bGwpIHtcbiAgICAgIHJlYWR5W3JlcXVlc3RJZF0gPSBHcmVlZHlQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVhZHlbcmVxdWVzdElkXSA9IHJlYWR5W3JlcXVlc3RJZF0udGhlbigoKSA9PiBHcmVlZHlQcm9taXNlLnJlc29sdmUocmVzdWx0KS5jYXRjaCgoKSA9PiB7fSkpXG4gIH1cblxuICBmdW5jdGlvbiBndWFyZChiaWRkZXJSZXF1ZXN0LCBmbikge1xuICAgIGxldCB0aW1lb3V0ID0gYmlkZGVyUmVxdWVzdC50aW1lb3V0O1xuICAgIGlmICh0aW1lb3V0ID09IG51bGwgfHwgdGltZW91dCA+IGF1Y3Rpb25JbnN0YW5jZS5nZXRUaW1lb3V0KCkpIHtcbiAgICAgIHRpbWVvdXQgPSBhdWN0aW9uSW5zdGFuY2UuZ2V0VGltZW91dCgpO1xuICAgIH1cbiAgICBjb25zdCB0aW1lUmVtYWluaW5nID0gYXVjdGlvbkluc3RhbmNlLmdldEF1Y3Rpb25TdGFydCgpICsgdGltZW91dCAtIERhdGUubm93KCk7XG4gICAgY29uc3Qgd2FpdCA9IHJlYWR5W2JpZGRlclJlcXVlc3QuYmlkZGVyUmVxdWVzdElkXTtcbiAgICBjb25zdCBvcnBoYW5XYWl0ID0gcmVhZHlbJyddOyAvLyBhbHNvIHdhaXQgZm9yIFwib3JwaGFuXCIgcmVzcG9uc2VzIHRoYXQgYXJlIG5vdCBhc3NvY2lhdGVkIHdpdGggYW55IHJlcXVlc3RcbiAgICBpZiAoKHdhaXQgIT0gbnVsbCB8fCBvcnBoYW5XYWl0ICE9IG51bGwpICYmIHRpbWVSZW1haW5pbmcgPiAwKSB7XG4gICAgICBHcmVlZHlQcm9taXNlLnJhY2UoW1xuICAgICAgICBHcmVlZHlQcm9taXNlLnRpbWVvdXQodGltZVJlbWFpbmluZyksXG4gICAgICAgIEdyZWVkeVByb21pc2UucmVzb2x2ZShvcnBoYW5XYWl0KS50aGVuKCgpID0+IHdhaXQpXG4gICAgICBdKS50aGVuKGZuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm4oKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZnRlckJpZEFkZGVkKCkge1xuICAgIG91dHN0YW5kaW5nQmlkc0FkZGVkLS07XG4gICAgaWYgKGFsbEFkYXB0ZXJDYWxsZWREb25lICYmIG91dHN0YW5kaW5nQmlkc0FkZGVkID09PSAwKSB7XG4gICAgICBhdWN0aW9uRG9uZSgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQmlkUmVzcG9uc2UoYWRVbml0Q29kZSwgYmlkLCBoYW5kbGVyKSB7XG4gICAgYmlkUmVzcG9uc2VNYXBbYmlkLnJlcXVlc3RJZF0gPSB0cnVlO1xuICAgIGFkZENvbW1vblJlc3BvbnNlUHJvcGVydGllcyhiaWQsIGFkVW5pdENvZGUpXG4gICAgb3V0c3RhbmRpbmdCaWRzQWRkZWQrKztcbiAgICByZXR1cm4gaGFuZGxlcihhZnRlckJpZEFkZGVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFjY2VwdEJpZFJlc3BvbnNlKGFkVW5pdENvZGUsIGJpZCkge1xuICAgIGhhbmRsZUJpZFJlc3BvbnNlKGFkVW5pdENvZGUsIGJpZCwgKGRvbmUpID0+IHtcbiAgICAgIGxldCBiaWRSZXNwb25zZSA9IGdldFByZXBhcmVkQmlkRm9yQXVjdGlvbihiaWQpO1xuXG4gICAgICBpZiAoRkVBVFVSRVMuVklERU8gJiYgYmlkUmVzcG9uc2UubWVkaWFUeXBlID09PSBWSURFTykge1xuICAgICAgICB0cnlBZGRWaWRlb0JpZChhdWN0aW9uSW5zdGFuY2UsIGJpZFJlc3BvbnNlLCBkb25lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChGRUFUVVJFUy5OQVRJVkUgJiYgYmlkUmVzcG9uc2UubmF0aXZlICE9IG51bGwgJiYgdHlwZW9mIGJpZFJlc3BvbnNlLm5hdGl2ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAvLyBOT1RFOiBhdWdtZW50IGJpZFJlc3BvbnNlLm5hdGl2ZSBldmVuIGlmIGJpZFJlc3BvbnNlLm1lZGlhVHlwZSAhPT0gTkFUSVZFOyBpdCdzIHBvc3NpYmxlXG4gICAgICAgICAgLy8gdG8gdHJlYXQgYmFubmVyIHJlc3BvbnNlcyBhcyBuYXRpdmVcbiAgICAgICAgICBhZGRMZWdhY3lGaWVsZHNJZk5lZWRlZChiaWRSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkQmlkVG9BdWN0aW9uKGF1Y3Rpb25JbnN0YW5jZSwgYmlkUmVzcG9uc2UpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWplY3RCaWRSZXNwb25zZShhZFVuaXRDb2RlLCBiaWQsIHJlYXNvbikge1xuICAgIHJldHVybiBoYW5kbGVCaWRSZXNwb25zZShhZFVuaXRDb2RlLCBiaWQsIChkb25lKSA9PiB7XG4gICAgICBiaWQucmVqZWN0aW9uUmVhc29uID0gcmVhc29uO1xuICAgICAgbG9nV2FybihgQmlkIGZyb20gJHtiaWQuYmlkZGVyIHx8ICd1bmtub3duIGJpZGRlcid9IHdhcyByZWplY3RlZDogJHtyZWFzb259YCwgYmlkKVxuICAgICAgZXZlbnRzLmVtaXQoQ09OU1RBTlRTLkVWRU5UUy5CSURfUkVKRUNURUQsIGJpZCk7XG4gICAgICBhdWN0aW9uSW5zdGFuY2UuYWRkQmlkUmVqZWN0ZWQoYmlkKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gYWRhcHRlckRvbmUoKSB7XG4gICAgbGV0IGJpZGRlclJlcXVlc3QgPSB0aGlzO1xuICAgIGxldCBiaWRkZXJSZXF1ZXN0cyA9IGF1Y3Rpb25JbnN0YW5jZS5nZXRCaWRSZXF1ZXN0cygpO1xuICAgIGNvbnN0IGF1Y3Rpb25PcHRpb25zQ29uZmlnID0gY29uZmlnLmdldENvbmZpZygnYXVjdGlvbk9wdGlvbnMnKTtcblxuICAgIGJpZGRlclJlcXVlc3RzRG9uZS5hZGQoYmlkZGVyUmVxdWVzdCk7XG5cbiAgICBpZiAoYXVjdGlvbk9wdGlvbnNDb25maWcgJiYgIWlzRW1wdHkoYXVjdGlvbk9wdGlvbnNDb25maWcpKSB7XG4gICAgICBjb25zdCBzZWNvbmRhcnlCaWRkZXJzID0gYXVjdGlvbk9wdGlvbnNDb25maWcuc2Vjb25kYXJ5QmlkZGVycztcbiAgICAgIGlmIChzZWNvbmRhcnlCaWRkZXJzICYmICFiaWRkZXJSZXF1ZXN0cy5ldmVyeShiaWRkZXIgPT4gaW5jbHVkZXMoc2Vjb25kYXJ5QmlkZGVycywgYmlkZGVyLmJpZGRlckNvZGUpKSkge1xuICAgICAgICBiaWRkZXJSZXF1ZXN0cyA9IGJpZGRlclJlcXVlc3RzLmZpbHRlcihyZXF1ZXN0ID0+ICFpbmNsdWRlcyhzZWNvbmRhcnlCaWRkZXJzLCByZXF1ZXN0LmJpZGRlckNvZGUpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhbGxBZGFwdGVyQ2FsbGVkRG9uZSA9IGJpZGRlclJlcXVlc3RzLmV2ZXJ5KGJpZGRlclJlcXVlc3QgPT4gYmlkZGVyUmVxdWVzdHNEb25lLmhhcyhiaWRkZXJSZXF1ZXN0KSk7XG5cbiAgICBiaWRkZXJSZXF1ZXN0LmJpZHMuZm9yRWFjaChiaWQgPT4ge1xuICAgICAgaWYgKCFiaWRSZXNwb25zZU1hcFtiaWQuYmlkSWRdKSB7XG4gICAgICAgIGF1Y3Rpb25JbnN0YW5jZS5hZGROb0JpZChiaWQpO1xuICAgICAgICBldmVudHMuZW1pdChDT05TVEFOVFMuRVZFTlRTLk5PX0JJRCwgYmlkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChhbGxBZGFwdGVyQ2FsbGVkRG9uZSAmJiBvdXRzdGFuZGluZ0JpZHNBZGRlZCA9PT0gMCkge1xuICAgICAgYXVjdGlvbkRvbmUoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGFkZEJpZFJlc3BvbnNlOiAoZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gYWRkQmlkKGFkVW5pdENvZGUsIGJpZCkge1xuICAgICAgICBjb25zdCBiaWRkZXJSZXF1ZXN0ID0gaW5kZXguZ2V0QmlkZGVyUmVxdWVzdChiaWQpO1xuICAgICAgICB3YWl0Rm9yKChiaWRkZXJSZXF1ZXN0ICYmIGJpZGRlclJlcXVlc3QuYmlkZGVyUmVxdWVzdElkKSB8fCAnJywgYWRkQmlkUmVzcG9uc2UuY2FsbCh7XG4gICAgICAgICAgZGlzcGF0Y2g6IGFjY2VwdEJpZFJlc3BvbnNlLFxuICAgICAgICB9LCBhZFVuaXRDb2RlLCBiaWQsICgoKSA9PiB7XG4gICAgICAgICAgbGV0IHJlamVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIChyZWFzb24pID0+IHtcbiAgICAgICAgICAgIGlmICghcmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgcmVqZWN0QmlkUmVzcG9uc2UoYWRVbml0Q29kZSwgYmlkLCByZWFzb24pO1xuICAgICAgICAgICAgICByZWplY3RlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KSgpKSk7XG4gICAgICB9XG4gICAgICBhZGRCaWQucmVqZWN0ID0gcmVqZWN0QmlkUmVzcG9uc2U7XG4gICAgICByZXR1cm4gYWRkQmlkO1xuICAgIH0pKCksXG4gICAgYWRhcHRlckRvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGd1YXJkKHRoaXMsIGFkYXB0ZXJEb25lLmJpbmQodGhpcykpXG4gICAgfVxuICB9XG59XG5cbi8vIEFkZCBhIGJpZCB0byB0aGUgYXVjdGlvbi5cbmV4cG9ydCBmdW5jdGlvbiBhZGRCaWRUb0F1Y3Rpb24oYXVjdGlvbkluc3RhbmNlLCBiaWRSZXNwb25zZSkge1xuICBzZXR1cEJpZFRhcmdldGluZyhiaWRSZXNwb25zZSk7XG5cbiAgdXNlTWV0cmljcyhiaWRSZXNwb25zZS5tZXRyaWNzKS50aW1lU2luY2UoJ2FkZEJpZFJlc3BvbnNlJywgJ2FkZEJpZFJlc3BvbnNlLnRvdGFsJyk7XG4gIGF1Y3Rpb25JbnN0YW5jZS5hZGRCaWRSZWNlaXZlZChiaWRSZXNwb25zZSk7XG4gIGV2ZW50cy5lbWl0KENPTlNUQU5UUy5FVkVOVFMuQklEX1JFU1BPTlNFLCBiaWRSZXNwb25zZSk7XG59XG5cbi8vIFZpZGVvIGJpZHMgbWF5IGZhaWwgaWYgdGhlIGNhY2hlIGlzIGRvd24sIG9yIHRoZXJlJ3MgdHJvdWJsZSBvbiB0aGUgbmV0d29yay5cbmZ1bmN0aW9uIHRyeUFkZFZpZGVvQmlkKGF1Y3Rpb25JbnN0YW5jZSwgYmlkUmVzcG9uc2UsIGFmdGVyQmlkQWRkZWQsIHtpbmRleCA9IGF1Y3Rpb25NYW5hZ2VyLmluZGV4fSA9IHt9KSB7XG4gIGxldCBhZGRCaWQgPSB0cnVlO1xuXG4gIGNvbnN0IHZpZGVvTWVkaWFUeXBlID0gZGVlcEFjY2VzcyhcbiAgICBpbmRleC5nZXRNZWRpYVR5cGVzKHtcbiAgICAgIHJlcXVlc3RJZDogYmlkUmVzcG9uc2Uub3JpZ2luYWxSZXF1ZXN0SWQgfHwgYmlkUmVzcG9uc2UucmVxdWVzdElkLFxuICAgICAgdHJhbnNhY3Rpb25JZDogYmlkUmVzcG9uc2UudHJhbnNhY3Rpb25JZFxuICAgIH0pLCAndmlkZW8nKTtcbiAgY29uc3QgY29udGV4dCA9IHZpZGVvTWVkaWFUeXBlICYmIGRlZXBBY2Nlc3ModmlkZW9NZWRpYVR5cGUsICdjb250ZXh0Jyk7XG4gIGNvbnN0IHVzZUNhY2hlS2V5ID0gdmlkZW9NZWRpYVR5cGUgJiYgZGVlcEFjY2Vzcyh2aWRlb01lZGlhVHlwZSwgJ3VzZUNhY2hlS2V5Jyk7XG5cbiAgaWYgKGNvbmZpZy5nZXRDb25maWcoJ2NhY2hlLnVybCcpICYmICh1c2VDYWNoZUtleSB8fCBjb250ZXh0ICE9PSBPVVRTVFJFQU0pKSB7XG4gICAgaWYgKCFiaWRSZXNwb25zZS52aWRlb0NhY2hlS2V5IHx8IGNvbmZpZy5nZXRDb25maWcoJ2NhY2hlLmlnbm9yZUJpZGRlckNhY2hlS2V5JykpIHtcbiAgICAgIGFkZEJpZCA9IGZhbHNlO1xuICAgICAgY2FsbFByZWJpZENhY2hlKGF1Y3Rpb25JbnN0YW5jZSwgYmlkUmVzcG9uc2UsIGFmdGVyQmlkQWRkZWQsIHZpZGVvTWVkaWFUeXBlKTtcbiAgICB9IGVsc2UgaWYgKCFiaWRSZXNwb25zZS52YXN0VXJsKSB7XG4gICAgICBsb2dFcnJvcigndmlkZW9DYWNoZUtleSBzcGVjaWZpZWQgYnV0IG5vdCByZXF1aXJlZCB2YXN0VXJsIGZvciB2aWRlbyBiaWQnKTtcbiAgICAgIGFkZEJpZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoYWRkQmlkKSB7XG4gICAgYWRkQmlkVG9BdWN0aW9uKGF1Y3Rpb25JbnN0YW5jZSwgYmlkUmVzcG9uc2UpO1xuICAgIGFmdGVyQmlkQWRkZWQoKTtcbiAgfVxufVxuXG4vLyBOYXRpdmUgYmlkIHJlc3BvbnNlIG1pZ2h0IGJlIGluIG9ydGIyIGZvcm1hdCAtIGFkZHMgbGVnYWN5IGZpZWxkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5jb25zdCBhZGRMZWdhY3lGaWVsZHNJZk5lZWRlZCA9IChiaWRSZXNwb25zZSkgPT4ge1xuICBjb25zdCBuYXRpdmVPcnRiUmVxdWVzdCA9IGF1Y3Rpb25NYW5hZ2VyLmluZGV4LmdldEFkVW5pdChiaWRSZXNwb25zZSk/Lm5hdGl2ZU9ydGJSZXF1ZXN0O1xuICBjb25zdCBuYXRpdmVPcnRiUmVzcG9uc2UgPSBiaWRSZXNwb25zZS5uYXRpdmU/Lm9ydGJcblxuICBpZiAobmF0aXZlT3J0YlJlcXVlc3QgJiYgbmF0aXZlT3J0YlJlc3BvbnNlKSB7XG4gICAgY29uc3QgbGVnYWN5UmVzcG9uc2UgPSB0b0xlZ2FjeVJlc3BvbnNlKG5hdGl2ZU9ydGJSZXNwb25zZSwgbmF0aXZlT3J0YlJlcXVlc3QpO1xuICAgIE9iamVjdC5hc3NpZ24oYmlkUmVzcG9uc2UubmF0aXZlLCBsZWdhY3lSZXNwb25zZSk7XG4gIH1cbn1cblxuY29uc3QgX3N0b3JlSW5DYWNoZSA9IChiYXRjaCkgPT4ge1xuICBzdG9yZShiYXRjaC5tYXAoZW50cnkgPT4gZW50cnkuYmlkUmVzcG9uc2UpLCBmdW5jdGlvbiAoZXJyb3IsIGNhY2hlSWRzKSB7XG4gICAgY2FjaGVJZHMuZm9yRWFjaCgoY2FjaGVJZCwgaSkgPT4ge1xuICAgICAgY29uc3QgeyBhdWN0aW9uSW5zdGFuY2UsIGJpZFJlc3BvbnNlLCBhZnRlckJpZEFkZGVkIH0gPSBiYXRjaFtpXTtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBsb2dXYXJuKGBGYWlsZWQgdG8gc2F2ZSB0byB0aGUgdmlkZW8gY2FjaGU6ICR7ZXJyb3J9LiBWaWRlbyBiaWQgbXVzdCBiZSBkaXNjYXJkZWQuYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY2FjaGVJZC51dWlkID09PSAnJykge1xuICAgICAgICAgIGxvZ1dhcm4oYFN1cHBsaWVkIHZpZGVvIGNhY2hlIGtleSB3YXMgYWxyZWFkeSBpbiB1c2UgYnkgUHJlYmlkIENhY2hlOyBjYWNoaW5nIGF0dGVtcHQgd2FzIHJlamVjdGVkLiBWaWRlbyBiaWQgbXVzdCBiZSBkaXNjYXJkZWQuYCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmlkUmVzcG9uc2UudmlkZW9DYWNoZUtleSA9IGNhY2hlSWQudXVpZDtcbiAgICAgICAgICBpZiAoIWJpZFJlc3BvbnNlLnZhc3RVcmwpIHtcbiAgICAgICAgICAgIGJpZFJlc3BvbnNlLnZhc3RVcmwgPSBnZXRDYWNoZVVybChiaWRSZXNwb25zZS52aWRlb0NhY2hlS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWRkQmlkVG9BdWN0aW9uKGF1Y3Rpb25JbnN0YW5jZSwgYmlkUmVzcG9uc2UpO1xuICAgICAgICAgIGFmdGVyQmlkQWRkZWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn07XG5cbmNvbnN0IHN0b3JlSW5DYWNoZSA9IEZFQVRVUkVTLlZJREVPID8gX3N0b3JlSW5DYWNoZSA6ICgpID0+IHt9O1xuXG5sZXQgYmF0Y2hTaXplLCBiYXRjaFRpbWVvdXQ7XG5jb25maWcuZ2V0Q29uZmlnKCdjYWNoZScsIChjYWNoZUNvbmZpZykgPT4ge1xuICBiYXRjaFNpemUgPSB0eXBlb2YgY2FjaGVDb25maWcuY2FjaGUuYmF0Y2hTaXplID09PSAnbnVtYmVyJyAmJiBjYWNoZUNvbmZpZy5jYWNoZS5iYXRjaFNpemUgPiAwXG4gICAgPyBjYWNoZUNvbmZpZy5jYWNoZS5iYXRjaFNpemVcbiAgICA6IDE7XG4gIGJhdGNoVGltZW91dCA9IHR5cGVvZiBjYWNoZUNvbmZpZy5jYWNoZS5iYXRjaFRpbWVvdXQgPT09ICdudW1iZXInICYmIGNhY2hlQ29uZmlnLmNhY2hlLmJhdGNoVGltZW91dCA+IDBcbiAgICA/IGNhY2hlQ29uZmlnLmNhY2hlLmJhdGNoVGltZW91dFxuICAgIDogMDtcbn0pO1xuXG5leHBvcnQgY29uc3QgYmF0Y2hpbmdDYWNoZSA9ICh0aW1lb3V0ID0gc2V0VGltZW91dCwgY2FjaGUgPSBzdG9yZUluQ2FjaGUpID0+IHtcbiAgbGV0IGJhdGNoZXMgPSBbW11dO1xuICBsZXQgZGVib3VuY2luZyA9IGZhbHNlO1xuICBjb25zdCBub1RpbWVvdXQgPSBjYiA9PiBjYigpO1xuXG4gIHJldHVybiBmdW5jdGlvbihhdWN0aW9uSW5zdGFuY2UsIGJpZFJlc3BvbnNlLCBhZnRlckJpZEFkZGVkKSB7XG4gICAgY29uc3QgYmF0Y2hGdW5jID0gYmF0Y2hUaW1lb3V0ID4gMCA/IHRpbWVvdXQgOiBub1RpbWVvdXQ7XG4gICAgaWYgKGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS5sZW5ndGggPj0gYmF0Y2hTaXplKSB7XG4gICAgICBiYXRjaGVzLnB1c2goW10pO1xuICAgIH1cblxuICAgIGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS5wdXNoKHthdWN0aW9uSW5zdGFuY2UsIGJpZFJlc3BvbnNlLCBhZnRlckJpZEFkZGVkfSk7XG5cbiAgICBpZiAoIWRlYm91bmNpbmcpIHtcbiAgICAgIGRlYm91bmNpbmcgPSB0cnVlO1xuICAgICAgYmF0Y2hGdW5jKCgpID0+IHtcbiAgICAgICAgYmF0Y2hlcy5mb3JFYWNoKGNhY2hlKTtcbiAgICAgICAgYmF0Y2hlcyA9IFtbXV07XG4gICAgICAgIGRlYm91bmNpbmcgPSBmYWxzZTtcbiAgICAgIH0sIGJhdGNoVGltZW91dCk7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBiYXRjaEFuZFN0b3JlID0gYmF0Y2hpbmdDYWNoZSgpO1xuXG5leHBvcnQgY29uc3QgY2FsbFByZWJpZENhY2hlID0gaG9vaygnYXN5bmMnLCBmdW5jdGlvbihhdWN0aW9uSW5zdGFuY2UsIGJpZFJlc3BvbnNlLCBhZnRlckJpZEFkZGVkLCB2aWRlb01lZGlhVHlwZSkge1xuICBiYXRjaEFuZFN0b3JlKGF1Y3Rpb25JbnN0YW5jZSwgYmlkUmVzcG9uc2UsIGFmdGVyQmlkQWRkZWQpO1xufSwgJ2NhbGxQcmViaWRDYWNoZScpO1xuXG4vKipcbiAqIEF1Z21lbnQgYGJpZFJlc3BvbnNlYCB3aXRoIHByb3BlcnRpZXMgdGhhdCBhcmUgY29tbW9uIGFjcm9zcyBhbGwgYmlkcyAtIGluY2x1ZGluZyByZWplY3RlZCBiaWRzLlxuICpcbiAqL1xuZnVuY3Rpb24gYWRkQ29tbW9uUmVzcG9uc2VQcm9wZXJ0aWVzKGJpZFJlc3BvbnNlLCBhZFVuaXRDb2RlLCB7aW5kZXggPSBhdWN0aW9uTWFuYWdlci5pbmRleH0gPSB7fSkge1xuICBjb25zdCBiaWRkZXJSZXF1ZXN0ID0gaW5kZXguZ2V0QmlkZGVyUmVxdWVzdChiaWRSZXNwb25zZSk7XG4gIGNvbnN0IGFkVW5pdCA9IGluZGV4LmdldEFkVW5pdChiaWRSZXNwb25zZSk7XG4gIGNvbnN0IHN0YXJ0ID0gKGJpZGRlclJlcXVlc3QgJiYgYmlkZGVyUmVxdWVzdC5zdGFydCkgfHwgYmlkUmVzcG9uc2UucmVxdWVzdFRpbWVzdGFtcDtcblxuICBPYmplY3QuYXNzaWduKGJpZFJlc3BvbnNlLCB7XG4gICAgcmVzcG9uc2VUaW1lc3RhbXA6IGJpZFJlc3BvbnNlLnJlc3BvbnNlVGltZXN0YW1wIHx8IHRpbWVzdGFtcCgpLFxuICAgIHJlcXVlc3RUaW1lc3RhbXA6IGJpZFJlc3BvbnNlLnJlcXVlc3RUaW1lc3RhbXAgfHwgc3RhcnQsXG4gICAgY3BtOiBwYXJzZUZsb2F0KGJpZFJlc3BvbnNlLmNwbSkgfHwgMCxcbiAgICBiaWRkZXI6IGJpZFJlc3BvbnNlLmJpZGRlciB8fCBiaWRSZXNwb25zZS5iaWRkZXJDb2RlLFxuICAgIGFkVW5pdENvZGVcbiAgfSk7XG5cbiAgaWYgKGFkVW5pdD8udHRsQnVmZmVyICE9IG51bGwpIHtcbiAgICBiaWRSZXNwb25zZS50dGxCdWZmZXIgPSBhZFVuaXQudHRsQnVmZmVyO1xuICB9XG5cbiAgYmlkUmVzcG9uc2UudGltZVRvUmVzcG9uZCA9IGJpZFJlc3BvbnNlLnJlc3BvbnNlVGltZXN0YW1wIC0gYmlkUmVzcG9uc2UucmVxdWVzdFRpbWVzdGFtcDtcbn1cblxuLyoqXG4gKiBBZGQgYWRkaXRpb25hbCBiaWQgcmVzcG9uc2UgcHJvcGVydGllcyB0aGF0IGFyZSB1bml2ZXJzYWwgZm9yIGFsbCBfYWNjZXB0ZWRfIGJpZHMuXG4gKi9cbmZ1bmN0aW9uIGdldFByZXBhcmVkQmlkRm9yQXVjdGlvbihiaWQsIHtpbmRleCA9IGF1Y3Rpb25NYW5hZ2VyLmluZGV4fSA9IHt9KSB7XG4gIC8vIExldCBsaXN0ZW5lcnMga25vdyB0aGF0IG5vdyBpcyB0aGUgdGltZSB0byBhZGp1c3QgdGhlIGJpZCwgaWYgdGhleSB3YW50IHRvLlxuICAvL1xuICAvLyBDQVJFRlVMOiBQdWJsaXNoZXJzIHJlbHkgb24gY2VydGFpbiBiaWQgcHJvcGVydGllcyB0byBiZSBhdmFpbGFibGUgKGxpa2UgY3BtKSxcbiAgLy8gYnV0IG90aGVycyB0byBub3QgYmUgc2V0IHlldCAobGlrZSBwcmljZVN0cmluZ3MpLiBTZWUgIzEzNzIgYW5kICMxMzg5LlxuICBldmVudHMuZW1pdChDT05TVEFOVFMuRVZFTlRTLkJJRF9BREpVU1RNRU5ULCBiaWQpO1xuXG4gIC8vIGEgcHVibGlzaGVyLWRlZmluZWQgcmVuZGVyZXIgY2FuIGJlIHVzZWQgdG8gcmVuZGVyIGJpZHNcbiAgY29uc3QgYmlkUmVuZGVyZXIgPSBpbmRleC5nZXRCaWRSZXF1ZXN0KGJpZCk/LnJlbmRlcmVyIHx8IGluZGV4LmdldEFkVW5pdChiaWQpLnJlbmRlcmVyO1xuXG4gIC8vIGEgcHVibGlzaGVyIGNhbiBhbHNvIGRlZmluZSBhIHJlbmRlcmVyIGZvciBhIG1lZGlhVHlwZVxuICBjb25zdCBiaWRPYmplY3RNZWRpYVR5cGUgPSBiaWQubWVkaWFUeXBlO1xuICBjb25zdCBtZWRpYVR5cGVzID0gaW5kZXguZ2V0TWVkaWFUeXBlcyhiaWQpO1xuICBjb25zdCBiaWRNZWRpYVR5cGUgPSBtZWRpYVR5cGVzICYmIG1lZGlhVHlwZXNbYmlkT2JqZWN0TWVkaWFUeXBlXTtcblxuICB2YXIgbWVkaWFUeXBlUmVuZGVyZXIgPSBiaWRNZWRpYVR5cGUgJiYgYmlkTWVkaWFUeXBlLnJlbmRlcmVyO1xuXG4gIHZhciByZW5kZXJlciA9IG51bGw7XG5cbiAgLy8gdGhlIHJlbmRlcmVyIGZvciB0aGUgbWVkaWFUeXBlIHRha2VzIHByZWNlbmRlbmNlXG4gIGlmIChtZWRpYVR5cGVSZW5kZXJlciAmJiBtZWRpYVR5cGVSZW5kZXJlci51cmwgJiYgbWVkaWFUeXBlUmVuZGVyZXIucmVuZGVyICYmICEobWVkaWFUeXBlUmVuZGVyZXIuYmFja3VwT25seSA9PT0gdHJ1ZSAmJiBiaWQucmVuZGVyZXIpKSB7XG4gICAgcmVuZGVyZXIgPSBtZWRpYVR5cGVSZW5kZXJlcjtcbiAgfSBlbHNlIGlmIChiaWRSZW5kZXJlciAmJiBiaWRSZW5kZXJlci51cmwgJiYgYmlkUmVuZGVyZXIucmVuZGVyICYmICEoYmlkUmVuZGVyZXIuYmFja3VwT25seSA9PT0gdHJ1ZSAmJiBiaWQucmVuZGVyZXIpKSB7XG4gICAgcmVuZGVyZXIgPSBiaWRSZW5kZXJlcjtcbiAgfVxuXG4gIGlmIChyZW5kZXJlcikge1xuICAgIC8vIGJlIGF3YXJlLCBhbiBhZGFwdGVyIGNvdWxkIGFscmVhZHkgaGF2ZSBpbnN0YWxsZWQgdGhlIGJpZGRlciwgaW4gd2hpY2ggY2FzZSB0aGlzIG92ZXJ3cml0ZSdzIHRoZSBleGlzdGluZyBhZGFwdGVyXG4gICAgYmlkLnJlbmRlcmVyID0gUmVuZGVyZXIuaW5zdGFsbCh7IHVybDogcmVuZGVyZXIudXJsLCBjb25maWc6IHJlbmRlcmVyLm9wdGlvbnMgfSk7Ly8gcmVuYW1lIG9wdGlvbnMgdG8gY29uZmlnLCB0byBtYWtlIGl0IGNvbnNpc3RlbnQ/XG4gICAgYmlkLnJlbmRlcmVyLnNldFJlbmRlcihyZW5kZXJlci5yZW5kZXIpO1xuICB9XG5cbiAgLy8gVXNlIHRoZSBjb25maWcgdmFsdWUgJ21lZGlhVHlwZUdyYW51bGFyaXR5JyBpZiBpdCBoYXMgYmVlbiBkZWZpbmVkIGZvciBtZWRpYVR5cGUsIGVsc2UgdXNlICdjdXN0b21QcmljZUJ1Y2tldCdcbiAgY29uc3QgbWVkaWFUeXBlR3JhbnVsYXJpdHkgPSBnZXRNZWRpYVR5cGVHcmFudWxhcml0eShiaWQubWVkaWFUeXBlLCBtZWRpYVR5cGVzLCBjb25maWcuZ2V0Q29uZmlnKCdtZWRpYVR5cGVQcmljZUdyYW51bGFyaXR5JykpO1xuICBjb25zdCBwcmljZVN0cmluZ3NPYmogPSBnZXRQcmljZUJ1Y2tldFN0cmluZyhcbiAgICBiaWQuY3BtLFxuICAgICh0eXBlb2YgbWVkaWFUeXBlR3JhbnVsYXJpdHkgPT09ICdvYmplY3QnKSA/IG1lZGlhVHlwZUdyYW51bGFyaXR5IDogY29uZmlnLmdldENvbmZpZygnY3VzdG9tUHJpY2VCdWNrZXQnKSxcbiAgICBjb25maWcuZ2V0Q29uZmlnKCdjdXJyZW5jeS5ncmFudWxhcml0eU11bHRpcGxpZXInKVxuICApO1xuICBiaWQucGJMZyA9IHByaWNlU3RyaW5nc09iai5sb3c7XG4gIGJpZC5wYk1nID0gcHJpY2VTdHJpbmdzT2JqLm1lZDtcbiAgYmlkLnBiSGcgPSBwcmljZVN0cmluZ3NPYmouaGlnaDtcbiAgYmlkLnBiQWcgPSBwcmljZVN0cmluZ3NPYmouYXV0bztcbiAgYmlkLnBiRGcgPSBwcmljZVN0cmluZ3NPYmouZGVuc2U7XG4gIGJpZC5wYkNnID0gcHJpY2VTdHJpbmdzT2JqLmN1c3RvbTtcblxuICByZXR1cm4gYmlkO1xufVxuXG5mdW5jdGlvbiBzZXR1cEJpZFRhcmdldGluZyhiaWRPYmplY3QpIHtcbiAgbGV0IGtleVZhbHVlcztcbiAgY29uc3QgY3BtQ2hlY2sgPSAoYmlkZGVyU2V0dGluZ3MuZ2V0KGJpZE9iamVjdC5iaWRkZXJDb2RlLCAnYWxsb3daZXJvQ3BtQmlkcycpID09PSB0cnVlKSA/IGJpZE9iamVjdC5jcG0gPj0gMCA6IGJpZE9iamVjdC5jcG0gPiAwO1xuICBpZiAoYmlkT2JqZWN0LmJpZGRlckNvZGUgJiYgKGNwbUNoZWNrIHx8IGJpZE9iamVjdC5kZWFsSWQpKSB7XG4gICAga2V5VmFsdWVzID0gZ2V0S2V5VmFsdWVUYXJnZXRpbmdQYWlycyhiaWRPYmplY3QuYmlkZGVyQ29kZSwgYmlkT2JqZWN0KTtcbiAgfVxuXG4gIC8vIHVzZSBhbnkgdGFyZ2V0aW5nIHByb3ZpZGVkIGFzIGRlZmF1bHRzLCBvdGhlcndpc2UganVzdCBzZXQgZnJvbSBnZXRLZXlWYWx1ZVRhcmdldGluZ1BhaXJzXG4gIGJpZE9iamVjdC5hZHNlcnZlclRhcmdldGluZyA9IE9iamVjdC5hc3NpZ24oYmlkT2JqZWN0LmFkc2VydmVyVGFyZ2V0aW5nIHx8IHt9LCBrZXlWYWx1ZXMpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7TWVkaWFUeXBlfSBtZWRpYVR5cGVcbiAqIEBwYXJhbSBtZWRpYVR5cGVzIG1lZGlhIHR5cGVzIG1hcCBmcm9tIGFkVW5pdFxuICogQHBhcmFtIHtNZWRpYVR5cGVQcmljZUdyYW51bGFyaXR5fSBbbWVkaWFUeXBlUHJpY2VHcmFudWxhcml0eV1cbiAqIEByZXR1cm5zIHsoT2JqZWN0fHN0cmluZ3x1bmRlZmluZWQpfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVkaWFUeXBlR3JhbnVsYXJpdHkobWVkaWFUeXBlLCBtZWRpYVR5cGVzLCBtZWRpYVR5cGVQcmljZUdyYW51bGFyaXR5KSB7XG4gIGlmIChtZWRpYVR5cGUgJiYgbWVkaWFUeXBlUHJpY2VHcmFudWxhcml0eSkge1xuICAgIGlmIChGRUFUVVJFUy5WSURFTyAmJiBtZWRpYVR5cGUgPT09IFZJREVPKSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0gZGVlcEFjY2VzcyhtZWRpYVR5cGVzLCBgJHtWSURFT30uY29udGV4dGAsICdpbnN0cmVhbScpO1xuICAgICAgaWYgKG1lZGlhVHlwZVByaWNlR3JhbnVsYXJpdHlbYCR7VklERU99LSR7Y29udGV4dH1gXSkge1xuICAgICAgICByZXR1cm4gbWVkaWFUeXBlUHJpY2VHcmFudWxhcml0eVtgJHtWSURFT30tJHtjb250ZXh0fWBdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVkaWFUeXBlUHJpY2VHcmFudWxhcml0eVttZWRpYVR5cGVdO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBwcmljZSBncmFudWxhcml0eSBkZWZpbmVkLiBJdCBjYW4gYmUgZWl0aGVyIHB1Ymxpc2hlciBkZWZpbmVkIG9yIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSBiaWQgYmlkIHJlc3BvbnNlIG9iamVjdFxuICogQHBhcmFtIGluZGV4XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBncmFudWxhcml0eVxuICovXG5leHBvcnQgY29uc3QgZ2V0UHJpY2VHcmFudWxhcml0eSA9IChiaWQsIHtpbmRleCA9IGF1Y3Rpb25NYW5hZ2VyLmluZGV4fSA9IHt9KSA9PiB7XG4gIC8vIFVzZSB0aGUgY29uZmlnIHZhbHVlICdtZWRpYVR5cGVHcmFudWxhcml0eScgaWYgaXQgaGFzIGJlZW4gc2V0IGZvciBtZWRpYVR5cGUsIGVsc2UgdXNlICdwcmljZUdyYW51bGFyaXR5J1xuICBjb25zdCBtZWRpYVR5cGVHcmFudWxhcml0eSA9IGdldE1lZGlhVHlwZUdyYW51bGFyaXR5KGJpZC5tZWRpYVR5cGUsIGluZGV4LmdldE1lZGlhVHlwZXMoYmlkKSwgY29uZmlnLmdldENvbmZpZygnbWVkaWFUeXBlUHJpY2VHcmFudWxhcml0eScpKTtcbiAgY29uc3QgZ3JhbnVsYXJpdHkgPSAodHlwZW9mIGJpZC5tZWRpYVR5cGUgPT09ICdzdHJpbmcnICYmIG1lZGlhVHlwZUdyYW51bGFyaXR5KSA/ICgodHlwZW9mIG1lZGlhVHlwZUdyYW51bGFyaXR5ID09PSAnc3RyaW5nJykgPyBtZWRpYVR5cGVHcmFudWxhcml0eSA6ICdjdXN0b20nKSA6IGNvbmZpZy5nZXRDb25maWcoJ3ByaWNlR3JhbnVsYXJpdHknKTtcbiAgcmV0dXJuIGdyYW51bGFyaXR5O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIGZ1bmN0aW9uIHRvIGdldCBiaWQgcHJpY2UgYnkgcHJpY2UgZ3JhbnVsYXJpdHlcbiAqIEBwYXJhbSB7c3RyaW5nfSBncmFudWxhcml0eVxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgY29uc3QgZ2V0UHJpY2VCeUdyYW51bGFyaXR5ID0gKGdyYW51bGFyaXR5KSA9PiB7XG4gIHJldHVybiAoYmlkKSA9PiB7XG4gICAgY29uc3QgYmlkR3JhbnVsYXJpdHkgPSBncmFudWxhcml0eSB8fCBnZXRQcmljZUdyYW51bGFyaXR5KGJpZCk7XG4gICAgaWYgKGJpZEdyYW51bGFyaXR5ID09PSBDT05TVEFOVFMuR1JBTlVMQVJJVFlfT1BUSU9OUy5BVVRPKSB7XG4gICAgICByZXR1cm4gYmlkLnBiQWc7XG4gICAgfSBlbHNlIGlmIChiaWRHcmFudWxhcml0eSA9PT0gQ09OU1RBTlRTLkdSQU5VTEFSSVRZX09QVElPTlMuREVOU0UpIHtcbiAgICAgIHJldHVybiBiaWQucGJEZztcbiAgICB9IGVsc2UgaWYgKGJpZEdyYW51bGFyaXR5ID09PSBDT05TVEFOVFMuR1JBTlVMQVJJVFlfT1BUSU9OUy5MT1cpIHtcbiAgICAgIHJldHVybiBiaWQucGJMZztcbiAgICB9IGVsc2UgaWYgKGJpZEdyYW51bGFyaXR5ID09PSBDT05TVEFOVFMuR1JBTlVMQVJJVFlfT1BUSU9OUy5NRURJVU0pIHtcbiAgICAgIHJldHVybiBiaWQucGJNZztcbiAgICB9IGVsc2UgaWYgKGJpZEdyYW51bGFyaXR5ID09PSBDT05TVEFOVFMuR1JBTlVMQVJJVFlfT1BUSU9OUy5ISUdIKSB7XG4gICAgICByZXR1cm4gYmlkLnBiSGc7XG4gICAgfSBlbHNlIGlmIChiaWRHcmFudWxhcml0eSA9PT0gQ09OU1RBTlRTLkdSQU5VTEFSSVRZX09QVElPTlMuQ1VTVE9NKSB7XG4gICAgICByZXR1cm4gYmlkLnBiQ2c7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgZnVuY3Rpb24gdG8gZ2V0IGNyaWQgZnJvbSBiaWQgcmVzcG9uc2VcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldENyZWF0aXZlSWQgPSAoKSA9PiB7XG4gIHJldHVybiAoYmlkKSA9PiB7XG4gICAgcmV0dXJuIChiaWQuY3JlYXRpdmVJZCkgPyBiaWQuY3JlYXRpdmVJZCA6ICcnO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgZnVuY3Rpb24gdG8gZ2V0IGZpcnN0IGFkdmVydGlzZXIgZG9tYWluIGZyb20gYmlkIHJlc3BvbnNlIG1ldGFcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEFkdmVydGlzZXJEb21haW4gPSAoKSA9PiB7XG4gIHJldHVybiAoYmlkKSA9PiB7XG4gICAgcmV0dXJuIChiaWQubWV0YSAmJiBiaWQubWV0YS5hZHZlcnRpc2VyRG9tYWlucyAmJiBiaWQubWV0YS5hZHZlcnRpc2VyRG9tYWlucy5sZW5ndGggPiAwKSA/IFtiaWQubWV0YS5hZHZlcnRpc2VyRG9tYWluc10uZmxhdCgpWzBdIDogJyc7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBmdW5jdGlvbiB0byBnZXQgZHNwIG5hbWUgb3IgaWQgZnJvbSBiaWQgcmVzcG9uc2UgbWV0YVxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgY29uc3QgZ2V0RFNQID0gKCkgPT4ge1xuICByZXR1cm4gKGJpZCkgPT4ge1xuICAgIHJldHVybiAoYmlkLm1ldGEgJiYgKGJpZC5tZXRhLm5ldHdvcmtJZCB8fCBiaWQubWV0YS5uZXR3b3JrTmFtZSkpID8gZGVlcEFjY2VzcyhiaWQsICdtZXRhLm5ldHdvcmtOYW1lJykgfHwgZGVlcEFjY2VzcyhiaWQsICdtZXRhLm5ldHdvcmtJZCcpIDogJyc7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBmdW5jdGlvbiB0byBnZXQgdGhlIHByaW1hcnkgY2F0ZWdvcnkgaWQgZnJvbSBiaWQgcmVzcG9uc2UgbWV0YVxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgY29uc3QgZ2V0UHJpbWFyeUNhdElkID0gKCkgPT4ge1xuICByZXR1cm4gKGJpZCkgPT4ge1xuICAgIHJldHVybiAoYmlkLm1ldGEgJiYgYmlkLm1ldGEucHJpbWFyeUNhdElkKSA/IGJpZC5tZXRhLnByaW1hcnlDYXRJZCA6ICcnO1xuICB9XG59XG5cbi8vIGZhY3RvcnkgZm9yIGtleSB2YWx1ZSBvYmpzXG5mdW5jdGlvbiBjcmVhdGVLZXlWYWwoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGtleSxcbiAgICB2YWw6ICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpXG4gICAgICA/IGZ1bmN0aW9uIChiaWRSZXNwb25zZSwgYmlkUmVxKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZShiaWRSZXNwb25zZSwgYmlkUmVxKTtcbiAgICAgIH1cbiAgICAgIDogZnVuY3Rpb24gKGJpZFJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBnZXRWYWx1ZShiaWRSZXNwb25zZSwgdmFsdWUpO1xuICAgICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0QWRzZXJ2ZXJUYXJnZXRpbmcoKSB7XG4gIGNvbnN0IFRBUkdFVElOR19LRVlTID0gQ09OU1RBTlRTLlRBUkdFVElOR19LRVlTO1xuICByZXR1cm4gW1xuICAgIGNyZWF0ZUtleVZhbChUQVJHRVRJTkdfS0VZUy5CSURERVIsICdiaWRkZXJDb2RlJyksXG4gICAgY3JlYXRlS2V5VmFsKFRBUkdFVElOR19LRVlTLkFEX0lELCAnYWRJZCcpLFxuICAgIGNyZWF0ZUtleVZhbChUQVJHRVRJTkdfS0VZUy5QUklDRV9CVUNLRVQsIGdldFByaWNlQnlHcmFudWxhcml0eSgpKSxcbiAgICBjcmVhdGVLZXlWYWwoVEFSR0VUSU5HX0tFWVMuU0laRSwgJ3NpemUnKSxcbiAgICBjcmVhdGVLZXlWYWwoVEFSR0VUSU5HX0tFWVMuREVBTCwgJ2RlYWxJZCcpLFxuICAgIGNyZWF0ZUtleVZhbChUQVJHRVRJTkdfS0VZUy5TT1VSQ0UsICdzb3VyY2UnKSxcbiAgICBjcmVhdGVLZXlWYWwoVEFSR0VUSU5HX0tFWVMuRk9STUFULCAnbWVkaWFUeXBlJyksXG4gICAgY3JlYXRlS2V5VmFsKFRBUkdFVElOR19LRVlTLkFET01BSU4sIGdldEFkdmVydGlzZXJEb21haW4oKSksXG4gICAgY3JlYXRlS2V5VmFsKFRBUkdFVElOR19LRVlTLkFDQVQsIGdldFByaW1hcnlDYXRJZCgpKSxcbiAgICBjcmVhdGVLZXlWYWwoVEFSR0VUSU5HX0tFWVMuRFNQLCBnZXREU1AoKSksXG4gICAgY3JlYXRlS2V5VmFsKFRBUkdFVElOR19LRVlTLkNSSUQsIGdldENyZWF0aXZlSWQoKSksXG4gIF1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVkaWFUeXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gYmlkZGVyQ29kZVxuICogQHBhcmFtIHtCaWRSZXF1ZXN0fSBiaWRSZXFcbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhbmRhcmRCaWRkZXJTZXR0aW5ncyhtZWRpYVR5cGUsIGJpZGRlckNvZGUpIHtcbiAgY29uc3QgVEFSR0VUSU5HX0tFWVMgPSBDT05TVEFOVFMuVEFSR0VUSU5HX0tFWVM7XG4gIGNvbnN0IHN0YW5kYXJkU2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBiaWRkZXJTZXR0aW5ncy5zZXR0aW5nc0ZvcihudWxsKSk7XG4gIGlmICghc3RhbmRhcmRTZXR0aW5nc1tDT05TVEFOVFMuSlNPTl9NQVBQSU5HLkFEU0VSVkVSX1RBUkdFVElOR10pIHtcbiAgICBzdGFuZGFyZFNldHRpbmdzW0NPTlNUQU5UUy5KU09OX01BUFBJTkcuQURTRVJWRVJfVEFSR0VUSU5HXSA9IGRlZmF1bHRBZHNlcnZlclRhcmdldGluZygpO1xuICB9XG5cbiAgaWYgKEZFQVRVUkVTLlZJREVPICYmIG1lZGlhVHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgIGNvbnN0IGFkc2VydmVyVGFyZ2V0aW5nID0gc3RhbmRhcmRTZXR0aW5nc1tDT05TVEFOVFMuSlNPTl9NQVBQSU5HLkFEU0VSVkVSX1RBUkdFVElOR10uc2xpY2UoKTtcbiAgICBzdGFuZGFyZFNldHRpbmdzW0NPTlNUQU5UUy5KU09OX01BUFBJTkcuQURTRVJWRVJfVEFSR0VUSU5HXSA9IGFkc2VydmVyVGFyZ2V0aW5nO1xuXG4gICAgLy8gQWRkaW5nIGhiX3V1aWQgKyBoYl9jYWNoZV9pZFxuICAgIFtUQVJHRVRJTkdfS0VZUy5VVUlELCBUQVJHRVRJTkdfS0VZUy5DQUNIRV9JRF0uZm9yRWFjaCh0YXJnZXRpbmdLZXlWYWwgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBmaW5kKGFkc2VydmVyVGFyZ2V0aW5nLCBrdlBhaXIgPT4ga3ZQYWlyLmtleSA9PT0gdGFyZ2V0aW5nS2V5VmFsKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYWRzZXJ2ZXJUYXJnZXRpbmcucHVzaChjcmVhdGVLZXlWYWwodGFyZ2V0aW5nS2V5VmFsLCAndmlkZW9DYWNoZUtleScpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFkZGluZyBoYl9jYWNoZV9ob3N0XG4gICAgaWYgKGNvbmZpZy5nZXRDb25maWcoJ2NhY2hlLnVybCcpICYmICghYmlkZGVyQ29kZSB8fCBiaWRkZXJTZXR0aW5ncy5nZXQoYmlkZGVyQ29kZSwgJ3NlbmRTdGFuZGFyZFRhcmdldGluZycpICE9PSBmYWxzZSkpIHtcbiAgICAgIGNvbnN0IHVybEluZm8gPSBwYXJzZVVybChjb25maWcuZ2V0Q29uZmlnKCdjYWNoZS51cmwnKSk7XG5cbiAgICAgIGlmICh0eXBlb2YgZmluZChhZHNlcnZlclRhcmdldGluZywgdGFyZ2V0aW5nS2V5VmFsID0+IHRhcmdldGluZ0tleVZhbC5rZXkgPT09IFRBUkdFVElOR19LRVlTLkNBQ0hFX0hPU1QpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhZHNlcnZlclRhcmdldGluZy5wdXNoKGNyZWF0ZUtleVZhbChUQVJHRVRJTkdfS0VZUy5DQUNIRV9IT1NULCBmdW5jdGlvbihiaWRSZXNwb25zZSkge1xuICAgICAgICAgIHJldHVybiBkZWVwQWNjZXNzKGJpZFJlc3BvbnNlLCBgYWRzZXJ2ZXJUYXJnZXRpbmcuJHtUQVJHRVRJTkdfS0VZUy5DQUNIRV9IT1NUfWApXG4gICAgICAgICAgICA/IGJpZFJlc3BvbnNlLmFkc2VydmVyVGFyZ2V0aW5nW1RBUkdFVElOR19LRVlTLkNBQ0hFX0hPU1RdIDogdXJsSW5mby5ob3N0bmFtZTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdGFuZGFyZFNldHRpbmdzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5VmFsdWVUYXJnZXRpbmdQYWlycyhiaWRkZXJDb2RlLCBjdXN0QmlkT2JqLCB7aW5kZXggPSBhdWN0aW9uTWFuYWdlci5pbmRleH0gPSB7fSkge1xuICBpZiAoIWN1c3RCaWRPYmopIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgYmlkUmVxdWVzdCA9IGluZGV4LmdldEJpZFJlcXVlc3QoY3VzdEJpZE9iaik7XG4gIHZhciBrZXlWYWx1ZXMgPSB7fTtcblxuICAvLyAxKSBzZXQgdGhlIGtleXMgZnJvbSBcInN0YW5kYXJkXCIgc2V0dGluZyBvciBmcm9tIHByZWJpZCBkZWZhdWx0c1xuICAvLyBpbml0aWFsaXplIGRlZmF1bHQgaWYgbm90IHNldFxuICBjb25zdCBzdGFuZGFyZFNldHRpbmdzID0gZ2V0U3RhbmRhcmRCaWRkZXJTZXR0aW5ncyhjdXN0QmlkT2JqLm1lZGlhVHlwZSwgYmlkZGVyQ29kZSk7XG4gIHNldEtleXMoa2V5VmFsdWVzLCBzdGFuZGFyZFNldHRpbmdzLCBjdXN0QmlkT2JqLCBiaWRSZXF1ZXN0KTtcblxuICAvLyAyKSBzZXQga2V5cyBmcm9tIHNwZWNpZmljIGJpZGRlciBzZXR0aW5nIG92ZXJyaWRlIGlmIHRoZXkgZXhpc3RcbiAgaWYgKGJpZGRlckNvZGUgJiYgYmlkZGVyU2V0dGluZ3MuZ2V0T3duKGJpZGRlckNvZGUsIENPTlNUQU5UUy5KU09OX01BUFBJTkcuQURTRVJWRVJfVEFSR0VUSU5HKSkge1xuICAgIHNldEtleXMoa2V5VmFsdWVzLCBiaWRkZXJTZXR0aW5ncy5vd25TZXR0aW5nc0ZvcihiaWRkZXJDb2RlKSwgY3VzdEJpZE9iaiwgYmlkUmVxdWVzdCk7XG4gICAgY3VzdEJpZE9iai5zZW5kU3RhbmRhcmRUYXJnZXRpbmcgPSBiaWRkZXJTZXR0aW5ncy5nZXQoYmlkZGVyQ29kZSwgJ3NlbmRTdGFuZGFyZFRhcmdldGluZycpO1xuICB9XG5cbiAgLy8gc2V0IG5hdGl2ZSBrZXkgdmFsdWUgdGFyZ2V0aW5nXG4gIGlmIChGRUFUVVJFUy5OQVRJVkUgJiYgY3VzdEJpZE9ialsnbmF0aXZlJ10pIHtcbiAgICBrZXlWYWx1ZXMgPSBPYmplY3QuYXNzaWduKHt9LCBrZXlWYWx1ZXMsIGdldE5hdGl2ZVRhcmdldGluZyhjdXN0QmlkT2JqKSk7XG4gIH1cblxuICByZXR1cm4ga2V5VmFsdWVzO1xufVxuXG5mdW5jdGlvbiBzZXRLZXlzKGtleVZhbHVlcywgYmlkZGVyU2V0dGluZ3MsIGN1c3RCaWRPYmosIGJpZFJlcSkge1xuICB2YXIgdGFyZ2V0aW5nID0gYmlkZGVyU2V0dGluZ3NbQ09OU1RBTlRTLkpTT05fTUFQUElORy5BRFNFUlZFUl9UQVJHRVRJTkddO1xuICBjdXN0QmlkT2JqLnNpemUgPSBjdXN0QmlkT2JqLmdldFNpemUoKTtcblxuICBfZWFjaCh0YXJnZXRpbmcsIGZ1bmN0aW9uIChrdlBhaXIpIHtcbiAgICB2YXIga2V5ID0ga3ZQYWlyLmtleTtcbiAgICB2YXIgdmFsdWUgPSBrdlBhaXIudmFsO1xuXG4gICAgaWYgKGtleVZhbHVlc1trZXldKSB7XG4gICAgICBsb2dXYXJuKCdUaGUga2V5OiAnICsga2V5ICsgJyBpcyBiZWluZyBvdmVyd3JpdHRlbicpO1xuICAgIH1cblxuICAgIGlmIChpc0ZuKHZhbHVlKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZShjdXN0QmlkT2JqLCBiaWRSZXEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2dFcnJvcignYmlkbWFuYWdlcicsICdFUlJPUicsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgICgodHlwZW9mIGJpZGRlclNldHRpbmdzLnN1cHByZXNzRW1wdHlLZXlzICE9PSAndW5kZWZpbmVkJyAmJiBiaWRkZXJTZXR0aW5ncy5zdXBwcmVzc0VtcHR5S2V5cyA9PT0gdHJ1ZSkgfHxcbiAgICAgIGtleSA9PT0gQ09OU1RBTlRTLlRBUkdFVElOR19LRVlTLkRFQUwgfHwga2V5ID09PSBDT05TVEFOVFMuVEFSR0VUSU5HX0tFWVMuQUNBVCB8fCBrZXkgPT09IENPTlNUQU5UUy5UQVJHRVRJTkdfS0VZUy5EU1AgfHwga2V5ID09PSBDT05TVEFOVFMuVEFSR0VUSU5HX0tFWVMuQ1JJRCkgJiYgLy8gaGJfZGVhbCAmIGhiX2FjYXQgYXJlIHN1cHByZXNzZWQgYXV0b21hdGljYWxseSBpZiBub3Qgc2V0XG4gICAgICAoXG4gICAgICAgIGlzRW1wdHlTdHIodmFsdWUpIHx8XG4gICAgICAgIHZhbHVlID09PSBudWxsIHx8XG4gICAgICAgIHZhbHVlID09PSB1bmRlZmluZWRcbiAgICAgIClcbiAgICApIHtcbiAgICAgIGxvZ0luZm8oXCJzdXBwcmVzc2luZyBlbXB0eSBrZXkgJ1wiICsga2V5ICsgXCInIGZyb20gYWRzZXJ2ZXIgdGFyZ2V0aW5nXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXlWYWx1ZXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGtleVZhbHVlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkanVzdEJpZHMoYmlkKSB7XG4gIGxldCBiaWRQcmljZUFkanVzdGVkID0gYWRqdXN0Q3BtKGJpZC5jcG0sIGJpZCk7XG5cbiAgaWYgKGJpZFByaWNlQWRqdXN0ZWQgPj0gMCkge1xuICAgIGJpZC5jcG0gPSBiaWRQcmljZUFkanVzdGVkO1xuICB9XG59XG5cbi8qKlxuICogZ3JvdXBCeVBsYWNlbWVudCBpcyBhIHJlZHVjZSBmdW5jdGlvbiB0aGF0IGNvbnZlcnRzIGFuIGFycmF5IG9mIEJpZCBvYmplY3RzXG4gKiB0byBhbiBvYmplY3Qgd2l0aCBwbGFjZW1lbnQgY29kZXMgYXMga2V5cywgd2l0aCBlYWNoIGtleSByZXByZXNlbnRpbmcgYW4gb2JqZWN0XG4gKiB3aXRoIGFuIGFycmF5IG9mIGBCaWRgIG9iamVjdHMgZm9yIHRoYXQgcGxhY2VtZW50XG4gKiBAcmV0dXJucyB7Kn0gYXMgeyBbYWRVbml0Q29kZV06IHsgYmlkczogW0JpZCwgQmlkLCBCaWRdIH0gfVxuICovXG5mdW5jdGlvbiBncm91cEJ5UGxhY2VtZW50KGJpZHNCeVBsYWNlbWVudCwgYmlkKSB7XG4gIGlmICghYmlkc0J5UGxhY2VtZW50W2JpZC5hZFVuaXRDb2RlXSkgeyBiaWRzQnlQbGFjZW1lbnRbYmlkLmFkVW5pdENvZGVdID0geyBiaWRzOiBbXSB9OyB9XG4gIGJpZHNCeVBsYWNlbWVudFtiaWQuYWRVbml0Q29kZV0uYmlkcy5wdXNoKGJpZCk7XG4gIHJldHVybiBiaWRzQnlQbGFjZW1lbnQ7XG59XG4iLCJpbXBvcnQge2F1Y3Rpb25NYW5hZ2VyfSBmcm9tICcuLi9hdWN0aW9uTWFuYWdlci5qcyc7XG5pbXBvcnQge2JpZGRlclNldHRpbmdzfSBmcm9tICcuLi9iaWRkZXJTZXR0aW5ncy5qcyc7XG5pbXBvcnQge2xvZ0Vycm9yfSBmcm9tICcuLi91dGlscy5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGp1c3RDcG0oY3BtLCBiaWRSZXNwb25zZSwgYmlkUmVxdWVzdCwge2luZGV4ID0gYXVjdGlvbk1hbmFnZXIuaW5kZXgsIGJzID0gYmlkZGVyU2V0dGluZ3N9ID0ge30pIHtcbiAgYmlkUmVxdWVzdCA9IGJpZFJlcXVlc3QgfHwgaW5kZXguZ2V0QmlkUmVxdWVzdChiaWRSZXNwb25zZSk7XG4gIGNvbnN0IGFkYXB0ZXJDb2RlID0gYmlkUmVzcG9uc2U/LmFkYXB0ZXJDb2RlO1xuICBjb25zdCBiaWRkZXJDb2RlID0gYmlkUmVzcG9uc2U/LmJpZGRlckNvZGUgfHwgYmlkUmVxdWVzdD8uYmlkZGVyO1xuICBjb25zdCBhZGp1c3RBbHRlcm5hdGVCaWRzID0gYnMuZ2V0KGJpZFJlc3BvbnNlPy5hZGFwdGVyQ29kZSwgJ2FkanVzdEFsdGVybmF0ZUJpZHMnKTtcbiAgY29uc3QgYmlkQ3BtQWRqdXN0bWVudCA9IGJzLmdldE93bihiaWRkZXJDb2RlLCAnYmlkQ3BtQWRqdXN0bWVudCcpIHx8IGJzLmdldChhZGp1c3RBbHRlcm5hdGVCaWRzID8gYWRhcHRlckNvZGUgOiBiaWRkZXJDb2RlLCAnYmlkQ3BtQWRqdXN0bWVudCcpO1xuXG4gIGlmIChiaWRDcG1BZGp1c3RtZW50ICYmIHR5cGVvZiBiaWRDcG1BZGp1c3RtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBiaWRDcG1BZGp1c3RtZW50KGNwbSwgT2JqZWN0LmFzc2lnbih7fSwgYmlkUmVzcG9uc2UpLCBiaWRSZXF1ZXN0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dFcnJvcignRXJyb3IgZHVyaW5nIGJpZCBhZGp1c3RtZW50JywgZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjcG07XG59XG4iLCIvKipcbiAqIFJldHJpZXZlcyByZXF1ZXN0LXJlbGF0ZWQgYmlkIGRhdGEuXG4gKiBBbGwgbWV0aG9kcyBhcmUgZGVzaWduZWQgdG8gd29yayB3aXRoIEJpZCAocmVzcG9uc2UpIG9iamVjdHMgcmV0dXJuZWQgYnkgYmlkIGFkYXB0ZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gQXVjdGlvbkluZGV4KGdldEF1Y3Rpb25zKSB7XG4gIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBhdWN0aW9uSWRcbiAgICAgKiBAcmV0dXJucyB7Kn0gQXVjdGlvbiBpbnN0YW5jZSBmb3IgYGF1Y3Rpb25JZGBcbiAgICAgKi9cbiAgICBnZXRBdWN0aW9uKHthdWN0aW9uSWR9KSB7XG4gICAgICBpZiAoYXVjdGlvbklkICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGdldEF1Y3Rpb25zKClcbiAgICAgICAgICAuZmluZChhdWN0aW9uID0+IGF1Y3Rpb24uZ2V0QXVjdGlvbklkKCkgPT09IGF1Y3Rpb25JZCk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBOT1RFOiB5b3Ugc2hvdWxkIHByZWZlciB7QGxpbmsgI2dldE1lZGlhVHlwZXN9IGZvciBsb29raW5nIHVwIGJpZCBtZWRpYSB0eXBlcy5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZFxuICAgICAqIEByZXR1cm5zIGFkVW5pdCBvYmplY3QgZm9yIGB0cmFuc2FjdGlvbklkYFxuICAgICAqL1xuICAgIGdldEFkVW5pdCh7dHJhbnNhY3Rpb25JZH0pIHtcbiAgICAgIGlmICh0cmFuc2FjdGlvbklkICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGdldEF1Y3Rpb25zKClcbiAgICAgICAgICAuZmxhdE1hcChhID0+IGEuZ2V0QWRVbml0cygpKVxuICAgICAgICAgIC5maW5kKGF1ID0+IGF1LnRyYW5zYWN0aW9uSWQgPT09IHRyYW5zYWN0aW9uSWQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWRcbiAgICAgKiBAcGFyYW0gcmVxdWVzdElkP1xuICAgICAqIEByZXR1cm5zIHsqfSBtZWRpYVR5cGVzIG9iamVjdCBmcm9tIGJpZFJlcXVlc3QgKHRocm91Z2ggcmVxdWVzdElkKSBmYWxsaW5nIGJhY2sgdG8gdGhlIGFkVW5pdCAodGhyb3VnaCB0cmFuc2FjdGlvbklkKS5cbiAgICAgKlxuICAgICAqIFRoZSBiaWRSZXF1ZXN0IGlzIGdpdmVuIHByZWNlZGVuY2UgYmVjYXVzZSBpdHMgbWVkaWFUeXBlcyBjYW4gZGlmZmVyIGZyb20gdGhlIGFkVW5pdCdzIChpZiBiaWRkZXItc3BlY2lmaWMgbGFiZWxzIGFyZSBpbiB1c2UpLlxuICAgICAqIEJpZHMgdGhhdCBoYXZlIG5vIGFzc29jaWF0ZWQgcmVxdWVzdCBkbyBub3QgaGF2ZSBsYWJlbHMgZWl0aGVyLCBhbmQgdXNlIHRoZSBhZFVuaXQncyBtZWRpYVR5cGVzLlxuICAgICAqL1xuICAgIGdldE1lZGlhVHlwZXMoe3RyYW5zYWN0aW9uSWQsIHJlcXVlc3RJZH0pIHtcbiAgICAgIGlmIChyZXF1ZXN0SWQgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCByZXEgPSB0aGlzLmdldEJpZFJlcXVlc3Qoe3JlcXVlc3RJZH0pO1xuICAgICAgICBpZiAocmVxICE9IG51bGwgJiYgKHRyYW5zYWN0aW9uSWQgPT0gbnVsbCB8fCByZXEudHJhbnNhY3Rpb25JZCA9PT0gdHJhbnNhY3Rpb25JZCkpIHtcbiAgICAgICAgICByZXR1cm4gcmVxLm1lZGlhVHlwZXM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJhbnNhY3Rpb25JZCAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGF1ID0gdGhpcy5nZXRBZFVuaXQoe3RyYW5zYWN0aW9uSWR9KTtcbiAgICAgICAgaWYgKGF1ICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gYXUubWVkaWFUeXBlcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHJlcXVlc3RJZD9cbiAgICAgKiBAcGFyYW0gYmlkZGVyUmVxdWVzdElkP1xuICAgICAqIEByZXR1cm5zIHsqfSBiaWRkZXJSZXF1ZXN0IHRoYXQgbWF0Y2hlcyBib3RoIHJlcXVlc3RJZCBhbmQgYmlkZGVyUmVxdWVzdElkIChpZiBlaXRoZXIgb3IgYm90aCBhcmUgcHJvdmlkZWQpLlxuICAgICAqXG4gICAgICogTk9URTogQmlkIHJlc3BvbnNlcyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gaGF2ZSBhIGNvcnJlc3BvbmRpbmcgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBnZXRCaWRkZXJSZXF1ZXN0KHtyZXF1ZXN0SWQsIGJpZGRlclJlcXVlc3RJZH0pIHtcbiAgICAgIGlmIChyZXF1ZXN0SWQgIT0gbnVsbCB8fCBiaWRkZXJSZXF1ZXN0SWQgIT0gbnVsbCkge1xuICAgICAgICBsZXQgYmVycyA9IGdldEF1Y3Rpb25zKCkuZmxhdE1hcChhID0+IGEuZ2V0QmlkUmVxdWVzdHMoKSk7XG4gICAgICAgIGlmIChiaWRkZXJSZXF1ZXN0SWQgIT0gbnVsbCkge1xuICAgICAgICAgIGJlcnMgPSBiZXJzLmZpbHRlcihiZXIgPT4gYmVyLmJpZGRlclJlcXVlc3RJZCA9PT0gYmlkZGVyUmVxdWVzdElkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVxdWVzdElkID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gYmVyc1swXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYmVycy5maW5kKGJlciA9PiBiZXIuYmlkcyAmJiBiZXIuYmlkcy5maW5kKGJyID0+IGJyLmJpZElkID09PSByZXF1ZXN0SWQpICE9IG51bGwpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSByZXF1ZXN0SWRcbiAgICAgKiBAcmV0dXJucyB7Kn0gYmlkUmVxdWVzdCBvYmplY3QgZm9yIHJlcXVlc3RJZFxuICAgICAqXG4gICAgICogTk9URTogQmlkIHJlc3BvbnNlcyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gaGF2ZSBhIGNvcnJlc3BvbmRpbmcgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBnZXRCaWRSZXF1ZXN0KHtyZXF1ZXN0SWR9KSB7XG4gICAgICBpZiAocmVxdWVzdElkICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGdldEF1Y3Rpb25zKClcbiAgICAgICAgICAuZmxhdE1hcChhID0+IGEuZ2V0QmlkUmVxdWVzdHMoKSlcbiAgICAgICAgICAuZmxhdE1hcChiZXIgPT4gYmVyLmJpZHMpXG4gICAgICAgICAgLmZpbmQoYnIgPT4gYnIgJiYgYnIuYmlkSWQgPT09IHJlcXVlc3RJZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiIsImltcG9ydCB7Y29uZmlnfSBmcm9tICcuL2NvbmZpZy5qcyc7XG5pbXBvcnQge2xvZ0Vycm9yfSBmcm9tICcuL3V0aWxzLmpzJztcbmxldCBUVExfQlVGRkVSID0gMTtcblxuY29uc3QgbGlzdGVuZXJzID0gW107XG5cbmNvbmZpZy5nZXRDb25maWcoJ3R0bEJ1ZmZlcicsIChjZmcpID0+IHtcbiAgaWYgKHR5cGVvZiBjZmcudHRsQnVmZmVyID09PSAnbnVtYmVyJykge1xuICAgIGNvbnN0IHByZXYgPSBUVExfQlVGRkVSO1xuICAgIFRUTF9CVUZGRVIgPSBjZmcudHRsQnVmZmVyO1xuICAgIGlmIChwcmV2ICE9PSBUVExfQlVGRkVSKSB7XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaChsID0+IGwoVFRMX0JVRkZFUikpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxvZ0Vycm9yKCdJbnZhbGlkIHZhbHVlIGZvciB0dGxCdWZmZXInLCBjZmcudHRsQnVmZmVyKTtcbiAgfVxufSlcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRUTChiaWQpIHtcbiAgcmV0dXJuIGJpZC50dGwgLSAoYmlkLmhhc093blByb3BlcnR5KCd0dGxCdWZmZXInKSA/IGJpZC50dGxCdWZmZXIgOiBUVExfQlVGRkVSKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uVFRMQnVmZmVyQ2hhbmdlKGxpc3RlbmVyKSB7XG4gIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbn1cbiIsIi8qKlxuICogQXVjdGlvbk1hbmFnZXIgbW9kdWxlcyBpcyByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgYXVjdGlvbiBpbnN0YW5jZXMuXG4gKiBUaGlzIG1vZHVsZSBpcyB0aGUgZ2F0ZXdheSBmb3IgUHJlYmlkIGNvcmUgdG8gYWNjZXNzIGF1Y3Rpb25zLlxuICogSXQgc3RvcmVzIGFsbCBjcmVhdGVkIGluc3RhbmNlcyBvZiBhdWN0aW9uIGFuZCBjYW4gYmUgdXNlZCB0byBnZXQgY29uc29saWRhdGVkIHZhbHVlcyBmcm9tIGF1Y3Rpb24uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBBdWN0aW9uTWFuYWdlclxuICpcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oKTogQXJyYXl9IGdldEJpZHNSZXF1ZXN0ZWQgLSByZXR1cm5zIGNvbnNvbGlkYXRlZCBiaWQgcmVxdWVzdHNcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oKTogQXJyYXl9IGdldEJpZHNSZWNlaXZlZCAtIHJldHVybnMgY29uc29saWRhdGVkIGJpZCByZWNlaXZlZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiBBcnJheX0gZ2V0QWxsQmlkc0ZvckFkVW5pdENvZGUgLSByZXR1cm5zIGNvbnNvbGlkYXRlZCBiaWQgcmVjZWl2ZWQgZm9yIGEgZ2l2ZW4gYWRVbml0XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IEFycmF5fSBnZXRBZFVuaXRzIC0gcmV0dXJucyBjb25zb2xpZGF0ZWQgYWRVbml0c1xuICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiBBcnJheX0gZ2V0QWRVbml0Q29kZXMgLSByZXR1cm5zIGNvbnNvbGlkYXRlZCBhZFVuaXRDb2Rlc1xuICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiBPYmplY3R9IGNyZWF0ZUF1Y3Rpb24gLSBjcmVhdGVzIGF1Y3Rpb24gaW5zdGFuY2UgYW5kIHN0b3JlcyBpdCBmb3IgZnV0dXJlIHJlZmVyZW5jZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiBPYmplY3R9IGZpbmRCaWRCeUFkSWQgLSBmaW5kIGJpZCByZWNlaXZlZCBieSBhZElkLiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGJ5ICQkUFJFQklEX0dMT0JBTCQkLnJlbmRlckFkXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IE9iamVjdH0gZ2V0U3RhbmRhcmRCaWRkZXJBZFNlcnZlclRhcmdldGluZyAtIHJldHVybnMgc3RhbmRhcmQgYmlkZGVyIHRhcmdldGluZyBmb3IgYWxsIHRoZSBhZGFwdGVycy4gUmVmZXIgaHR0cDovL3ByZWJpZC5vcmcvZGV2LWRvY3MvcHVibGlzaGVyLWFwaS1yZWZlcmVuY2UuaHRtbCNtb2R1bGVfcGJqcy5iaWRkZXJTZXR0aW5ncyBmb3IgbW9yZSBkZXRhaWxzXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKE9iamVjdCk6IHZvaWR9IGFkZFdpbm5pbmdCaWQgLSBhZGQgYSB3aW5uaW5nIGJpZCB0byBhbiBhdWN0aW9uIGJhc2VkIG9uIGF1Y3Rpb25JZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiB2b2lkfSBjbGVhckFsbEF1Y3Rpb25zIC0gY2xlYXIgYWxsIGF1Y3Rpb25zIGZvciB0ZXN0aW5nXG4gKi9cblxuaW1wb3J0IHsgdW5pcXVlcywgbG9nV2FybiB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgbmV3QXVjdGlvbiwgZ2V0U3RhbmRhcmRCaWRkZXJTZXR0aW5ncywgQVVDVElPTl9DT01QTEVURUQgfSBmcm9tICcuL2F1Y3Rpb24uanMnO1xuaW1wb3J0IHtBdWN0aW9uSW5kZXh9IGZyb20gJy4vYXVjdGlvbkluZGV4LmpzJztcbmltcG9ydCBDT05TVEFOVFMgZnJvbSAnLi9jb25zdGFudHMuanNvbic7XG5pbXBvcnQge3VzZU1ldHJpY3N9IGZyb20gJy4vdXRpbHMvcGVyZk1ldHJpY3MuanMnO1xuaW1wb3J0IHt0dGxDb2xsZWN0aW9ufSBmcm9tICcuL3V0aWxzL3R0bENvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHtnZXRUVEwsIG9uVFRMQnVmZmVyQ2hhbmdlfSBmcm9tICcuL2JpZFRUTC5qcyc7XG5pbXBvcnQge2NvbmZpZ30gZnJvbSAnLi9jb25maWcuanMnO1xuXG5jb25zdCBDQUNIRV9UVExfU0VUVElORyA9ICdtaW5CaWRDYWNoZVRUTCc7XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgYXVjdGlvbk1hbmFnZXIuIFRoZXJlIHdpbGwgb25seSBiZSBvbmUgaW5zdGFuY2Ugb2YgYXVjdGlvbk1hbmFnZXIgYnV0XG4gKiBhIGZhY3RvcnkgaXMgY3JlYXRlZCB0byBhc3Npc3QgaW4gdGVzdGluZy5cbiAqXG4gKiBAcmV0dXJucyB7QXVjdGlvbk1hbmFnZXJ9IGF1Y3Rpb25NYW5hZ2VySW5zdGFuY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5ld0F1Y3Rpb25NYW5hZ2VyKCkge1xuICBsZXQgbWluQ2FjaGVUVEwgPSBudWxsO1xuXG4gIGNvbnN0IF9hdWN0aW9ucyA9IHR0bENvbGxlY3Rpb24oe1xuICAgIHN0YXJ0VGltZTogKGF1KSA9PiBhdS5lbmQudGhlbigoKSA9PiBhdS5nZXRBdWN0aW9uRW5kKCkpLFxuICAgIHR0bDogKGF1KSA9PiBtaW5DYWNoZVRUTCA9PSBudWxsID8gbnVsbCA6IGF1LmVuZC50aGVuKCgpID0+IHtcbiAgICAgIHJldHVybiBNYXRoLm1heChtaW5DYWNoZVRUTCwgLi4uYXUuZ2V0Qmlkc1JlY2VpdmVkKCkubWFwKGdldFRUTCkpICogMTAwMFxuICAgIH0pLFxuICB9KTtcblxuICBvblRUTEJ1ZmZlckNoYW5nZSgoKSA9PiB7XG4gICAgaWYgKG1pbkNhY2hlVFRMICE9IG51bGwpIF9hdWN0aW9ucy5yZWZyZXNoKCk7XG4gIH0pXG5cbiAgY29uZmlnLmdldENvbmZpZyhDQUNIRV9UVExfU0VUVElORywgKGNmZykgPT4ge1xuICAgIGNvbnN0IHByZXYgPSBtaW5DYWNoZVRUTDtcbiAgICBtaW5DYWNoZVRUTCA9IGNmZz8uW0NBQ0hFX1RUTF9TRVRUSU5HXTtcbiAgICBtaW5DYWNoZVRUTCA9IHR5cGVvZiBtaW5DYWNoZVRUTCA9PT0gJ251bWJlcicgPyBtaW5DYWNoZVRUTCA6IG51bGw7XG4gICAgaWYgKHByZXYgIT09IG1pbkNhY2hlVFRMKSB7XG4gICAgICBfYXVjdGlvbnMucmVmcmVzaCgpO1xuICAgIH1cbiAgfSlcblxuICBjb25zdCBhdWN0aW9uTWFuYWdlciA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldEF1Y3Rpb24oYXVjdGlvbklkKSB7XG4gICAgZm9yIChjb25zdCBhdWN0aW9uIG9mIF9hdWN0aW9ucykge1xuICAgICAgaWYgKGF1Y3Rpb24uZ2V0QXVjdGlvbklkKCkgPT09IGF1Y3Rpb25JZCkgcmV0dXJuIGF1Y3Rpb247XG4gICAgfVxuICB9XG5cbiAgYXVjdGlvbk1hbmFnZXIuYWRkV2lubmluZ0JpZCA9IGZ1bmN0aW9uKGJpZCkge1xuICAgIGNvbnN0IG1ldHJpY3MgPSB1c2VNZXRyaWNzKGJpZC5tZXRyaWNzKTtcbiAgICBtZXRyaWNzLmNoZWNrcG9pbnQoJ2JpZFdvbicpO1xuICAgIG1ldHJpY3MudGltZUJldHdlZW4oJ2F1Y3Rpb25FbmQnLCAnYmlkV29uJywgJ3JlbmRlci5wZW5kaW5nJyk7XG4gICAgbWV0cmljcy50aW1lQmV0d2VlbigncmVxdWVzdEJpZHMnLCAnYmlkV29uJywgJ3JlbmRlci5lMmUnKTtcbiAgICBjb25zdCBhdWN0aW9uID0gZ2V0QXVjdGlvbihiaWQuYXVjdGlvbklkKTtcbiAgICBpZiAoYXVjdGlvbikge1xuICAgICAgYmlkLnN0YXR1cyA9IENPTlNUQU5UUy5CSURfU1RBVFVTLlJFTkRFUkVEO1xuICAgICAgYXVjdGlvbi5hZGRXaW5uaW5nQmlkKGJpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ1dhcm4oYEF1Y3Rpb24gbm90IGZvdW5kIHdoZW4gYWRkaW5nIHdpbm5pbmcgYmlkYCk7XG4gICAgfVxuICB9O1xuXG4gIE9iamVjdC5lbnRyaWVzKHtcbiAgICBnZXRBbGxXaW5uaW5nQmlkczoge1xuICAgICAgbmFtZTogJ2dldFdpbm5pbmdCaWRzJyxcbiAgICB9LFxuICAgIGdldEJpZHNSZXF1ZXN0ZWQ6IHtcbiAgICAgIG5hbWU6ICdnZXRCaWRSZXF1ZXN0cydcbiAgICB9LFxuICAgIGdldE5vQmlkczoge30sXG4gICAgZ2V0QWRVbml0czoge30sXG4gICAgZ2V0Qmlkc1JlY2VpdmVkOiB7XG4gICAgICBwcmUoYXVjdGlvbikge1xuICAgICAgICByZXR1cm4gYXVjdGlvbi5nZXRBdWN0aW9uU3RhdHVzKCkgPT09IEFVQ1RJT05fQ09NUExFVEVEO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0QWRVbml0Q29kZXM6IHtcbiAgICAgIHBvc3Q6IHVuaXF1ZXMsXG4gICAgfVxuICB9KS5mb3JFYWNoKChbbWdyTWV0aG9kLCB7bmFtZSA9IG1nck1ldGhvZCwgcHJlLCBwb3N0fV0pID0+IHtcbiAgICBjb25zdCBtYXBwZXIgPSBwcmUgPT0gbnVsbFxuICAgICAgPyAoYXVjdGlvbikgPT4gYXVjdGlvbltuYW1lXSgpXG4gICAgICA6IChhdWN0aW9uKSA9PiBwcmUoYXVjdGlvbikgPyBhdWN0aW9uW25hbWVdKCkgOiBbXTtcbiAgICBjb25zdCBmaWx0ZXIgPSBwb3N0ID09IG51bGxcbiAgICAgID8gKGl0ZW1zKSA9PiBpdGVtc1xuICAgICAgOiAoaXRlbXMpID0+IGl0ZW1zLmZpbHRlcihwb3N0KVxuICAgIGF1Y3Rpb25NYW5hZ2VyW21nck1ldGhvZF0gPSAoKSA9PiB7XG4gICAgICByZXR1cm4gZmlsdGVyKF9hdWN0aW9ucy50b0FycmF5KCkuZmxhdE1hcChtYXBwZXIpKTtcbiAgICB9XG4gIH0pXG5cbiAgZnVuY3Rpb24gYWxsQmlkc1JlY2VpdmVkKCkge1xuICAgIHJldHVybiBfYXVjdGlvbnMudG9BcnJheSgpLmZsYXRNYXAoYXUgPT4gYXUuZ2V0Qmlkc1JlY2VpdmVkKCkpXG4gIH1cblxuICBhdWN0aW9uTWFuYWdlci5nZXRBbGxCaWRzRm9yQWRVbml0Q29kZSA9IGZ1bmN0aW9uKGFkVW5pdENvZGUpIHtcbiAgICByZXR1cm4gYWxsQmlkc1JlY2VpdmVkKClcbiAgICAgIC5maWx0ZXIoYmlkID0+IGJpZCAmJiBiaWQuYWRVbml0Q29kZSA9PT0gYWRVbml0Q29kZSlcbiAgfTtcblxuICBhdWN0aW9uTWFuYWdlci5jcmVhdGVBdWN0aW9uID0gZnVuY3Rpb24ob3B0cykge1xuICAgIGNvbnN0IGF1Y3Rpb24gPSBuZXdBdWN0aW9uKG9wdHMpO1xuICAgIF9hZGRBdWN0aW9uKGF1Y3Rpb24pO1xuICAgIHJldHVybiBhdWN0aW9uO1xuICB9O1xuXG4gIGF1Y3Rpb25NYW5hZ2VyLmZpbmRCaWRCeUFkSWQgPSBmdW5jdGlvbihhZElkKSB7XG4gICAgcmV0dXJuIGFsbEJpZHNSZWNlaXZlZCgpXG4gICAgICAuZmluZChiaWQgPT4gYmlkLmFkSWQgPT09IGFkSWQpO1xuICB9O1xuXG4gIGF1Y3Rpb25NYW5hZ2VyLmdldFN0YW5kYXJkQmlkZGVyQWRTZXJ2ZXJUYXJnZXRpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0U3RhbmRhcmRCaWRkZXJTZXR0aW5ncygpW0NPTlNUQU5UUy5KU09OX01BUFBJTkcuQURTRVJWRVJfVEFSR0VUSU5HXTtcbiAgfTtcblxuICBhdWN0aW9uTWFuYWdlci5zZXRTdGF0dXNGb3JCaWRzID0gZnVuY3Rpb24oYWRJZCwgc3RhdHVzKSB7XG4gICAgbGV0IGJpZCA9IGF1Y3Rpb25NYW5hZ2VyLmZpbmRCaWRCeUFkSWQoYWRJZCk7XG4gICAgaWYgKGJpZCkgYmlkLnN0YXR1cyA9IHN0YXR1cztcblxuICAgIGlmIChiaWQgJiYgc3RhdHVzID09PSBDT05TVEFOVFMuQklEX1NUQVRVUy5CSURfVEFSR0VUSU5HX1NFVCkge1xuICAgICAgY29uc3QgYXVjdGlvbiA9IGdldEF1Y3Rpb24oYmlkLmF1Y3Rpb25JZCk7XG4gICAgICBpZiAoYXVjdGlvbikgYXVjdGlvbi5zZXRCaWRUYXJnZXRpbmcoYmlkKTtcbiAgICB9XG4gIH1cblxuICBhdWN0aW9uTWFuYWdlci5nZXRMYXN0QXVjdGlvbklkID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgYXVjdGlvbnMgPSBfYXVjdGlvbnMudG9BcnJheSgpO1xuICAgIHJldHVybiBhdWN0aW9ucy5sZW5ndGggJiYgYXVjdGlvbnNbYXVjdGlvbnMubGVuZ3RoIC0gMV0uZ2V0QXVjdGlvbklkKClcbiAgfTtcblxuICBhdWN0aW9uTWFuYWdlci5jbGVhckFsbEF1Y3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgX2F1Y3Rpb25zLmNsZWFyKCk7XG4gIH1cblxuICBmdW5jdGlvbiBfYWRkQXVjdGlvbihhdWN0aW9uKSB7XG4gICAgX2F1Y3Rpb25zLmFkZChhdWN0aW9uKTtcbiAgfVxuXG4gIGF1Y3Rpb25NYW5hZ2VyLmluZGV4ID0gbmV3IEF1Y3Rpb25JbmRleCgoKSA9PiBfYXVjdGlvbnMudG9BcnJheSgpKTtcblxuICByZXR1cm4gYXVjdGlvbk1hbmFnZXI7XG59XG5cbmV4cG9ydCBjb25zdCBhdWN0aW9uTWFuYWdlciA9IG5ld0F1Y3Rpb25NYW5hZ2VyKCk7XG4iLCJpbXBvcnQge2xvZ0Vycm9yfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tICcuL2V2ZW50cy5qcyc7XG5pbXBvcnQgQ09OU1RBTlRTIGZyb20gJy4vY29uc3RhbnRzLmpzb24nO1xuXG5jb25zdCB7QURfUkVOREVSX0ZBSUxFRCwgQURfUkVOREVSX1NVQ0NFRURFRH0gPSBDT05TVEFOVFMuRVZFTlRTO1xuXG4vKipcbiAqIEVtaXQgdGhlIEFEX1JFTkRFUl9GQUlMRUQgZXZlbnQuXG4gKlxuICogQHBhcmFtIHJlYXNvbiBvbmUgb2YgdGhlIHZhbHVlcyBpbiBDT05TVEFOVFMuQURfUkVOREVSX0ZBSUxFRF9SRUFTT05cbiAqIEBwYXJhbSBtZXNzYWdlIGZhaWx1cmUgZGVzY3JpcHRpb25cbiAqIEBwYXJhbSBiaWQ/IGJpZCByZXNwb25zZSBvYmplY3QgdGhhdCBmYWlsZWQgdG8gcmVuZGVyXG4gKiBAcGFyYW0gaWQ/IGFkSWQgdGhhdCBmYWlsZWQgdG8gcmVuZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbWl0QWRSZW5kZXJGYWlsKHsgcmVhc29uLCBtZXNzYWdlLCBiaWQsIGlkIH0pIHtcbiAgY29uc3QgZGF0YSA9IHsgcmVhc29uLCBtZXNzYWdlIH07XG4gIGlmIChiaWQpIGRhdGEuYmlkID0gYmlkO1xuICBpZiAoaWQpIGRhdGEuYWRJZCA9IGlkO1xuXG4gIGxvZ0Vycm9yKG1lc3NhZ2UpO1xuICBldmVudHMuZW1pdChBRF9SRU5ERVJfRkFJTEVELCBkYXRhKTtcbn1cblxuLyoqXG4gKiBFbWl0IHRoZSBBRF9SRU5ERVJfU1VDQ0VFREVEIGV2ZW50LlxuICogKE5vdGU6IEludm9jYXRpb24gb2YgdGhpcyBmdW5jdGlvbiBpbmRpY2F0ZXMgdGhhdCB0aGUgcmVuZGVyIGZ1bmN0aW9uIGRpZCBub3QgZ2VuZXJhdGUgYW4gZXJyb3IsIGl0IGRvZXMgbm90IGd1YXJhbnRlZSB0aGF0IHRyYWNraW5nIGZvciB0aGlzIGV2ZW50IGhhcyBvY2N1cnJlZCB5ZXQuKVxuICogQHBhcmFtIGRvYyBkb2N1bWVudCBvYmplY3QgdGhhdCB3YXMgdXNlZCB0byBgLndyaXRlYCB0aGUgYWQuIFNob3VsZCBiZSBgbnVsbGAgaWYgdW5hdmFpbGFibGUgKGUuZy4gZm9yIGRvY3VtZW50cyBpblxuICogYSBjcm9zcy1vcmlnaW4gZnJhbWUpLlxuICogQHBhcmFtIGJpZCBiaWQgcmVzcG9uc2Ugb2JqZWN0IGZvciB0aGUgYWQgdGhhdCB3YXMgcmVuZGVyZWRcbiAqIEBwYXJhbSBpZCBhZElkIHRoYXQgd2FzIHJlbmRlcmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW1pdEFkUmVuZGVyU3VjY2VlZGVkKHsgZG9jLCBiaWQsIGlkIH0pIHtcbiAgY29uc3QgZGF0YSA9IHsgZG9jIH07XG4gIGlmIChiaWQpIGRhdGEuYmlkID0gYmlkO1xuICBpZiAoaWQpIGRhdGEuYWRJZCA9IGlkO1xuXG4gIGV2ZW50cy5lbWl0KEFEX1JFTkRFUl9TVUNDRUVERUQsIGRhdGEpO1xufVxuIiwiLyogU2VjdXJlIENyZWF0aXZlc1xuICBQcm92aWRlcyBzdXBwb3J0IGZvciByZW5kZXJpbmcgY3JlYXRpdmVzIGludG8gY3Jvc3MgZG9tYWluIGlmcmFtZXMgc3VjaCBhcyBTYWZlRnJhbWUgdG8gcHJldmVudFxuICAgYWNjZXNzIHRvIGEgcHVibGlzaGVyIHBhZ2UgZnJvbSBjcmVhdGl2ZSBwYXlsb2Fkcy5cbiAqL1xuXG5pbXBvcnQgKiBhcyBldmVudHMgZnJvbSAnLi9ldmVudHMuanMnO1xuaW1wb3J0IHtmaXJlTmF0aXZlVHJhY2tlcnMsIGdldEFsbEFzc2V0c01lc3NhZ2UsIGdldEFzc2V0TWVzc2FnZX0gZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IGNvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cy5qc29uJztcbmltcG9ydCB7ZGVlcEFjY2VzcywgaXNBcG5HZXRUYWdEZWZpbmVkLCBpc0dwdFB1YmFkc0RlZmluZWQsIGxvZ0Vycm9yLCBsb2dXYXJuLCByZXBsYWNlQXVjdGlvblByaWNlfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7YXVjdGlvbk1hbmFnZXJ9IGZyb20gJy4vYXVjdGlvbk1hbmFnZXIuanMnO1xuaW1wb3J0IHtmaW5kLCBpbmNsdWRlc30gZnJvbSAnLi9wb2x5ZmlsbC5qcyc7XG5pbXBvcnQge2V4ZWN1dGVSZW5kZXJlciwgaXNSZW5kZXJlclJlcXVpcmVkfSBmcm9tICcuL1JlbmRlcmVyLmpzJztcbmltcG9ydCB7Y29uZmlnfSBmcm9tICcuL2NvbmZpZy5qcyc7XG5pbXBvcnQge2VtaXRBZFJlbmRlckZhaWwsIGVtaXRBZFJlbmRlclN1Y2NlZWRlZH0gZnJvbSAnLi9hZFJlbmRlcmluZy5qcyc7XG5cbmNvbnN0IEJJRF9XT04gPSBjb25zdGFudHMuRVZFTlRTLkJJRF9XT047XG5jb25zdCBTVEFMRV9SRU5ERVIgPSBjb25zdGFudHMuRVZFTlRTLlNUQUxFX1JFTkRFUjtcbmNvbnN0IFdPTl9BRF9JRFMgPSBuZXcgV2Vha1NldCgpO1xuXG5jb25zdCBIQU5ETEVSX01BUCA9IHtcbiAgJ1ByZWJpZCBSZXF1ZXN0JzogaGFuZGxlUmVuZGVyUmVxdWVzdCxcbiAgJ1ByZWJpZCBFdmVudCc6IGhhbmRsZUV2ZW50UmVxdWVzdCxcbn1cblxuaWYgKEZFQVRVUkVTLk5BVElWRSkge1xuICBPYmplY3QuYXNzaWduKEhBTkRMRVJfTUFQLCB7XG4gICAgJ1ByZWJpZCBOYXRpdmUnOiBoYW5kbGVOYXRpdmVSZXF1ZXN0LFxuICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuTWVzc2FnZXNGcm9tQ3JlYXRpdmUoKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgcmVjZWl2ZU1lc3NhZ2UsIGZhbHNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlcGxpZXIoZXYpIHtcbiAgaWYgKGV2Lm9yaWdpbiA9PSBudWxsICYmIGV2LnBvcnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBtc2cgPSAnQ2Fubm90IHBvc3QgbWVzc2FnZSB0byBhIGZyYW1lIHdpdGggbnVsbCBvcmlnaW4uIFBsZWFzZSB1cGRhdGUgY3JlYXRpdmVzIHRvIHVzZSBNZXNzYWdlQ2hhbm5lbCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmViaWQvUHJlYmlkLmpzL2lzc3Vlcy83ODcwJ1xuICAgICAgbG9nRXJyb3IobXNnKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV2LnBvcnRzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgIGV2LnBvcnRzWzBdLnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICBldi5zb3VyY2UucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSksIGV2Lm9yaWdpbik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWNlaXZlTWVzc2FnZShldikge1xuICB2YXIga2V5ID0gZXYubWVzc2FnZSA/ICdtZXNzYWdlJyA6ICdkYXRhJztcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdHJ5IHtcbiAgICBkYXRhID0gSlNPTi5wYXJzZShldltrZXldKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChkYXRhICYmIGRhdGEuYWRJZCAmJiBkYXRhLm1lc3NhZ2UpIHtcbiAgICBjb25zdCBhZE9iamVjdCA9IGZpbmQoYXVjdGlvbk1hbmFnZXIuZ2V0Qmlkc1JlY2VpdmVkKCksIGZ1bmN0aW9uIChiaWQpIHtcbiAgICAgIHJldHVybiBiaWQuYWRJZCA9PT0gZGF0YS5hZElkO1xuICAgIH0pO1xuICAgIGlmIChIQU5ETEVSX01BUC5oYXNPd25Qcm9wZXJ0eShkYXRhLm1lc3NhZ2UpKSB7XG4gICAgICBIQU5ETEVSX01BUFtkYXRhLm1lc3NhZ2VdKGdldFJlcGxpZXIoZXYpLCBkYXRhLCBhZE9iamVjdCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVJlbmRlclJlcXVlc3QocmVwbHksIGRhdGEsIGFkT2JqZWN0KSB7XG4gIGlmIChhZE9iamVjdCA9PSBudWxsKSB7XG4gICAgZW1pdEFkUmVuZGVyRmFpbCh7XG4gICAgICByZWFzb246IGNvbnN0YW50cy5BRF9SRU5ERVJfRkFJTEVEX1JFQVNPTi5DQU5OT1RfRklORF9BRCxcbiAgICAgIG1lc3NhZ2U6IGBDYW5ub3QgZmluZCBhZCBmb3IgY3Jvc3Mtb3JpZ2luIHJlbmRlciByZXF1ZXN0OiAnJHtkYXRhLmFkSWR9J2AsXG4gICAgICBpZDogZGF0YS5hZElkXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChhZE9iamVjdC5zdGF0dXMgPT09IGNvbnN0YW50cy5CSURfU1RBVFVTLlJFTkRFUkVEKSB7XG4gICAgbG9nV2FybihgQWQgaWQgJHthZE9iamVjdC5hZElkfSBoYXMgYmVlbiByZW5kZXJlZCBiZWZvcmVgKTtcbiAgICBldmVudHMuZW1pdChTVEFMRV9SRU5ERVIsIGFkT2JqZWN0KTtcbiAgICBpZiAoZGVlcEFjY2Vzcyhjb25maWcuZ2V0Q29uZmlnKCdhdWN0aW9uT3B0aW9ucycpLCAnc3VwcHJlc3NTdGFsZVJlbmRlcicpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICBfc2VuZEFkVG9DcmVhdGl2ZShhZE9iamVjdCwgcmVwbHkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZW1pdEFkUmVuZGVyRmFpbCh7XG4gICAgICByZWFzb246IGNvbnN0YW50cy5BRF9SRU5ERVJfRkFJTEVEX1JFQVNPTi5FWENFUFRJT04sXG4gICAgICBtZXNzYWdlOiBlLm1lc3NhZ2UsXG4gICAgICBpZDogZGF0YS5hZElkLFxuICAgICAgYmlkOiBhZE9iamVjdFxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHNhdmUgd2lubmluZyBiaWRzXG4gIGF1Y3Rpb25NYW5hZ2VyLmFkZFdpbm5pbmdCaWQoYWRPYmplY3QpO1xuXG4gIGV2ZW50cy5lbWl0KEJJRF9XT04sIGFkT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTmF0aXZlUmVxdWVzdChyZXBseSwgZGF0YSwgYWRPYmplY3QpIHtcbiAgLy8gaGFuZGxlIHRoaXMgc2NyaXB0IGZyb20gbmF0aXZlIHRlbXBsYXRlIGluIGFuIGFkIHNlcnZlclxuICAvLyB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHtcbiAgLy8gICBtZXNzYWdlOiAnUHJlYmlkIE5hdGl2ZScsXG4gIC8vICAgYWRJZDogJyUlUEFUVEVSTjpoYl9hZGlkJSUnXG4gIC8vIH0pLCAnKicpO1xuICBpZiAoYWRPYmplY3QgPT0gbnVsbCkge1xuICAgIGxvZ0Vycm9yKGBDYW5ub3QgZmluZCBhZCBmb3IgeC1vcmlnaW4gZXZlbnQgcmVxdWVzdDogJyR7ZGF0YS5hZElkfSdgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIVdPTl9BRF9JRFMuaGFzKGFkT2JqZWN0KSkge1xuICAgIFdPTl9BRF9JRFMuYWRkKGFkT2JqZWN0KTtcbiAgICBhdWN0aW9uTWFuYWdlci5hZGRXaW5uaW5nQmlkKGFkT2JqZWN0KTtcbiAgICBldmVudHMuZW1pdChCSURfV09OLCBhZE9iamVjdCk7XG4gIH1cblxuICBzd2l0Y2ggKGRhdGEuYWN0aW9uKSB7XG4gICAgY2FzZSAnYXNzZXRSZXF1ZXN0JzpcbiAgICAgIHJlcGx5KGdldEFzc2V0TWVzc2FnZShkYXRhLCBhZE9iamVjdCkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYWxsQXNzZXRSZXF1ZXN0JzpcbiAgICAgIHJlcGx5KGdldEFsbEFzc2V0c01lc3NhZ2UoZGF0YSwgYWRPYmplY3QpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3Jlc2l6ZU5hdGl2ZUhlaWdodCc6XG4gICAgICBhZE9iamVjdC5oZWlnaHQgPSBkYXRhLmhlaWdodDtcbiAgICAgIGFkT2JqZWN0LndpZHRoID0gZGF0YS53aWR0aDtcbiAgICAgIHJlc2l6ZVJlbW90ZUNyZWF0aXZlKGFkT2JqZWN0KTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmaXJlTmF0aXZlVHJhY2tlcnMoZGF0YSwgYWRPYmplY3QpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50UmVxdWVzdChyZXBseSwgZGF0YSwgYWRPYmplY3QpIHtcbiAgaWYgKGFkT2JqZWN0ID09IG51bGwpIHtcbiAgICBsb2dFcnJvcihgQ2Fubm90IGZpbmQgYWQgJyR7ZGF0YS5hZElkfScgZm9yIHgtb3JpZ2luIGV2ZW50IHJlcXVlc3RgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGFkT2JqZWN0LnN0YXR1cyAhPT0gY29uc3RhbnRzLkJJRF9TVEFUVVMuUkVOREVSRUQpIHtcbiAgICBsb2dXYXJuKGBSZWNlaXZlZCB4LW9yaWdpbiBldmVudCByZXF1ZXN0IHdpdGhvdXQgY29ycmVzcG9uZGluZyByZW5kZXIgcmVxdWVzdCBmb3IgYWQgJyR7ZGF0YS5hZElkfSdgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpdGNoIChkYXRhLmV2ZW50KSB7XG4gICAgY2FzZSBjb25zdGFudHMuRVZFTlRTLkFEX1JFTkRFUl9GQUlMRUQ6XG4gICAgICBlbWl0QWRSZW5kZXJGYWlsKHtcbiAgICAgICAgYmlkOiBhZE9iamVjdCxcbiAgICAgICAgaWQ6IGRhdGEuYWRJZCxcbiAgICAgICAgcmVhc29uOiBkYXRhLmluZm8ucmVhc29uLFxuICAgICAgICBtZXNzYWdlOiBkYXRhLmluZm8ubWVzc2FnZVxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGNvbnN0YW50cy5FVkVOVFMuQURfUkVOREVSX1NVQ0NFRURFRDpcbiAgICAgIGVtaXRBZFJlbmRlclN1Y2NlZWRlZCh7XG4gICAgICAgIGRvYzogbnVsbCxcbiAgICAgICAgYmlkOiBhZE9iamVjdCxcbiAgICAgICAgaWQ6IGRhdGEuYWRJZFxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbG9nRXJyb3IoYFJlY2VpdmVkIHgtb3JpZ2luIGV2ZW50IHJlcXVlc3QgZm9yIHVuc3VwcG9ydGVkIGV2ZW50OiAnJHtkYXRhLmV2ZW50fScgKGFkSWQ6ICcke2RhdGEuYWRJZH0nKWApXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9zZW5kQWRUb0NyZWF0aXZlKGFkT2JqZWN0LCByZXBseSkge1xuICBjb25zdCB7IGFkSWQsIGFkLCBhZFVybCwgd2lkdGgsIGhlaWdodCwgcmVuZGVyZXIsIGNwbSwgb3JpZ2luYWxDcG0gfSA9IGFkT2JqZWN0O1xuICAvLyByZW5kZXJpbmcgZm9yIG91dHN0cmVhbSBzYWZlZnJhbWVcbiAgaWYgKGlzUmVuZGVyZXJSZXF1aXJlZChyZW5kZXJlcikpIHtcbiAgICBleGVjdXRlUmVuZGVyZXIocmVuZGVyZXIsIGFkT2JqZWN0KTtcbiAgfSBlbHNlIGlmIChhZElkKSB7XG4gICAgcmVzaXplUmVtb3RlQ3JlYXRpdmUoYWRPYmplY3QpO1xuICAgIHJlcGx5KHtcbiAgICAgIG1lc3NhZ2U6ICdQcmViaWQgUmVzcG9uc2UnLFxuICAgICAgYWQ6IHJlcGxhY2VBdWN0aW9uUHJpY2UoYWQsIG9yaWdpbmFsQ3BtIHx8IGNwbSksXG4gICAgICBhZFVybDogcmVwbGFjZUF1Y3Rpb25QcmljZShhZFVybCwgb3JpZ2luYWxDcG0gfHwgY3BtKSxcbiAgICAgIGFkSWQsXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2l6ZVJlbW90ZUNyZWF0aXZlKHsgYWRJZCwgYWRVbml0Q29kZSwgd2lkdGgsIGhlaWdodCB9KSB7XG4gIC8vIHJlc2l6ZSBib3RoIGNvbnRhaW5lciBkaXYgKyBpZnJhbWVcbiAgWydkaXYnLCAnaWZyYW1lJ10uZm9yRWFjaChlbG1UeXBlID0+IHtcbiAgICAvLyBub3Qgc2VsZWN0IGVsZW1lbnQgdGhhdCBnZXRzIHJlbW92ZWQgYWZ0ZXIgZGZwIHJlbmRlclxuICAgIGxldCBlbGVtZW50ID0gZ2V0RWxlbWVudEJ5QWRVbml0KGVsbVR5cGUgKyAnOm5vdChbc3R5bGUqPVwiZGlzcGxheTogbm9uZVwiXSknKTtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgbGV0IGVsZW1lbnRTdHlsZSA9IGVsZW1lbnQuc3R5bGU7XG4gICAgICBlbGVtZW50U3R5bGUud2lkdGggPSB3aWR0aCA/IHdpZHRoICsgJ3B4JyA6ICcxMDAlJztcbiAgICAgIGVsZW1lbnRTdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dXYXJuKGBVbmFibGUgdG8gbG9jYXRlIG1hdGNoaW5nIHBhZ2UgZWxlbWVudCBmb3IgYWRVbml0Q29kZSAke2FkVW5pdENvZGV9LiAgQ2FuJ3QgcmVzaXplIGl0IHRvIGFkJ3MgZGltZW5zaW9ucy4gIFBsZWFzZSByZXZpZXcgc2V0dXAuYCk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBnZXRFbGVtZW50QnlBZFVuaXQoZWxtVHlwZSkge1xuICAgIGxldCBpZCA9IGdldEVsZW1lbnRJZEJhc2VkT25BZFNlcnZlcihhZElkLCBhZFVuaXRDb2RlKTtcbiAgICBsZXQgcGFyZW50RGl2RWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgIHJldHVybiBwYXJlbnREaXZFbGUgJiYgcGFyZW50RGl2RWxlLnF1ZXJ5U2VsZWN0b3IoZWxtVHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRFbGVtZW50SWRCYXNlZE9uQWRTZXJ2ZXIoYWRJZCwgYWRVbml0Q29kZSkge1xuICAgIGlmIChpc0dwdFB1YmFkc0RlZmluZWQoKSkge1xuICAgICAgcmV0dXJuIGdldERmcEVsZW1lbnRJZChhZElkKVxuICAgIH0gZWxzZSBpZiAoaXNBcG5HZXRUYWdEZWZpbmVkKCkpIHtcbiAgICAgIHJldHVybiBnZXRBc3RFbGVtZW50SWQoYWRVbml0Q29kZSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFkVW5pdENvZGU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGZwRWxlbWVudElkKGFkSWQpIHtcbiAgICBjb25zdCBzbG90ID0gZmluZCh3aW5kb3cuZ29vZ2xldGFnLnB1YmFkcygpLmdldFNsb3RzKCksIHNsb3QgPT4ge1xuICAgICAgcmV0dXJuIGZpbmQoc2xvdC5nZXRUYXJnZXRpbmdLZXlzKCksIGtleSA9PiB7XG4gICAgICAgIHJldHVybiBpbmNsdWRlcyhzbG90LmdldFRhcmdldGluZyhrZXkpLCBhZElkKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBzbG90ID8gc2xvdC5nZXRTbG90RWxlbWVudElkKCkgOiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QXN0RWxlbWVudElkKGFkVW5pdENvZGUpIHtcbiAgICBsZXQgYXN0VGFnID0gd2luZG93LmFwbnRhZy5nZXRUYWcoYWRVbml0Q29kZSk7XG4gICAgcmV0dXJuIGFzdFRhZyAmJiBhc3RUYWcudGFyZ2V0SWQ7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIGRlZXBBY2Nlc3MsXG4gIGRlZXBDbG9uZSxcbiAgZ2V0SGlnaGVzdENwbSxcbiAgZ2V0T2xkZXN0SGlnaGVzdENwbUJpZCxcbiAgZ3JvdXBCeSxcbiAgaXNBZFVuaXRDb2RlTWF0Y2hpbmdTbG90LFxuICBpc0FycmF5LFxuICBpc0ZuLFxuICBpc0dwdFB1YmFkc0RlZmluZWQsXG4gIGlzU3RyLFxuICBsb2dFcnJvcixcbiAgbG9nSW5mbyxcbiAgbG9nTWVzc2FnZSxcbiAgbG9nV2FybixcbiAgdGltZXN0YW1wLFxuICB1bmlxdWVzLFxufSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7Y29uZmlnfSBmcm9tICcuL2NvbmZpZy5qcyc7XG5pbXBvcnQge05BVElWRV9UQVJHRVRJTkdfS0VZU30gZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHthdWN0aW9uTWFuYWdlcn0gZnJvbSAnLi9hdWN0aW9uTWFuYWdlci5qcyc7XG5pbXBvcnQge0FEUE9EfSBmcm9tICcuL21lZGlhVHlwZXMuanMnO1xuaW1wb3J0IHtob29rfSBmcm9tICcuL2hvb2suanMnO1xuaW1wb3J0IHtiaWRkZXJTZXR0aW5nc30gZnJvbSAnLi9iaWRkZXJTZXR0aW5ncy5qcyc7XG5pbXBvcnQge2ZpbmQsIGluY2x1ZGVzfSBmcm9tICcuL3BvbHlmaWxsLmpzJztcbmltcG9ydCBDT05TVEFOVFMgZnJvbSAnLi9jb25zdGFudHMuanNvbic7XG5pbXBvcnQge2dldFRUTH0gZnJvbSAnLi9iaWRUVEwuanMnO1xuXG52YXIgcGJUYXJnZXRpbmdLZXlzID0gW107XG5cbmNvbnN0IE1BWF9ERlBfS0VZTEVOR1RIID0gMjA7XG5cbmNvbnN0IENGR19BTExPV19UQVJHRVRJTkdfS0VZUyA9IGB0YXJnZXRpbmdDb250cm9scy5hbGxvd1RhcmdldGluZ0tleXNgO1xuY29uc3QgQ0ZHX0FERF9UQVJHRVRJTkdfS0VZUyA9IGB0YXJnZXRpbmdDb250cm9scy5hZGRUYXJnZXRpbmdLZXlzYDtcbmNvbnN0IFRBUkdFVElOR19LRVlfQ09ORklHVVJBVElPTl9FUlJPUl9NU0cgPSBgT25seSBvbmUgb2YgXCIke0NGR19BTExPV19UQVJHRVRJTkdfS0VZU31cIiBvciBcIiR7Q0ZHX0FERF9UQVJHRVRJTkdfS0VZU31cIiBjYW4gYmUgc2V0YDtcblxuZXhwb3J0IGNvbnN0IFRBUkdFVElOR19LRVlTID0gT2JqZWN0LmtleXMoQ09OU1RBTlRTLlRBUkdFVElOR19LRVlTKS5tYXAoXG4gIGtleSA9PiBDT05TVEFOVFMuVEFSR0VUSU5HX0tFWVNba2V5XVxuKTtcblxuLy8gcmV0dXJuIHVuZXhwaXJlZCBiaWRzXG5jb25zdCBpc0JpZE5vdEV4cGlyZWQgPSAoYmlkKSA9PiAoYmlkLnJlc3BvbnNlVGltZXN0YW1wICsgZ2V0VFRMKGJpZCkgKiAxMDAwKSA+IHRpbWVzdGFtcCgpO1xuXG4vLyByZXR1cm4gYmlkcyB3aG9zZSBzdGF0dXMgaXMgbm90IHNldC4gV2lubmluZyBiaWRzIGNhbiBvbmx5IGhhdmUgYSBzdGF0dXMgb2YgYHJlbmRlcmVkYC5cbmNvbnN0IGlzVW51c2VkQmlkID0gKGJpZCkgPT4gYmlkICYmICgoYmlkLnN0YXR1cyAmJiAhaW5jbHVkZXMoW0NPTlNUQU5UUy5CSURfU1RBVFVTLlJFTkRFUkVEXSwgYmlkLnN0YXR1cykpIHx8ICFiaWQuc3RhdHVzKTtcblxuZXhwb3J0IGxldCBmaWx0ZXJzID0ge1xuICBpc0FjdHVhbEJpZChiaWQpIHtcbiAgICByZXR1cm4gYmlkLmdldFN0YXR1c0NvZGUoKSA9PT0gQ09OU1RBTlRTLlNUQVRVUy5HT09EXG4gIH0sXG4gIGlzQmlkTm90RXhwaXJlZCxcbiAgaXNVbnVzZWRCaWRcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0JpZFVzYWJsZShiaWQpIHtcbiAgcmV0dXJuICFPYmplY3QudmFsdWVzKGZpbHRlcnMpLnNvbWUoKHByZWRpY2F0ZSkgPT4gIXByZWRpY2F0ZShiaWQpKTtcbn1cblxuLy8gSWYgdHdvIGJpZHMgYXJlIGZvdW5kIGZvciBzYW1lIGFkVW5pdENvZGUsIHdlIHdpbGwgdXNlIHRoZSBoaWdoZXN0IG9uZSB0byB0YWtlIHBhcnQgaW4gYXVjdGlvblxuLy8gVGhpcyBjYW4gaGFwcGVuIGluIGNhc2Ugb2YgY29uY3VycmVudCBhdWN0aW9uc1xuLy8gSWYgYWRVbml0QmlkTGltaXQgaXMgc2V0IGFib3ZlIDAgcmV0dXJuIHRvcCBOIG51bWJlciBvZiBiaWRzXG5leHBvcnQgY29uc3QgZ2V0SGlnaGVzdENwbUJpZHNGcm9tQmlkUG9vbCA9IGhvb2soJ3N5bmMnLCBmdW5jdGlvbihiaWRzUmVjZWl2ZWQsIGhpZ2hlc3RDcG1DYWxsYmFjaywgYWRVbml0QmlkTGltaXQgPSAwLCBoYXNNb2RpZmllZCA9IGZhbHNlKSB7XG4gIGlmICghaGFzTW9kaWZpZWQpIHtcbiAgICBjb25zdCBiaWRzID0gW107XG4gICAgY29uc3QgZGVhbFByaW9yaXRpemF0aW9uID0gY29uZmlnLmdldENvbmZpZygnc2VuZEJpZHNDb250cm9sLmRlYWxQcmlvcml0aXphdGlvbicpO1xuICAgIC8vIGJ1Y2tldCBieSBhZFVuaXRjb2RlXG4gICAgbGV0IGJ1Y2tldHMgPSBncm91cEJ5KGJpZHNSZWNlaXZlZCwgJ2FkVW5pdENvZGUnKTtcbiAgICAvLyBmaWx0ZXIgdG9wIGJpZCBmb3IgZWFjaCBidWNrZXQgYnkgYmlkZGVyXG4gICAgT2JqZWN0LmtleXMoYnVja2V0cykuZm9yRWFjaChidWNrZXRLZXkgPT4ge1xuICAgICAgbGV0IGJ1Y2tldEJpZHMgPSBbXTtcbiAgICAgIGxldCBiaWRzQnlCaWRkZXIgPSBncm91cEJ5KGJ1Y2tldHNbYnVja2V0S2V5XSwgJ2JpZGRlckNvZGUnKTtcbiAgICAgIE9iamVjdC5rZXlzKGJpZHNCeUJpZGRlcikuZm9yRWFjaChrZXkgPT4gYnVja2V0Qmlkcy5wdXNoKGJpZHNCeUJpZGRlcltrZXldLnJlZHVjZShoaWdoZXN0Q3BtQ2FsbGJhY2spKSk7XG4gICAgICAvLyBpZiBhZFVuaXRCaWRMaW1pdCBpcyBzZXQsIHBhc3MgdG9wIE4gbnVtYmVyIGJpZHNcbiAgICAgIGlmIChhZFVuaXRCaWRMaW1pdCA+IDApIHtcbiAgICAgICAgYnVja2V0QmlkcyA9IGRlYWxQcmlvcml0aXphdGlvbiA/IGJ1Y2tldEJpZHMuc29ydChzb3J0QnlEZWFsQW5kUHJpY2VCdWNrZXRPckNwbSh0cnVlKSkgOiBidWNrZXRCaWRzLnNvcnQoKGEsIGIpID0+IGIuY3BtIC0gYS5jcG0pO1xuICAgICAgICBiaWRzLnB1c2goLi4uYnVja2V0Qmlkcy5zbGljZSgwLCBhZFVuaXRCaWRMaW1pdCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmlkcy5wdXNoKC4uLmJ1Y2tldEJpZHMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJpZHM7XG4gIH1cblxuICByZXR1cm4gYmlkc1JlY2VpdmVkO1xufSk7XG5cbi8qKlxuKiBBIGRlc2NlbmRpbmcgc29ydCBmdW5jdGlvbiB0aGF0IHdpbGwgc29ydCB0aGUgbGlzdCBvZiBvYmplY3RzIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgdHdvIGRpbWVuc2lvbnM6XG4qICAtIGJpZHMgd2l0aCBhIGRlYWwgYXJlIHNvcnRlZCBiZWZvcmUgYmlkcyB3L28gYSBkZWFsXG4qICAtIHRoZW4gc29ydCBiaWRzIGluIGVhY2ggZ3JvdXBpbmcgYmFzZWQgb24gdGhlIGhiX3BiIHZhbHVlXG4qIGVnOiB0aGUgZm9sbG93aW5nIGxpc3Qgb2YgYmlkcyB3b3VsZCBiZSBzb3J0ZWQgbGlrZTpcbiogIFt7XG4qICAgIFwiaGJfYWRpZFwiOiBcInZ3eFwiLFxuKiAgICBcImhiX3BiXCI6IFwiMjhcIixcbiogICAgXCJoYl9kZWFsXCI6IFwiNzc0N1wiXG4qICB9LCB7XG4qICAgIFwiaGJfYWRpZFwiOiBcImprbFwiLFxuKiAgICBcImhiX3BiXCI6IFwiMTBcIixcbiogICAgXCJoYl9kZWFsXCI6IFwiOTIzNFwiXG4qICB9LCB7XG4qICAgIFwiaGJfYWRpZFwiOiBcInN0dVwiLFxuKiAgICBcImhiX3BiXCI6IFwiNTBcIlxuKiAgfSwge1xuKiAgICBcImhiX2FkaWRcIjogXCJkZWZcIixcbiogICAgXCJoYl9wYlwiOiBcIjJcIlxuKiAgfV1cbiovXG5leHBvcnQgZnVuY3Rpb24gc29ydEJ5RGVhbEFuZFByaWNlQnVja2V0T3JDcG0odXNlQ3BtID0gZmFsc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICBpZiAoYS5hZHNlcnZlclRhcmdldGluZy5oYl9kZWFsICE9PSB1bmRlZmluZWQgJiYgYi5hZHNlcnZlclRhcmdldGluZy5oYl9kZWFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpZiAoKGEuYWRzZXJ2ZXJUYXJnZXRpbmcuaGJfZGVhbCA9PT0gdW5kZWZpbmVkICYmIGIuYWRzZXJ2ZXJUYXJnZXRpbmcuaGJfZGVhbCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgLy8gYXNzdW1pbmcgYm90aCB2YWx1ZXMgZWl0aGVyIGhhdmUgYSBkZWFsIG9yIGRvbid0IGhhdmUgYSBkZWFsIC0gc29ydCBieSB0aGUgaGJfcGIgcGFyYW1cbiAgICBpZiAodXNlQ3BtKSB7XG4gICAgICByZXR1cm4gYi5jcG0gLSBhLmNwbTtcbiAgICB9XG5cbiAgICByZXR1cm4gYi5hZHNlcnZlclRhcmdldGluZy5oYl9wYiAtIGEuYWRzZXJ2ZXJUYXJnZXRpbmcuaGJfcGI7XG4gIH1cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0LjxzdHJpbmcsc3RyaW5nPn0gdGFyZ2V0aW5nXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGFyZ2V0aW5nX2tleVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdC48c3RyaW5nLE9iamVjdC48c3RyaW5nLHN0cmluZ1tdPltdPltdfSB0YXJnZXRpbmdBcnJheVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdUYXJnZXRpbmcoYXVjdGlvbk1hbmFnZXIpIHtcbiAgbGV0IHRhcmdldGluZyA9IHt9O1xuICBsZXQgbGF0ZXN0QXVjdGlvbkZvckFkVW5pdCA9IHt9O1xuXG4gIHRhcmdldGluZy5zZXRMYXRlc3RBdWN0aW9uRm9yQWRVbml0ID0gZnVuY3Rpb24oYWRVbml0Q29kZSwgYXVjdGlvbklkKSB7XG4gICAgbGF0ZXN0QXVjdGlvbkZvckFkVW5pdFthZFVuaXRDb2RlXSA9IGF1Y3Rpb25JZDtcbiAgfTtcblxuICB0YXJnZXRpbmcucmVzZXRQcmVzZXRUYXJnZXRpbmcgPSBmdW5jdGlvbihhZFVuaXRDb2RlLCBjdXN0b21TbG90TWF0Y2hpbmcpIHtcbiAgICBpZiAoaXNHcHRQdWJhZHNEZWZpbmVkKCkpIHtcbiAgICAgIGNvbnN0IGFkVW5pdENvZGVzID0gZ2V0QWRVbml0Q29kZXMoYWRVbml0Q29kZSk7XG4gICAgICBjb25zdCBhZFVuaXRzID0gYXVjdGlvbk1hbmFnZXIuZ2V0QWRVbml0cygpLmZpbHRlcihhZFVuaXQgPT4gaW5jbHVkZXMoYWRVbml0Q29kZXMsIGFkVW5pdC5jb2RlKSk7XG4gICAgICBsZXQgdW5zZXRLZXlzID0gcGJUYXJnZXRpbmdLZXlzLnJlZHVjZSgocmVkdWNlciwga2V5KSA9PiB7XG4gICAgICAgIHJlZHVjZXJba2V5XSA9IG51bGw7XG4gICAgICAgIHJldHVybiByZWR1Y2VyO1xuICAgICAgfSwge30pO1xuICAgICAgd2luZG93Lmdvb2dsZXRhZy5wdWJhZHMoKS5nZXRTbG90cygpLmZvckVhY2goc2xvdCA9PiB7XG4gICAgICAgIGxldCBjdXN0b21TbG90TWF0Y2hpbmdGdW5jID0gaXNGbihjdXN0b21TbG90TWF0Y2hpbmcpICYmIGN1c3RvbVNsb3RNYXRjaGluZyhzbG90KTtcbiAgICAgICAgLy8gcmVzZXQgb25seSByZWdpc3RlcmVkIGFkdW5pdHNcbiAgICAgICAgYWRVbml0cy5mb3JFYWNoKHVuaXQgPT4ge1xuICAgICAgICAgIGlmICh1bml0LmNvZGUgPT09IHNsb3QuZ2V0QWRVbml0UGF0aCgpIHx8XG4gICAgICAgICAgICAgIHVuaXQuY29kZSA9PT0gc2xvdC5nZXRTbG90RWxlbWVudElkKCkgfHxcbiAgICAgICAgICAgICAgKGlzRm4oY3VzdG9tU2xvdE1hdGNoaW5nRnVuYykgJiYgY3VzdG9tU2xvdE1hdGNoaW5nRnVuYyh1bml0LmNvZGUpKSkge1xuICAgICAgICAgICAgc2xvdC51cGRhdGVUYXJnZXRpbmdGcm9tTWFwKHVuc2V0S2V5cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB0YXJnZXRpbmcucmVzZXRQcmVzZXRUYXJnZXRpbmdBU1QgPSBmdW5jdGlvbihhZFVuaXRDb2RlKSB7XG4gICAgY29uc3QgYWRVbml0Q29kZXMgPSBnZXRBZFVuaXRDb2RlcyhhZFVuaXRDb2RlKTtcbiAgICBhZFVuaXRDb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKHVuaXQpIHtcbiAgICAgIGNvbnN0IGFzdFRhZyA9IHdpbmRvdy5hcG50YWcuZ2V0VGFnKHVuaXQpO1xuICAgICAgaWYgKGFzdFRhZyAmJiBhc3RUYWcua2V5d29yZHMpIHtcbiAgICAgICAgY29uc3QgY3VycmVudEtleXdvcmRzID0gT2JqZWN0LmtleXMoYXN0VGFnLmtleXdvcmRzKTtcbiAgICAgICAgY29uc3QgbmV3S2V5d29yZHMgPSB7fTtcbiAgICAgICAgY3VycmVudEtleXdvcmRzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgIGlmICghaW5jbHVkZXMocGJUYXJnZXRpbmdLZXlzLCBrZXkudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIG5ld0tleXdvcmRzW2tleV0gPSBhc3RUYWcua2V5d29yZHNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHdpbmRvdy5hcG50YWcubW9kaWZ5VGFnKHVuaXQsIHsga2V5d29yZHM6IG5ld0tleXdvcmRzIH0pXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIGNoZWNrcyBpZiBiaWQgaGFzIHRhcmdldGluZyBzZXQgYW5kIGJlbG9uZ3MgYmFzZWQgb24gbWF0Y2hpbmcgYWQgdW5pdCBjb2Rlc1xuICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIG9yIGZhbHNlXG4gICAqL1xuICBmdW5jdGlvbiBiaWRTaG91bGRCZUFkZGVkVG9UYXJnZXRpbmcoYmlkLCBhZFVuaXRDb2Rlcykge1xuICAgIHJldHVybiBiaWQuYWRzZXJ2ZXJUYXJnZXRpbmcgJiYgYWRVbml0Q29kZXMgJiZcbiAgICAgICgoaXNBcnJheShhZFVuaXRDb2RlcykgJiYgaW5jbHVkZXMoYWRVbml0Q29kZXMsIGJpZC5hZFVuaXRDb2RlKSkgfHxcbiAgICAgICh0eXBlb2YgYWRVbml0Q29kZXMgPT09ICdzdHJpbmcnICYmIGJpZC5hZFVuaXRDb2RlID09PSBhZFVuaXRDb2RlcykpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRhcmdldGluZyBmb3IgYW55IGJpZHMgd2hpY2ggaGF2ZSBkZWFscyBpZiBhbHdheXNJbmNsdWRlRGVhbHMgPT09IHRydWVcbiAgICovXG4gIGZ1bmN0aW9uIGdldERlYWxCaWRzKGFkVW5pdENvZGVzLCBiaWRzUmVjZWl2ZWQpIHtcbiAgICBpZiAoY29uZmlnLmdldENvbmZpZygndGFyZ2V0aW5nQ29udHJvbHMuYWx3YXlzSW5jbHVkZURlYWxzJykgPT09IHRydWUpIHtcbiAgICAgIGNvbnN0IHN0YW5kYXJkS2V5cyA9IEZFQVRVUkVTLk5BVElWRSA/IFRBUkdFVElOR19LRVlTLmNvbmNhdChOQVRJVkVfVEFSR0VUSU5HX0tFWVMpIDogVEFSR0VUSU5HX0tFWVMuc2xpY2UoKTtcblxuICAgICAgLy8gd2Ugb25seSB3YW50IHRoZSB0b3AgYmlkIGZyb20gYmlkZGVycyB3aG8gaGF2ZSBtdWx0aXBsZSBlbnRyaWVzIHBlciBhZCB1bml0IGNvZGVcbiAgICAgIGNvbnN0IGJpZHMgPSBnZXRIaWdoZXN0Q3BtQmlkc0Zyb21CaWRQb29sKGJpZHNSZWNlaXZlZCwgZ2V0SGlnaGVzdENwbSk7XG5cbiAgICAgIC8vIHBvcHVsYXRlIHRhcmdldGluZyBrZXlzIGZvciB0aGUgcmVtYWluaW5nIGJpZHMgaWYgdGhleSBoYXZlIGEgZGVhbElkXG4gICAgICByZXR1cm4gYmlkcy5tYXAoYmlkID0+IHtcbiAgICAgICAgaWYgKGJpZC5kZWFsSWQgJiYgYmlkU2hvdWxkQmVBZGRlZFRvVGFyZ2V0aW5nKGJpZCwgYWRVbml0Q29kZXMpKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFtiaWQuYWRVbml0Q29kZV06IGdldFRhcmdldGluZ01hcChiaWQsIHN0YW5kYXJkS2V5cy5maWx0ZXIoXG4gICAgICAgICAgICAgIGtleSA9PiB0eXBlb2YgYmlkLmFkc2VydmVyVGFyZ2V0aW5nW2tleV0gIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pLmZpbHRlcihiaWQgPT4gYmlkKTsgLy8gcmVtb3ZlcyBlbXB0eSBlbGVtZW50cyBpbiBhcnJheVxuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyZWQgYWQgc2VydmVyIHRhcmdldGluZyBmb3IgY3VzdG9tIGFuZCBhbGxvd2VkIGtleXMuXG4gICAqIEBwYXJhbSB7dGFyZ2V0aW5nQXJyYXl9IHRhcmdldGluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBhbGxvd2VkS2V5c1xuICAgKiBAcmV0dXJuIHt0YXJnZXRpbmdBcnJheX0gZmlsdGVyZWQgdGFyZ2V0aW5nXG4gICAqL1xuICBmdW5jdGlvbiBnZXRBbGxvd2VkVGFyZ2V0aW5nS2V5VmFsdWVzKHRhcmdldGluZywgYWxsb3dlZEtleXMpIHtcbiAgICBjb25zdCBkZWZhdWx0S2V5cmluZyA9IE9iamVjdC5hc3NpZ24oe30sIENPTlNUQU5UUy5UQVJHRVRJTkdfS0VZUywgQ09OU1RBTlRTLk5BVElWRV9LRVlTKTtcbiAgICBjb25zdCBkZWZhdWx0S2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRLZXlyaW5nKTtcbiAgICBjb25zdCBrZXlEaXNwb3NpdGlvbnMgPSB7fTtcbiAgICBsb2dJbmZvKGBhbGxvd1RhcmdldGluZ0tleXMgLSBhbGxvd2VkIGtleXMgWyAke2FsbG93ZWRLZXlzLm1hcChrID0+IGRlZmF1bHRLZXlyaW5nW2tdKS5qb2luKCcsICcpfSBdYCk7XG4gICAgdGFyZ2V0aW5nLm1hcChhZFVuaXQgPT4ge1xuICAgICAgY29uc3QgYWRVbml0Q29kZSA9IE9iamVjdC5rZXlzKGFkVW5pdClbMF07XG4gICAgICBjb25zdCBrZXlyaW5nID0gYWRVbml0W2FkVW5pdENvZGVdO1xuICAgICAgY29uc3Qga2V5cyA9IGtleXJpbmcuZmlsdGVyKGt2UGFpciA9PiB7XG4gICAgICAgIGNvbnN0IGtleSA9IE9iamVjdC5rZXlzKGt2UGFpcilbMF07XG4gICAgICAgIC8vIGNoZWNrIGlmIGtleSBpcyBpbiBkZWZhdWx0IGtleXMsIGlmIG5vdCwgaXQncyBjdXN0b20sIHdlIHdvbid0IHJlbW92ZSBpdC5cbiAgICAgICAgY29uc3QgaXNDdXN0b20gPSBkZWZhdWx0S2V5cy5maWx0ZXIoZGVmYXVsdEtleSA9PiBrZXkuaW5kZXhPZihkZWZhdWx0S2V5cmluZ1tkZWZhdWx0S2V5XSkgPT09IDApLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgLy8gY2hlY2sgaWYga2V5IGV4cGxpY2l0bHkgYWxsb3dlZCwgaWYgbm90LCB3ZSdsbCByZW1vdmUgaXQuXG4gICAgICAgIGNvbnN0IGZvdW5kID0gaXNDdXN0b20gfHwgZmluZChhbGxvd2VkS2V5cywgYWxsb3dlZEtleSA9PiB7XG4gICAgICAgICAgY29uc3QgYWxsb3dlZEtleU5hbWUgPSBkZWZhdWx0S2V5cmluZ1thbGxvd2VkS2V5XTtcbiAgICAgICAgICAvLyB3ZSdyZSBsb29raW5nIHRvIHNlZSBpZiB0aGUga2V5IGV4YWN0bHkgc3RhcnRzIHdpdGggb25lIG9mIG91ciBkZWZhdWx0IGtleXMuXG4gICAgICAgICAgLy8gKHdoaWNoIGhvcGVmdWxseSBtZWFucyBpdCdzIG5vdCBjdXN0b20pXG4gICAgICAgICAgY29uc3QgZm91bmQgPSBrZXkuaW5kZXhPZihhbGxvd2VkS2V5TmFtZSkgPT09IDA7XG4gICAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgICAgICB9KTtcbiAgICAgICAga2V5RGlzcG9zaXRpb25zW2tleV0gPSAhZm91bmQ7XG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICAgIH0pO1xuICAgICAgYWRVbml0W2FkVW5pdENvZGVdID0ga2V5cztcbiAgICB9KTtcbiAgICBjb25zdCByZW1vdmVkS2V5cyA9IE9iamVjdC5rZXlzKGtleURpc3Bvc2l0aW9ucykuZmlsdGVyKGQgPT4ga2V5RGlzcG9zaXRpb25zW2RdKTtcbiAgICBsb2dJbmZvKGBhbGxvd1RhcmdldGluZ0tleXMgLSByZW1vdmVkIGtleXMgWyAke3JlbW92ZWRLZXlzLmpvaW4oJywgJyl9IF1gKTtcbiAgICAvLyByZW1vdmUgYW55IGVtcHR5IHRhcmdldGluZyBvYmplY3RzLCBhcyB0aGV5J3JlIHVubmVjZXNzYXJ5LlxuICAgIGNvbnN0IGZpbHRlcmVkVGFyZ2V0aW5nID0gdGFyZ2V0aW5nLmZpbHRlcihhZFVuaXQgPT4ge1xuICAgICAgY29uc3QgYWRVbml0Q29kZSA9IE9iamVjdC5rZXlzKGFkVW5pdClbMF07XG4gICAgICBjb25zdCBrZXlyaW5nID0gYWRVbml0W2FkVW5pdENvZGVdO1xuICAgICAgcmV0dXJuIGtleXJpbmcubGVuZ3RoID4gMDtcbiAgICB9KTtcbiAgICByZXR1cm4gZmlsdGVyZWRUYXJnZXRpbmdcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBhZCBzZXJ2ZXIgdGFyZ2V0aW5nIGZvciBhbGwgYWQgdW5pdHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gYWRVbml0Q29kZVxuICAgKiBAcmV0dXJuIHtPYmplY3QuPHN0cmluZyx0YXJnZXRpbmc+fSB0YXJnZXRpbmdcbiAgICovXG4gIHRhcmdldGluZy5nZXRBbGxUYXJnZXRpbmcgPSBmdW5jdGlvbihhZFVuaXRDb2RlLCBiaWRzUmVjZWl2ZWQgPSBnZXRCaWRzUmVjZWl2ZWQoKSkge1xuICAgIGNvbnN0IGFkVW5pdENvZGVzID0gZ2V0QWRVbml0Q29kZXMoYWRVbml0Q29kZSk7XG5cbiAgICAvLyBHZXQgdGFyZ2V0aW5nIGZvciB0aGUgd2lubmluZyBiaWQuIEFkZCB0YXJnZXRpbmcgZm9yIGFueSBiaWRzIHRoYXQgaGF2ZVxuICAgIC8vIGBhbHdheXNVc2VCaWQ9dHJ1ZWAuIElmIHNlbmRpbmcgYWxsIGJpZHMgaXMgZW5hYmxlZCwgYWRkIHRhcmdldGluZyBmb3IgbG9zaW5nIGJpZHMuXG4gICAgdmFyIHRhcmdldGluZyA9IGdldFdpbm5pbmdCaWRUYXJnZXRpbmcoYWRVbml0Q29kZXMsIGJpZHNSZWNlaXZlZClcbiAgICAgIC5jb25jYXQoZ2V0Q3VzdG9tQmlkVGFyZ2V0aW5nKGFkVW5pdENvZGVzLCBiaWRzUmVjZWl2ZWQpKVxuICAgICAgLmNvbmNhdChjb25maWcuZ2V0Q29uZmlnKCdlbmFibGVTZW5kQWxsQmlkcycpID8gZ2V0QmlkTGFuZHNjYXBlVGFyZ2V0aW5nKGFkVW5pdENvZGVzLCBiaWRzUmVjZWl2ZWQpIDogZ2V0RGVhbEJpZHMoYWRVbml0Q29kZXMsIGJpZHNSZWNlaXZlZCkpXG4gICAgICAuY29uY2F0KGdldEFkVW5pdFRhcmdldGluZyhhZFVuaXRDb2RlcykpO1xuXG4gICAgLy8gc3RvcmUgYSByZWZlcmVuY2Ugb2YgdGhlIHRhcmdldGluZyBrZXlzXG4gICAgdGFyZ2V0aW5nLm1hcChhZFVuaXRDb2RlID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKGFkVW5pdENvZGUpLm1hcChrZXkgPT4ge1xuICAgICAgICBhZFVuaXRDb2RlW2tleV0ubWFwKHRhcmdldEtleSA9PiB7XG4gICAgICAgICAgaWYgKHBiVGFyZ2V0aW5nS2V5cy5pbmRleE9mKE9iamVjdC5rZXlzKHRhcmdldEtleSlbMF0pID09PSAtMSkge1xuICAgICAgICAgICAgcGJUYXJnZXRpbmdLZXlzID0gT2JqZWN0LmtleXModGFyZ2V0S2V5KS5jb25jYXQocGJUYXJnZXRpbmdLZXlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBkZWZhdWx0S2V5cyA9IE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIENPTlNUQU5UUy5ERUZBVUxUX1RBUkdFVElOR19LRVlTLCBDT05TVEFOVFMuTkFUSVZFX0tFWVMpKTtcbiAgICBsZXQgYWxsb3dlZEtleXMgPSBjb25maWcuZ2V0Q29uZmlnKENGR19BTExPV19UQVJHRVRJTkdfS0VZUyk7XG4gICAgY29uc3QgYWRkZWRLZXlzID0gY29uZmlnLmdldENvbmZpZyhDRkdfQUREX1RBUkdFVElOR19LRVlTKTtcblxuICAgIGlmIChhZGRlZEtleXMgIT0gbnVsbCAmJiBhbGxvd2VkS2V5cyAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoVEFSR0VUSU5HX0tFWV9DT05GSUdVUkFUSU9OX0VSUk9SX01TRyk7XG4gICAgfSBlbHNlIGlmIChhZGRlZEtleXMgIT0gbnVsbCkge1xuICAgICAgYWxsb3dlZEtleXMgPSBkZWZhdWx0S2V5cy5jb25jYXQoYWRkZWRLZXlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWxsb3dlZEtleXMgPSBhbGxvd2VkS2V5cyB8fCBkZWZhdWx0S2V5cztcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShhbGxvd2VkS2V5cykgJiYgYWxsb3dlZEtleXMubGVuZ3RoID4gMCkge1xuICAgICAgdGFyZ2V0aW5nID0gZ2V0QWxsb3dlZFRhcmdldGluZ0tleVZhbHVlcyh0YXJnZXRpbmcsIGFsbG93ZWRLZXlzKTtcbiAgICB9XG5cbiAgICB0YXJnZXRpbmcgPSBmbGF0dGVuVGFyZ2V0aW5nKHRhcmdldGluZyk7XG5cbiAgICBjb25zdCBhdWN0aW9uS2V5c1RocmVzaG9sZCA9IGNvbmZpZy5nZXRDb25maWcoJ3RhcmdldGluZ0NvbnRyb2xzLmF1Y3Rpb25LZXlNYXhDaGFycycpO1xuICAgIGlmIChhdWN0aW9uS2V5c1RocmVzaG9sZCkge1xuICAgICAgbG9nSW5mbyhgRGV0ZWN0ZWQgJ3RhcmdldGluZ0NvbnRyb2xzLmF1Y3Rpb25LZXlNYXhDaGFycycgd2FzIGFjdGl2ZSBmb3IgdGhpcyBhdWN0aW9uOyBzZXQgd2l0aCBhIGxpbWl0IG9mICR7YXVjdGlvbktleXNUaHJlc2hvbGR9IGNoYXJhY3RlcnMuICBSdW5uaW5nIGNoZWNrcyBvbiBhdWN0aW9uIGtleXMuLi5gKTtcbiAgICAgIHRhcmdldGluZyA9IGZpbHRlclRhcmdldGluZ0tleXModGFyZ2V0aW5nLCBhdWN0aW9uS2V5c1RocmVzaG9sZCk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBzdXJlIGF0IGxlYXN0IHRoZXJlIGlzIGEgZW50cnkgcGVyIGFkVW5pdCBjb2RlIGluIHRoZSB0YXJnZXRpbmdTZXQgc28gcmVjZWl2ZXJzIG9mIFNFVF9UQVJHRVRJTkcgY2FsbCdzIGNhbiBrbm93IHdoYXQgYWQgdW5pdHMgYXJlIGJlaW5nIGludm9rZWRcbiAgICBhZFVuaXRDb2Rlcy5mb3JFYWNoKGNvZGUgPT4ge1xuICAgICAgaWYgKCF0YXJnZXRpbmdbY29kZV0pIHtcbiAgICAgICAgdGFyZ2V0aW5nW2NvZGVdID0ge307XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGFyZ2V0aW5nO1xuICB9O1xuXG4gIC8vIHdhcm4gYWJvdXQgY29uZmxpY3RpbmcgY29uZmlndXJhdGlvblxuICBjb25maWcuZ2V0Q29uZmlnKCd0YXJnZXRpbmdDb250cm9scycsIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICBpZiAoZGVlcEFjY2Vzcyhjb25maWcsIENGR19BTExPV19UQVJHRVRJTkdfS0VZUykgIT0gbnVsbCAmJiBkZWVwQWNjZXNzKGNvbmZpZywgQ0ZHX0FERF9UQVJHRVRJTkdfS0VZUykgIT0gbnVsbCkge1xuICAgICAgbG9nRXJyb3IoVEFSR0VUSU5HX0tFWV9DT05GSUdVUkFUSU9OX0VSUk9SX01TRyk7XG4gICAgfVxuICB9KTtcblxuICAvLyBjcmVhdGUgYW4gZW5jb2RlZCBzdHJpbmcgdmFyaWFudCBiYXNlZCBvbiB0aGUga2V5cGFpcnMgb2YgdGhlIHByb3ZpZGVkIG9iamVjdFxuICAvLyAgLSBub3RlIHRoaXMgd2lsbCBlbmNvZGUgdGhlIGNoYXJhY3RlcnMgYmV0d2VlbiB0aGUga2V5cyAoaWUgPSBhbmQgJilcbiAgZnVuY3Rpb24gY29udmVydEtleXNUb1F1ZXJ5Rm9ybShrZXlNYXApIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoa2V5TWFwKS5yZWR1Y2UoZnVuY3Rpb24gKHF1ZXJ5U3RyaW5nLCBrZXkpIHtcbiAgICAgIGxldCBlbmNvZGVkS2V5UGFpciA9IGAke2tleX0lM2Qke2VuY29kZVVSSUNvbXBvbmVudChrZXlNYXBba2V5XSl9JTI2YDtcbiAgICAgIHJldHVybiBxdWVyeVN0cmluZyArPSBlbmNvZGVkS2V5UGFpcjtcbiAgICB9LCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBmaWx0ZXJUYXJnZXRpbmdLZXlzKHRhcmdldGluZywgYXVjdGlvbktleXNUaHJlc2hvbGQpIHtcbiAgICAvLyByZWFkIGVhY2ggdGFyZ2V0aW5nLmFkVW5pdCBvYmplY3QgYW5kIHNvcnQgdGhlIGFkVW5pdHMgaW50byBhIGxpc3Qgb2YgYWRVbml0Q29kZXMgYmFzZWQgb24gcHJpb3JpemF0aW9uIHNldHRpbmcgKGVnIENQTSlcbiAgICBsZXQgdGFyZ2V0aW5nQ29weSA9IGRlZXBDbG9uZSh0YXJnZXRpbmcpO1xuXG4gICAgbGV0IHRhcmdldGluZ01hcCA9IE9iamVjdC5rZXlzKHRhcmdldGluZ0NvcHkpLm1hcChhZFVuaXRDb2RlID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFkVW5pdENvZGUsXG4gICAgICAgIGFkc2VydmVyVGFyZ2V0aW5nOiB0YXJnZXRpbmdDb3B5W2FkVW5pdENvZGVdXG4gICAgICB9O1xuICAgIH0pLnNvcnQoc29ydEJ5RGVhbEFuZFByaWNlQnVja2V0T3JDcG0oKSk7XG5cbiAgICAvLyBpdGVyYXRlIHRocm91Z2ggdGhlIHRhcmdldGluZyBiYXNlZCBvbiBhYm92ZSBsaXN0IGFuZCB0cmFuc2Zvcm0gdGhlIGtleXMgaW50byB0aGUgcXVlcnktZXF1aXZhbGVudCBhbmQgY291bnQgY2hhcmFjdGVyc1xuICAgIHJldHVybiB0YXJnZXRpbmdNYXAucmVkdWNlKGZ1bmN0aW9uIChhY2NNYXAsIGN1cnJNYXAsIGluZGV4LCBhcnIpIHtcbiAgICAgIGxldCBhZFVuaXRRdWVyeVN0cmluZyA9IGNvbnZlcnRLZXlzVG9RdWVyeUZvcm0oY3Vyck1hcC5hZHNlcnZlclRhcmdldGluZyk7XG5cbiAgICAgIC8vIGZvciB0aGUgbGFzdCBhZFVuaXQgLSB0cmltIGxhc3QgZW5jb2RlZCBhbXBlcnNhbmQgZnJvbSB0aGUgY29udmVydGVkIHF1ZXJ5IHN0cmluZ1xuICAgICAgaWYgKChpbmRleCArIDEpID09PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgIGFkVW5pdFF1ZXJ5U3RyaW5nID0gYWRVbml0UXVlcnlTdHJpbmcuc2xpY2UoMCwgLTMpO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiB1bmRlciBydW5uaW5nIHRocmVzaG9sZCBhZGQgdG8gcmVzdWx0XG4gICAgICBsZXQgY29kZSA9IGN1cnJNYXAuYWRVbml0Q29kZTtcbiAgICAgIGxldCBxdWVyeVNpemUgPSBhZFVuaXRRdWVyeVN0cmluZy5sZW5ndGg7XG4gICAgICBpZiAocXVlcnlTaXplIDw9IGF1Y3Rpb25LZXlzVGhyZXNob2xkKSB7XG4gICAgICAgIGF1Y3Rpb25LZXlzVGhyZXNob2xkIC09IHF1ZXJ5U2l6ZTtcbiAgICAgICAgbG9nSW5mbyhgQWRVbml0ICcke2NvZGV9JyBhdWN0aW9uIGtleXMgY29tcHJpc2VkIG9mICR7cXVlcnlTaXplfSBjaGFyYWN0ZXJzLiAgRGVkdWN0ZWQgZnJvbSBydW5uaW5nIHRocmVzaG9sZDsgbmV3IGxpbWl0IGlzICR7YXVjdGlvbktleXNUaHJlc2hvbGR9YCwgdGFyZ2V0aW5nQ29weVtjb2RlXSk7XG5cbiAgICAgICAgYWNjTWFwW2NvZGVdID0gdGFyZ2V0aW5nQ29weVtjb2RlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ1dhcm4oYFRoZSBmb2xsb3dpbmcga2V5cyBmb3IgYWRVbml0Q29kZSAnJHtjb2RlfScgZXhjZWVkZWQgdGhlIGN1cnJlbnQgbGltaXQgb2YgdGhlICdhdWN0aW9uS2V5TWF4Q2hhcnMnIHNldHRpbmcuXFxuVGhlIGtleS1zZXQgc2l6ZSB3YXMgJHtxdWVyeVNpemV9LCB0aGUgY3VycmVudCBhbGxvdHRlZCBhbW91bnQgd2FzICR7YXVjdGlvbktleXNUaHJlc2hvbGR9LlxcbmAsIHRhcmdldGluZ0NvcHlbY29kZV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGluZGV4ICsgMSkgPT09IGFyci5sZW5ndGggJiYgT2JqZWN0LmtleXMoYWNjTWFwKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbG9nRXJyb3IoJ05vIGF1Y3Rpb24gdGFyZ2V0aW5nIGtleXMgd2VyZSBwZXJtaXR0ZWQgZHVlIHRvIHRoZSBzZXR0aW5nIGluIHNldENvbmZpZyh0YXJnZXRpbmdDb250cm9scy5hdWN0aW9uS2V5TWF4Q2hhcnMpLiAgUGxlYXNlIHJldmlldyBzZXR1cCBhbmQgY29uc2lkZXIgYWRqdXN0aW5nLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY01hcDtcbiAgICB9LCB7fSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGFyZ2V0aW5nIGFycmF5IGFuZCBmbGF0dGVucyB0byBtYWtlIGl0IGVhc2lseSBpdGVyYXRhYmxlXG4gICAqIGUuZzogU2FtcGxlIGlucHV0IHRvIHRoaXMgZnVuY3Rpb25cbiAgICogYGBgXG4gICAqIFtcbiAgICogICAge1xuICAgKiAgICAgIFwiZGl2LWdwdC1hZC0xNDYwNTA1NzQ4NTYxLTBcIjogW3tcImhiX2JpZGRlclwiOiBbXCJhcHBuZXh1c0FzdFwiXX1dXG4gICAqICAgIH0sXG4gICAqICAgIHtcbiAgICogICAgICBcImRpdi1ncHQtYWQtMTQ2MDUwNTc0ODU2MS0wXCI6IFt7XCJoYl9iaWRkZXJfYXBwbmV4dXNBc1wiOiBbXCJhcHBuZXh1c0FzdFwiLCBcIm90aGVyXCJdfV1cbiAgICogICAgfVxuICAgKiBdXG4gICAqIGBgYFxuICAgKiBSZXN1bHRpbmcgYXJyYXlcbiAgICogYGBgXG4gICAqIHtcbiAgICogIFwiZGl2LWdwdC1hZC0xNDYwNTA1NzQ4NTYxLTBcIjoge1xuICAgKiAgICBcImhiX2JpZGRlclwiOiBcImFwcG5leHVzQXN0XCIsXG4gICAqICAgIFwiaGJfYmlkZGVyX2FwcG5leHVzQXNcIjogXCJhcHBuZXh1c0FzdCxvdGhlclwiXG4gICAqICB9XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7dGFyZ2V0aW5nQXJyYXl9ICB0YXJnZXRpbmdcbiAgICogQHJldHVybiB7T2JqZWN0LjxzdHJpbmcsdGFyZ2V0aW5nPn0gIHRhcmdldGluZ1xuICAgKi9cbiAgZnVuY3Rpb24gZmxhdHRlblRhcmdldGluZyh0YXJnZXRpbmcpIHtcbiAgICBsZXQgdGFyZ2V0aW5nT2JqID0gdGFyZ2V0aW5nLm1hcCh0YXJnZXRpbmcgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW09iamVjdC5rZXlzKHRhcmdldGluZylbMF1dOiB0YXJnZXRpbmdbT2JqZWN0LmtleXModGFyZ2V0aW5nKVswXV1cbiAgICAgICAgICAubWFwKHRhcmdldCA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBbT2JqZWN0LmtleXModGFyZ2V0KVswXV06IHRhcmdldFtPYmplY3Qua2V5cyh0YXJnZXQpWzBdXS5qb2luKCcsJylcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkucmVkdWNlKChwLCBjKSA9PiBPYmplY3QuYXNzaWduKGMsIHApLCB7fSlcbiAgICAgIH07XG4gICAgfSkucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgdGFyZ2V0aW5nKSB7XG4gICAgICB2YXIga2V5ID0gT2JqZWN0LmtleXModGFyZ2V0aW5nKVswXTtcbiAgICAgIGFjY3VtdWxhdG9yW2tleV0gPSBPYmplY3QuYXNzaWduKHt9LCBhY2N1bXVsYXRvcltrZXldLCB0YXJnZXRpbmdba2V5XSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfSwge30pO1xuICAgIHJldHVybiB0YXJnZXRpbmdPYmo7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0YXJnZXRpbmcgZm9yIERGUFxuICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLE9iamVjdC48c3RyaW5nLHN0cmluZz4+fSB0YXJnZXRpbmdDb25maWdcbiAgICovXG4gIHRhcmdldGluZy5zZXRUYXJnZXRpbmdGb3JHUFQgPSBmdW5jdGlvbih0YXJnZXRpbmdDb25maWcsIGN1c3RvbVNsb3RNYXRjaGluZykge1xuICAgIHdpbmRvdy5nb29nbGV0YWcucHViYWRzKCkuZ2V0U2xvdHMoKS5mb3JFYWNoKHNsb3QgPT4ge1xuICAgICAgT2JqZWN0LmtleXModGFyZ2V0aW5nQ29uZmlnKS5maWx0ZXIoY3VzdG9tU2xvdE1hdGNoaW5nID8gY3VzdG9tU2xvdE1hdGNoaW5nKHNsb3QpIDogaXNBZFVuaXRDb2RlTWF0Y2hpbmdTbG90KHNsb3QpKVxuICAgICAgICAuZm9yRWFjaCh0YXJnZXRJZCA9PiB7XG4gICAgICAgICAgT2JqZWN0LmtleXModGFyZ2V0aW5nQ29uZmlnW3RhcmdldElkXSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGFyZ2V0aW5nQ29uZmlnW3RhcmdldElkXVtrZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuaW5kZXhPZignLCcpICE9PSAtMSkge1xuICAgICAgICAgICAgICAvLyBkdWUgdG8gdGhlIGNoZWNrIHRoZSBhcnJheSB3aWxsIGJlIGZvcm1lZCBvbmx5IGlmIHN0cmluZyBoYXMgJywnIGVsc2UgcGxhaW4gc3RyaW5nIHdpbGwgYmUgYXNzaWduZWQgYXMgdmFsdWVcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0aW5nQ29uZmlnW3RhcmdldElkXVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbG9nTWVzc2FnZShgQXR0ZW1wdGluZyB0byBzZXQgdGFyZ2V0aW5nLW1hcCBmb3Igc2xvdDogJHtzbG90LmdldFNsb3RFbGVtZW50SWQoKX0gd2l0aCB0YXJnZXRpbmctbWFwOmAsIHRhcmdldGluZ0NvbmZpZ1t0YXJnZXRJZF0pO1xuICAgICAgICAgIHNsb3QudXBkYXRlVGFyZ2V0aW5nRnJvbU1hcCh0YXJnZXRpbmdDb25maWdbdGFyZ2V0SWRdKVxuICAgICAgICB9KVxuICAgIH0pXG4gIH07XG5cbiAgLyoqXG4gICAqIG5vcm1saXplcyBpbnB1dCB0byBhIGBhZFVuaXQuY29kZWAgYXJyYXlcbiAgICogQHBhcmFtICB7KHN0cmluZ3xzdHJpbmdbXSl9IGFkVW5pdENvZGUgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcmV0dXJuIHtzdHJpbmdbXX0gICAgIEFkVW5pdCBjb2RlIGFycmF5XG4gICAqL1xuICBmdW5jdGlvbiBnZXRBZFVuaXRDb2RlcyhhZFVuaXRDb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBhZFVuaXRDb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIFthZFVuaXRDb2RlXTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoYWRVbml0Q29kZSkpIHtcbiAgICAgIHJldHVybiBhZFVuaXRDb2RlO1xuICAgIH1cbiAgICByZXR1cm4gYXVjdGlvbk1hbmFnZXIuZ2V0QWRVbml0Q29kZXMoKSB8fCBbXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJpZHNSZWNlaXZlZCgpIHtcbiAgICBsZXQgYmlkc1JlY2VpdmVkID0gYXVjdGlvbk1hbmFnZXIuZ2V0Qmlkc1JlY2VpdmVkKCk7XG5cbiAgICBpZiAoIWNvbmZpZy5nZXRDb25maWcoJ3VzZUJpZENhY2hlJykpIHtcbiAgICAgIC8vIGRvbid0IHVzZSBiaWQgY2FjaGUgKGkuZS4gZmlsdGVyIG91dCBiaWRzIG5vdCBpbiB0aGUgbGF0ZXN0IGF1Y3Rpb24pXG4gICAgICBiaWRzUmVjZWl2ZWQgPSBiaWRzUmVjZWl2ZWQuZmlsdGVyKGJpZCA9PiBsYXRlc3RBdWN0aW9uRm9yQWRVbml0W2JpZC5hZFVuaXRDb2RlXSA9PT0gYmlkLmF1Y3Rpb25JZClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgY3VzdG9tIGJpZCBjYWNoZSBmaWx0ZXIgZnVuY3Rpb24gZXhpc3RzLCBydW4gZm9yIGVhY2ggYmlkIGZyb21cbiAgICAgIC8vIHByZXZpb3VzIGF1Y3Rpb25zLiBJZiBpdCByZXR1cm5zIHRydWUsIGluY2x1ZGUgYmlkIGluIGJpZCBwb29sXG4gICAgICBjb25zdCBmaWx0ZXJGdW5jdGlvbiA9IGNvbmZpZy5nZXRDb25maWcoJ2JpZENhY2hlRmlsdGVyRnVuY3Rpb24nKTtcbiAgICAgIGlmICh0eXBlb2YgZmlsdGVyRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYmlkc1JlY2VpdmVkID0gYmlkc1JlY2VpdmVkLmZpbHRlcihiaWQgPT4gbGF0ZXN0QXVjdGlvbkZvckFkVW5pdFtiaWQuYWRVbml0Q29kZV0gPT09IGJpZC5hdWN0aW9uSWQgfHwgISFmaWx0ZXJGdW5jdGlvbihiaWQpKVxuICAgICAgfVxuICAgIH1cblxuICAgIGJpZHNSZWNlaXZlZCA9IGJpZHNSZWNlaXZlZFxuICAgICAgLmZpbHRlcihiaWQgPT4gZGVlcEFjY2VzcyhiaWQsICd2aWRlby5jb250ZXh0JykgIT09IEFEUE9EKVxuICAgICAgLmZpbHRlcihpc0JpZFVzYWJsZSk7XG5cbiAgICByZXR1cm4gZ2V0SGlnaGVzdENwbUJpZHNGcm9tQmlkUG9vbChiaWRzUmVjZWl2ZWQsIGdldE9sZGVzdEhpZ2hlc3RDcG1CaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdG9wIGJpZHMgZm9yIGEgZ2l2ZW4gYWRVbml0IG9yIHNldCBvZiBhZFVuaXRzLlxuICAgKiBAcGFyYW0gIHsoc3RyaW5nfHN0cmluZ1tdKX0gYWRVbml0Q29kZSBhZFVuaXRDb2RlIG9yIGFycmF5IG9mIGFkVW5pdENvZGVzXG4gICAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICB0YXJnZXRpbmcuZ2V0V2lubmluZ0JpZHMgPSBmdW5jdGlvbihhZFVuaXRDb2RlLCBiaWRzUmVjZWl2ZWQgPSBnZXRCaWRzUmVjZWl2ZWQoKSkge1xuICAgIGNvbnN0IGFkVW5pdENvZGVzID0gZ2V0QWRVbml0Q29kZXMoYWRVbml0Q29kZSk7XG4gICAgcmV0dXJuIGJpZHNSZWNlaXZlZFxuICAgICAgLmZpbHRlcihiaWQgPT4gaW5jbHVkZXMoYWRVbml0Q29kZXMsIGJpZC5hZFVuaXRDb2RlKSlcbiAgICAgIC5maWx0ZXIoYmlkID0+IChiaWRkZXJTZXR0aW5ncy5nZXQoYmlkLmJpZGRlckNvZGUsICdhbGxvd1plcm9DcG1CaWRzJykgPT09IHRydWUpID8gYmlkLmNwbSA+PSAwIDogYmlkLmNwbSA+IDApXG4gICAgICAubWFwKGJpZCA9PiBiaWQuYWRVbml0Q29kZSlcbiAgICAgIC5maWx0ZXIodW5pcXVlcylcbiAgICAgIC5tYXAoYWRVbml0Q29kZSA9PiBiaWRzUmVjZWl2ZWRcbiAgICAgICAgLmZpbHRlcihiaWQgPT4gYmlkLmFkVW5pdENvZGUgPT09IGFkVW5pdENvZGUgPyBiaWQgOiBudWxsKVxuICAgICAgICAucmVkdWNlKGdldEhpZ2hlc3RDcG0pKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtICB7KHN0cmluZ3xzdHJpbmdbXSl9IGFkVW5pdENvZGUgYWRVbml0Q29kZSBvciBhcnJheSBvZiBhZFVuaXRDb2Rlc1xuICAgKiBTZXRzIHRhcmdldGluZyBmb3IgQVNUXG4gICAqL1xuICB0YXJnZXRpbmcuc2V0VGFyZ2V0aW5nRm9yQXN0ID0gZnVuY3Rpb24oYWRVbml0Q29kZXMpIHtcbiAgICBsZXQgYXN0VGFyZ2V0aW5nID0gdGFyZ2V0aW5nLmdldEFsbFRhcmdldGluZyhhZFVuaXRDb2Rlcyk7XG5cbiAgICB0cnkge1xuICAgICAgdGFyZ2V0aW5nLnJlc2V0UHJlc2V0VGFyZ2V0aW5nQVNUKGFkVW5pdENvZGVzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dFcnJvcigndW5hYmxlIHRvIHJlc2V0IHRhcmdldGluZyBmb3IgQVNUJyArIGUpXG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMoYXN0VGFyZ2V0aW5nKS5mb3JFYWNoKHRhcmdldElkID0+XG4gICAgICBPYmplY3Qua2V5cyhhc3RUYXJnZXRpbmdbdGFyZ2V0SWRdKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGxvZ01lc3NhZ2UoYEF0dGVtcHRpbmcgdG8gc2V0IHRhcmdldGluZyBmb3IgdGFyZ2V0SWQ6ICR7dGFyZ2V0SWR9IGtleTogJHtrZXl9IHZhbHVlOiAke2FzdFRhcmdldGluZ1t0YXJnZXRJZF1ba2V5XX1gKTtcbiAgICAgICAgLy8gc2V0S2V5d29yZHMgc3VwcG9ydHMgc3RyaW5nIGFuZCBhcnJheSBhcyB2YWx1ZVxuICAgICAgICBpZiAoaXNTdHIoYXN0VGFyZ2V0aW5nW3RhcmdldElkXVtrZXldKSB8fCBpc0FycmF5KGFzdFRhcmdldGluZ1t0YXJnZXRJZF1ba2V5XSkpIHtcbiAgICAgICAgICBsZXQga2V5d29yZHNPYmogPSB7fTtcbiAgICAgICAgICBsZXQgcmVnZXggPSAvcHRbMC05XS87XG4gICAgICAgICAgaWYgKGtleS5zZWFyY2gocmVnZXgpIDwgMCkge1xuICAgICAgICAgICAga2V5d29yZHNPYmpba2V5LnRvVXBwZXJDYXNlKCldID0gYXN0VGFyZ2V0aW5nW3RhcmdldElkXVtrZXldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwdCR7bn0ga2V5cyBzaG91bGQgbm90IGJlIHVwcGVyY2FzZWRcbiAgICAgICAgICAgIGtleXdvcmRzT2JqW2tleV0gPSBhc3RUYXJnZXRpbmdbdGFyZ2V0SWRdW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHdpbmRvdy5hcG50YWcuc2V0S2V5d29yZHModGFyZ2V0SWQsIGtleXdvcmRzT2JqLCB7IG92ZXJyaWRlS2V5VmFsdWU6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IHRhcmdldGluZyBrZXkgdmFsdWUgcGFpcnMgZm9yIHdpbm5pbmcgYmlkLlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSAgICBBZFVuaXQgY29kZSBhcnJheVxuICAgKiBAcmV0dXJuIHt0YXJnZXRpbmdBcnJheX0gICB3aW5uaW5nIGJpZHMgdGFyZ2V0aW5nXG4gICAqL1xuICBmdW5jdGlvbiBnZXRXaW5uaW5nQmlkVGFyZ2V0aW5nKGFkVW5pdENvZGVzLCBiaWRzUmVjZWl2ZWQpIHtcbiAgICBsZXQgd2lubmVycyA9IHRhcmdldGluZy5nZXRXaW5uaW5nQmlkcyhhZFVuaXRDb2RlcywgYmlkc1JlY2VpdmVkKTtcbiAgICBsZXQgc3RhbmRhcmRLZXlzID0gZ2V0U3RhbmRhcmRLZXlzKCk7XG5cbiAgICB3aW5uZXJzID0gd2lubmVycy5tYXAod2lubmVyID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFt3aW5uZXIuYWRVbml0Q29kZV06IE9iamVjdC5rZXlzKHdpbm5lci5hZHNlcnZlclRhcmdldGluZylcbiAgICAgICAgICAuZmlsdGVyKGtleSA9PlxuICAgICAgICAgICAgdHlwZW9mIHdpbm5lci5zZW5kU3RhbmRhcmRUYXJnZXRpbmcgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgICAgICB3aW5uZXIuc2VuZFN0YW5kYXJkVGFyZ2V0aW5nIHx8XG4gICAgICAgICAgICBzdGFuZGFyZEtleXMuaW5kZXhPZihrZXkpID09PSAtMSlcbiAgICAgICAgICAucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0aW5nVmFsdWUgPSBbd2lubmVyLmFkc2VydmVyVGFyZ2V0aW5nW2tleV1dO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0aW5nID0geyBba2V5LnN1YnN0cmluZygwLCBNQVhfREZQX0tFWUxFTkdUSCldOiB0YXJnZXRpbmdWYWx1ZSB9O1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gQ09OU1RBTlRTLlRBUkdFVElOR19LRVlTLkRFQUwpIHtcbiAgICAgICAgICAgICAgY29uc3QgYmlkZGVyQ29kZVRhcmdldGluZ0tleSA9IGAke2tleX1fJHt3aW5uZXIuYmlkZGVyQ29kZX1gLnN1YnN0cmluZygwLCBNQVhfREZQX0tFWUxFTkdUSCk7XG4gICAgICAgICAgICAgIGNvbnN0IGJpZGRlckNvZGVUYXJnZXRpbmcgPSB7IFtiaWRkZXJDb2RlVGFyZ2V0aW5nS2V5XTogdGFyZ2V0aW5nVmFsdWUgfTtcbiAgICAgICAgICAgICAgcmV0dXJuIFsuLi5hY2MsIHRhcmdldGluZywgYmlkZGVyQ29kZVRhcmdldGluZ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWy4uLmFjYywgdGFyZ2V0aW5nXTtcbiAgICAgICAgICB9LCBbXSlcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gd2lubmVycztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFN0YW5kYXJkS2V5cygpIHtcbiAgICByZXR1cm4gYXVjdGlvbk1hbmFnZXIuZ2V0U3RhbmRhcmRCaWRkZXJBZFNlcnZlclRhcmdldGluZygpIC8vIGluIGNhc2UgdXNpbmcgYSBjdXN0b20gc3RhbmRhcmQga2V5IHNldFxuICAgICAgLm1hcCh0YXJnZXRpbmcgPT4gdGFyZ2V0aW5nLmtleSlcbiAgICAgIC5jb25jYXQoVEFSR0VUSU5HX0tFWVMpLmZpbHRlcih1bmlxdWVzKTsgLy8gc3RhbmRhcmQga2V5cyBkZWZpbmVkIGluIHRoZSBsaWJyYXJ5LlxuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlIGN1c3RvbSBhZHNlcnZlclRhcmdldGluZyB3aXRoIHNhbWUga2V5IG5hbWUgZm9yIHNhbWUgYWRVbml0Q29kZS5cbiAgICogZS5nOiBBcHBuZXh1cyBkZWZpbmluZyBjdXN0b20ga2V5dmFsdWUgcGFpciBmb286YmFyIGFuZCBSdWJpY29uIGRlZmluaW5nIGN1c3RvbSBrZXl2YWx1ZSBwYWlyIGZvbzpiYXogd2lsbCBiZSBtZXJnZWQgdG8gZm9vOiBbJ2JhcicsJ2JheiddXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0W119IGFjYyBBY2N1bXVsYXRvciBmb3IgcmVkdWNlci4gSXQgd2lsbCBzdG9yZSB1cGRhdGVkIGJpZFJlc3BvbnNlIG9iamVjdHNcbiAgICogQHBhcmFtIHtPYmplY3R9IGJpZCBCaWRSZXNwb25zZVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggY3VycmVudCBpbmRleFxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnIgb3JpZ2luYWwgYXJyYXlcbiAgICovXG4gIGZ1bmN0aW9uIG1lcmdlQWRTZXJ2ZXJUYXJnZXRpbmcoYWNjLCBiaWQsIGluZGV4LCBhcnIpIHtcbiAgICBmdW5jdGlvbiBjb25jYXRUYXJnZXRpbmdWYWx1ZShrZXkpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjdXJyZW50QmlkRWxlbWVudCkge1xuICAgICAgICBpZiAoIWlzQXJyYXkoY3VycmVudEJpZEVsZW1lbnQuYWRzZXJ2ZXJUYXJnZXRpbmdba2V5XSkpIHtcbiAgICAgICAgICBjdXJyZW50QmlkRWxlbWVudC5hZHNlcnZlclRhcmdldGluZ1trZXldID0gW2N1cnJlbnRCaWRFbGVtZW50LmFkc2VydmVyVGFyZ2V0aW5nW2tleV1dO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRCaWRFbGVtZW50LmFkc2VydmVyVGFyZ2V0aW5nW2tleV0gPSBjdXJyZW50QmlkRWxlbWVudC5hZHNlcnZlclRhcmdldGluZ1trZXldLmNvbmNhdChiaWQuYWRzZXJ2ZXJUYXJnZXRpbmdba2V5XSkuZmlsdGVyKHVuaXF1ZXMpO1xuICAgICAgICBkZWxldGUgYmlkLmFkc2VydmVyVGFyZ2V0aW5nW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzU2FtZUFkdW5pdENvZGVBbmRLZXkoa2V5KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY3VycmVudEJpZEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRCaWRFbGVtZW50LmFkVW5pdENvZGUgPT09IGJpZC5hZFVuaXRDb2RlICYmIGN1cnJlbnRCaWRFbGVtZW50LmFkc2VydmVyVGFyZ2V0aW5nW2tleV1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhiaWQuYWRzZXJ2ZXJUYXJnZXRpbmcpXG4gICAgICAuZmlsdGVyKGdldEN1c3RvbUtleXMoKSlcbiAgICAgIC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmIChhY2MubGVuZ3RoKSB7XG4gICAgICAgICAgYWNjLmZpbHRlcihoYXNTYW1lQWR1bml0Q29kZUFuZEtleShrZXkpKVxuICAgICAgICAgICAgLmZvckVhY2goY29uY2F0VGFyZ2V0aW5nVmFsdWUoa2V5KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIGFjYy5wdXNoKGJpZCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1c3RvbUtleXMoKSB7XG4gICAgbGV0IHN0YW5kYXJkS2V5cyA9IGdldFN0YW5kYXJkS2V5cygpO1xuICAgIGlmIChGRUFUVVJFUy5OQVRJVkUpIHtcbiAgICAgIHN0YW5kYXJkS2V5cyA9IHN0YW5kYXJkS2V5cy5jb25jYXQoTkFUSVZFX1RBUkdFVElOR19LRVlTKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHN0YW5kYXJkS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRydW5jYXRlQ3VzdG9tS2V5cyhiaWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2JpZC5hZFVuaXRDb2RlXTogT2JqZWN0LmtleXMoYmlkLmFkc2VydmVyVGFyZ2V0aW5nKVxuICAgICAgICAvLyBHZXQgb25seSB0aGUgbm9uLXN0YW5kYXJkIGtleXMgb2YgdGhlIGxvc2luZyBiaWRzLCBzaW5jZSB3ZVxuICAgICAgICAvLyBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBzdGFuZGFyZCBrZXlzIG9mIHRoZSB3aW5uaW5nIGJpZC5cbiAgICAgICAgLmZpbHRlcihnZXRDdXN0b21LZXlzKCkpXG4gICAgICAgIC5tYXAoa2V5ID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgW2tleS5zdWJzdHJpbmcoMCwgTUFYX0RGUF9LRVlMRU5HVEgpXTogW2JpZC5hZHNlcnZlclRhcmdldGluZ1trZXldXVxuICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjdXN0b20gdGFyZ2V0aW5nIGtleSB2YWx1ZSBwYWlycyBmb3IgYmlkcy5cbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gICAgQWRVbml0IGNvZGUgYXJyYXlcbiAgICogQHJldHVybiB7dGFyZ2V0aW5nQXJyYXl9ICAgYmlkcyB3aXRoIGN1c3RvbSB0YXJnZXRpbmcgZGVmaW5lZCBpbiBiaWRkZXJTZXR0aW5nc1xuICAgKi9cbiAgZnVuY3Rpb24gZ2V0Q3VzdG9tQmlkVGFyZ2V0aW5nKGFkVW5pdENvZGVzLCBiaWRzUmVjZWl2ZWQpIHtcbiAgICByZXR1cm4gYmlkc1JlY2VpdmVkXG4gICAgICAuZmlsdGVyKGJpZCA9PiBpbmNsdWRlcyhhZFVuaXRDb2RlcywgYmlkLmFkVW5pdENvZGUpKVxuICAgICAgLm1hcChiaWQgPT4gT2JqZWN0LmFzc2lnbih7fSwgYmlkKSlcbiAgICAgIC5yZWR1Y2UobWVyZ2VBZFNlcnZlclRhcmdldGluZywgW10pXG4gICAgICAubWFwKHRydW5jYXRlQ3VzdG9tS2V5cylcbiAgICAgIC5maWx0ZXIoYmlkID0+IGJpZCk7IC8vIHJlbW92ZXMgZW1wdHkgZWxlbWVudHMgaW4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRhcmdldGluZyBrZXkgdmFsdWUgcGFpcnMgZm9yIG5vbi13aW5uaW5nIGJpZHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nW119ICAgIEFkVW5pdCBjb2RlIGFycmF5XG4gICAqIEByZXR1cm4ge3RhcmdldGluZ0FycmF5fSAgIGFsbCBub24td2lubmluZyBiaWRzIHRhcmdldGluZ1xuICAgKi9cbiAgZnVuY3Rpb24gZ2V0QmlkTGFuZHNjYXBlVGFyZ2V0aW5nKGFkVW5pdENvZGVzLCBiaWRzUmVjZWl2ZWQpIHtcbiAgICBjb25zdCBzdGFuZGFyZEtleXMgPSBGRUFUVVJFUy5OQVRJVkUgPyBUQVJHRVRJTkdfS0VZUy5jb25jYXQoTkFUSVZFX1RBUkdFVElOR19LRVlTKSA6IFRBUkdFVElOR19LRVlTLnNsaWNlKCk7XG4gICAgY29uc3QgYWRVbml0QmlkTGltaXQgPSBjb25maWcuZ2V0Q29uZmlnKCdzZW5kQmlkc0NvbnRyb2wuYmlkTGltaXQnKTtcbiAgICBjb25zdCBiaWRzID0gZ2V0SGlnaGVzdENwbUJpZHNGcm9tQmlkUG9vbChiaWRzUmVjZWl2ZWQsIGdldEhpZ2hlc3RDcG0sIGFkVW5pdEJpZExpbWl0KTtcbiAgICBjb25zdCBhbGxvd1NlbmRBbGxCaWRzVGFyZ2V0aW5nS2V5cyA9IGNvbmZpZy5nZXRDb25maWcoJ3RhcmdldGluZ0NvbnRyb2xzLmFsbG93U2VuZEFsbEJpZHNUYXJnZXRpbmdLZXlzJyk7XG5cbiAgICBjb25zdCBhbGxvd2VkU2VuZEFsbEJpZFRhcmdldGluZyA9IGFsbG93U2VuZEFsbEJpZHNUYXJnZXRpbmdLZXlzXG4gICAgICA/IGFsbG93U2VuZEFsbEJpZHNUYXJnZXRpbmdLZXlzLm1hcCgoa2V5KSA9PiBDT05TVEFOVFMuVEFSR0VUSU5HX0tFWVNba2V5XSlcbiAgICAgIDogc3RhbmRhcmRLZXlzO1xuXG4gICAgLy8gcG9wdWxhdGUgdGFyZ2V0aW5nIGtleXMgZm9yIHRoZSByZW1haW5pbmcgYmlkc1xuICAgIHJldHVybiBiaWRzLm1hcChiaWQgPT4ge1xuICAgICAgaWYgKGJpZFNob3VsZEJlQWRkZWRUb1RhcmdldGluZyhiaWQsIGFkVW5pdENvZGVzKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFtiaWQuYWRVbml0Q29kZV06IGdldFRhcmdldGluZ01hcChiaWQsIHN0YW5kYXJkS2V5cy5maWx0ZXIoXG4gICAgICAgICAgICBrZXkgPT4gdHlwZW9mIGJpZC5hZHNlcnZlclRhcmdldGluZ1trZXldICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgYWxsb3dlZFNlbmRBbGxCaWRUYXJnZXRpbmcuaW5kZXhPZihrZXkpICE9PSAtMSlcbiAgICAgICAgICApXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSkuZmlsdGVyKGJpZCA9PiBiaWQpOyAvLyByZW1vdmVzIGVtcHR5IGVsZW1lbnRzIGluIGFycmF5XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUYXJnZXRpbmdNYXAoYmlkLCBrZXlzKSB7XG4gICAgcmV0dXJuIGtleXMubWFwKGtleSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbYCR7a2V5fV8ke2JpZC5iaWRkZXJDb2RlfWAuc3Vic3RyaW5nKDAsIE1BWF9ERlBfS0VZTEVOR1RIKV06IFtiaWQuYWRzZXJ2ZXJUYXJnZXRpbmdba2V5XV1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRBZFVuaXRUYXJnZXRpbmcoYWRVbml0Q29kZXMpIHtcbiAgICBmdW5jdGlvbiBnZXRUYXJnZXRpbmdPYmooYWRVbml0KSB7XG4gICAgICByZXR1cm4gZGVlcEFjY2VzcyhhZFVuaXQsIENPTlNUQU5UUy5KU09OX01BUFBJTkcuQURTRVJWRVJfVEFSR0VUSU5HKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRUYXJnZXRpbmdWYWx1ZXMoYWRVbml0KSB7XG4gICAgICBjb25zdCBhdXQgPSBnZXRUYXJnZXRpbmdPYmooYWRVbml0KTtcblxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGF1dClcbiAgICAgICAgLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICBpZiAoaXNTdHIoYXV0W2tleV0pKSBhdXRba2V5XSA9IGF1dFtrZXldLnNwbGl0KCcsJykubWFwKHMgPT4gcy50cmltKCkpO1xuICAgICAgICAgIGlmICghaXNBcnJheShhdXRba2V5XSkpIGF1dFtrZXldID0gWyBhdXRba2V5XSBdO1xuICAgICAgICAgIHJldHVybiB7IFtrZXldOiBhdXRba2V5XSB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXVjdGlvbk1hbmFnZXIuZ2V0QWRVbml0cygpXG4gICAgICAuZmlsdGVyKGFkVW5pdCA9PiBpbmNsdWRlcyhhZFVuaXRDb2RlcywgYWRVbml0LmNvZGUpICYmIGdldFRhcmdldGluZ09iaihhZFVuaXQpKVxuICAgICAgLm1hcChhZFVuaXQgPT4ge1xuICAgICAgICByZXR1cm4ge1thZFVuaXQuY29kZV06IGdldFRhcmdldGluZ1ZhbHVlcyhhZFVuaXQpfVxuICAgICAgfSk7XG4gIH1cblxuICB0YXJnZXRpbmcuaXNBcG50YWdEZWZpbmVkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHdpbmRvdy5hcG50YWcgJiYgaXNGbih3aW5kb3cuYXBudGFnLnNldEtleXdvcmRzKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0YXJnZXRpbmc7XG59XG5cbmV4cG9ydCBjb25zdCB0YXJnZXRpbmcgPSBuZXdUYXJnZXRpbmcoYXVjdGlvbk1hbmFnZXIpO1xuIiwiaW1wb3J0IHtjb25maWd9IGZyb20gJy4vY29uZmlnLmpzJztcbmltcG9ydCB7Z2V0SG9vaywgaG9va30gZnJvbSAnLi9ob29rLmpzJztcbmltcG9ydCB7Z2V0R2xvYmFsfSBmcm9tICcuL3ByZWJpZEdsb2JhbC5qcyc7XG5pbXBvcnQge2xvZ01lc3NhZ2UsIHByZWZpeExvZ30gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQge2NyZWF0ZUJpZH0gZnJvbSAnLi9iaWRmYWN0b3J5LmpzJztcbmltcG9ydCB7bG9hZEV4dGVybmFsU2NyaXB0fSBmcm9tICcuL2FkbG9hZGVyLmpzJztcbmltcG9ydCB7R3JlZWR5UHJvbWlzZX0gZnJvbSAnLi91dGlscy9wcm9taXNlLmpzJztcblxuZXhwb3J0IGNvbnN0IERFQlVHX0tFWSA9ICdfXyQkUFJFQklEX0dMT0JBTCQkX2RlYnVnZ2luZ19fJztcblxuZnVuY3Rpb24gaXNEZWJ1Z2dpbmdJbnN0YWxsZWQoKSB7XG4gIHJldHVybiBnZXRHbG9iYWwoKS5pbnN0YWxsZWRNb2R1bGVzLmluY2x1ZGVzKCdkZWJ1Z2dpbmcnKTtcbn1cblxuZnVuY3Rpb24gbG9hZFNjcmlwdCh1cmwpIHtcbiAgcmV0dXJuIG5ldyBHcmVlZHlQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgbG9hZEV4dGVybmFsU2NyaXB0KHVybCwgJ2RlYnVnZ2luZycsIHJlc29sdmUpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnZ2luZ01vZHVsZUxvYWRlcih7YWxyZWFkeUluc3RhbGxlZCA9IGlzRGVidWdnaW5nSW5zdGFsbGVkLCBzY3JpcHQgPSBsb2FkU2NyaXB0fSA9IHt9KSB7XG4gIGxldCBsb2FkaW5nID0gbnVsbDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobG9hZGluZyA9PSBudWxsKSB7XG4gICAgICBsb2FkaW5nID0gbmV3IEdyZWVkeVByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAvLyBydW4gdGhpcyBpbiBhIDAtZGVsYXkgdGltZW91dCB0byBnaXZlIGluc3RhbGxlZE1vZHVsZXMgdGltZSB0byBiZSBwb3B1bGF0ZWRcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKGFscmVhZHlJbnN0YWxsZWQoKSkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSAnJCRQUkVCSURfRElTVF9VUkxfQkFTRSQkZGVidWdnaW5nLXN0YW5kYWxvbmUuanMnO1xuICAgICAgICAgICAgbG9nTWVzc2FnZShgRGVidWdnaW5nIG1vZHVsZSBub3QgaW5zdGFsbGVkLCBsb2FkaW5nIGl0IGZyb20gXCIke3VybH1cIi4uLmApO1xuICAgICAgICAgICAgZ2V0R2xvYmFsKCkuX2luc3RhbGxEZWJ1Z2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgc2NyaXB0KHVybCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIGdldEdsb2JhbCgpLl9pbnN0YWxsRGVidWdnaW5nKHtERUJVR19LRVksIGhvb2ssIGNvbmZpZywgY3JlYXRlQmlkLCBsb2dnZXI6IHByZWZpeExvZygnREVCVUc6Jyl9KTtcbiAgICAgICAgICAgIH0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIGxvYWRpbmc7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnZ2luZ0NvbnRyb2xzKHtsb2FkID0gZGVidWdnaW5nTW9kdWxlTG9hZGVyKCksIGhvb2sgPSBnZXRIb29rKCdyZXF1ZXN0QmlkcycpfSA9IHt9KSB7XG4gIGxldCBwcm9taXNlID0gbnVsbDtcbiAgbGV0IGVuYWJsZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gd2FpdEZvckRlYnVnZ2luZyhuZXh0LCAuLi5hcmdzKSB7XG4gICAgcmV0dXJuIChwcm9taXNlIHx8IEdyZWVkeVByb21pc2UucmVzb2x2ZSgpKS50aGVuKCgpID0+IG5leHQuYXBwbHkodGhpcywgYXJncykpXG4gIH1cbiAgZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgcHJvbWlzZSA9IGxvYWQoKTtcbiAgICAgIC8vIHNldCBkZWJ1Z2dpbmcgdG8gaGlnaCBwcmlvcml0eSBzbyB0aGF0IGl0IGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gbWVzcyB3aXRoIG1vc3QgdGhpbmdzXG4gICAgICBob29rLmJlZm9yZSh3YWl0Rm9yRGVidWdnaW5nLCA5OSk7XG4gICAgICBlbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBob29rLmdldEhvb2tzKHtob29rOiB3YWl0Rm9yRGVidWdnaW5nfSkucmVtb3ZlKCk7XG4gICAgZW5hYmxlZCA9IGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHByb21pc2UgPSBudWxsO1xuICAgIGRpc2FibGUoKTtcbiAgfVxuICByZXR1cm4ge2VuYWJsZSwgZGlzYWJsZSwgcmVzZXR9O1xufVxuXG5jb25zdCBjdGwgPSBkZWJ1Z2dpbmdDb250cm9scygpO1xuZXhwb3J0IGNvbnN0IHJlc2V0ID0gY3RsLnJlc2V0O1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFNlc3Npb24oKSB7XG4gIGxldCBzdG9yYWdlID0gbnVsbDtcbiAgdHJ5IHtcbiAgICBzdG9yYWdlID0gd2luZG93LnNlc3Npb25TdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIGlmIChzdG9yYWdlICE9PSBudWxsKSB7XG4gICAgbGV0IGRlYnVnZ2luZyA9IGN0bDtcbiAgICBsZXQgY29uZmlnID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgY29uZmlnID0gc3RvcmFnZS5nZXRJdGVtKERFQlVHX0tFWSk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAvLyBqdXN0IG1ha2Ugc3VyZSB0aGUgbW9kdWxlIHJ1bnM7IGl0IHdpbGwgdGFrZSBjYXJlIG9mIHBhcnNpbmcgdGhlIGNvbmZpZyAoYW5kIGRpc2FibGluZyBpdHNlbGYgaWYgbmVjZXNzYXJ5KVxuICAgICAgZGVidWdnaW5nLmVuYWJsZSgpO1xuICAgIH1cbiAgfVxufVxuXG5jb25maWcuZ2V0Q29uZmlnKCdkZWJ1Z2dpbmcnLCBmdW5jdGlvbiAoe2RlYnVnZ2luZ30pIHtcbiAgZGVidWdnaW5nPy5lbmFibGVkID8gY3RsLmVuYWJsZSgpIDogY3RsLmRpc2FibGUoKTtcbn0pO1xuIiwiaW1wb3J0IHttZW1vaXplLCB0aW1lc3RhbXB9IGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB7Z2V0Q29yZVN0b3JhZ2VNYW5hZ2VyfSBmcm9tICcuLi9zdG9yYWdlTWFuYWdlci5qcyc7XG5cbmV4cG9ydCBjb25zdCBjb3JlU3RvcmFnZSA9IGdldENvcmVTdG9yYWdlTWFuYWdlcignZnBkRW5yaWNobWVudCcpO1xuXG4vKipcbiAqIEZpbmQgdGhlIHJvb3QgZG9tYWluIGJ5IHRlc3RpbmcgZm9yIHRoZSB0b3Btb3N0IGRvbWFpbiB0aGF0IHdpbGwgYWxsb3cgc2V0dGluZyBjb29raWVzLlxuICovXG5cbmV4cG9ydCBjb25zdCBmaW5kUm9vdERvbWFpbiA9IG1lbW9pemUoZnVuY3Rpb24gZmluZFJvb3REb21haW4oZnVsbERvbWFpbiA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0KSB7XG4gIGlmICghY29yZVN0b3JhZ2UuY29va2llc0FyZUVuYWJsZWQoKSkge1xuICAgIHJldHVybiBmdWxsRG9tYWluO1xuICB9XG5cbiAgY29uc3QgZG9tYWluUGFydHMgPSBmdWxsRG9tYWluLnNwbGl0KCcuJyk7XG4gIGlmIChkb21haW5QYXJ0cy5sZW5ndGggPT09IDIpIHtcbiAgICByZXR1cm4gZnVsbERvbWFpbjtcbiAgfVxuICBsZXQgcm9vdERvbWFpbjtcbiAgbGV0IGNvbnRpbnVlU2VhcmNoaW5nO1xuICBsZXQgc3RhcnRJbmRleCA9IC0yO1xuICBjb25zdCBURVNUX0NPT0tJRV9OQU1FID0gYF9yZGMke0RhdGUubm93KCl9YDtcbiAgY29uc3QgVEVTVF9DT09LSUVfVkFMVUUgPSAnd3JpdGVhYmxlJztcbiAgZG8ge1xuICAgIHJvb3REb21haW4gPSBkb21haW5QYXJ0cy5zbGljZShzdGFydEluZGV4KS5qb2luKCcuJyk7XG4gICAgbGV0IGV4cGlyYXRpb25EYXRlID0gbmV3IERhdGUodGltZXN0YW1wKCkgKyAxMCAqIDEwMDApLnRvVVRDU3RyaW5nKCk7XG5cbiAgICAvLyBXcml0ZSBhIHRlc3QgY29va2llXG4gICAgY29yZVN0b3JhZ2Uuc2V0Q29va2llKFxuICAgICAgVEVTVF9DT09LSUVfTkFNRSxcbiAgICAgIFRFU1RfQ09PS0lFX1ZBTFVFLFxuICAgICAgZXhwaXJhdGlvbkRhdGUsXG4gICAgICAnTGF4JyxcbiAgICAgIHJvb3REb21haW4sXG4gICAgICB1bmRlZmluZWRcbiAgICApO1xuXG4gICAgLy8gU2VlIGlmIHRoZSB3cml0ZSB3YXMgc3VjY2Vzc2Z1bFxuICAgIGNvbnN0IHZhbHVlID0gY29yZVN0b3JhZ2UuZ2V0Q29va2llKFRFU1RfQ09PS0lFX05BTUUsIHVuZGVmaW5lZCk7XG4gICAgaWYgKHZhbHVlID09PSBURVNUX0NPT0tJRV9WQUxVRSkge1xuICAgICAgY29udGludWVTZWFyY2hpbmcgPSBmYWxzZTtcbiAgICAgIC8vIERlbGV0ZSBvdXIgdGVzdCBjb29raWVcbiAgICAgIGNvcmVTdG9yYWdlLnNldENvb2tpZShcbiAgICAgICAgVEVTVF9DT09LSUVfTkFNRSxcbiAgICAgICAgJycsXG4gICAgICAgICdUaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAxIEdNVCcsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgcm9vdERvbWFpbixcbiAgICAgICAgdW5kZWZpbmVkXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydEluZGV4ICs9IC0xO1xuICAgICAgY29udGludWVTZWFyY2hpbmcgPSBNYXRoLmFicyhzdGFydEluZGV4KSA8PSBkb21haW5QYXJ0cy5sZW5ndGg7XG4gICAgfVxuICB9IHdoaWxlIChjb250aW51ZVNlYXJjaGluZyk7XG4gIHJldHVybiByb290RG9tYWluO1xufSk7XG4iLCJpbXBvcnQge2lzRW1wdHlTdHIsIGlzU3RyLCBpc0VtcHR5fSBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQge0dyZWVkeVByb21pc2V9IGZyb20gJy4uL3V0aWxzL3Byb21pc2UuanMnO1xuXG5leHBvcnQgY29uc3QgU1VBX1NPVVJDRV9VTktOT1dOID0gMDtcbmV4cG9ydCBjb25zdCBTVUFfU09VUkNFX0xPV19FTlRST1BZID0gMTtcbmV4cG9ydCBjb25zdCBTVUFfU09VUkNFX0hJR0hfRU5UUk9QWSA9IDI7XG5leHBvcnQgY29uc3QgU1VBX1NPVVJDRV9VQV9IRUFERVIgPSAzO1xuXG4vLyBcImhpZ2ggZW50cm9weVwiIChpLmUuIHByaXZhY3ktc2Vuc2l0aXZlKSBmaWVsZHMgdGhhdCBjYW4gYmUgcmVxdWVzdGVkIGZyb20gdGhlIG5hdmlnYXRvci5cbmV4cG9ydCBjb25zdCBISUdIX0VOVFJPUFlfSElOVFMgPSBbXG4gICdhcmNoaXRlY3R1cmUnLFxuICAnYml0bmVzcycsXG4gICdtb2RlbCcsXG4gICdwbGF0Zm9ybVZlcnNpb24nLFxuICAnZnVsbFZlcnNpb25MaXN0J1xuXVxuXG5leHBvcnQgY29uc3QgTE9XX0VOVFJPUFlfSElOVFMgPSBbXG4gICdicmFuZHMnLFxuICAnbW9iaWxlJyxcbiAgJ3BsYXRmb3JtJ1xuXVxuXG4vKipcbiAqIFJldHVybnMgbG93IGVudHJvcHkgVUEgY2xpZW50IGhpbnRzIGVuY29kZWQgYXMgYW4gb3J0YjIuNiBkZXZpY2Uuc3VhIG9iamVjdDsgb3IgbnVsbCBpZiBubyBVQSBjbGllbnQgaGludHMgYXJlIGF2YWlsYWJsZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldExvd0VudHJvcHlTVUEgPSBsb3dFbnRyb3B5U1VBQWNjZXNzb3IoKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSB0byBoaWdoIGVudHJvcHkgVUEgY2xpZW50IGhpbnRzIGVuY29kZWQgYXMgYW4gb3J0YjIuNiBkZXZpY2Uuc3VhIG9iamVjdCwgb3IgbnVsbCBpZiBubyBVQSBjbGllbnQgaGludHMgYXJlIGF2YWlsYWJsZS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIHJldHVybiB2YWx1ZSBpcyBhIHByb21pc2UgYmVjYXVzZSB0aGUgdW5kZXJseWluZyBicm93c2VyIEFQSSByZXR1cm5zIGEgcHJvbWlzZTsgdGhpc1xuICogc2VlbXMgdG8gcGxhbiBmb3IgYWRkaXRpb25hbCBjb250cm9scyAoc3VjaCBhcyBhbGVydHMgLyBwZXJtaXNzaW9uIHJlcXVlc3QgcHJvbXB0cyB0byB0aGUgdXNlcik7IGl0J3MgdW5jbGVhclxuICogYXQgdGhlIG1vbWVudCBpZiB0aGlzIG1lYW5zIHRoYXQgYXNraW5nIGZvciBtb3JlIGhpbnRzIHdvdWxkIHJlc3VsdCBpbiBzbG93ZXIgLyBtb3JlIGV4cGVuc2l2ZSBjYWxscy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5W1N0cmluZ119IGhpbnRzIGhpbnRzIHRvIHJlcXVlc3QsIGRlZmF1bHRzIHRvIGFsbCAoSElHSF9FTlRST1BZX0hJTlRTKS5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEhpZ2hFbnRyb3B5U1VBID0gaGlnaEVudHJvcHlTVUFBY2Nlc3NvcigpO1xuXG5leHBvcnQgZnVuY3Rpb24gbG93RW50cm9weVNVQUFjY2Vzc29yKHVhRGF0YSA9IHdpbmRvdy5uYXZpZ2F0b3I/LnVzZXJBZ2VudERhdGEpIHtcbiAgY29uc3Qgc3VhID0gKHVhRGF0YSAmJiBMT1dfRU5UUk9QWV9ISU5UUy5zb21lKGggPT4gdHlwZW9mIHVhRGF0YVtoXSAhPT0gJ3VuZGVmaW5lZCcpKSA/IE9iamVjdC5mcmVlemUodWFEYXRhVG9TVUEoU1VBX1NPVVJDRV9MT1dfRU5UUk9QWSwgdWFEYXRhKSkgOiBudWxsO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzdWE7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhpZ2hFbnRyb3B5U1VBQWNjZXNzb3IodWFEYXRhID0gd2luZG93Lm5hdmlnYXRvcj8udXNlckFnZW50RGF0YSkge1xuICBjb25zdCBjYWNoZSA9IHt9O1xuICBjb25zdCBrZXlzID0gbmV3IFdlYWtNYXAoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChoaW50cyA9IEhJR0hfRU5UUk9QWV9ISU5UUykge1xuICAgIGlmICgha2V5cy5oYXMoaGludHMpKSB7XG4gICAgICBjb25zdCBzb3J0ZWQgPSBBcnJheS5mcm9tKGhpbnRzKTtcbiAgICAgIHNvcnRlZC5zb3J0KCk7XG4gICAgICBrZXlzLnNldChoaW50cywgc29ydGVkLmpvaW4oJ3wnKSk7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IGtleXMuZ2V0KGhpbnRzKTtcbiAgICBpZiAoIWNhY2hlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB1YURhdGEuZ2V0SGlnaEVudHJvcHlWYWx1ZXMoaGludHMpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICByZXR1cm4gaXNFbXB0eShyZXN1bHQpID8gbnVsbCA6IE9iamVjdC5mcmVlemUodWFEYXRhVG9TVUEoU1VBX1NPVVJDRV9ISUdIX0VOVFJPUFksIHJlc3VsdCkpXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IG51bGwpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZVtrZXldID0gR3JlZWR5UHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2FjaGVba2V5XTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSBVc2VyIEFnZW50IGNsaWVudCBoaW50cyBvYmplY3QgdG8gYW4gT1JUQiAyLjYgZGV2aWNlLnN1YSBmcmFnbWVudFxuICogaHR0cHM6Ly9pYWJ0ZWNobGFiLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMi8wNC9PcGVuUlRCLTItNl9GSU5BTC5wZGZcbiAqXG4gKiBAcGFyYW0gc291cmNlIHNvdXJjZSBvZiB0aGUgVUFEYXRhIG9iamVjdCAoMCB0byAzKVxuICogQHBhcmFtIHVhRGF0YSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTmF2aWdhdG9yVUFEYXRhL1xuICogQHJldHVybiB7e319XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1YURhdGFUb1NVQShzb3VyY2UsIHVhRGF0YSkge1xuICBmdW5jdGlvbiB0b0JyYW5kVmVyc2lvbihicmFuZCwgdmVyc2lvbikge1xuICAgIGNvbnN0IGJ2ID0ge2JyYW5kfTtcbiAgICBpZiAoaXNTdHIodmVyc2lvbikgJiYgIWlzRW1wdHlTdHIodmVyc2lvbikpIHtcbiAgICAgIGJ2LnZlcnNpb24gPSB2ZXJzaW9uLnNwbGl0KCcuJyk7XG4gICAgfVxuICAgIHJldHVybiBidjtcbiAgfVxuXG4gIGNvbnN0IHN1YSA9IHtzb3VyY2V9O1xuICBpZiAodWFEYXRhLnBsYXRmb3JtKSB7XG4gICAgc3VhLnBsYXRmb3JtID0gdG9CcmFuZFZlcnNpb24odWFEYXRhLnBsYXRmb3JtLCB1YURhdGEucGxhdGZvcm1WZXJzaW9uKTtcbiAgfVxuICBpZiAodWFEYXRhLmZ1bGxWZXJzaW9uTGlzdCB8fCB1YURhdGEuYnJhbmRzKSB7XG4gICAgc3VhLmJyb3dzZXJzID0gKHVhRGF0YS5mdWxsVmVyc2lvbkxpc3QgfHwgdWFEYXRhLmJyYW5kcykubWFwKCh7YnJhbmQsIHZlcnNpb259KSA9PiB0b0JyYW5kVmVyc2lvbihicmFuZCwgdmVyc2lvbikpO1xuICB9XG4gIGlmICh0eXBlb2YgdWFEYXRhWydtb2JpbGUnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzdWEubW9iaWxlID0gdWFEYXRhLm1vYmlsZSA/IDEgOiAwO1xuICB9XG4gIFsnbW9kZWwnLCAnYml0bmVzcycsICdhcmNoaXRlY3R1cmUnXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gdWFEYXRhW3Byb3BdO1xuICAgIGlmIChpc1N0cih2YWx1ZSkpIHtcbiAgICAgIHN1YVtwcm9wXSA9IHZhbHVlO1xuICAgIH1cbiAgfSlcbiAgcmV0dXJuIHN1YTtcbn1cbiIsImltcG9ydCB7bG9nV2Fybn0gZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vLyBtdXR1YWxseSBleGNsdXNpdmUgT1JUQiBzZWN0aW9ucyBpbiBvcmRlciBvZiBwcmlvcml0eSAtICdkb29oJyBiZWF0cyAnYXBwJyAmICdzaXRlJyBhbmQgJ2FwcCcgYmVhdHMgJ3NpdGUnO1xuLy8gaWYgb25lIGlzIHNldCwgdGhlIG90aGVycyB3aWxsIGJlIHJlbW92ZWRcbmV4cG9ydCBjb25zdCBDTElFTlRfU0VDVElPTlMgPSBbJ2Rvb2gnLCAnYXBwJywgJ3NpdGUnXVxuXG5leHBvcnQgZnVuY3Rpb24gY2xpZW50U2VjdGlvbkNoZWNrZXIobG9nUHJlZml4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBvbmx5T25lQ2xpZW50U2VjdGlvbihvcnRiMikge1xuICAgIENMSUVOVF9TRUNUSU9OUy5yZWR1Y2UoKGZvdW5kLCBzZWN0aW9uKSA9PiB7XG4gICAgICBpZiAoaGFzU2VjdGlvbihvcnRiMiwgc2VjdGlvbikpIHtcbiAgICAgICAgaWYgKGZvdW5kICE9IG51bGwpIHtcbiAgICAgICAgICBsb2dXYXJuKGAke2xvZ1ByZWZpeH0gc3BlY2lmaWVzIGJvdGggJyR7Zm91bmR9JyBhbmQgJyR7c2VjdGlvbn0nOyBkcm9wcGluZyB0aGUgbGF0dGVyLmApXG4gICAgICAgICAgZGVsZXRlIG9ydGIyW3NlY3Rpb25dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvdW5kID0gc2VjdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH0sIG51bGwpO1xuICAgIHJldHVybiBvcnRiMjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzU2VjdGlvbihvcnRiMiwgc2VjdGlvbikge1xuICByZXR1cm4gb3J0YjJbc2VjdGlvbl0gIT0gbnVsbCAmJiBPYmplY3Qua2V5cyhvcnRiMltzZWN0aW9uXSkubGVuZ3RoID4gMFxufVxuIiwiaW1wb3J0IHtob29rfSBmcm9tICcuLi9ob29rLmpzJztcbmltcG9ydCB7Z2V0UmVmZXJlckluZm8sIHBhcnNlRG9tYWlufSBmcm9tICcuLi9yZWZlcmVyRGV0ZWN0aW9uLmpzJztcbmltcG9ydCB7ZmluZFJvb3REb21haW59IGZyb20gJy4vcm9vdERvbWFpbi5qcyc7XG5pbXBvcnQge2RlZXBTZXRWYWx1ZSwgZ2V0RGVmaW5lZFBhcmFtcywgZ2V0RE5ULCBnZXRXaW5kb3dTZWxmLCBnZXRXaW5kb3dUb3AsIG1lcmdlRGVlcH0gZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHtjb25maWd9IGZyb20gJy4uL2NvbmZpZy5qcyc7XG5pbXBvcnQge2dldEhpZ2hFbnRyb3B5U1VBLCBnZXRMb3dFbnRyb3B5U1VBfSBmcm9tICcuL3N1YS5qcyc7XG5pbXBvcnQge0dyZWVkeVByb21pc2V9IGZyb20gJy4uL3V0aWxzL3Byb21pc2UuanMnO1xuaW1wb3J0IHtDTElFTlRfU0VDVElPTlMsIGNsaWVudFNlY3Rpb25DaGVja2VyLCBoYXNTZWN0aW9ufSBmcm9tICcuL29uZUNsaWVudC5qcyc7XG5cbmV4cG9ydCBjb25zdCBkZXAgPSB7XG4gIGdldFJlZmVyZXJJbmZvLFxuICBmaW5kUm9vdERvbWFpbixcbiAgZ2V0V2luZG93VG9wLFxuICBnZXRXaW5kb3dTZWxmLFxuICBnZXRIaWdoRW50cm9weVNVQSxcbiAgZ2V0TG93RW50cm9weVNVQSxcbn07XG5cbmNvbnN0IG9uZUNsaWVudCA9IGNsaWVudFNlY3Rpb25DaGVja2VyKCdGUEQnKVxuXG4vKipcbiAqIEVucmljaCBhbiBvcnRiMiBvYmplY3Qgd2l0aCBmaXJzdCBwYXJ0eSBkYXRhLlxuICogQHBhcmFtIHtQcm9taXNlW3t9XX0gZnBkOiBhIHByb21pc2UgdG8gYW4gb3J0YjIgb2JqZWN0LlxuICogQHJldHVybnM6IHtQcm9taXNlW3t9XX06IGEgcHJvbWlzZSB0byBhbiBlbnJpY2hlZCBvcnRiMiBvYmplY3QuXG4gKi9cbmV4cG9ydCBjb25zdCBlbnJpY2hGUEQgPSBob29rKCdzeW5jJywgKGZwZCkgPT4ge1xuICByZXR1cm4gR3JlZWR5UHJvbWlzZS5hbGwoW2ZwZCwgZ2V0U1VBKCkuY2F0Y2goKCkgPT4gbnVsbCldKVxuICAgIC50aGVuKChbb3J0YjIsIHN1YV0pID0+IHtcbiAgICAgIGNvbnN0IHJpID0gZGVwLmdldFJlZmVyZXJJbmZvKCk7XG4gICAgICBtZXJnZUxlZ2FjeVNldENvbmZpZ3Mob3J0YjIpO1xuICAgICAgT2JqZWN0LmVudHJpZXMoRU5SSUNITUVOVFMpLmZvckVhY2goKFtzZWN0aW9uLCBnZXRFbnJpY2htZW50c10pID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGdldEVucmljaG1lbnRzKG9ydGIyLCByaSk7XG4gICAgICAgIGlmIChkYXRhICYmIE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBvcnRiMltzZWN0aW9uXSA9IG1lcmdlRGVlcCh7fSwgZGF0YSwgb3J0YjJbc2VjdGlvbl0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChzdWEpIHtcbiAgICAgICAgZGVlcFNldFZhbHVlKG9ydGIyLCAnZGV2aWNlLnN1YScsIE9iamVjdC5hc3NpZ24oe30sIHN1YSwgb3J0YjIuZGV2aWNlLnN1YSkpO1xuICAgICAgfVxuICAgICAgb3J0YjIgPSBvbmVDbGllbnQob3J0YjIpO1xuICAgICAgZm9yIChsZXQgc2VjdGlvbiBvZiBDTElFTlRfU0VDVElPTlMpIHtcbiAgICAgICAgaWYgKGhhc1NlY3Rpb24ob3J0YjIsIHNlY3Rpb24pKSB7XG4gICAgICAgICAgb3J0YjJbc2VjdGlvbl0gPSBtZXJnZURlZXAoe30sIGNsaWVudEVucmljaG1lbnQob3J0YjIsIHJpKSwgb3J0YjJbc2VjdGlvbl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb3J0YjI7XG4gICAgfSk7XG59KTtcblxuZnVuY3Rpb24gbWVyZ2VMZWdhY3lTZXRDb25maWdzKG9ydGIyKSB7XG4gIC8vIG1lcmdlIGluIHZhbHVlcyBmcm9tIFwibGVnYWN5XCIgc2V0Q29uZmlnKHthcHAsIHNpdGUsIGRldmljZX0pXG4gIC8vIFRPRE86IGRlcHJlY2F0ZSB0aGVzZSBldmVudHVhbGx5XG4gIFsnYXBwJywgJ3NpdGUnLCAnZGV2aWNlJ10uZm9yRWFjaChwcm9wID0+IHtcbiAgICBjb25zdCBjZmcgPSBjb25maWcuZ2V0Q29uZmlnKHByb3ApO1xuICAgIGlmIChjZmcgIT0gbnVsbCkge1xuICAgICAgb3J0YjJbcHJvcF0gPSBtZXJnZURlZXAoe30sIGNmZywgb3J0YjJbcHJvcF0pO1xuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gd2luRmFsbGJhY2soZm4pIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZm4oZGVwLmdldFdpbmRvd1RvcCgpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmbihkZXAuZ2V0V2luZG93U2VsZigpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTVUEoKSB7XG4gIGNvbnN0IGhpbnRzID0gY29uZmlnLmdldENvbmZpZygnZmlyc3RQYXJ0eURhdGEudWFIaW50cycpO1xuICByZXR1cm4gIUFycmF5LmlzQXJyYXkoaGludHMpIHx8IGhpbnRzLmxlbmd0aCA9PT0gMFxuICAgID8gR3JlZWR5UHJvbWlzZS5yZXNvbHZlKGRlcC5nZXRMb3dFbnRyb3B5U1VBKCkpXG4gICAgOiBkZXAuZ2V0SGlnaEVudHJvcHlTVUEoaGludHMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVVbmRlZihvYmopIHtcbiAgcmV0dXJuIGdldERlZmluZWRQYXJhbXMob2JqLCBPYmplY3Qua2V5cyhvYmopKVxufVxuXG5jb25zdCBFTlJJQ0hNRU5UUyA9IHtcbiAgc2l0ZShvcnRiMiwgcmkpIHtcbiAgICBpZiAoQ0xJRU5UX1NFQ1RJT05TLmZpbHRlcihwID0+IHAgIT09ICdzaXRlJykuc29tZShoYXNTZWN0aW9uLmJpbmQobnVsbCwgb3J0YjIpKSkge1xuICAgICAgLy8gZG8gbm90IGVucmljaCBzaXRlIGlmIGRvb2ggb3IgYXBwIGFyZSBzZXRcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHJlbW92ZVVuZGVmKHtcbiAgICAgIHBhZ2U6IHJpLnBhZ2UsXG4gICAgICByZWY6IHJpLnJlZixcbiAgICB9KTtcbiAgfSxcbiAgZGV2aWNlKCkge1xuICAgIHJldHVybiB3aW5GYWxsYmFjaygod2luKSA9PiB7XG4gICAgICBjb25zdCB3ID0gd2luLmlubmVyV2lkdGggfHwgd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCB8fCB3aW4uZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aDtcbiAgICAgIGNvbnN0IGggPSB3aW4uaW5uZXJIZWlnaHQgfHwgd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgfHwgd2luLmRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdyxcbiAgICAgICAgaCxcbiAgICAgICAgZG50OiBnZXRETlQoKSA/IDEgOiAwLFxuICAgICAgICB1YTogd2luLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIGxhbmd1YWdlOiB3aW4ubmF2aWdhdG9yLmxhbmd1YWdlLnNwbGl0KCctJykuc2hpZnQoKSxcbiAgICAgIH07XG4gICAgfSlcbiAgfSxcbiAgcmVncygpIHtcbiAgICBjb25zdCByZWdzID0ge307XG4gICAgaWYgKHdpbkZhbGxiYWNrKCh3aW4pID0+IHdpbi5uYXZpZ2F0b3IuZ2xvYmFsUHJpdmFjeUNvbnRyb2wpKSB7XG4gICAgICBkZWVwU2V0VmFsdWUocmVncywgJ2V4dC5ncGMnLCAxKTtcbiAgICB9XG4gICAgY29uc3QgY29wcGEgPSBjb25maWcuZ2V0Q29uZmlnKCdjb3BwYScpO1xuICAgIGlmICh0eXBlb2YgY29wcGEgPT09ICdib29sZWFuJykge1xuICAgICAgcmVncy5jb3BwYSA9IGNvcHBhID8gMSA6IDA7XG4gICAgfVxuICAgIHJldHVybiByZWdzO1xuICB9XG59O1xuXG4vLyBFbnJpY2htZW50IG9mIHByb3BlcnRpZXMgY29tbW9uIGFjcm9zcyBkb29oLCBhcHAgYW5kIHNpdGUgLSB3aWxsIGJlIGRyb3BwZWQgaW50byB3aGF0ZXZlclxuLy8gc2VjdGlvbiBpcyBhcHByb3ByaWF0ZVxuZnVuY3Rpb24gY2xpZW50RW5yaWNobWVudChvcnRiMiwgcmkpIHtcbiAgY29uc3QgZG9tYWluID0gcGFyc2VEb21haW4ocmkucGFnZSwge25vTGVhZGluZ1d3dzogdHJ1ZX0pO1xuICBjb25zdCBrZXl3b3JkcyA9IHdpbkZhbGxiYWNrKCh3aW4pID0+IHdpbi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XFwna2V5d29yZHNcXCddJykpXG4gICAgPy5jb250ZW50Py5yZXBsYWNlPy4oL1xccy9nLCAnJyk7XG4gIHJldHVybiByZW1vdmVVbmRlZih7XG4gICAgZG9tYWluLFxuICAgIGtleXdvcmRzLFxuICAgIHB1Ymxpc2hlcjogcmVtb3ZlVW5kZWYoe1xuICAgICAgZG9tYWluOiBkZXAuZmluZFJvb3REb21haW4oZG9tYWluKVxuICAgIH0pXG4gIH0pXG59XG4iLCIvKiogQG1vZHVsZSBwYmpzICovXG5cbmltcG9ydCB7Z2V0R2xvYmFsfSBmcm9tICcuL3ByZWJpZEdsb2JhbC5qcyc7XG5pbXBvcnQge1xuICBhZFVuaXRzRmlsdGVyLFxuICBiaW5kLFxuICBjYWxsQnVybCxcbiAgY29udGFpbnMsXG4gIGNyZWF0ZUludmlzaWJsZUlmcmFtZSxcbiAgZGVlcEFjY2VzcyxcbiAgZGVlcENsb25lLFxuICBkZWVwU2V0VmFsdWUsXG4gIGZsYXR0ZW4sXG4gIGdlbmVyYXRlVVVJRCxcbiAgZ2V0SGlnaGVzdENwbSxcbiAgaW5JZnJhbWUsXG4gIGluc2VydEVsZW1lbnQsXG4gIGlzQXJyYXksXG4gIGlzQXJyYXlPZk51bXMsXG4gIGlzRW1wdHksXG4gIGlzRm4sXG4gIGlzR3B0UHViYWRzRGVmaW5lZCxcbiAgaXNOdW1iZXIsXG4gIGxvZ0Vycm9yLFxuICBsb2dJbmZvLFxuICBsb2dNZXNzYWdlLFxuICBsb2dXYXJuLFxuICBtZXJnZURlZXAsXG4gIHJlcGxhY2VBdWN0aW9uUHJpY2UsXG4gIHJlcGxhY2VDbGlja1Rocm91Z2gsXG4gIHRyYW5zZm9ybUFkU2VydmVyVGFyZ2V0aW5nT2JqLFxuICB1bmlxdWVzLFxuICB1bnN1cHBvcnRlZEJpZGRlck1lc3NhZ2Vcbn0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQge2xpc3Rlbk1lc3NhZ2VzRnJvbUNyZWF0aXZlfSBmcm9tICcuL3NlY3VyZUNyZWF0aXZlcy5qcyc7XG5pbXBvcnQge3VzZXJTeW5jfSBmcm9tICcuL3VzZXJTeW5jLmpzJztcbmltcG9ydCB7Y29uZmlnfSBmcm9tICcuL2NvbmZpZy5qcyc7XG5pbXBvcnQge2F1Y3Rpb25NYW5hZ2VyfSBmcm9tICcuL2F1Y3Rpb25NYW5hZ2VyLmpzJztcbmltcG9ydCB7aXNCaWRVc2FibGUsIHRhcmdldGluZ30gZnJvbSAnLi90YXJnZXRpbmcuanMnO1xuaW1wb3J0IHtob29rLCB3cmFwSG9va30gZnJvbSAnLi9ob29rLmpzJztcbmltcG9ydCB7bG9hZFNlc3Npb259IGZyb20gJy4vZGVidWdnaW5nLmpzJztcbmltcG9ydCB7aW5jbHVkZXN9IGZyb20gJy4vcG9seWZpbGwuanMnO1xuaW1wb3J0IHthZHVuaXRDb3VudGVyfSBmcm9tICcuL2FkVW5pdHMuanMnO1xuaW1wb3J0IHtleGVjdXRlUmVuZGVyZXIsIGlzUmVuZGVyZXJSZXF1aXJlZH0gZnJvbSAnLi9SZW5kZXJlci5qcyc7XG5pbXBvcnQge2NyZWF0ZUJpZH0gZnJvbSAnLi9iaWRmYWN0b3J5LmpzJztcbmltcG9ydCB7c3RvcmFnZUNhbGxiYWNrc30gZnJvbSAnLi9zdG9yYWdlTWFuYWdlci5qcyc7XG5pbXBvcnQge2VtaXRBZFJlbmRlckZhaWwsIGVtaXRBZFJlbmRlclN1Y2NlZWRlZH0gZnJvbSAnLi9hZFJlbmRlcmluZy5qcyc7XG5pbXBvcnQge2RlZmF1bHQgYXMgYWRhcHRlck1hbmFnZXIsIGdldFMyU0JpZGRlclNldH0gZnJvbSAnLi9hZGFwdGVyTWFuYWdlci5qcyc7XG5pbXBvcnQgQ09OU1RBTlRTIGZyb20gJy4vY29uc3RhbnRzLmpzb24nO1xuaW1wb3J0ICogYXMgZXZlbnRzIGZyb20gJy4vZXZlbnRzLmpzJztcbmltcG9ydCB7bmV3TWV0cmljcywgdXNlTWV0cmljc30gZnJvbSAnLi91dGlscy9wZXJmTWV0cmljcy5qcyc7XG5pbXBvcnQge2RlZmVyLCBHcmVlZHlQcm9taXNlfSBmcm9tICcuL3V0aWxzL3Byb21pc2UuanMnO1xuaW1wb3J0IHtlbnJpY2hGUER9IGZyb20gJy4vZnBkL2VucmljaG1lbnQuanMnO1xuaW1wb3J0IHthbGxDb25zZW50fSBmcm9tICcuL2NvbnNlbnRIYW5kbGVyLmpzJztcbmltcG9ydCB7ZmlsbFZpZGVvRGVmYXVsdHN9IGZyb20gJy4vdmlkZW8uanMnO1xuXG5jb25zdCBwYmpzSW5zdGFuY2UgPSBnZXRHbG9iYWwoKTtcbmNvbnN0IHsgdHJpZ2dlclVzZXJTeW5jcyB9ID0gdXNlclN5bmM7XG5cbi8qIHByaXZhdGUgdmFyaWFibGVzICovXG5jb25zdCB7IEFERF9BRF9VTklUUywgQklEX1dPTiwgUkVRVUVTVF9CSURTLCBTRVRfVEFSR0VUSU5HLCBTVEFMRV9SRU5ERVIgfSA9IENPTlNUQU5UUy5FVkVOVFM7XG5jb25zdCB7IFBSRVZFTlRfV1JJVElOR19PTl9NQUlOX0RPQ1VNRU5ULCBOT19BRCwgRVhDRVBUSU9OLCBDQU5OT1RfRklORF9BRCwgTUlTU0lOR19ET0NfT1JfQURJRCB9ID0gQ09OU1RBTlRTLkFEX1JFTkRFUl9GQUlMRURfUkVBU09OO1xuXG5jb25zdCBldmVudFZhbGlkYXRvcnMgPSB7XG4gIGJpZFdvbjogY2hlY2tEZWZpbmVkUGxhY2VtZW50XG59O1xuXG4vLyBpbml0aWFsaXplIGV4aXN0aW5nIGRlYnVnZ2luZyBzZXNzaW9ucyBpZiBwcmVzZW50XG5sb2FkU2Vzc2lvbigpO1xuXG4vKiBQdWJsaWMgdmFycyAqL1xucGJqc0luc3RhbmNlLmJpZGRlclNldHRpbmdzID0gcGJqc0luc3RhbmNlLmJpZGRlclNldHRpbmdzIHx8IHt9O1xuXG4vLyBsZXQgdGhlIHdvcmxkIGtub3cgd2UgYXJlIGxvYWRlZFxucGJqc0luc3RhbmNlLmxpYkxvYWRlZCA9IHRydWU7XG5cbi8vIHZlcnNpb24gYXV0byBnZW5lcmF0ZWQgZnJvbSBidWlsZFxucGJqc0luc3RhbmNlLnZlcnNpb24gPSAndiRwcmViaWQudmVyc2lvbiQnO1xubG9nSW5mbygnUHJlYmlkLmpzIHYkcHJlYmlkLnZlcnNpb24kIGxvYWRlZCcpO1xuXG5wYmpzSW5zdGFuY2UuaW5zdGFsbGVkTW9kdWxlcyA9IHBianNJbnN0YW5jZS5pbnN0YWxsZWRNb2R1bGVzIHx8IFtdO1xuXG4vLyBjcmVhdGUgYWRVbml0IGFycmF5XG5wYmpzSW5zdGFuY2UuYWRVbml0cyA9IHBianNJbnN0YW5jZS5hZFVuaXRzIHx8IFtdO1xuXG4vLyBBbGxvdyBwdWJsaXNoZXJzIHdobyBlbmFibGUgdXNlciBzeW5jIG92ZXJyaWRlIHRvIHRyaWdnZXIgdGhlaXIgc3luY1xucGJqc0luc3RhbmNlLnRyaWdnZXJVc2VyU3luY3MgPSB0cmlnZ2VyVXNlclN5bmNzO1xuXG5mdW5jdGlvbiBjaGVja0RlZmluZWRQbGFjZW1lbnQoaWQpIHtcbiAgdmFyIGFkVW5pdENvZGVzID0gYXVjdGlvbk1hbmFnZXIuZ2V0Qmlkc1JlcXVlc3RlZCgpLm1hcChiaWRTZXQgPT4gYmlkU2V0LmJpZHMubWFwKGJpZCA9PiBiaWQuYWRVbml0Q29kZSkpXG4gICAgLnJlZHVjZShmbGF0dGVuKVxuICAgIC5maWx0ZXIodW5pcXVlcyk7XG5cbiAgaWYgKCFjb250YWlucyhhZFVuaXRDb2RlcywgaWQpKSB7XG4gICAgbG9nRXJyb3IoJ1RoZSBcIicgKyBpZCArICdcIiBwbGFjZW1lbnQgaXMgbm90IGRlZmluZWQuJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHNldFJlbmRlclNpemUoZG9jLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGlmIChkb2MuZGVmYXVsdFZpZXcgJiYgZG9jLmRlZmF1bHRWaWV3LmZyYW1lRWxlbWVudCkge1xuICAgIGRvYy5kZWZhdWx0Vmlldy5mcmFtZUVsZW1lbnQud2lkdGggPSB3aWR0aDtcbiAgICBkb2MuZGVmYXVsdFZpZXcuZnJhbWVFbGVtZW50LmhlaWdodCA9IGhlaWdodDtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVNpemVzKHNpemVzLCB0YXJnTGVuZ3RoKSB7XG4gIGxldCBjbGVhblNpemVzID0gW107XG4gIGlmIChpc0FycmF5KHNpemVzKSAmJiAoKHRhcmdMZW5ndGgpID8gc2l6ZXMubGVuZ3RoID09PSB0YXJnTGVuZ3RoIDogc2l6ZXMubGVuZ3RoID4gMCkpIHtcbiAgICAvLyBjaGVjayBpZiBhbiBhcnJheSBvZiBhcnJheXMgb3IgYXJyYXkgb2YgbnVtYmVyc1xuICAgIGlmIChzaXplcy5ldmVyeShzeiA9PiBpc0FycmF5T2ZOdW1zKHN6LCAyKSkpIHtcbiAgICAgIGNsZWFuU2l6ZXMgPSBzaXplcztcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXlPZk51bXMoc2l6ZXMsIDIpKSB7XG4gICAgICBjbGVhblNpemVzLnB1c2goc2l6ZXMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2xlYW5TaXplcztcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVCYW5uZXJNZWRpYVR5cGUoYWRVbml0KSB7XG4gIGNvbnN0IHZhbGlkYXRlZEFkVW5pdCA9IGRlZXBDbG9uZShhZFVuaXQpO1xuICBjb25zdCBiYW5uZXIgPSB2YWxpZGF0ZWRBZFVuaXQubWVkaWFUeXBlcy5iYW5uZXI7XG4gIGNvbnN0IGJhbm5lclNpemVzID0gdmFsaWRhdGVTaXplcyhiYW5uZXIuc2l6ZXMpO1xuICBpZiAoYmFubmVyU2l6ZXMubGVuZ3RoID4gMCkge1xuICAgIGJhbm5lci5zaXplcyA9IGJhbm5lclNpemVzO1xuICAgIC8vIERlcHJlY2F0aW9uIFdhcm5pbmc6IFRoaXMgcHJvcGVydHkgd2lsbCBiZSBkZXByZWNhdGVkIGluIG5leHQgcmVsZWFzZSBpbiBmYXZvciBvZiBhZFVuaXQubWVkaWFUeXBlcy5iYW5uZXIuc2l6ZXNcbiAgICB2YWxpZGF0ZWRBZFVuaXQuc2l6ZXMgPSBiYW5uZXJTaXplcztcbiAgfSBlbHNlIHtcbiAgICBsb2dFcnJvcignRGV0ZWN0ZWQgYSBtZWRpYVR5cGVzLmJhbm5lciBvYmplY3Qgd2l0aG91dCBhIHByb3BlciBzaXplcyBmaWVsZC4gIFBsZWFzZSBlbnN1cmUgdGhlIHNpemVzIGFyZSBsaXN0ZWQgbGlrZTogW1szMDAsIDI1MF0sIC4uLl0uICBSZW1vdmluZyBpbnZhbGlkIG1lZGlhVHlwZXMuYmFubmVyIG9iamVjdCBmcm9tIHJlcXVlc3QuJyk7XG4gICAgZGVsZXRlIHZhbGlkYXRlZEFkVW5pdC5tZWRpYVR5cGVzLmJhbm5lclxuICB9XG4gIHJldHVybiB2YWxpZGF0ZWRBZFVuaXQ7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVmlkZW9NZWRpYVR5cGUoYWRVbml0KSB7XG4gIGNvbnN0IHZhbGlkYXRlZEFkVW5pdCA9IGRlZXBDbG9uZShhZFVuaXQpO1xuICBjb25zdCB2aWRlbyA9IHZhbGlkYXRlZEFkVW5pdC5tZWRpYVR5cGVzLnZpZGVvO1xuICBpZiAodmlkZW8ucGxheWVyU2l6ZSkge1xuICAgIGxldCB0YXJQbGF5ZXJTaXplTGVuID0gKHR5cGVvZiB2aWRlby5wbGF5ZXJTaXplWzBdID09PSAnbnVtYmVyJykgPyAyIDogMTtcblxuICAgIGNvbnN0IHZpZGVvU2l6ZXMgPSB2YWxpZGF0ZVNpemVzKHZpZGVvLnBsYXllclNpemUsIHRhclBsYXllclNpemVMZW4pO1xuICAgIGlmICh2aWRlb1NpemVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0YXJQbGF5ZXJTaXplTGVuID09PSAyKSB7XG4gICAgICAgIGxvZ0luZm8oJ1RyYW5zZm9ybWluZyB2aWRlby5wbGF5ZXJTaXplIGZyb20gWzY0MCw0ODBdIHRvIFtbNjQwLDQ4MF1dIHNvIGl0XFwncyBpbiB0aGUgcHJvcGVyIGZvcm1hdC4nKTtcbiAgICAgIH1cbiAgICAgIHZpZGVvLnBsYXllclNpemUgPSB2aWRlb1NpemVzO1xuICAgICAgLy8gRGVwcmVjYXRpb24gV2FybmluZzogVGhpcyBwcm9wZXJ0eSB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gbmV4dCByZWxlYXNlIGluIGZhdm9yIG9mIGFkVW5pdC5tZWRpYVR5cGVzLnZpZGVvLnBsYXllclNpemVcbiAgICAgIHZhbGlkYXRlZEFkVW5pdC5zaXplcyA9IHZpZGVvU2l6ZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ0Vycm9yKCdEZXRlY3RlZCBpbmNvcnJlY3QgY29uZmlndXJhdGlvbiBvZiBtZWRpYVR5cGVzLnZpZGVvLnBsYXllclNpemUuICBQbGVhc2Ugc3BlY2lmeSBvbmx5IG9uZSBzZXQgb2YgZGltZW5zaW9ucyBpbiBhIGZvcm1hdCBsaWtlOiBbWzY0MCwgNDgwXV0uIFJlbW92aW5nIGludmFsaWQgbWVkaWFUeXBlcy52aWRlby5wbGF5ZXJTaXplIHByb3BlcnR5IGZyb20gcmVxdWVzdC4nKTtcbiAgICAgIGRlbGV0ZSB2YWxpZGF0ZWRBZFVuaXQubWVkaWFUeXBlcy52aWRlby5wbGF5ZXJTaXplO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsaWRhdGVkQWRVbml0O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU5hdGl2ZU1lZGlhVHlwZShhZFVuaXQpIHtcbiAgY29uc3QgdmFsaWRhdGVkQWRVbml0ID0gZGVlcENsb25lKGFkVW5pdCk7XG4gIGNvbnN0IG5hdGl2ZSA9IHZhbGlkYXRlZEFkVW5pdC5tZWRpYVR5cGVzLm5hdGl2ZTtcbiAgLy8gaWYgbmF0aXZlIGFzc2V0cyBhcmUgc3BlY2lmaWVkIGluIE9wZW5SVEIgZm9ybWF0LCByZW1vdmUgbGVnYWN5IGFzc2V0cyBhbmQgcHJpbnQgYSB3YXJuLlxuICBpZiAobmF0aXZlLm9ydGIpIHtcbiAgICBjb25zdCBsZWdhY3lOYXRpdmVLZXlzID0gT2JqZWN0LmtleXMoQ09OU1RBTlRTLk5BVElWRV9LRVlTKS5maWx0ZXIoa2V5ID0+IENPTlNUQU5UUy5OQVRJVkVfS0VZU1trZXldLmluY2x1ZGVzKCdoYl9uYXRpdmVfJykpO1xuICAgIGNvbnN0IG5hdGl2ZUtleXMgPSBPYmplY3Qua2V5cyhuYXRpdmUpO1xuICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IG5hdGl2ZUtleXMuZmlsdGVyKG5hdGl2ZUtleSA9PiBsZWdhY3lOYXRpdmVLZXlzLmluY2x1ZGVzKG5hdGl2ZUtleSkpO1xuICAgIGlmIChpbnRlcnNlY3Rpb24ubGVuZ3RoID4gMCkge1xuICAgICAgbG9nRXJyb3IoYHdoZW4gdXNpbmcgbmF0aXZlIE9wZW5SVEIgZm9ybWF0LCB5b3UgY2Fubm90IHVzZSBsZWdhY3kgbmF0aXZlIHByb3BlcnRpZXMuIERlbGV0aW5nICR7aW50ZXJzZWN0aW9ufSBrZXlzIGZyb20gcmVxdWVzdC5gKTtcbiAgICAgIGludGVyc2VjdGlvbi5mb3JFYWNoKGxlZ2FjeUtleSA9PiBkZWxldGUgdmFsaWRhdGVkQWRVbml0Lm1lZGlhVHlwZXMubmF0aXZlW2xlZ2FjeUtleV0pO1xuICAgIH1cbiAgfVxuICBpZiAobmF0aXZlLmltYWdlICYmIG5hdGl2ZS5pbWFnZS5zaXplcyAmJiAhQXJyYXkuaXNBcnJheShuYXRpdmUuaW1hZ2Uuc2l6ZXMpKSB7XG4gICAgbG9nRXJyb3IoJ1BsZWFzZSB1c2UgYW4gYXJyYXkgb2Ygc2l6ZXMgZm9yIG5hdGl2ZS5pbWFnZS5zaXplcyBmaWVsZC4gIFJlbW92aW5nIGludmFsaWQgbWVkaWFUeXBlcy5uYXRpdmUuaW1hZ2Uuc2l6ZXMgcHJvcGVydHkgZnJvbSByZXF1ZXN0LicpO1xuICAgIGRlbGV0ZSB2YWxpZGF0ZWRBZFVuaXQubWVkaWFUeXBlcy5uYXRpdmUuaW1hZ2Uuc2l6ZXM7XG4gIH1cbiAgaWYgKG5hdGl2ZS5pbWFnZSAmJiBuYXRpdmUuaW1hZ2UuYXNwZWN0X3JhdGlvcyAmJiAhQXJyYXkuaXNBcnJheShuYXRpdmUuaW1hZ2UuYXNwZWN0X3JhdGlvcykpIHtcbiAgICBsb2dFcnJvcignUGxlYXNlIHVzZSBhbiBhcnJheSBvZiBzaXplcyBmb3IgbmF0aXZlLmltYWdlLmFzcGVjdF9yYXRpb3MgZmllbGQuICBSZW1vdmluZyBpbnZhbGlkIG1lZGlhVHlwZXMubmF0aXZlLmltYWdlLmFzcGVjdF9yYXRpb3MgcHJvcGVydHkgZnJvbSByZXF1ZXN0LicpO1xuICAgIGRlbGV0ZSB2YWxpZGF0ZWRBZFVuaXQubWVkaWFUeXBlcy5uYXRpdmUuaW1hZ2UuYXNwZWN0X3JhdGlvcztcbiAgfVxuICBpZiAobmF0aXZlLmljb24gJiYgbmF0aXZlLmljb24uc2l6ZXMgJiYgIUFycmF5LmlzQXJyYXkobmF0aXZlLmljb24uc2l6ZXMpKSB7XG4gICAgbG9nRXJyb3IoJ1BsZWFzZSB1c2UgYW4gYXJyYXkgb2Ygc2l6ZXMgZm9yIG5hdGl2ZS5pY29uLnNpemVzIGZpZWxkLiAgUmVtb3ZpbmcgaW52YWxpZCBtZWRpYVR5cGVzLm5hdGl2ZS5pY29uLnNpemVzIHByb3BlcnR5IGZyb20gcmVxdWVzdC4nKTtcbiAgICBkZWxldGUgdmFsaWRhdGVkQWRVbml0Lm1lZGlhVHlwZXMubmF0aXZlLmljb24uc2l6ZXM7XG4gIH1cbiAgcmV0dXJuIHZhbGlkYXRlZEFkVW5pdDtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBZFVuaXRQb3MoYWRVbml0LCBtZWRpYVR5cGUpIHtcbiAgbGV0IHBvcyA9IGRlZXBBY2Nlc3MoYWRVbml0LCBgbWVkaWFUeXBlcy4ke21lZGlhVHlwZX0ucG9zYCk7XG5cbiAgaWYgKCFpc051bWJlcihwb3MpIHx8IGlzTmFOKHBvcykgfHwgIWlzRmluaXRlKHBvcykpIHtcbiAgICBsZXQgd2FybmluZyA9IGBWYWx1ZSBvZiBwcm9wZXJ0eSAncG9zJyBvbiBhZCB1bml0ICR7YWRVbml0LmNvZGV9IHNob3VsZCBiZSBvZiB0eXBlOiBOdW1iZXJgO1xuXG4gICAgbG9nV2Fybih3YXJuaW5nKTtcbiAgICBldmVudHMuZW1pdChDT05TVEFOVFMuRVZFTlRTLkFVQ1RJT05fREVCVUcsIHt0eXBlOiAnV0FSTklORycsIGFyZ3VtZW50czogd2FybmluZ30pO1xuICAgIGRlbGV0ZSBhZFVuaXQubWVkaWFUeXBlc1ttZWRpYVR5cGVdLnBvcztcbiAgfVxuXG4gIHJldHVybiBhZFVuaXRcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBZFVuaXQoYWRVbml0KSB7XG4gIGNvbnN0IG1zZyA9IChtc2cpID0+IGBhZFVuaXQuY29kZSAnJHthZFVuaXQuY29kZX0nICR7bXNnfWA7XG5cbiAgY29uc3QgbWVkaWFUeXBlcyA9IGFkVW5pdC5tZWRpYVR5cGVzO1xuICBjb25zdCBiaWRzID0gYWRVbml0LmJpZHM7XG5cbiAgaWYgKGJpZHMgIT0gbnVsbCAmJiAhaXNBcnJheShiaWRzKSkge1xuICAgIGxvZ0Vycm9yKG1zZyhgZGVmaW5lcyAnYWRVbml0LmJpZHMnIHRoYXQgaXMgbm90IGFuIGFycmF5LiBSZW1vdmluZyBhZFVuaXQgZnJvbSBhdWN0aW9uYCkpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChiaWRzID09IG51bGwgJiYgYWRVbml0Lm9ydGIySW1wID09IG51bGwpIHtcbiAgICBsb2dFcnJvcihtc2coYGhhcyBubyAnYWRVbml0LmJpZHMnIGFuZCBubyAnYWRVbml0Lm9ydGIySW1wJy4gUmVtb3ZpbmcgYWRVbml0IGZyb20gYXVjdGlvbmApKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoIW1lZGlhVHlwZXMgfHwgT2JqZWN0LmtleXMobWVkaWFUeXBlcykubGVuZ3RoID09PSAwKSB7XG4gICAgbG9nRXJyb3IobXNnKGBkb2VzIG5vdCBkZWZpbmUgYSAnbWVkaWFUeXBlcycgb2JqZWN0LiAgVGhpcyBpcyBhIHJlcXVpcmVkIGZpZWxkIGZvciB0aGUgYXVjdGlvbiwgc28gdGhpcyBhZFVuaXQgaGFzIGJlZW4gcmVtb3ZlZC5gKSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGFkVW5pdC5vcnRiMkltcCAhPSBudWxsICYmIChiaWRzID09IG51bGwgfHwgYmlkcy5sZW5ndGggPT09IDApKSB7XG4gICAgYWRVbml0LmJpZHMgPSBbe2JpZGRlcjogbnVsbH1dOyAvLyB0aGUgJ251bGwnIGJpZGRlciBpcyB0cmVhdGVkIGFzIGFuIHMycy1vbmx5IHBsYWNlaG9sZGVyIGJ5IGFkYXB0ZXJNYW5hZ2VyXG4gICAgbG9nTWVzc2FnZShtc2coYGRlZmluZXMgJ2FkVW5pdC5vcnRiMkltcCcgd2l0aCBubyAnYWRVbml0LmJpZHMnOyBpdCB3aWxsIGJlIHNlZW4gb25seSBieSBTMlMgYWRhcHRlcnNgKSk7XG4gIH1cblxuICByZXR1cm4gYWRVbml0O1xufVxuXG5leHBvcnQgY29uc3QgYWRVbml0U2V0dXBDaGVja3MgPSB7XG4gIHZhbGlkYXRlQWRVbml0LFxuICB2YWxpZGF0ZUJhbm5lck1lZGlhVHlwZSxcbiAgdmFsaWRhdGVTaXplc1xufTtcblxuaWYgKEZFQVRVUkVTLk5BVElWRSkge1xuICBPYmplY3QuYXNzaWduKGFkVW5pdFNldHVwQ2hlY2tzLCB7dmFsaWRhdGVOYXRpdmVNZWRpYVR5cGV9KTtcbn1cblxuaWYgKEZFQVRVUkVTLlZJREVPKSB7XG4gIE9iamVjdC5hc3NpZ24oYWRVbml0U2V0dXBDaGVja3MsIHsgdmFsaWRhdGVWaWRlb01lZGlhVHlwZSB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IGNoZWNrQWRVbml0U2V0dXAgPSBob29rKCdzeW5jJywgZnVuY3Rpb24gKGFkVW5pdHMpIHtcbiAgY29uc3QgdmFsaWRhdGVkQWRVbml0cyA9IFtdO1xuXG4gIGFkVW5pdHMuZm9yRWFjaChhZFVuaXQgPT4ge1xuICAgIGFkVW5pdCA9IHZhbGlkYXRlQWRVbml0KGFkVW5pdCk7XG4gICAgaWYgKGFkVW5pdCA9PSBudWxsKSByZXR1cm47XG5cbiAgICBjb25zdCBtZWRpYVR5cGVzID0gYWRVbml0Lm1lZGlhVHlwZXM7XG4gICAgbGV0IHZhbGlkYXRlZEJhbm5lciwgdmFsaWRhdGVkVmlkZW8sIHZhbGlkYXRlZE5hdGl2ZTtcblxuICAgIGlmIChtZWRpYVR5cGVzLmJhbm5lcikge1xuICAgICAgdmFsaWRhdGVkQmFubmVyID0gdmFsaWRhdGVCYW5uZXJNZWRpYVR5cGUoYWRVbml0KTtcbiAgICAgIGlmIChtZWRpYVR5cGVzLmJhbm5lci5oYXNPd25Qcm9wZXJ0eSgncG9zJykpIHZhbGlkYXRlZEJhbm5lciA9IHZhbGlkYXRlQWRVbml0UG9zKHZhbGlkYXRlZEJhbm5lciwgJ2Jhbm5lcicpO1xuICAgIH1cblxuICAgIGlmIChGRUFUVVJFUy5WSURFTyAmJiBtZWRpYVR5cGVzLnZpZGVvKSB7XG4gICAgICB2YWxpZGF0ZWRWaWRlbyA9IHZhbGlkYXRlZEJhbm5lciA/IHZhbGlkYXRlVmlkZW9NZWRpYVR5cGUodmFsaWRhdGVkQmFubmVyKSA6IHZhbGlkYXRlVmlkZW9NZWRpYVR5cGUoYWRVbml0KTtcbiAgICAgIGlmIChtZWRpYVR5cGVzLnZpZGVvLmhhc093blByb3BlcnR5KCdwb3MnKSkgdmFsaWRhdGVkVmlkZW8gPSB2YWxpZGF0ZUFkVW5pdFBvcyh2YWxpZGF0ZWRWaWRlbywgJ3ZpZGVvJyk7XG4gICAgfVxuXG4gICAgaWYgKEZFQVRVUkVTLk5BVElWRSAmJiBtZWRpYVR5cGVzLm5hdGl2ZSkge1xuICAgICAgdmFsaWRhdGVkTmF0aXZlID0gdmFsaWRhdGVkVmlkZW8gPyB2YWxpZGF0ZU5hdGl2ZU1lZGlhVHlwZSh2YWxpZGF0ZWRWaWRlbykgOiB2YWxpZGF0ZWRCYW5uZXIgPyB2YWxpZGF0ZU5hdGl2ZU1lZGlhVHlwZSh2YWxpZGF0ZWRCYW5uZXIpIDogdmFsaWRhdGVOYXRpdmVNZWRpYVR5cGUoYWRVbml0KTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWxpZGF0ZWRBZFVuaXQgPSBPYmplY3QuYXNzaWduKHt9LCB2YWxpZGF0ZWRCYW5uZXIsIHZhbGlkYXRlZFZpZGVvLCB2YWxpZGF0ZWROYXRpdmUpO1xuXG4gICAgdmFsaWRhdGVkQWRVbml0cy5wdXNoKHZhbGlkYXRlZEFkVW5pdCk7XG4gIH0pO1xuXG4gIHJldHVybiB2YWxpZGF0ZWRBZFVuaXRzO1xufSwgJ2NoZWNrQWRVbml0U2V0dXAnKTtcblxuZnVuY3Rpb24gZmlsbEFkVW5pdERlZmF1bHRzKGFkVW5pdHMpIHtcbiAgaWYgKEZFQVRVUkVTLlZJREVPKSB7XG4gICAgYWRVbml0cy5mb3JFYWNoKGF1ID0+IGZpbGxWaWRlb0RlZmF1bHRzKGF1KSlcbiAgfVxufVxuXG4vLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuLy8gICAgU3RhcnQgUHVibGljIEFQSXMgICAgICAgICAvL1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuLy8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHF1ZXJ5IHN0cmluZyB0YXJnZXRpbmcgcGFyYW1ldGVycyBhdmFpbGFibGUgYXQgdGhpcyBtb21lbnQgZm9yIGEgZ2l2ZW4gYWQgdW5pdC4gTm90ZSB0aGF0IHNvbWUgYmlkZGVyJ3MgcmVzcG9uc2UgbWF5IG5vdCBoYXZlIGJlZW4gcmVjZWl2ZWQgaWYgeW91IGNhbGwgdGhpcyBmdW5jdGlvbiB0b28gcXVpY2tseSBhZnRlciB0aGUgcmVxdWVzdHMgYXJlIHNlbnQuXG4gKiBAcGFyYW0gIHtzdHJpbmd9IFthZHVuaXRDb2RlXSBhZFVuaXRDb2RlIHRvIGdldCB0aGUgYmlkIHJlc3BvbnNlcyBmb3JcbiAqIEBhbGlhcyBtb2R1bGU6cGJqcy5nZXRBZHNlcnZlclRhcmdldGluZ0ZvckFkVW5pdENvZGVTdHJcbiAqIEByZXR1cm4ge0FycmF5fSAgcmV0dXJuT2JqIHJldHVybiBiaWRzIGFycmF5XG4gKi9cbnBianNJbnN0YW5jZS5nZXRBZHNlcnZlclRhcmdldGluZ0ZvckFkVW5pdENvZGVTdHIgPSBmdW5jdGlvbiAoYWR1bml0Q29kZSkge1xuICBsb2dJbmZvKCdJbnZva2luZyAkJFBSRUJJRF9HTE9CQUwkJC5nZXRBZHNlcnZlclRhcmdldGluZ0ZvckFkVW5pdENvZGVTdHInLCBhcmd1bWVudHMpO1xuXG4gIC8vIGNhbGwgdG8gcmV0cmlldmUgYmlkcyBhcnJheVxuICBpZiAoYWR1bml0Q29kZSkge1xuICAgIHZhciByZXMgPSBwYmpzSW5zdGFuY2UuZ2V0QWRzZXJ2ZXJUYXJnZXRpbmdGb3JBZFVuaXRDb2RlKGFkdW5pdENvZGUpO1xuICAgIHJldHVybiB0cmFuc2Zvcm1BZFNlcnZlclRhcmdldGluZ09iaihyZXMpO1xuICB9IGVsc2Uge1xuICAgIGxvZ01lc3NhZ2UoJ05lZWQgdG8gY2FsbCBnZXRBZHNlcnZlclRhcmdldGluZ0ZvckFkVW5pdENvZGVTdHIgd2l0aCBhZHVuaXRDb2RlJyk7XG4gIH1cbn07XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBxdWVyeSBzdHJpbmcgdGFyZ2V0aW5nIHBhcmFtZXRlcnMgYXZhaWxhYmxlIGF0IHRoaXMgbW9tZW50IGZvciBhIGdpdmVuIGFkIHVuaXQuIE5vdGUgdGhhdCBzb21lIGJpZGRlcidzIHJlc3BvbnNlIG1heSBub3QgaGF2ZSBiZWVuIHJlY2VpdmVkIGlmIHlvdSBjYWxsIHRoaXMgZnVuY3Rpb24gdG9vIHF1aWNrbHkgYWZ0ZXIgdGhlIHJlcXVlc3RzIGFyZSBzZW50LlxuICogQHBhcmFtIGFkVW5pdENvZGUge3N0cmluZ30gYWRVbml0Q29kZSB0byBnZXQgdGhlIGJpZCByZXNwb25zZXMgZm9yXG4gKiBAYWxpYXMgbW9kdWxlOnBianMuZ2V0SGlnaGVzdFVudXNlZEJpZFJlc3BvbnNlRm9yQWRVbml0Q29kZVxuICogQHJldHVybnMge09iamVjdH0gIHJldHVybk9iaiByZXR1cm4gYmlkXG4gKi9cbnBianNJbnN0YW5jZS5nZXRIaWdoZXN0VW51c2VkQmlkUmVzcG9uc2VGb3JBZFVuaXRDb2RlID0gZnVuY3Rpb24gKGFkdW5pdENvZGUpIHtcbiAgaWYgKGFkdW5pdENvZGUpIHtcbiAgICBjb25zdCBiaWQgPSBhdWN0aW9uTWFuYWdlci5nZXRBbGxCaWRzRm9yQWRVbml0Q29kZShhZHVuaXRDb2RlKVxuICAgICAgLmZpbHRlcihpc0JpZFVzYWJsZSlcblxuICAgIHJldHVybiBiaWQubGVuZ3RoID8gYmlkLnJlZHVjZShnZXRIaWdoZXN0Q3BtKSA6IHt9XG4gIH0gZWxzZSB7XG4gICAgbG9nTWVzc2FnZSgnTmVlZCB0byBjYWxsIGdldEhpZ2hlc3RVbnVzZWRCaWRSZXNwb25zZUZvckFkVW5pdENvZGUgd2l0aCBhZHVuaXRDb2RlJyk7XG4gIH1cbn07XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBxdWVyeSBzdHJpbmcgdGFyZ2V0aW5nIHBhcmFtZXRlcnMgYXZhaWxhYmxlIGF0IHRoaXMgbW9tZW50IGZvciBhIGdpdmVuIGFkIHVuaXQuIE5vdGUgdGhhdCBzb21lIGJpZGRlcidzIHJlc3BvbnNlIG1heSBub3QgaGF2ZSBiZWVuIHJlY2VpdmVkIGlmIHlvdSBjYWxsIHRoaXMgZnVuY3Rpb24gdG9vIHF1aWNrbHkgYWZ0ZXIgdGhlIHJlcXVlc3RzIGFyZSBzZW50LlxuICogQHBhcmFtIGFkVW5pdENvZGUge3N0cmluZ30gYWRVbml0Q29kZSB0byBnZXQgdGhlIGJpZCByZXNwb25zZXMgZm9yXG4gKiBAYWxpYXMgbW9kdWxlOnBianMuZ2V0QWRzZXJ2ZXJUYXJnZXRpbmdGb3JBZFVuaXRDb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAgcmV0dXJuT2JqIHJldHVybiBiaWRzXG4gKi9cbnBianNJbnN0YW5jZS5nZXRBZHNlcnZlclRhcmdldGluZ0ZvckFkVW5pdENvZGUgPSBmdW5jdGlvbiAoYWRVbml0Q29kZSkge1xuICByZXR1cm4gcGJqc0luc3RhbmNlLmdldEFkc2VydmVyVGFyZ2V0aW5nKGFkVW5pdENvZGUpW2FkVW5pdENvZGVdO1xufTtcblxuLyoqXG4gKiByZXR1cm5zIGFsbCBhZCBzZXJ2ZXIgdGFyZ2V0aW5nIGZvciBhbGwgYWQgdW5pdHNcbiAqIEByZXR1cm4ge09iamVjdH0gTWFwIG9mIGFkVW5pdENvZGVzIGFuZCB0YXJnZXRpbmcgdmFsdWVzIFtdXG4gKiBAYWxpYXMgbW9kdWxlOnBianMuZ2V0QWRzZXJ2ZXJUYXJnZXRpbmdcbiAqL1xuXG5wYmpzSW5zdGFuY2UuZ2V0QWRzZXJ2ZXJUYXJnZXRpbmcgPSBmdW5jdGlvbiAoYWRVbml0Q29kZSkge1xuICBsb2dJbmZvKCdJbnZva2luZyAkJFBSRUJJRF9HTE9CQUwkJC5nZXRBZHNlcnZlclRhcmdldGluZycsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0YXJnZXRpbmcuZ2V0QWxsVGFyZ2V0aW5nKGFkVW5pdENvZGUpO1xufTtcblxucGJqc0luc3RhbmNlLmdldENvbnNlbnRNZXRhZGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgbG9nSW5mbygnSW52b2tpbmcgJCRQUkVCSURfR0xPQkFMJCQuZ2V0Q29uc2VudE1ldGFkYXRhJyk7XG4gIHJldHVybiBhbGxDb25zZW50LmdldENvbnNlbnRNZXRhKClcbn07XG5cbmZ1bmN0aW9uIGdldEJpZHModHlwZSkge1xuICBjb25zdCByZXNwb25zZXMgPSBhdWN0aW9uTWFuYWdlclt0eXBlXSgpXG4gICAgLmZpbHRlcihiaW5kLmNhbGwoYWRVbml0c0ZpbHRlciwgdGhpcywgYXVjdGlvbk1hbmFnZXIuZ2V0QWRVbml0Q29kZXMoKSkpO1xuXG4gIC8vIGZpbmQgdGhlIGxhc3QgYXVjdGlvbiBpZCB0byBnZXQgcmVzcG9uc2VzIGZvciBtb3N0IHJlY2VudCBhdWN0aW9uIG9ubHlcbiAgY29uc3QgY3VycmVudEF1Y3Rpb25JZCA9IGF1Y3Rpb25NYW5hZ2VyLmdldExhc3RBdWN0aW9uSWQoKTtcblxuICByZXR1cm4gcmVzcG9uc2VzXG4gICAgLm1hcChiaWQgPT4gYmlkLmFkVW5pdENvZGUpXG4gICAgLmZpbHRlcih1bmlxdWVzKS5tYXAoYWRVbml0Q29kZSA9PiByZXNwb25zZXNcbiAgICAgIC5maWx0ZXIoYmlkID0+IGJpZC5hdWN0aW9uSWQgPT09IGN1cnJlbnRBdWN0aW9uSWQgJiYgYmlkLmFkVW5pdENvZGUgPT09IGFkVW5pdENvZGUpKVxuICAgIC5maWx0ZXIoYmlkcyA9PiBiaWRzICYmIGJpZHNbMF0gJiYgYmlkc1swXS5hZFVuaXRDb2RlKVxuICAgIC5tYXAoYmlkcyA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbYmlkc1swXS5hZFVuaXRDb2RlXTogeyBiaWRzIH1cbiAgICAgIH07XG4gICAgfSlcbiAgICAucmVkdWNlKChhLCBiKSA9PiBPYmplY3QuYXNzaWduKGEsIGIpLCB7fSk7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBiaWRzIHJlcXVlc3RzIGludm9sdmVkIGluIGFuIGF1Y3Rpb24gYnV0IG5vdCBiaWQgb25cbiAqIEBhbGlhcyBtb2R1bGU6cGJqcy5nZXROb0JpZHNcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICBtYXAgfCBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgYmlkUmVxdWVzdHNcbiAqL1xuXG5wYmpzSW5zdGFuY2UuZ2V0Tm9CaWRzID0gZnVuY3Rpb24gKCkge1xuICBsb2dJbmZvKCdJbnZva2luZyAkJFBSRUJJRF9HTE9CQUwkJC5nZXROb0JpZHMnLCBhcmd1bWVudHMpO1xuICByZXR1cm4gZ2V0QmlkcygnZ2V0Tm9CaWRzJyk7XG59O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgYmlkcyByZXF1ZXN0cyBpbnZvbHZlZCBpbiBhbiBhdWN0aW9uIGJ1dCBub3QgYmlkIG9uIG9yIHRoZSBzcGVjaWZpZWQgYWRVbml0Q29kZVxuICogQHBhcmFtICB7c3RyaW5nfSBhZFVuaXRDb2RlIGFkVW5pdENvZGVcbiAqIEBhbGlhcyBtb2R1bGU6cGJqcy5nZXROb0JpZHNGb3JBZFVuaXRDb2RlXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICBiaWRSZXNwb25zZSBvYmplY3RcbiAqL1xuXG5wYmpzSW5zdGFuY2UuZ2V0Tm9CaWRzRm9yQWRVbml0Q29kZSA9IGZ1bmN0aW9uIChhZFVuaXRDb2RlKSB7XG4gIGNvbnN0IGJpZHMgPSBhdWN0aW9uTWFuYWdlci5nZXROb0JpZHMoKS5maWx0ZXIoYmlkID0+IGJpZC5hZFVuaXRDb2RlID09PSBhZFVuaXRDb2RlKTtcbiAgcmV0dXJuIHsgYmlkcyB9O1xufTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGJpZCByZXNwb25zZXMgYXQgdGhlIGdpdmVuIG1vbWVudC5cbiAqIEBhbGlhcyBtb2R1bGU6cGJqcy5nZXRCaWRSZXNwb25zZXNcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICBtYXAgfCBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgYmlkUmVzcG9uc2VzXG4gKi9cblxucGJqc0luc3RhbmNlLmdldEJpZFJlc3BvbnNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgbG9nSW5mbygnSW52b2tpbmcgJCRQUkVCSURfR0xPQkFMJCQuZ2V0QmlkUmVzcG9uc2VzJywgYXJndW1lbnRzKTtcbiAgcmV0dXJuIGdldEJpZHMoJ2dldEJpZHNSZWNlaXZlZCcpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGJpZFJlc3BvbnNlcyBmb3IgdGhlIHNwZWNpZmllZCBhZFVuaXRDb2RlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGFkVW5pdENvZGUgYWRVbml0Q29kZVxuICogQGFsaWFzIG1vZHVsZTpwYmpzLmdldEJpZFJlc3BvbnNlc0ZvckFkVW5pdENvZGVcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICBiaWRSZXNwb25zZSBvYmplY3RcbiAqL1xuXG5wYmpzSW5zdGFuY2UuZ2V0QmlkUmVzcG9uc2VzRm9yQWRVbml0Q29kZSA9IGZ1bmN0aW9uIChhZFVuaXRDb2RlKSB7XG4gIGNvbnN0IGJpZHMgPSBhdWN0aW9uTWFuYWdlci5nZXRCaWRzUmVjZWl2ZWQoKS5maWx0ZXIoYmlkID0+IGJpZC5hZFVuaXRDb2RlID09PSBhZFVuaXRDb2RlKTtcbiAgcmV0dXJuIHsgYmlkcyB9O1xufTtcblxuLyoqXG4gKiBTZXQgcXVlcnkgc3RyaW5nIHRhcmdldGluZyBvbiBvbmUgb3IgbW9yZSBHUFQgYWQgdW5pdHMuXG4gKiBAcGFyYW0geyhzdHJpbmd8c3RyaW5nW10pfSBhZFVuaXQgYSBzaW5nbGUgYGFkVW5pdC5jb2RlYCBvciBtdWx0aXBsZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24ob2JqZWN0KX0gY3VzdG9tU2xvdE1hdGNoaW5nIGdldHMgYSBHb29nbGVUYWcgc2xvdCBhbmQgcmV0dXJucyBhIGZpbHRlciBmdW5jdGlvbiBmb3IgYWRVbml0Q29kZSwgc28geW91IGNhbiBkZWNpZGUgdG8gbWF0Y2ggb24gZWl0aGVyIGVnLiByZXR1cm4gc2xvdCA9PiB7IHJldHVybiBhZFVuaXRDb2RlID0+IHsgcmV0dXJuIHNsb3QuZ2V0U2xvdEVsZW1lbnRJZCgpID09PSAnbXlGYXZvcml0ZURpdklkJzsgfSB9O1xuICogQGFsaWFzIG1vZHVsZTpwYmpzLnNldFRhcmdldGluZ0ZvckdQVEFzeW5jXG4gKi9cbnBianNJbnN0YW5jZS5zZXRUYXJnZXRpbmdGb3JHUFRBc3luYyA9IGZ1bmN0aW9uIChhZFVuaXQsIGN1c3RvbVNsb3RNYXRjaGluZykge1xuICBsb2dJbmZvKCdJbnZva2luZyAkJFBSRUJJRF9HTE9CQUwkJC5zZXRUYXJnZXRpbmdGb3JHUFRBc3luYycsIGFyZ3VtZW50cyk7XG4gIGlmICghaXNHcHRQdWJhZHNEZWZpbmVkKCkpIHtcbiAgICBsb2dFcnJvcignd2luZG93Lmdvb2dsZXRhZyBpcyBub3QgZGVmaW5lZCBvbiB0aGUgcGFnZScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGdldCBvdXIgYWQgdW5pdCBjb2Rlc1xuICBsZXQgdGFyZ2V0aW5nU2V0ID0gdGFyZ2V0aW5nLmdldEFsbFRhcmdldGluZyhhZFVuaXQpO1xuXG4gIC8vIGZpcnN0IHJlc2V0IGFueSBvbGQgdGFyZ2V0aW5nXG4gIHRhcmdldGluZy5yZXNldFByZXNldFRhcmdldGluZyhhZFVuaXQsIGN1c3RvbVNsb3RNYXRjaGluZyk7XG5cbiAgLy8gbm93IHNldCBuZXcgdGFyZ2V0aW5nIGtleXNcbiAgdGFyZ2V0aW5nLnNldFRhcmdldGluZ0ZvckdQVCh0YXJnZXRpbmdTZXQsIGN1c3RvbVNsb3RNYXRjaGluZyk7XG5cbiAgT2JqZWN0LmtleXModGFyZ2V0aW5nU2V0KS5mb3JFYWNoKChhZFVuaXRDb2RlKSA9PiB7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0aW5nU2V0W2FkVW5pdENvZGVdKS5mb3JFYWNoKCh0YXJnZXRpbmdLZXkpID0+IHtcbiAgICAgIGlmICh0YXJnZXRpbmdLZXkgPT09ICdoYl9hZGlkJykge1xuICAgICAgICBhdWN0aW9uTWFuYWdlci5zZXRTdGF0dXNGb3JCaWRzKHRhcmdldGluZ1NldFthZFVuaXRDb2RlXVt0YXJnZXRpbmdLZXldLCBDT05TVEFOVFMuQklEX1NUQVRVUy5CSURfVEFSR0VUSU5HX1NFVCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIGVtaXQgZXZlbnRcbiAgZXZlbnRzLmVtaXQoU0VUX1RBUkdFVElORywgdGFyZ2V0aW5nU2V0KTtcbn07XG5cbi8qKlxuICogU2V0IHF1ZXJ5IHN0cmluZyB0YXJnZXRpbmcgb24gYWxsIEFTVCAoQXBwTmV4dXMgU2VsbGVyIFRhZykgYWQgdW5pdHMuIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGhhcyB0byBiZSBjYWxsZWQgYWZ0ZXIgYWxsIGFkIHVuaXRzIG9uIHBhZ2UgYXJlIGRlZmluZWQuIEZvciB3b3JraW5nIGV4YW1wbGUgY29kZSwgc2VlIFtVc2luZyBQcmViaWQuanMgd2l0aCBBcHBOZXh1cyBQdWJsaXNoZXIgQWQgU2VydmVyXShodHRwOi8vcHJlYmlkLm9yZy9kZXYtZG9jcy9leGFtcGxlcy91c2UtcHJlYmlkLXdpdGgtYXBwbmV4dXMtYWQtc2VydmVyLmh0bWwpLlxuICogQHBhcmFtICB7KHN0cmluZ3xzdHJpbmdbXSl9IGFkVW5pdENvZGUgYWRVbml0Q29kZSBvciBhcnJheSBvZiBhZFVuaXRDb2Rlc1xuICogQGFsaWFzIG1vZHVsZTpwYmpzLnNldFRhcmdldGluZ0ZvckFzdFxuICovXG5wYmpzSW5zdGFuY2Uuc2V0VGFyZ2V0aW5nRm9yQXN0ID0gZnVuY3Rpb24gKGFkVW5pdENvZGVzKSB7XG4gIGxvZ0luZm8oJ0ludm9raW5nICQkUFJFQklEX0dMT0JBTCQkLnNldFRhcmdldGluZ0ZvckFuJywgYXJndW1lbnRzKTtcbiAgaWYgKCF0YXJnZXRpbmcuaXNBcG50YWdEZWZpbmVkKCkpIHtcbiAgICBsb2dFcnJvcignd2luZG93LmFwbnRhZyBpcyBub3QgZGVmaW5lZCBvbiB0aGUgcGFnZScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRhcmdldGluZy5zZXRUYXJnZXRpbmdGb3JBc3QoYWRVbml0Q29kZXMpO1xuXG4gIC8vIGVtaXQgZXZlbnRcbiAgZXZlbnRzLmVtaXQoU0VUX1RBUkdFVElORywgdGFyZ2V0aW5nLmdldEFsbFRhcmdldGluZygpKTtcbn07XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGNoZWNrIGZvciBwcmVzZW5jZSBvZiBnaXZlbiBub2RlIGluIGdpdmVuIHBhcmVudC4gSWYgbm90IHByZXNlbnQgLSB3aWxsIGluamVjdCBpdC5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBub2RlLCB3aG9zZSBleGlzdGFuY2UgaXMgaW4gcXVlc3Rpb25cbiAqIEBwYXJhbSB7RG9jdW1lbnR9IGRvYyBkb2N1bWVudCBlbGVtZW50IGRvIGxvb2sgaW5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lIHRhZyBuYW1lIHRvIGxvb2sgaW5cbiAqL1xuZnVuY3Rpb24gcmVpbmplY3ROb2RlSWZSZW1vdmVkKG5vZGUsIGRvYywgdGFnTmFtZSkge1xuICBjb25zdCBpbmplY3Rpb25Ob2RlID0gZG9jLnF1ZXJ5U2VsZWN0b3IodGFnTmFtZSk7XG4gIGlmICghbm9kZS5wYXJlbnROb2RlIHx8IG5vZGUucGFyZW50Tm9kZSAhPT0gaW5qZWN0aW9uTm9kZSkge1xuICAgIGluc2VydEVsZW1lbnQobm9kZSwgZG9jLCB0YWdOYW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCByZW5kZXIgdGhlIGFkIChiYXNlZCBvbiBwYXJhbXMpIGluIHRoZSBnaXZlbiBpZnJhbWUgZG9jdW1lbnQgcGFzc2VkIHRocm91Z2guXG4gKiBOb3RlIHRoYXQgZG9jIFNIT1VMRCBOT1QgYmUgdGhlIHBhcmVudCBkb2N1bWVudCBwYWdlIGFzIHdlIGNhbid0IGRvYy53cml0ZSgpIGFzeW5jaHJvbm91c2x5XG4gKiBAcGFyYW0gIHtEb2N1bWVudH0gZG9jIGRvY3VtZW50XG4gKiBAcGFyYW0gIHtzdHJpbmd9IGlkIGJpZCBpZCB0byBsb2NhdGUgdGhlIGFkXG4gKiBAYWxpYXMgbW9kdWxlOnBianMucmVuZGVyQWRcbiAqL1xucGJqc0luc3RhbmNlLnJlbmRlckFkID0gaG9vaygnYXN5bmMnLCBmdW5jdGlvbiAoZG9jLCBpZCwgb3B0aW9ucykge1xuICBsb2dJbmZvKCdJbnZva2luZyAkJFBSRUJJRF9HTE9CQUwkJC5yZW5kZXJBZCcsIGFyZ3VtZW50cyk7XG4gIGxvZ01lc3NhZ2UoJ0NhbGxpbmcgcmVuZGVyQWQgd2l0aCBhZElkIDonICsgaWQpO1xuXG4gIGlmICghaWQpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYEVycm9yIHRyeWluZyB0byB3cml0ZSBhZCBJZCA6JHtpZH0gdG8gdGhlIHBhZ2UuIE1pc3NpbmcgYWRJZGA7XG4gICAgZW1pdEFkUmVuZGVyRmFpbCh7IHJlYXNvbjogTUlTU0lOR19ET0NfT1JfQURJRCwgbWVzc2FnZSwgaWQgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBsb29rdXAgYWQgYnkgYWQgSWRcbiAgICBjb25zdCBiaWQgPSBhdWN0aW9uTWFuYWdlci5maW5kQmlkQnlBZElkKGlkKTtcbiAgICBpZiAoIWJpZCkge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGBFcnJvciB0cnlpbmcgdG8gd3JpdGUgYWQuIENhbm5vdCBmaW5kIGFkIGJ5IGdpdmVuIGlkIDogJHtpZH1gO1xuICAgICAgZW1pdEFkUmVuZGVyRmFpbCh7IHJlYXNvbjogQ0FOTk9UX0ZJTkRfQUQsIG1lc3NhZ2UsIGlkIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChiaWQuc3RhdHVzID09PSBDT05TVEFOVFMuQklEX1NUQVRVUy5SRU5ERVJFRCkge1xuICAgICAgbG9nV2FybihgQWQgaWQgJHtiaWQuYWRJZH0gaGFzIGJlZW4gcmVuZGVyZWQgYmVmb3JlYCk7XG4gICAgICBldmVudHMuZW1pdChTVEFMRV9SRU5ERVIsIGJpZCk7XG4gICAgICBpZiAoZGVlcEFjY2Vzcyhjb25maWcuZ2V0Q29uZmlnKCdhdWN0aW9uT3B0aW9ucycpLCAnc3VwcHJlc3NTdGFsZVJlbmRlcicpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyByZXBsYWNlIG1hY3JvcyBhY2NvcmRpbmcgdG8gb3BlblJUQiB3aXRoIHByaWNlIHBhaWQgPSBiaWQuY3BtXG4gICAgYmlkLmFkID0gcmVwbGFjZUF1Y3Rpb25QcmljZShiaWQuYWQsIGJpZC5vcmlnaW5hbENwbSB8fCBiaWQuY3BtKTtcbiAgICBiaWQuYWRVcmwgPSByZXBsYWNlQXVjdGlvblByaWNlKGJpZC5hZFVybCwgYmlkLm9yaWdpbmFsQ3BtIHx8IGJpZC5jcG0pO1xuICAgIC8vIHJlcGxhY2luZyBjbGlja3Rocm91Z2ggaWYgc3VibWl0dGVkXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5jbGlja1Rocm91Z2gpIHtcbiAgICAgIGNvbnN0IHtjbGlja1Rocm91Z2h9ID0gb3B0aW9ucztcbiAgICAgIGJpZC5hZCA9IHJlcGxhY2VDbGlja1Rocm91Z2goYmlkLmFkLCBjbGlja1Rocm91Z2gpO1xuICAgICAgYmlkLmFkVXJsID0gcmVwbGFjZUNsaWNrVGhyb3VnaChiaWQuYWRVcmwsIGNsaWNrVGhyb3VnaCk7XG4gICAgfVxuXG4gICAgLy8gc2F2ZSB3aW5uaW5nIGJpZHNcbiAgICBhdWN0aW9uTWFuYWdlci5hZGRXaW5uaW5nQmlkKGJpZCk7XG5cbiAgICAvLyBlbWl0ICdiaWQgd29uJyBldmVudCBoZXJlXG4gICAgZXZlbnRzLmVtaXQoQklEX1dPTiwgYmlkKTtcblxuICAgIGNvbnN0IHtoZWlnaHQsIHdpZHRoLCBhZCwgbWVkaWFUeXBlLCBhZFVybCwgcmVuZGVyZXJ9ID0gYmlkO1xuXG4gICAgLy8gdmlkZW8gbW9kdWxlXG4gICAgaWYgKEZFQVRVUkVTLlZJREVPKSB7XG4gICAgICBjb25zdCBhZFVuaXRDb2RlID0gYmlkLmFkVW5pdENvZGU7XG4gICAgICBjb25zdCBhZFVuaXQgPSBwYmpzSW5zdGFuY2UuYWRVbml0cy5maWx0ZXIoYWRVbml0ID0+IGFkVW5pdC5jb2RlID09PSBhZFVuaXRDb2RlKTtcbiAgICAgIGNvbnN0IHZpZGVvTW9kdWxlID0gcGJqc0luc3RhbmNlLnZpZGVvTW9kdWxlO1xuICAgICAgaWYgKGFkVW5pdC52aWRlbyAmJiB2aWRlb01vZHVsZSkge1xuICAgICAgICB2aWRlb01vZHVsZS5yZW5kZXJCaWQoYWRVbml0LnZpZGVvLmRpdklkLCBiaWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFkb2MpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgRXJyb3IgdHJ5aW5nIHRvIHdyaXRlIGFkIElkIDoke2lkfSB0byB0aGUgcGFnZS4gTWlzc2luZyBkb2N1bWVudGA7XG4gICAgICBlbWl0QWRSZW5kZXJGYWlsKHsgcmVhc29uOiBNSVNTSU5HX0RPQ19PUl9BRElELCBtZXNzYWdlLCBpZCB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjcmVhdGl2ZUNvbW1lbnQgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KGBDcmVhdGl2ZSAke2JpZC5jcmVhdGl2ZUlkfSBzZXJ2ZWQgYnkgJHtiaWQuYmlkZGVyfSBQcmViaWQuanMgSGVhZGVyIEJpZGRpbmdgKTtcbiAgICBpbnNlcnRFbGVtZW50KGNyZWF0aXZlQ29tbWVudCwgZG9jLCAnaHRtbCcpO1xuXG4gICAgaWYgKGlzUmVuZGVyZXJSZXF1aXJlZChyZW5kZXJlcikpIHtcbiAgICAgIGV4ZWN1dGVSZW5kZXJlcihyZW5kZXJlciwgYmlkLCBkb2MpO1xuICAgICAgcmVpbmplY3ROb2RlSWZSZW1vdmVkKGNyZWF0aXZlQ29tbWVudCwgZG9jLCAnaHRtbCcpO1xuICAgICAgZW1pdEFkUmVuZGVyU3VjY2VlZGVkKHsgZG9jLCBiaWQsIGlkIH0pO1xuICAgIH0gZWxzZSBpZiAoKGRvYyA9PT0gZG9jdW1lbnQgJiYgIWluSWZyYW1lKCkpIHx8IG1lZGlhVHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGBFcnJvciB0cnlpbmcgdG8gd3JpdGUgYWQuIEFkIHJlbmRlciBjYWxsIGFkIGlkICR7aWR9IHdhcyBwcmV2ZW50ZWQgZnJvbSB3cml0aW5nIHRvIHRoZSBtYWluIGRvY3VtZW50LmA7XG4gICAgICBlbWl0QWRSZW5kZXJGYWlsKHtyZWFzb246IFBSRVZFTlRfV1JJVElOR19PTl9NQUlOX0RPQ1VNRU5ULCBtZXNzYWdlLCBiaWQsIGlkfSk7XG4gICAgfSBlbHNlIGlmIChhZCkge1xuICAgICAgZG9jLndyaXRlKGFkKTtcbiAgICAgIGRvYy5jbG9zZSgpO1xuICAgICAgc2V0UmVuZGVyU2l6ZShkb2MsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgcmVpbmplY3ROb2RlSWZSZW1vdmVkKGNyZWF0aXZlQ29tbWVudCwgZG9jLCAnaHRtbCcpO1xuICAgICAgY2FsbEJ1cmwoYmlkKTtcbiAgICAgIGVtaXRBZFJlbmRlclN1Y2NlZWRlZCh7IGRvYywgYmlkLCBpZCB9KTtcbiAgICB9IGVsc2UgaWYgKGFkVXJsKSB7XG4gICAgICBjb25zdCBpZnJhbWUgPSBjcmVhdGVJbnZpc2libGVJZnJhbWUoKTtcbiAgICAgIGlmcmFtZS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICBpZnJhbWUud2lkdGggPSB3aWR0aDtcbiAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZSc7XG4gICAgICBpZnJhbWUuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgIGlmcmFtZS5zcmMgPSBhZFVybDtcblxuICAgICAgaW5zZXJ0RWxlbWVudChpZnJhbWUsIGRvYywgJ2JvZHknKTtcbiAgICAgIHNldFJlbmRlclNpemUoZG9jLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHJlaW5qZWN0Tm9kZUlmUmVtb3ZlZChjcmVhdGl2ZUNvbW1lbnQsIGRvYywgJ2h0bWwnKTtcbiAgICAgIGNhbGxCdXJsKGJpZCk7XG4gICAgICBlbWl0QWRSZW5kZXJTdWNjZWVkZWQoeyBkb2MsIGJpZCwgaWQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgRXJyb3IgdHJ5aW5nIHRvIHdyaXRlIGFkLiBObyBhZCBmb3IgYmlkIHJlc3BvbnNlIGlkOiAke2lkfWA7XG4gICAgICBlbWl0QWRSZW5kZXJGYWlsKHtyZWFzb246IE5PX0FELCBtZXNzYWdlLCBiaWQsIGlkfSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGBFcnJvciB0cnlpbmcgdG8gd3JpdGUgYWQgSWQgOiR7aWR9IHRvIHRoZSBwYWdlOiR7ZS5tZXNzYWdlfWA7XG4gICAgZW1pdEFkUmVuZGVyRmFpbCh7IHJlYXNvbjogRVhDRVBUSU9OLCBtZXNzYWdlLCBpZCB9KTtcbiAgfVxufSk7XG5cbi8qKlxuICogUmVtb3ZlIGFkVW5pdCBmcm9tIHRoZSAkJFBSRUJJRF9HTE9CQUwkJCBjb25maWd1cmF0aW9uLCBpZiB0aGVyZSBhcmUgbm8gYWRkVW5pdENvZGUocykgaXQgd2lsbCByZW1vdmUgYWxsXG4gKiBAcGFyYW0gIHtzdHJpbmd8IEFycmF5fSBhZFVuaXRDb2RlIHRoZSBhZFVuaXRDb2RlKHMpIHRvIHJlbW92ZVxuICogQGFsaWFzIG1vZHVsZTpwYmpzLnJlbW92ZUFkVW5pdFxuICovXG5wYmpzSW5zdGFuY2UucmVtb3ZlQWRVbml0ID0gZnVuY3Rpb24gKGFkVW5pdENvZGUpIHtcbiAgbG9nSW5mbygnSW52b2tpbmcgJCRQUkVCSURfR0xPQkFMJCQucmVtb3ZlQWRVbml0JywgYXJndW1lbnRzKTtcblxuICBpZiAoIWFkVW5pdENvZGUpIHtcbiAgICBwYmpzSW5zdGFuY2UuYWRVbml0cyA9IFtdO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBhZFVuaXRDb2RlcztcblxuICBpZiAoaXNBcnJheShhZFVuaXRDb2RlKSkge1xuICAgIGFkVW5pdENvZGVzID0gYWRVbml0Q29kZTtcbiAgfSBlbHNlIHtcbiAgICBhZFVuaXRDb2RlcyA9IFthZFVuaXRDb2RlXTtcbiAgfVxuXG4gIGFkVW5pdENvZGVzLmZvckVhY2goKGFkVW5pdENvZGUpID0+IHtcbiAgICBmb3IgKGxldCBpID0gcGJqc0luc3RhbmNlLmFkVW5pdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGlmIChwYmpzSW5zdGFuY2UuYWRVbml0c1tpXS5jb2RlID09PSBhZFVuaXRDb2RlKSB7XG4gICAgICAgIHBianNJbnN0YW5jZS5hZFVuaXRzLnNwbGljZShpLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVxdWVzdE9wdGlvbnNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlcXVlc3RPcHRpb25zLmJpZHNCYWNrSGFuZGxlclxuICogQHBhcmFtIHtudW1iZXJ9IHJlcXVlc3RPcHRpb25zLnRpbWVvdXRcbiAqIEBwYXJhbSB7QXJyYXl9IHJlcXVlc3RPcHRpb25zLmFkVW5pdHNcbiAqIEBwYXJhbSB7QXJyYXl9IHJlcXVlc3RPcHRpb25zLmFkVW5pdENvZGVzXG4gKiBAcGFyYW0ge0FycmF5fSByZXF1ZXN0T3B0aW9ucy5sYWJlbHNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0T3B0aW9ucy5hdWN0aW9uSWRcbiAqIEBhbGlhcyBtb2R1bGU6cGJqcy5yZXF1ZXN0Qmlkc1xuICovXG5wYmpzSW5zdGFuY2UucmVxdWVzdEJpZHMgPSAoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGRlbGVnYXRlID0gaG9vaygnYXN5bmMnLCBmdW5jdGlvbiAoeyBiaWRzQmFja0hhbmRsZXIsIHRpbWVvdXQsIGFkVW5pdHMsIGFkVW5pdENvZGVzLCBsYWJlbHMsIGF1Y3Rpb25JZCwgdHRsQnVmZmVyLCBvcnRiMiwgbWV0cmljcywgZGVmZXIgfSA9IHt9KSB7XG4gICAgZXZlbnRzLmVtaXQoUkVRVUVTVF9CSURTKTtcbiAgICBjb25zdCBjYlRpbWVvdXQgPSB0aW1lb3V0IHx8IGNvbmZpZy5nZXRDb25maWcoJ2JpZGRlclRpbWVvdXQnKTtcbiAgICBsb2dJbmZvKCdJbnZva2luZyAkJFBSRUJJRF9HTE9CQUwkJC5yZXF1ZXN0QmlkcycsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGFkVW5pdENvZGVzICYmIGFkVW5pdENvZGVzLmxlbmd0aCkge1xuICAgICAgLy8gaWYgc3BlY2lmaWMgYWRVbml0Q29kZXMgc3VwcGxpZWQgZmlsdGVyIGFkVW5pdHMgZm9yIHRob3NlIGNvZGVzXG4gICAgICBhZFVuaXRzID0gYWRVbml0cy5maWx0ZXIodW5pdCA9PiBpbmNsdWRlcyhhZFVuaXRDb2RlcywgdW5pdC5jb2RlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBkZXJpdmUgYWRVbml0Q29kZXMgZnJvbSBhZFVuaXRzXG4gICAgICBhZFVuaXRDb2RlcyA9IGFkVW5pdHMgJiYgYWRVbml0cy5tYXAodW5pdCA9PiB1bml0LmNvZGUpO1xuICAgIH1cbiAgICBjb25zdCBvcnRiMkZyYWdtZW50cyA9IHtcbiAgICAgIGdsb2JhbDogbWVyZ2VEZWVwKHt9LCBjb25maWcuZ2V0QW55Q29uZmlnKCdvcnRiMicpIHx8IHt9LCBvcnRiMiB8fCB7fSksXG4gICAgICBiaWRkZXI6IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhjb25maWcuZ2V0QmlkZGVyQ29uZmlnKCkpLm1hcCgoW2JpZGRlciwgY2ZnXSkgPT4gW2JpZGRlciwgY2ZnLm9ydGIyXSkuZmlsdGVyKChbXywgb3J0YjJdKSA9PiBvcnRiMiAhPSBudWxsKSlcbiAgICB9XG4gICAgcmV0dXJuIGVucmljaEZQRChHcmVlZHlQcm9taXNlLnJlc29sdmUob3J0YjJGcmFnbWVudHMuZ2xvYmFsKSkudGhlbihnbG9iYWwgPT4ge1xuICAgICAgb3J0YjJGcmFnbWVudHMuZ2xvYmFsID0gZ2xvYmFsO1xuICAgICAgcmV0dXJuIHN0YXJ0QXVjdGlvbih7Ymlkc0JhY2tIYW5kbGVyLCB0aW1lb3V0OiBjYlRpbWVvdXQsIGFkVW5pdHMsIGFkVW5pdENvZGVzLCBsYWJlbHMsIGF1Y3Rpb25JZCwgdHRsQnVmZmVyLCBvcnRiMkZyYWdtZW50cywgbWV0cmljcywgZGVmZXJ9KTtcbiAgICB9KVxuICB9LCAncmVxdWVzdEJpZHMnKTtcblxuICByZXR1cm4gd3JhcEhvb2soZGVsZWdhdGUsIGZ1bmN0aW9uIHJlcXVlc3RCaWRzKHJlcSA9IHt9KSB7XG4gICAgLy8gdW5saWtlIHRoZSBtYWluIGJvZHkgb2YgYGRlbGVnYXRlYCwgdGhpcyBydW5zIGJlZm9yZSBhbnkgb3RoZXIgaG9vayBoYXMgYSBjaGFuY2UgdG87XG4gICAgLy8gaXQncyBhbHNvIG5vdCByZXN0cmljdGVkIGluIGl0cyByZXR1cm4gdmFsdWUgaW4gdGhlIHdheSBgYXN5bmNgIGhvb2tzIGFyZS5cblxuICAgIC8vIGlmIHRoZSByZXF1ZXN0IGRvZXMgbm90IHNwZWNpZnkgYWRVbml0cywgY2xvbmUgdGhlIGdsb2JhbCBhZFVuaXQgYXJyYXk7XG4gICAgLy8gb3RoZXJ3aXNlLCBpZiB0aGUgY2FsbGVyIGdvZXMgb24gdG8gdXNlIGFkZEFkVW5pdHMvcmVtb3ZlQWRVbml0cywgYW55IGFzeW5jaHJvbm91cyBsb2dpY1xuICAgIC8vIGluIGFueSBob29rIG1pZ2h0IHNlZSB0aGVpciBlZmZlY3RzLlxuICAgIGxldCBhZFVuaXRzID0gcmVxLmFkVW5pdHMgfHwgcGJqc0luc3RhbmNlLmFkVW5pdHM7XG4gICAgcmVxLmFkVW5pdHMgPSAoaXNBcnJheShhZFVuaXRzKSA/IGFkVW5pdHMuc2xpY2UoKSA6IFthZFVuaXRzXSk7XG5cbiAgICByZXEubWV0cmljcyA9IG5ld01ldHJpY3MoKTtcbiAgICByZXEubWV0cmljcy5jaGVja3BvaW50KCdyZXF1ZXN0QmlkcycpO1xuICAgIHJlcS5kZWZlciA9IGRlZmVyKHtwcm9taXNlRmFjdG9yeTogKHIpID0+IG5ldyBQcm9taXNlKHIpfSlcbiAgICBkZWxlZ2F0ZS5jYWxsKHRoaXMsIHJlcSk7XG4gICAgcmV0dXJuIHJlcS5kZWZlci5wcm9taXNlO1xuICB9KTtcbn0pKCk7XG5cbmV4cG9ydCBjb25zdCBzdGFydEF1Y3Rpb24gPSBob29rKCdhc3luYycsIGZ1bmN0aW9uICh7IGJpZHNCYWNrSGFuZGxlciwgdGltZW91dDogY2JUaW1lb3V0LCBhZFVuaXRzLCB0dGxCdWZmZXIsIGFkVW5pdENvZGVzLCBsYWJlbHMsIGF1Y3Rpb25JZCwgb3J0YjJGcmFnbWVudHMsIG1ldHJpY3MsIGRlZmVyIH0gPSB7fSkge1xuICBjb25zdCBzMnNCaWRkZXJzID0gZ2V0UzJTQmlkZGVyU2V0KGNvbmZpZy5nZXRDb25maWcoJ3Myc0NvbmZpZycpIHx8IFtdKTtcbiAgZmlsbEFkVW5pdERlZmF1bHRzKGFkVW5pdHMpO1xuICBhZFVuaXRzID0gdXNlTWV0cmljcyhtZXRyaWNzKS5tZWFzdXJlVGltZSgncmVxdWVzdEJpZHMudmFsaWRhdGUnLCAoKSA9PiBjaGVja0FkVW5pdFNldHVwKGFkVW5pdHMpKTtcblxuICBmdW5jdGlvbiBhdWN0aW9uRG9uZShiaWRzLCB0aW1lZE91dCwgYXVjdGlvbklkKSB7XG4gICAgaWYgKHR5cGVvZiBiaWRzQmFja0hhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGJpZHNCYWNrSGFuZGxlcihiaWRzLCB0aW1lZE91dCwgYXVjdGlvbklkKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nRXJyb3IoJ0Vycm9yIGV4ZWN1dGluZyBiaWRzQmFja0hhbmRsZXInLCBudWxsLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZGVmZXIucmVzb2x2ZSh7YmlkcywgdGltZWRPdXQsIGF1Y3Rpb25JZH0pXG4gIH1cblxuICAvKlxuICAgKiBmb3IgYSBnaXZlbiBhZHVuaXQgd2hpY2ggc3VwcG9ydHMgYSBzZXQgb2YgbWVkaWFUeXBlc1xuICAgKiBhbmQgYSBnaXZlbiBiaWRkZXIgd2hpY2ggc3VwcG9ydHMgYSBzZXQgb2YgbWVkaWFUeXBlc1xuICAgKiBhIGJpZGRlciBpcyBlbGlnaWJsZSB0byBwYXJ0aWNpcGF0ZSBvbiB0aGUgYWR1bml0XG4gICAqIGlmIGl0IHN1cHBvcnRzIGF0IGxlYXN0IG9uZSBvZiB0aGUgbWVkaWFUeXBlcyBvbiB0aGUgYWR1bml0XG4gICAqL1xuICBhZFVuaXRzLmZvckVhY2goYWRVbml0ID0+IHtcbiAgICAvLyBnZXQgdGhlIGFkdW5pdCdzIG1lZGlhVHlwZXMsIGRlZmF1bHRpbmcgdG8gYmFubmVyIGlmIG1lZGlhVHlwZXMgaXNuJ3QgcHJlc2VudFxuICAgIGNvbnN0IGFkVW5pdE1lZGlhVHlwZXMgPSBPYmplY3Qua2V5cyhhZFVuaXQubWVkaWFUeXBlcyB8fCB7ICdiYW5uZXInOiAnYmFubmVyJyB9KTtcblxuICAgIC8vIGdldCB0aGUgYmlkZGVyJ3MgbWVkaWFUeXBlc1xuICAgIGNvbnN0IGFsbEJpZGRlcnMgPSBhZFVuaXQuYmlkcy5tYXAoYmlkID0+IGJpZC5iaWRkZXIpO1xuICAgIGNvbnN0IGJpZGRlclJlZ2lzdHJ5ID0gYWRhcHRlck1hbmFnZXIuYmlkZGVyUmVnaXN0cnk7XG5cbiAgICBjb25zdCBiaWRkZXJzID0gYWxsQmlkZGVycy5maWx0ZXIoYmlkZGVyID0+ICFzMnNCaWRkZXJzLmhhcyhiaWRkZXIpKTtcblxuICAgIGNvbnN0IHRpZCA9IGFkVW5pdC5vcnRiMkltcD8uZXh0Py50aWQgfHwgZ2VuZXJhdGVVVUlEKCk7XG4gICAgYWRVbml0LnRyYW5zYWN0aW9uSWQgPSB0aWQ7XG4gICAgaWYgKHR0bEJ1ZmZlciAhPSBudWxsICYmICFhZFVuaXQuaGFzT3duUHJvcGVydHkoJ3R0bEJ1ZmZlcicpKSB7XG4gICAgICBhZFVuaXQudHRsQnVmZmVyID0gdHRsQnVmZmVyO1xuICAgIH1cbiAgICAvLyBQb3B1bGF0ZSBvcnRiMkltcC5leHQudGlkIHdpdGggdHJhbnNhY3Rpb25JZC4gU3BlY2lmeWluZyBhIHRyYW5zYWN0aW9uIElEIHBlciBpdGVtIGluIHRoZSBvcnRiIGltcHJlc3Npb24gYXJyYXksIGxldHMgbXVsdGlwbGUgdHJhbnNhY3Rpb24gSURzIGJlIHRyYW5zbWl0dGVkIGluIGEgc2luZ2xlIGJpZCByZXF1ZXN0LlxuICAgIGRlZXBTZXRWYWx1ZShhZFVuaXQsICdvcnRiMkltcC5leHQudGlkJywgdGlkKTtcblxuICAgIGJpZGRlcnMuZm9yRWFjaChiaWRkZXIgPT4ge1xuICAgICAgY29uc3QgYWRhcHRlciA9IGJpZGRlclJlZ2lzdHJ5W2JpZGRlcl07XG4gICAgICBjb25zdCBzcGVjID0gYWRhcHRlciAmJiBhZGFwdGVyLmdldFNwZWMgJiYgYWRhcHRlci5nZXRTcGVjKCk7XG4gICAgICAvLyBiYW5uZXIgaXMgZGVmYXVsdCBpZiBub3Qgc3BlY2lmaWVkIGluIHNwZWNcbiAgICAgIGNvbnN0IGJpZGRlck1lZGlhVHlwZXMgPSAoc3BlYyAmJiBzcGVjLnN1cHBvcnRlZE1lZGlhVHlwZXMpIHx8IFsnYmFubmVyJ107XG5cbiAgICAgIC8vIGNoZWNrIGlmIHRoZSBiaWRkZXIncyBtZWRpYVR5cGVzIGFyZSBub3QgaW4gdGhlIGFkVW5pdCdzIG1lZGlhVHlwZXNcbiAgICAgIGNvbnN0IGJpZGRlckVsaWdpYmxlID0gYWRVbml0TWVkaWFUeXBlcy5zb21lKHR5cGUgPT4gaW5jbHVkZXMoYmlkZGVyTWVkaWFUeXBlcywgdHlwZSkpO1xuICAgICAgaWYgKCFiaWRkZXJFbGlnaWJsZSkge1xuICAgICAgICAvLyBkcm9wIHRoZSBiaWRkZXIgZnJvbSB0aGUgYWQgdW5pdCBpZiBpdCdzIG5vdCBjb21wYXRpYmxlXG4gICAgICAgIGxvZ1dhcm4odW5zdXBwb3J0ZWRCaWRkZXJNZXNzYWdlKGFkVW5pdCwgYmlkZGVyKSk7XG4gICAgICAgIGFkVW5pdC5iaWRzID0gYWRVbml0LmJpZHMuZmlsdGVyKGJpZCA9PiBiaWQuYmlkZGVyICE9PSBiaWRkZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWR1bml0Q291bnRlci5pbmNyZW1lbnRCaWRkZXJSZXF1ZXN0c0NvdW50ZXIoYWRVbml0LmNvZGUsIGJpZGRlcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYWR1bml0Q291bnRlci5pbmNyZW1lbnRSZXF1ZXN0c0NvdW50ZXIoYWRVbml0LmNvZGUpO1xuICB9KTtcblxuICBpZiAoIWFkVW5pdHMgfHwgYWRVbml0cy5sZW5ndGggPT09IDApIHtcbiAgICBsb2dNZXNzYWdlKCdObyBhZFVuaXRzIGNvbmZpZ3VyZWQuIE5vIGJpZHMgcmVxdWVzdGVkLicpO1xuICAgIGF1Y3Rpb25Eb25lKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYXVjdGlvbiA9IGF1Y3Rpb25NYW5hZ2VyLmNyZWF0ZUF1Y3Rpb24oe1xuICAgICAgYWRVbml0cyxcbiAgICAgIGFkVW5pdENvZGVzLFxuICAgICAgY2FsbGJhY2s6IGF1Y3Rpb25Eb25lLFxuICAgICAgY2JUaW1lb3V0LFxuICAgICAgbGFiZWxzLFxuICAgICAgYXVjdGlvbklkLFxuICAgICAgb3J0YjJGcmFnbWVudHMsXG4gICAgICBtZXRyaWNzLFxuICAgIH0pO1xuXG4gICAgbGV0IGFkVW5pdHNMZW4gPSBhZFVuaXRzLmxlbmd0aDtcbiAgICBpZiAoYWRVbml0c0xlbiA+IDE1KSB7XG4gICAgICBsb2dJbmZvKGBDdXJyZW50IGF1Y3Rpb24gJHthdWN0aW9uLmdldEF1Y3Rpb25JZCgpfSBjb250YWlucyAke2FkVW5pdHNMZW59IGFkVW5pdHMuYCwgYWRVbml0cyk7XG4gICAgfVxuXG4gICAgYWRVbml0Q29kZXMuZm9yRWFjaChjb2RlID0+IHRhcmdldGluZy5zZXRMYXRlc3RBdWN0aW9uRm9yQWRVbml0KGNvZGUsIGF1Y3Rpb24uZ2V0QXVjdGlvbklkKCkpKTtcbiAgICBhdWN0aW9uLmNhbGxCaWRzKCk7XG4gIH1cbn0sICdzdGFydEF1Y3Rpb24nKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVDYWxsYmFja3MoZm4sIHJlcUJpZHNDb25maWdPYmopIHtcbiAgcnVuQWxsKHN0b3JhZ2VDYWxsYmFja3MpO1xuICBydW5BbGwoZW5hYmxlQW5hbHl0aWNzQ2FsbGJhY2tzKTtcbiAgZm4uY2FsbCh0aGlzLCByZXFCaWRzQ29uZmlnT2JqKTtcblxuICBmdW5jdGlvbiBydW5BbGwocXVldWUpIHtcbiAgICB2YXIgcXVldWVkO1xuICAgIHdoaWxlICgocXVldWVkID0gcXVldWUuc2hpZnQoKSkpIHtcbiAgICAgIHF1ZXVlZCgpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIGhvb2sgd2lsbCBleGVjdXRlIGFsbCBzdG9yYWdlIGNhbGxiYWNrcyB3aGljaCB3ZXJlIHJlZ2lzdGVyZWQgYmVmb3JlIGdkcHIgZW5mb3JjZW1lbnQgaG9vayB3YXMgYWRkZWQuIFNvbWUgYmlkZGVycywgdXNlciBpZCBtb2R1bGVzIHVzZSBzdG9yYWdlIGZ1bmN0aW9ucyB3aGVuIG1vZHVsZSBpcyBwYXJzZWQgYnV0IGdkcHIgZW5mb3JjZW1lbnQgaG9vayBpcyBub3QgYWRkZWQgYXQgdGhhdCBzdGFnZSBhcyBzZXRDb25maWcgY2FsbGJhY2tzIGFyZSB5ZXQgdG8gYmUgY2FsbGVkLiBIZW5jZSBmb3Igc3VjaCBjYWxscyB3ZSBleGVjdXRlIGFsbCB0aGUgc3RvcmVkIGNhbGxiYWNrcyBqdXN0IGJlZm9yZSByZXF1ZXN0Qmlkcy4gQXQgdGhpcyBob29rIHBvaW50IHdlIHdpbGwga25vdyBmb3Igc3VyZSB0aGF0IGdkcHJFbmZvcmNlbWVudCBtb2R1bGUgaXMgYWRkZWQgb3Igbm90XG5wYmpzSW5zdGFuY2UucmVxdWVzdEJpZHMuYmVmb3JlKGV4ZWN1dGVDYWxsYmFja3MsIDQ5KTtcblxuLyoqXG4gKlxuICogQWRkIGFkdW5pdChzKVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGFkVW5pdEFyciBBcnJheSBvZiBhZFVuaXRzIG9yIHNpbmdsZSBhZFVuaXQgT2JqZWN0LlxuICogQGFsaWFzIG1vZHVsZTpwYmpzLmFkZEFkVW5pdHNcbiAqL1xucGJqc0luc3RhbmNlLmFkZEFkVW5pdHMgPSBmdW5jdGlvbiAoYWRVbml0QXJyKSB7XG4gIGxvZ0luZm8oJ0ludm9raW5nICQkUFJFQklEX0dMT0JBTCQkLmFkZEFkVW5pdHMnLCBhcmd1bWVudHMpO1xuICBwYmpzSW5zdGFuY2UuYWRVbml0cy5wdXNoLmFwcGx5KHBianNJbnN0YW5jZS5hZFVuaXRzLCBpc0FycmF5KGFkVW5pdEFycikgPyBhZFVuaXRBcnIgOiBbYWRVbml0QXJyXSk7XG4gIC8vIGVtaXQgZXZlbnRcbiAgZXZlbnRzLmVtaXQoQUREX0FEX1VOSVRTKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IHRoZSBuYW1lIG9mIHRoZSBldmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBhIGNhbGxiYWNrIHRvIHNldCBvbiBldmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGlkIGFuIGlkZW50aWZpZXIgaW4gdGhlIGNvbnRleHQgb2YgdGhlIGV2ZW50XG4gKiBAYWxpYXMgbW9kdWxlOnBianMub25FdmVudFxuICpcbiAqIFRoaXMgQVBJIGNhbGwgYWxsb3dzIHlvdSB0byByZWdpc3RlciBhIGNhbGxiYWNrIHRvIGhhbmRsZSBhIFByZWJpZC5qcyBldmVudC5cbiAqIEFuIG9wdGlvbmFsIGBpZGAgcGFyYW1ldGVyIHByb3ZpZGVzIG1vcmUgZmluZWx5LWdyYWluZWQgZXZlbnQgY2FsbGJhY2sgcmVnaXN0cmF0aW9uLlxuICogVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSB0byByZWdpc3RlciBjYWxsYmFjayBldmVudHMgZm9yIGEgc3BlY2lmaWMgaXRlbSBpbiB0aGVcbiAqIGV2ZW50IGNvbnRleHQuIEZvciBleGFtcGxlLCBgYmlkV29uYCBldmVudHMgd2lsbCBhY2NlcHQgYW4gYGlkYCBmb3IgYWQgdW5pdCBjb2RlLlxuICogYGJpZFdvbmAgY2FsbGJhY2tzIHJlZ2lzdGVyZWQgd2l0aCBhbiBhZCB1bml0IGNvZGUgaWQgd2lsbCBiZSBjYWxsZWQgd2hlbiBhIGJpZFxuICogZm9yIHRoYXQgYWQgdW5pdCBjb2RlIHdpbnMgdGhlIGF1Y3Rpb24uIFdpdGhvdXQgYW4gYGlkYCB0aGlzIG1ldGhvZCByZWdpc3RlcnMgdGhlXG4gKiBjYWxsYmFjayBmb3IgZXZlcnkgYGJpZFdvbmAgZXZlbnQuXG4gKlxuICogQ3VycmVudGx5IGBiaWRXb25gIGlzIHRoZSBvbmx5IGV2ZW50IHRoYXQgYWNjZXB0cyBhbiBgaWRgIHBhcmFtZXRlci5cbiAqL1xucGJqc0luc3RhbmNlLm9uRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGhhbmRsZXIsIGlkKSB7XG4gIGxvZ0luZm8oJ0ludm9raW5nICQkUFJFQklEX0dMT0JBTCQkLm9uRXZlbnQnLCBhcmd1bWVudHMpO1xuICBpZiAoIWlzRm4oaGFuZGxlcikpIHtcbiAgICBsb2dFcnJvcignVGhlIGV2ZW50IGhhbmRsZXIgcHJvdmlkZWQgaXMgbm90IGEgZnVuY3Rpb24gYW5kIHdhcyBub3Qgc2V0IG9uIGV2ZW50IFwiJyArIGV2ZW50ICsgJ1wiLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpZCAmJiAhZXZlbnRWYWxpZGF0b3JzW2V2ZW50XS5jYWxsKG51bGwsIGlkKSkge1xuICAgIGxvZ0Vycm9yKCdUaGUgaWQgcHJvdmlkZWQgaXMgbm90IHZhbGlkIGZvciBldmVudCBcIicgKyBldmVudCArICdcIiBhbmQgbm8gaGFuZGxlciB3YXMgc2V0LicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGV2ZW50cy5vbihldmVudCwgaGFuZGxlciwgaWQpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgdGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIGEgY2FsbGJhY2sgdG8gcmVtb3ZlIGZyb20gdGhlIGV2ZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgYW4gaWRlbnRpZmllciBpbiB0aGUgY29udGV4dCBvZiB0aGUgZXZlbnQgKHNlZSBgJCRQUkVCSURfR0xPQkFMJCQub25FdmVudGApXG4gKiBAYWxpYXMgbW9kdWxlOnBianMub2ZmRXZlbnRcbiAqL1xucGJqc0luc3RhbmNlLm9mZkV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBoYW5kbGVyLCBpZCkge1xuICBsb2dJbmZvKCdJbnZva2luZyAkJFBSRUJJRF9HTE9CQUwkJC5vZmZFdmVudCcsIGFyZ3VtZW50cyk7XG4gIGlmIChpZCAmJiAhZXZlbnRWYWxpZGF0b3JzW2V2ZW50XS5jYWxsKG51bGwsIGlkKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGV2ZW50cy5vZmYoZXZlbnQsIGhhbmRsZXIsIGlkKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIGEgY29weSBvZiBhbGwgZXZlbnRzIGVtaXR0ZWRcbiAqXG4gKiBAYWxpYXMgbW9kdWxlOnBianMuZ2V0RXZlbnRzXG4gKi9cbnBianNJbnN0YW5jZS5nZXRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGxvZ0luZm8oJ0ludm9raW5nICQkUFJFQklEX0dMT0JBTCQkLmdldEV2ZW50cycpO1xuICByZXR1cm4gZXZlbnRzLmdldEV2ZW50cygpO1xufTtcblxuLypcbiAqIFdyYXBwZXIgdG8gcmVnaXN0ZXIgYmlkZGVyQWRhcHRlciBleHRlcm5hbGx5IChhZGFwdGVyTWFuYWdlci5yZWdpc3RlckJpZEFkYXB0ZXIoKSlcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBiaWRkZXJBZGFwdG9yIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge3N0cmluZ30gYmlkZGVyQ29kZSBbZGVzY3JpcHRpb25dXG4gKiBAYWxpYXMgbW9kdWxlOnBianMucmVnaXN0ZXJCaWRBZGFwdGVyXG4gKi9cbnBianNJbnN0YW5jZS5yZWdpc3RlckJpZEFkYXB0ZXIgPSBmdW5jdGlvbiAoYmlkZGVyQWRhcHRvciwgYmlkZGVyQ29kZSkge1xuICBsb2dJbmZvKCdJbnZva2luZyAkJFBSRUJJRF9HTE9CQUwkJC5yZWdpc3RlckJpZEFkYXB0ZXInLCBhcmd1bWVudHMpO1xuICB0cnkge1xuICAgIGFkYXB0ZXJNYW5hZ2VyLnJlZ2lzdGVyQmlkQWRhcHRlcihiaWRkZXJBZGFwdG9yKCksIGJpZGRlckNvZGUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nRXJyb3IoJ0Vycm9yIHJlZ2lzdGVyaW5nIGJpZGRlciBhZGFwdGVyIDogJyArIGUubWVzc2FnZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JhcHBlciB0byByZWdpc3RlciBhbmFseXRpY3NBZGFwdGVyIGV4dGVybmFsbHkgKGFkYXB0ZXJNYW5hZ2VyLnJlZ2lzdGVyQW5hbHl0aWNzQWRhcHRlcigpKVxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIFtkZXNjcmlwdGlvbl1cbiAqIEBhbGlhcyBtb2R1bGU6cGJqcy5yZWdpc3RlckFuYWx5dGljc0FkYXB0ZXJcbiAqL1xucGJqc0luc3RhbmNlLnJlZ2lzdGVyQW5hbHl0aWNzQWRhcHRlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIGxvZ0luZm8oJ0ludm9raW5nICQkUFJFQklEX0dMT0JBTCQkLnJlZ2lzdGVyQW5hbHl0aWNzQWRhcHRlcicsIGFyZ3VtZW50cyk7XG4gIHRyeSB7XG4gICAgYWRhcHRlck1hbmFnZXIucmVnaXN0ZXJBbmFseXRpY3NBZGFwdGVyKG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nRXJyb3IoJ0Vycm9yIHJlZ2lzdGVyaW5nIGFuYWx5dGljcyBhZGFwdGVyIDogJyArIGUubWVzc2FnZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JhcHBlciB0byBiaWRmYWN0b3J5LmNyZWF0ZUJpZCgpXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0YXR1c0NvZGUgW2Rlc2NyaXB0aW9uXVxuICogQGFsaWFzIG1vZHVsZTpwYmpzLmNyZWF0ZUJpZFxuICogQHJldHVybiB7T2JqZWN0fSBiaWRSZXNwb25zZSBbZGVzY3JpcHRpb25dXG4gKi9cbnBianNJbnN0YW5jZS5jcmVhdGVCaWQgPSBmdW5jdGlvbiAoc3RhdHVzQ29kZSkge1xuICBsb2dJbmZvKCdJbnZva2luZyAkJFBSRUJJRF9HTE9CQUwkJC5jcmVhdGVCaWQnLCBhcmd1bWVudHMpO1xuICByZXR1cm4gY3JlYXRlQmlkKHN0YXR1c0NvZGUpO1xufTtcblxuLyoqXG4gKiBFbmFibGUgc2VuZGluZyBhbmFseXRpY3MgZGF0YSB0byB0aGUgYW5hbHl0aWNzIHByb3ZpZGVyIG9mIHlvdXJcbiAqIGNob2ljZS5cbiAqXG4gKiBGb3IgdXNhZ2UsIHNlZSBbSW50ZWdyYXRlIHdpdGggdGhlIFByZWJpZCBBbmFseXRpY3NcbiAqIEFQSV0oaHR0cDovL3ByZWJpZC5vcmcvZGV2LWRvY3MvaW50ZWdyYXRlLXdpdGgtdGhlLXByZWJpZC1hbmFseXRpY3MtYXBpLmh0bWwpLlxuICpcbiAqIEZvciBhIGxpc3Qgb2YgYW5hbHl0aWNzIGFkYXB0ZXJzLCBzZWUgW0FuYWx5dGljcyBmb3JcbiAqIFByZWJpZF0oaHR0cDovL3ByZWJpZC5vcmcvb3ZlcnZpZXcvYW5hbHl0aWNzLmh0bWwpLlxuICogQHBhcmFtICB7T2JqZWN0fSBjb25maWdcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWcucHJvdmlkZXIgVGhlIG5hbWUgb2YgdGhlIHByb3ZpZGVyLCBlLmcuLCBgXCJnYVwiYCBmb3IgR29vZ2xlIEFuYWx5dGljcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcub3B0aW9ucyBUaGUgb3B0aW9ucyBmb3IgdGhpcyBwYXJ0aWN1bGFyIGFuYWx5dGljcyBhZGFwdGVyLiAgVGhpcyB3aWxsIGxpa2VseSB2YXJ5IGJldHdlZW4gYWRhcHRlcnMuXG4gKiBAYWxpYXMgbW9kdWxlOnBianMuZW5hYmxlQW5hbHl0aWNzXG4gKi9cblxuLy8gU3RvcmVzICdlbmFibGVBbmFseXRpY3MnIGNhbGxiYWNrcyBmb3IgbGF0ZXIgZXhlY3V0aW9uLlxuY29uc3QgZW5hYmxlQW5hbHl0aWNzQ2FsbGJhY2tzID0gW107XG5cbmNvbnN0IGVuYWJsZUFuYWx5dGljc0NiID0gaG9vaygnYXN5bmMnLCBmdW5jdGlvbiAoY29uZmlnKSB7XG4gIGlmIChjb25maWcgJiYgIWlzRW1wdHkoY29uZmlnKSkge1xuICAgIGxvZ0luZm8oJ0ludm9raW5nICQkUFJFQklEX0dMT0JBTCQkLmVuYWJsZUFuYWx5dGljcyBmb3I6ICcsIGNvbmZpZyk7XG4gICAgYWRhcHRlck1hbmFnZXIuZW5hYmxlQW5hbHl0aWNzKGNvbmZpZyk7XG4gIH0gZWxzZSB7XG4gICAgbG9nRXJyb3IoJyQkUFJFQklEX0dMT0JBTCQkLmVuYWJsZUFuYWx5dGljcyBzaG91bGQgYmUgY2FsbGVkIHdpdGggb3B0aW9uIHt9Jyk7XG4gIH1cbn0sICdlbmFibGVBbmFseXRpY3NDYicpO1xuXG5wYmpzSW5zdGFuY2UuZW5hYmxlQW5hbHl0aWNzID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICBlbmFibGVBbmFseXRpY3NDYWxsYmFja3MucHVzaChlbmFibGVBbmFseXRpY3NDYi5iaW5kKHRoaXMsIGNvbmZpZykpO1xufTtcblxuLyoqXG4gKiBAYWxpYXMgbW9kdWxlOnBianMuYWxpYXNCaWRkZXJcbiAqL1xucGJqc0luc3RhbmNlLmFsaWFzQmlkZGVyID0gZnVuY3Rpb24gKGJpZGRlckNvZGUsIGFsaWFzLCBvcHRpb25zKSB7XG4gIGxvZ0luZm8oJ0ludm9raW5nICQkUFJFQklEX0dMT0JBTCQkLmFsaWFzQmlkZGVyJywgYXJndW1lbnRzKTtcbiAgaWYgKGJpZGRlckNvZGUgJiYgYWxpYXMpIHtcbiAgICBhZGFwdGVyTWFuYWdlci5hbGlhc0JpZEFkYXB0ZXIoYmlkZGVyQ29kZSwgYWxpYXMsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIGxvZ0Vycm9yKCdiaWRkZXJDb2RlIGFuZCBhbGlhcyBtdXN0IGJlIHBhc3NlZCBhcyBhcmd1bWVudHMnLCAnJCRQUkVCSURfR0xPQkFMJCQuYWxpYXNCaWRkZXInKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAYWxpYXMgbW9kdWxlOnBianMuYWxpYXNSZWdpc3RyeVxuICovXG5wYmpzSW5zdGFuY2UuYWxpYXNSZWdpc3RyeSA9IGFkYXB0ZXJNYW5hZ2VyLmFsaWFzUmVnaXN0cnk7XG5jb25maWcuZ2V0Q29uZmlnKCdhbGlhc1JlZ2lzdHJ5JywgY29uZmlnID0+IHtcbiAgaWYgKGNvbmZpZy5hbGlhc1JlZ2lzdHJ5ID09PSAncHJpdmF0ZScpIGRlbGV0ZSBwYmpzSW5zdGFuY2UuYWxpYXNSZWdpc3RyeTtcbn0pO1xuXG4vKipcbiAqIFRoZSBiaWQgcmVzcG9uc2Ugb2JqZWN0IHJldHVybmVkIGJ5IGFuIGV4dGVybmFsIGJpZGRlciBhZGFwdGVyIGR1cmluZyB0aGUgYXVjdGlvbi5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IEFkYXB0ZXJCaWRSZXNwb25zZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBiQWcgQXV0byBncmFudWxhcml0eSBwcmljZSBidWNrZXQ7IENQTSA8PSA1ID8gaW5jcmVtZW50ID0gMC4wNSA6IENQTSA+IDUgJiYgQ1BNIDw9IDEwID8gaW5jcmVtZW50ID0gMC4xMCA6IENQTSA+IDEwICYmIENQTSA8PSAyMCA/IGluY3JlbWVudCA9IDAuNTAgOiBDUE0gPiAyMCA/IHByaWNlQ2FwID0gMjAuMDAuICBFeGFtcGxlOiBgXCIwLjgwXCJgLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBiQ2cgQ3VzdG9tIHByaWNlIGJ1Y2tldC4gIEZvciBleGFtcGxlIHNldHVwLCBzZWUge0BsaW5rIHNldFByaWNlR3JhbnVsYXJpdHl9LiAgRXhhbXBsZTogYFwiMC44NFwiYC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwYkRnIERlbnNlIGdyYW51bGFyaXR5IHByaWNlIGJ1Y2tldDsgQ1BNIDw9IDMgPyBpbmNyZW1lbnQgPSAwLjAxIDogQ1BNID4gMyAmJiBDUE0gPD0gOCA/IGluY3JlbWVudCA9IDAuMDUgOiBDUE0gPiA4ICYmIENQTSA8PSAyMCA/IGluY3JlbWVudCA9IDAuNTAgOiBDUE0gPiAyMD8gcHJpY2VDYXAgPSAyMC4wMC4gIEV4YW1wbGU6IGBcIjAuODRcImAuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGJMZyBMb3cgZ3JhbnVsYXJpdHkgcHJpY2UgYnVja2V0OyAkMC41MCBpbmNyZW1lbnQsIGNhcHBlZCBhdCAkNSwgZmxvb3JlZCB0byB0d28gZGVjaW1hbCBwbGFjZXMuICBFeGFtcGxlOiBgXCIwLjUwXCJgLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBiTWcgTWVkaXVtIGdyYW51bGFyaXR5IHByaWNlIGJ1Y2tldDsgJDAuMTAgaW5jcmVtZW50LCBjYXBwZWQgYXQgJDIwLCBmbG9vcmVkIHRvIHR3byBkZWNpbWFsIHBsYWNlcy4gIEV4YW1wbGU6IGBcIjAuODBcImAuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGJIZyBIaWdoIGdyYW51bGFyaXR5IHByaWNlIGJ1Y2tldDsgJDAuMDEgaW5jcmVtZW50LCBjYXBwZWQgYXQgJDIwLCBmbG9vcmVkIHRvIHR3byBkZWNpbWFsIHBsYWNlcy4gIEV4YW1wbGU6IGBcIjAuODRcImAuXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpZGRlciBUaGUgc3RyaW5nIG5hbWUgb2YgdGhlIGJpZGRlci4gIFRoaXMgKm1heSogYmUgdGhlIHNhbWUgYXMgdGhlIGBiaWRkZXJDb2RlYC4gIEZvciBGb3IgYSBsaXN0IG9mIGFsbCBiaWRkZXJzIGFuZCB0aGVpciBjb2Rlcywgc2VlIFtCaWRkZXJzJyBQYXJhbXNdKGh0dHA6Ly9wcmViaWQub3JnL2Rldi1kb2NzL2JpZGRlcnMuaHRtbCkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmlkZGVyQ29kZSBUaGUgdW5pcXVlIHN0cmluZyB0aGF0IGlkZW50aWZpZXMgdGhpcyBiaWRkZXIuICBGb3IgYSBsaXN0IG9mIGFsbCBiaWRkZXJzIGFuZCB0aGVpciBjb2Rlcywgc2VlIFtCaWRkZXJzJyBQYXJhbXNdKGh0dHA6Ly9wcmViaWQub3JnL2Rldi1kb2NzL2JpZGRlcnMuaHRtbCkuXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHJlcXVlc3RJZCBUaGUgW1VVSURdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VuaXZlcnNhbGx5X3VuaXF1ZV9pZGVudGlmaWVyKSByZXByZXNlbnRpbmcgdGhlIGJpZCByZXF1ZXN0LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHJlcXVlc3RUaW1lc3RhbXAgVGhlIHRpbWUgYXQgd2hpY2ggdGhlIGJpZCByZXF1ZXN0IHdhcyBzZW50IG91dCwgZXhwcmVzc2VkIGluIG1pbGxpc2Vjb25kcy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSByZXNwb25zZVRpbWVzdGFtcCBUaGUgdGltZSBhdCB3aGljaCB0aGUgYmlkIHJlc3BvbnNlIHdhcyByZWNlaXZlZCwgZXhwcmVzc2VkIGluIG1pbGxpc2Vjb25kcy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0aW1lVG9SZXNwb25kIEhvdyBsb25nIGl0IHRvb2sgZm9yIHRoZSBiaWRkZXIgdG8gcmVzcG9uZCB3aXRoIHRoaXMgYmlkLCBleHByZXNzZWQgaW4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzaXplIFRoZSBzaXplIG9mIHRoZSBhZCBjcmVhdGl2ZSwgZXhwcmVzc2VkIGluIGBcIkF4QlwiYCBmb3JtYXQsIHdoZXJlIEEgYW5kIEIgYXJlIG51bWJlcnMgb2YgcGl4ZWxzLiAgRXhhbXBsZTogYFwiMzIweDUwXCJgLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHdpZHRoIFRoZSB3aWR0aCBvZiB0aGUgYWQgY3JlYXRpdmUgaW4gcGl4ZWxzLiAgRXhhbXBsZTogYFwiMzIwXCJgLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBhZCBjcmVhdGl2ZSBpbiBwaXhlbHMuICBFeGFtcGxlOiBgXCI1MFwiYC5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYWQgVGhlIGFjdHVhbCBhZCBjcmVhdGl2ZSBjb250ZW50LCBvZnRlbiBIVE1MIHdpdGggQ1NTLCBKYXZhU2NyaXB0LCBhbmQvb3IgbGlua3MgdG8gYWRkaXRpb25hbCBjb250ZW50LiAgRXhhbXBsZTogYFwiPGRpdiBpZD0nYmVhY29uXy1ZUWJpcEp0ZHhtTUNnRVBIRXhMaG1xekVtJyBzdHlsZT0ncG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiAwcHg7IHRvcDogMHB4OyB2aXNpYmlsaXR5OiBoaWRkZW47Jz48aW1nIHNyYz0naHR0cDovL2FwbHVzLS4uLicvPjwvZGl2PjxpZnJhbWUgc3JjPVxcXCJodHRwOi8vYWF4LXVzLWVhc3QuYW1hem9uLWFkc3lzdGVtLmNvbS9lL2lzLzhkY2ZjZC4uLlwiIHdpZHRoPVxcXCI3MjhcXFwiIGhlaWdodD1cXFwiOTBcXFwiIGZyYW1lYm9yZGVyPVxcXCIwXFxcIiAuLi4+PC9pZnJhbWU+XCIsYC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBhZF9pZCBUaGUgYWQgSUQgb2YgdGhlIGNyZWF0aXZlLCBhcyB1bmRlcnN0b29kIGJ5IHRoZSBiaWRkZXIncyBzeXN0ZW0uICBVc2VkIGJ5IHRoZSBsaW5lIGl0ZW0ncyBbY3JlYXRpdmUgaW4gdGhlIGFkIHNlcnZlcl0oaHR0cDovL3ByZWJpZC5vcmcvYWRvcHMvc2VuZC1hbGwtYmlkcy1hZG9wcy5odG1sI3N0ZXAtMy1hZGQtYS1jcmVhdGl2ZSkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYWRVbml0Q29kZSBUaGUgY29kZSB1c2VkIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoZSBhZCB1bml0IG9uIHRoZSBwdWJsaXNoZXIncyBwYWdlLlxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdGF0dXNNZXNzYWdlIFRoZSBzdGF0dXMgb2YgdGhlIGJpZC4gIEFsbG93ZWQgdmFsdWVzOiBgXCJCaWQgYXZhaWxhYmxlXCJgIG9yIGBcIkJpZCByZXR1cm5lZCBlbXB0eSBvciBlcnJvciByZXNwb25zZVwiYC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjcG0gVGhlIGV4YWN0IGJpZCBwcmljZSBmcm9tIHRoZSBiaWRkZXIsIGV4cHJlc3NlZCB0byB0aGUgdGhvdXNhbmR0aHMgcGxhY2UuICBFeGFtcGxlOiBgXCIwLjg0OVwiYC5cbiAqXG4gKiBAcHJvcGVydHkge09iamVjdH0gYWRzZXJ2ZXJUYXJnZXRpbmcgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyByZXByZXNlbnQgdGhlIGFkIHNlcnZlcidzIHRhcmdldGluZyBvbiB0aGUgYmlkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGFkc2VydmVyVGFyZ2V0aW5nLmhiX2FkaWQgVGhlIGFkIElEIG9mIHRoZSBjcmVhdGl2ZSwgYXMgdW5kZXJzdG9vZCBieSB0aGUgYWQgc2VydmVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGFkc2VydmVyVGFyZ2V0aW5nLmhiX3BiIFRoZSBwcmljZSBwYWlkIHRvIHNob3cgdGhlIGNyZWF0aXZlLCBhcyBsb2dnZWQgaW4gdGhlIGFkIHNlcnZlci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZHNlcnZlclRhcmdldGluZy5oYl9iaWRkZXIgVGhlIHdpbm5pbmcgYmlkZGVyIHdob3NlIGFkIGNyZWF0aXZlIHdpbGwgYmUgc2VydmVkIGJ5IHRoZSBhZCBzZXJ2ZXIuXG4gKi9cblxuLyoqXG4gKiBHZXQgYWxsIG9mIHRoZSBiaWRzIHRoYXQgaGF2ZSBiZWVuIHJlbmRlcmVkLiAgVXNlZnVsIGZvciBbdHJvdWJsZXNob290aW5nIHlvdXIgaW50ZWdyYXRpb25dKGh0dHA6Ly9wcmViaWQub3JnL2Rldi1kb2NzL3ByZWJpZC10cm91Ymxlc2hvb3RpbmctZ3VpZGUuaHRtbCkuXG4gKiBAcmV0dXJuIHtBcnJheTxBZGFwdGVyQmlkUmVzcG9uc2U+fSBBIGxpc3Qgb2YgYmlkcyB0aGF0IGhhdmUgYmVlbiByZW5kZXJlZC5cbiAqL1xucGJqc0luc3RhbmNlLmdldEFsbFdpbm5pbmdCaWRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gYXVjdGlvbk1hbmFnZXIuZ2V0QWxsV2lubmluZ0JpZHMoKTtcbn07XG5cbi8qKlxuICogR2V0IGFsbCBvZiB0aGUgYmlkcyB0aGF0IGhhdmUgd29uIHRoZWlyIHJlc3BlY3RpdmUgYXVjdGlvbnMuXG4gKiBAcmV0dXJuIHtBcnJheTxBZGFwdGVyQmlkUmVzcG9uc2U+fSBBIGxpc3Qgb2YgYmlkcyB0aGF0IGhhdmUgd29uIHRoZWlyIHJlc3BlY3RpdmUgYXVjdGlvbnMuXG4gKi9cbnBianNJbnN0YW5jZS5nZXRBbGxQcmViaWRXaW5uaW5nQmlkcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGF1Y3Rpb25NYW5hZ2VyLmdldEJpZHNSZWNlaXZlZCgpXG4gICAgLmZpbHRlcihiaWQgPT4gYmlkLnN0YXR1cyA9PT0gQ09OU1RBTlRTLkJJRF9TVEFUVVMuQklEX1RBUkdFVElOR19TRVQpO1xufTtcblxuLyoqXG4gKiBHZXQgYXJyYXkgb2YgaGlnaGVzdCBjcG0gYmlkcyBmb3IgYWxsIGFkVW5pdHMsIG9yIGhpZ2hlc3QgY3BtIGJpZFxuICogb2JqZWN0IGZvciB0aGUgZ2l2ZW4gYWRVbml0XG4gKiBAcGFyYW0ge3N0cmluZ30gYWRVbml0Q29kZSAtIG9wdGlvbmFsIGFkIHVuaXQgY29kZVxuICogQGFsaWFzIG1vZHVsZTpwYmpzLmdldEhpZ2hlc3RDcG1CaWRzXG4gKiBAcmV0dXJuIHtBcnJheX0gYXJyYXkgY29udGFpbmluZyBoaWdoZXN0IGNwbSBiaWQgb2JqZWN0KHMpXG4gKi9cbnBianNJbnN0YW5jZS5nZXRIaWdoZXN0Q3BtQmlkcyA9IGZ1bmN0aW9uIChhZFVuaXRDb2RlKSB7XG4gIHJldHVybiB0YXJnZXRpbmcuZ2V0V2lubmluZ0JpZHMoYWRVbml0Q29kZSk7XG59O1xuXG5pZiAoRkVBVFVSRVMuVklERU8pIHtcbiAgLyoqXG4gICAqIE1hcmsgdGhlIHdpbm5pbmcgYmlkIGFzIHVzZWQsIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB2aWRlb1xuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBNYXJrQmlkUmVxdWVzdFxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gYWRVbml0Q29kZSBUaGUgYWQgdW5pdCBjb2RlXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZElkIFRoZSBpZCByZXByZXNlbnRpbmcgdGhlIGFkIHdlIHdhbnQgdG8gbWFya1xuICAgKlxuICAgKiBAYWxpYXMgbW9kdWxlOnBianMubWFya1dpbm5pbmdCaWRBc1VzZWRcbiAgICovXG4gIHBianNJbnN0YW5jZS5tYXJrV2lubmluZ0JpZEFzVXNlZCA9IGZ1bmN0aW9uIChtYXJrQmlkUmVxdWVzdCkge1xuICAgIGNvbnN0IGJpZHMgPSBmZXRjaFJlY2VpdmVkQmlkcyhtYXJrQmlkUmVxdWVzdCwgJ0ltcHJvcGVyIHVzZSBvZiBtYXJrV2lubmluZ0JpZEFzVXNlZC4gSXQgbmVlZHMgYW4gYWRVbml0Q29kZSBvciBhbiBhZElkIHRvIGZ1bmN0aW9uLicpO1xuXG4gICAgaWYgKGJpZHMubGVuZ3RoID4gMCkge1xuICAgICAgYXVjdGlvbk1hbmFnZXIuYWRkV2lubmluZ0JpZChiaWRzWzBdKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgZmV0Y2hSZWNlaXZlZEJpZHMgPSAoYmlkUmVxdWVzdCwgd2FybmluZ01lc3NhZ2UpID0+IHtcbiAgbGV0IGJpZHMgPSBbXTtcblxuICBpZiAoYmlkUmVxdWVzdC5hZFVuaXRDb2RlICYmIGJpZFJlcXVlc3QuYWRJZCkge1xuICAgIGJpZHMgPSBhdWN0aW9uTWFuYWdlci5nZXRCaWRzUmVjZWl2ZWQoKVxuICAgICAgLmZpbHRlcihiaWQgPT4gYmlkLmFkSWQgPT09IGJpZFJlcXVlc3QuYWRJZCAmJiBiaWQuYWRVbml0Q29kZSA9PT0gYmlkUmVxdWVzdC5hZFVuaXRDb2RlKTtcbiAgfSBlbHNlIGlmIChiaWRSZXF1ZXN0LmFkVW5pdENvZGUpIHtcbiAgICBiaWRzID0gdGFyZ2V0aW5nLmdldFdpbm5pbmdCaWRzKGJpZFJlcXVlc3QuYWRVbml0Q29kZSk7XG4gIH0gZWxzZSBpZiAoYmlkUmVxdWVzdC5hZElkKSB7XG4gICAgYmlkcyA9IGF1Y3Rpb25NYW5hZ2VyLmdldEJpZHNSZWNlaXZlZCgpLmZpbHRlcihiaWQgPT4gYmlkLmFkSWQgPT09IGJpZFJlcXVlc3QuYWRJZCk7XG4gIH0gZWxzZSB7XG4gICAgbG9nV2Fybih3YXJuaW5nTWVzc2FnZSk7XG4gIH1cblxuICByZXR1cm4gYmlkcztcbn07XG5cbi8qKlxuICogR2V0IFByZWJpZCBjb25maWcgb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhbGlhcyBtb2R1bGU6cGJqcy5nZXRDb25maWdcbiAqL1xucGJqc0luc3RhbmNlLmdldENvbmZpZyA9IGNvbmZpZy5nZXRBbnlDb25maWc7XG5wYmpzSW5zdGFuY2UucmVhZENvbmZpZyA9IGNvbmZpZy5yZWFkQW55Q29uZmlnO1xucGJqc0luc3RhbmNlLm1lcmdlQ29uZmlnID0gY29uZmlnLm1lcmdlQ29uZmlnO1xucGJqc0luc3RhbmNlLm1lcmdlQmlkZGVyQ29uZmlnID0gY29uZmlnLm1lcmdlQmlkZGVyQ29uZmlnO1xuXG4vKipcbiAqIFNldCBQcmViaWQgY29uZmlnIG9wdGlvbnMuXG4gKiBTZWUgaHR0cHM6Ly9kb2NzLnByZWJpZC5vcmcvZGV2LWRvY3MvcHVibGlzaGVyLWFwaS1yZWZlcmVuY2Uvc2V0Q29uZmlnLmh0bWxcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBHbG9iYWwgUHJlYmlkIGNvbmZpZ3VyYXRpb24gb2JqZWN0LiBNdXN0IGJlIEpTT04gLSBubyBKYXZhU2NyaXB0IGZ1bmN0aW9ucyBhcmUgYWxsb3dlZC5cbiAqL1xucGJqc0luc3RhbmNlLnNldENvbmZpZyA9IGNvbmZpZy5zZXRDb25maWc7XG5wYmpzSW5zdGFuY2Uuc2V0QmlkZGVyQ29uZmlnID0gY29uZmlnLnNldEJpZGRlckNvbmZpZztcblxucGJqc0luc3RhbmNlLnF1ZS5wdXNoKCgpID0+IGxpc3Rlbk1lc3NhZ2VzRnJvbUNyZWF0aXZlKCkpO1xuXG4vKipcbiAqIFRoaXMgcXVldWUgbGV0cyB1c2VycyBsb2FkIFByZWJpZCBhc3luY2hyb25vdXNseSwgYnV0IHJ1biBmdW5jdGlvbnMgdGhlIHNhbWUgd2F5IHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciBpdCBnZXRzIGxvYWRlZFxuICogYmVmb3JlIG9yIGFmdGVyIHRoZWlyIHNjcmlwdCBleGVjdXRlcy4gRm9yIGV4YW1wbGUsIGdpdmVuIHRoZSBjb2RlOlxuICpcbiAqIDxzY3JpcHQgc3JjPVwidXJsL3RvL1ByZWJpZC5qc1wiIGFzeW5jPjwvc2NyaXB0PlxuICogPHNjcmlwdD5cbiAqICAgdmFyIHBianMgPSBwYmpzIHx8IHt9O1xuICogICBwYmpzLmNtZCA9IHBianMuY21kIHx8IFtdO1xuICogICBwYmpzLmNtZC5wdXNoKGZ1bmN0aW9uVG9FeGVjdXRlT25jZVByZWJpZExvYWRzKTtcbiAqIDwvc2NyaXB0PlxuICpcbiAqIElmIHRoZSBwYWdlJ3Mgc2NyaXB0IHJ1bnMgYmVmb3JlIHByZWJpZCBsb2FkcywgdGhlbiB0aGVpciBmdW5jdGlvbiBnZXRzIGFkZGVkIHRvIHRoZSBxdWV1ZSwgYW5kIGV4ZWN1dGVkXG4gKiBieSBwcmViaWQgb25jZSBpdCdzIGRvbmUgbG9hZGluZy4gSWYgaXQgcnVucyBhZnRlciBwcmViaWQgbG9hZHMsIHRoZW4gdGhpcyBtb25rZXktcGF0Y2ggY2F1c2VzIHRoZWlyXG4gKiBmdW5jdGlvbiB0byBleGVjdXRlIGltbWVkaWF0ZWx5LlxuICpcbiAqIEBtZW1iZXJvZiBwYmpzXG4gKiBAcGFyYW0gIHtmdW5jdGlvbn0gY29tbWFuZCBBIGZ1bmN0aW9uIHdoaWNoIHRha2VzIG5vIGFyZ3VtZW50cy4gVGhpcyBpcyBndWFyYW50ZWVkIHRvIHJ1biBleGFjdGx5IG9uY2UsIGFuZCBvbmx5IGFmdGVyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgUHJlYmlkIHNjcmlwdCBoYXMgYmVlbiBmdWxseSBsb2FkZWQuXG4gKiBAYWxpYXMgbW9kdWxlOnBianMuY21kLnB1c2hcbiAqL1xucGJqc0luc3RhbmNlLmNtZC5wdXNoID0gZnVuY3Rpb24gKGNvbW1hbmQpIHtcbiAgaWYgKHR5cGVvZiBjb21tYW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbW1hbmQuY2FsbCgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ0Vycm9yKCdFcnJvciBwcm9jZXNzaW5nIGNvbW1hbmQgOicsIGUubWVzc2FnZSwgZS5zdGFjayk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxvZ0Vycm9yKCdDb21tYW5kcyB3cml0dGVuIGludG8gJCRQUkVCSURfR0xPQkFMJCQuY21kLnB1c2ggbXVzdCBiZSB3cmFwcGVkIGluIGEgZnVuY3Rpb24nKTtcbiAgfVxufTtcblxucGJqc0luc3RhbmNlLnF1ZS5wdXNoID0gcGJqc0luc3RhbmNlLmNtZC5wdXNoO1xuXG5mdW5jdGlvbiBwcm9jZXNzUXVldWUocXVldWUpIHtcbiAgcXVldWUuZm9yRWFjaChmdW5jdGlvbiAoY21kKSB7XG4gICAgaWYgKHR5cGVvZiBjbWQuY2FsbGVkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY21kLmNhbGwoKTtcbiAgICAgICAgY21kLmNhbGxlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZ0Vycm9yKCdFcnJvciBwcm9jZXNzaW5nIGNvbW1hbmQgOicsICdwcmViaWQuanMnLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBhbGlhcyBtb2R1bGU6cGJqcy5wcm9jZXNzUXVldWVcbiAqL1xucGJqc0luc3RhbmNlLnByb2Nlc3NRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgaG9vay5yZWFkeSgpO1xuICBwcm9jZXNzUXVldWUocGJqc0luc3RhbmNlLnF1ZSk7XG4gIHByb2Nlc3NRdWV1ZShwYmpzSW5zdGFuY2UuY21kKTtcbn07XG5cbi8qKlxuICogQGFsaWFzIG1vZHVsZTpwYmpzLnRyaWdnZXJCaWxsaW5nXG4gKi9cbnBianNJbnN0YW5jZS50cmlnZ2VyQmlsbGluZyA9ICh3aW5uaW5nQmlkKSA9PiB7XG4gIGNvbnN0IGJpZHMgPSBmZXRjaFJlY2VpdmVkQmlkcyh3aW5uaW5nQmlkLCAnSW1wcm9wZXIgdXNlIG9mIHRyaWdnZXJCaWxsaW5nLiBJdCByZXF1aXJlcyBhIGJpZCB3aXRoIGF0IGxlYXN0IGFuIGFkVW5pdENvZGUgb3IgYW4gYWRJZCB0byBmdW5jdGlvbi4nKTtcbiAgY29uc3QgdHJpZ2dlckJpbGxpbmdCaWQgPSBiaWRzLmZpbmQoYmlkID0+IGJpZC5yZXF1ZXN0SWQgPT09IHdpbm5pbmdCaWQucmVxdWVzdElkKSB8fCBiaWRzWzBdO1xuXG4gIGlmIChiaWRzLmxlbmd0aCA+IDAgJiYgdHJpZ2dlckJpbGxpbmdCaWQpIHtcbiAgICB0cnkge1xuICAgICAgYWRhcHRlck1hbmFnZXIuY2FsbEJpZEJpbGxhYmxlQmlkZGVyKHRyaWdnZXJCaWxsaW5nQmlkKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dFcnJvcignRXJyb3Igd2hlbiB0cmlnZ2VyaW5nIGJpbGxpbmcgOicsIGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsb2dXYXJuKCdUaGUgYmlkIHByb3ZpZGVkIHRvIHRyaWdnZXJCaWxsaW5nIGRpZCBub3QgbWF0Y2ggYW55IGJpZHMgcmVjZWl2ZWQuJyk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBianNJbnN0YW5jZTtcbiIsImltcG9ydCB7Y29uZmlnfSBmcm9tICcuLi9zcmMvY29uZmlnLmpzJztcbmltcG9ydCB7cmVnaXN0ZXJBY3Rpdml0eUNvbnRyb2x9IGZyb20gJy4uL3NyYy9hY3Rpdml0aWVzL3J1bGVzLmpzJztcblxuY29uc3QgQ0ZHX05BTUUgPSAnYWxsb3dBY3Rpdml0aWVzJztcbmNvbnN0IFJVTEVfTkFNRSA9IGAke0NGR19OQU1FfSBjb25maWdgO1xuY29uc3QgREVGQVVMVF9QUklPUklUWSA9IDE7XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVSdWxlc0Zyb21Db25maWcocmVnaXN0ZXJSdWxlKSB7XG4gIGNvbnN0IGFjdGl2ZVJ1bGVIYW5kbGVzID0gbmV3IE1hcCgpO1xuICBjb25zdCBkZWZhdWx0UnVsZUhhbmRsZXMgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IHJ1bGVzQnlBY3Rpdml0eSA9IG5ldyBNYXAoKTtcblxuICBmdW5jdGlvbiBjbGVhckFsbFJ1bGVzKCkge1xuICAgIHJ1bGVzQnlBY3Rpdml0eS5jbGVhcigpO1xuICAgIEFycmF5LmZyb20oYWN0aXZlUnVsZUhhbmRsZXMudmFsdWVzKCkpXG4gICAgICAuZmxhdE1hcChydWxlc2V0ID0+IEFycmF5LmZyb20ocnVsZXNldC52YWx1ZXMoKSkpXG4gICAgICAuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgICBhY3RpdmVSdWxlSGFuZGxlcy5jbGVhcigpO1xuICAgIEFycmF5LmZyb20oZGVmYXVsdFJ1bGVIYW5kbGVzLnZhbHVlcygpKS5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICAgIGRlZmF1bHRSdWxlSGFuZGxlcy5jbGVhcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW5QYXJhbXMocGFyYW1zKSB7XG4gICAgLy8gcmVtb3ZlIHByaXZhdGUgcGFyYW1ldGVycyBmb3IgcHVibGlzaGVyIGNvbmRpdGlvbiBjaGVja3NcbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHBhcmFtcykuZmlsdGVyKChba10pID0+ICFrLnN0YXJ0c1dpdGgoJ18nKSkpXG4gIH1cblxuICBmdW5jdGlvbiBzZXR1cFJ1bGUoYWN0aXZpdHksIHByaW9yaXR5KSB7XG4gICAgaWYgKCFhY3RpdmVSdWxlSGFuZGxlcy5oYXMoYWN0aXZpdHkpKSB7XG4gICAgICBhY3RpdmVSdWxlSGFuZGxlcy5zZXQoYWN0aXZpdHksIG5ldyBNYXAoKSlcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlcyA9IGFjdGl2ZVJ1bGVIYW5kbGVzLmdldChhY3Rpdml0eSk7XG4gICAgaWYgKCFoYW5kbGVzLmhhcyhwcmlvcml0eSkpIHtcbiAgICAgIGhhbmRsZXMuc2V0KHByaW9yaXR5LCByZWdpc3RlclJ1bGUoYWN0aXZpdHksIFJVTEVfTkFNRSwgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgcnVsZXNCeUFjdGl2aXR5LmdldChhY3Rpdml0eSkuZ2V0KHByaW9yaXR5KSkge1xuICAgICAgICAgIGlmICghcnVsZS5jb25kaXRpb24gfHwgcnVsZS5jb25kaXRpb24oY2xlYW5QYXJhbXMocGFyYW1zKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7YWxsb3c6IHJ1bGUuYWxsb3csIHJlYXNvbjogcnVsZX1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHByaW9yaXR5KSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0dXBEZWZhdWx0UnVsZShhY3Rpdml0eSkge1xuICAgIGlmICghZGVmYXVsdFJ1bGVIYW5kbGVzLmhhcyhhY3Rpdml0eSkpIHtcbiAgICAgIGRlZmF1bHRSdWxlSGFuZGxlcy5zZXQoYWN0aXZpdHksIHJlZ2lzdGVyUnVsZShhY3Rpdml0eSwgUlVMRV9OQU1FLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7YWxsb3c6IGZhbHNlLCByZWFzb246ICdhY3Rpdml0eSBkZW5pZWQgYnkgZGVmYXVsdCd9XG4gICAgICB9LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpKVxuICAgIH1cbiAgfVxuXG4gIGNvbmZpZy5nZXRDb25maWcoQ0ZHX05BTUUsIChjZmcpID0+IHtcbiAgICBjbGVhckFsbFJ1bGVzKCk7XG4gICAgT2JqZWN0LmVudHJpZXMoY2ZnW0NGR19OQU1FXSkuZm9yRWFjaCgoW2FjdGl2aXR5LCBhY3Rpdml0eUNmZ10pID0+IHtcbiAgICAgIGlmIChhY3Rpdml0eUNmZy5kZWZhdWx0ID09PSBmYWxzZSkge1xuICAgICAgICBzZXR1cERlZmF1bHRSdWxlKGFjdGl2aXR5KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJ1bGVzID0gbmV3IE1hcCgpO1xuICAgICAgcnVsZXNCeUFjdGl2aXR5LnNldChhY3Rpdml0eSwgcnVsZXMpO1xuXG4gICAgICAoYWN0aXZpdHlDZmcucnVsZXMgfHwgW10pLmZvckVhY2gocnVsZSA9PiB7XG4gICAgICAgIGNvbnN0IHByaW9yaXR5ID0gcnVsZS5wcmlvcml0eSA9PSBudWxsID8gREVGQVVMVF9QUklPUklUWSA6IHJ1bGUucHJpb3JpdHk7XG4gICAgICAgIGlmICghcnVsZXMuaGFzKHByaW9yaXR5KSkge1xuICAgICAgICAgIHJ1bGVzLnNldChwcmlvcml0eSwgW10pXG4gICAgICAgIH1cbiAgICAgICAgcnVsZXMuZ2V0KHByaW9yaXR5KS5wdXNoKHJ1bGUpO1xuICAgICAgfSk7XG5cbiAgICAgIEFycmF5LmZyb20ocnVsZXMua2V5cygpKS5mb3JFYWNoKHByaW9yaXR5ID0+IHNldHVwUnVsZShhY3Rpdml0eSwgcHJpb3JpdHkpKTtcbiAgICB9KTtcbiAgfSlcbn1cblxudXBkYXRlUnVsZXNGcm9tQ29uZmlnKHJlZ2lzdGVyQWN0aXZpdHlDb250cm9sKTtcbiIsImV4cG9ydCBjb25zdCBQUk9DRVNTT1JfVFlQRVMgPSBbJ3JlcXVlc3QnLCAnaW1wJywgJ2JpZFJlc3BvbnNlJywgJ3Jlc3BvbnNlJ107XG5leHBvcnQgY29uc3QgUFJPQ0VTU09SX0RJQUxFQ1RTID0gWydkZWZhdWx0JywgJ3BicyddO1xuZXhwb3J0IGNvbnN0IFtSRVFVRVNULCBJTVAsIEJJRF9SRVNQT05TRSwgUkVTUE9OU0VdID0gUFJPQ0VTU09SX1RZUEVTO1xuZXhwb3J0IGNvbnN0IFtERUZBVUxULCBQQlNdID0gUFJPQ0VTU09SX0RJQUxFQ1RTO1xuXG5jb25zdCB0eXBlcyA9IG5ldyBTZXQoUFJPQ0VTU09SX1RZUEVTKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NvclJlZ2lzdHJ5KCkge1xuICBjb25zdCBwcm9jZXNzb3JzID0ge307XG5cbiAgcmV0dXJuIHtcbiAgICByZWdpc3Rlck9ydGJQcm9jZXNzb3Ioe3R5cGUsIG5hbWUsIGZuLCBwcmlvcml0eSA9IDAsIGRpYWxlY3RzID0gW0RFRkFVTFRdfSkge1xuICAgICAgaWYgKCF0eXBlcy5oYXModHlwZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBPUlRCIHByb2Nlc3NvciB0eXBlIG11c3QgYmUgb25lIG9mOiAke1BST0NFU1NPUl9UWVBFUy5qb2luKCcsICcpfWApXG4gICAgICB9XG4gICAgICBkaWFsZWN0cy5mb3JFYWNoKGRpYWxlY3QgPT4ge1xuICAgICAgICBpZiAoIXByb2Nlc3NvcnMuaGFzT3duUHJvcGVydHkoZGlhbGVjdCkpIHtcbiAgICAgICAgICBwcm9jZXNzb3JzW2RpYWxlY3RdID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwcm9jZXNzb3JzW2RpYWxlY3RdLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICAgICAgcHJvY2Vzc29yc1tkaWFsZWN0XVt0eXBlXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NvcnNbZGlhbGVjdF1bdHlwZV1bbmFtZV0gPSB7XG4gICAgICAgICAgcHJpb3JpdHksXG4gICAgICAgICAgZm5cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGdldFByb2Nlc3NvcnMoZGlhbGVjdCkge1xuICAgICAgcmV0dXJuIHByb2Nlc3NvcnNbZGlhbGVjdF0gfHwge307XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCB7cmVnaXN0ZXJPcnRiUHJvY2Vzc29yLCBnZXRQcm9jZXNzb3JzfSA9IHByb2Nlc3NvclJlZ2lzdHJ5KCk7XG4iLCJpbXBvcnQge2xvZ0Vycm9yLCBsb2dJbmZvLCBsb2dNZXNzYWdlLCBsb2dXYXJufSBmcm9tICcuLi9zcmMvdXRpbHMuanMnO1xuaW1wb3J0IHtnZXRHbG9iYWx9IGZyb20gJy4uL3NyYy9wcmViaWRHbG9iYWwuanMnO1xuaW1wb3J0IENPTlNUQU5UUyBmcm9tICcuLi9zcmMvY29uc3RhbnRzLmpzb24nO1xuaW1wb3J0IHthamF4fSBmcm9tICcuLi9zcmMvYWpheC5qcyc7XG5pbXBvcnQge2NvbmZpZ30gZnJvbSAnLi4vc3JjL2NvbmZpZy5qcyc7XG5pbXBvcnQge2dldEhvb2t9IGZyb20gJy4uL3NyYy9ob29rLmpzJztcbmltcG9ydCB7ZGVmZXJ9IGZyb20gJy4uL3NyYy91dGlscy9wcm9taXNlLmpzJztcbmltcG9ydCB7cmVnaXN0ZXJPcnRiUHJvY2Vzc29yLCBSRVFVRVNUfSBmcm9tICcuLi9zcmMvcGJqc09SVEIuanMnO1xuaW1wb3J0IHt0aW1lZEJpZFJlc3BvbnNlSG9va30gZnJvbSAnLi4vc3JjL3V0aWxzL3BlcmZNZXRyaWNzLmpzJztcblxuY29uc3QgREVGQVVMVF9DVVJSRU5DWV9SQVRFX1VSTCA9ICdodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gvcHJlYmlkL2N1cnJlbmN5LWZpbGVAMS9sYXRlc3QuanNvbj9kYXRlPSQkVE9EQVkkJCc7XG5jb25zdCBDVVJSRU5DWV9SQVRFX1BSRUNJU0lPTiA9IDQ7XG5cbnZhciBiaWRSZXNwb25zZVF1ZXVlID0gW107XG52YXIgY29udmVyc2lvbkNhY2hlID0ge307XG52YXIgY3VycmVuY3lSYXRlc0xvYWRlZCA9IGZhbHNlO1xudmFyIG5lZWRUb0NhbGxGb3JDdXJyZW5jeUZpbGUgPSB0cnVlO1xudmFyIGFkU2VydmVyQ3VycmVuY3kgPSAnVVNEJztcblxuZXhwb3J0IHZhciBjdXJyZW5jeVN1cHBvcnRFbmFibGVkID0gZmFsc2U7XG5leHBvcnQgdmFyIGN1cnJlbmN5UmF0ZXMgPSB7fTtcbnZhciBiaWRkZXJDdXJyZW5jeURlZmF1bHQgPSB7fTtcbnZhciBkZWZhdWx0UmF0ZXM7XG5cbmV4cG9ydCBjb25zdCByZWFkeSA9ICgoKSA9PiB7XG4gIGxldCBjdGw7XG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGN0bCA9IGRlZmVyKCk7XG4gIH1cbiAgcmVzZXQoKTtcbiAgcmV0dXJuIHtkb25lOiAoKSA9PiBjdGwucmVzb2x2ZSgpLCByZXNldCwgcHJvbWlzZTogKCkgPT4gY3RsLnByb21pc2V9XG59KSgpO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gZnVuY3Rpb24gZm9yIGN1cnJlbmN5XG4gKiBAcGFyYW0gIHtzdHJpbmd9IFtjb25maWcuYWRTZXJ2ZXJDdXJyZW5jeSA9ICdVU0QnXVxuICogIElTTyA0MjE3IDMtbGV0dGVyIGN1cnJlbmN5IGNvZGUgdGhhdCByZXByZXNlbnRzIHRoZSB0YXJnZXQgY3VycmVuY3kuIChlLmcuICdFVVInKS4gIElmIHRoaXMgdmFsdWUgaXMgcHJlc2VudCxcbiAqICB0aGUgY3VycmVuY3kgY29udmVyc2lvbiBmZWF0dXJlIGlzIGFjdGl2YXRlZC5cbiAqIEBwYXJhbSAge251bWJlcn0gW2NvbmZpZy5ncmFudWxhcml0eU11bHRpcGxpZXIgPSAxXVxuICogIEEgZGVjaW1hbCB2YWx1ZSByZXByZXNlbnRpbmcgaG93IG1jdWggdG8gc2NhbGUgdGhlIHByaWNlIGdyYW51bGFyaXR5IGNhbGN1bGF0aW9ucy5cbiAqIEBwYXJhbSAge29iamVjdH0gY29uZmlnLmJpZGRlckN1cnJlbmN5RGVmYXVsdFxuICogIEFuIG9wdGlvbmFsIGFyZ3VtZW50IHRvIHNwZWNpZnkgYmlkIGN1cnJlbmNpZXMgZm9yIGJpZCBhZGFwdGVycy4gIFRoaXMgb3B0aW9uIGlzIHByb3ZpZGVkIGZvciB0aGUgdHJhbnNpdGlvbmFsIHBoYXNlXG4gKiAgYmVmb3JlIGV2ZXJ5IGJpZCBhZGFwdGVyIHdpbGwgc3BlY2lmeSBpdHMgb3duIGJpZCBjdXJyZW5jeS4gIElmIHRoZSBhZGFwdGVyIHNwZWNpZmllcyBhIGJpZCBjdXJyZW5jeSwgdGhpcyB2YWx1ZSBpc1xuICogIGlnbm9yZWQgZm9yIHRoYXQgYmlkZGVyLlxuICpcbiAqICBleGFtcGxlOlxuICogIHtcbiAqICAgIHJ1Ymljb246ICdVU0QnXG4gKiAgfVxuICogQHBhcmFtICB7c3RyaW5nfSBbY29uZmlnLmNvbnZlcnNpb25SYXRlRmlsZSA9ICdVUkwgcG9pbnRpbmcgdG8gY29udmVyc2lvbiBmaWxlJ11cbiAqICBPcHRpb25hbCBwYXRoIHRvIGEgZmlsZSBjb250YWluaW5nIGN1cnJlbmN5IGNvbnZlcnNpb24gZGF0YS4gIFByZWJpZC5vcmcgaG9zdHMgYSBmaWxlIHRoYXQgaXMgdXNlZCBhcyB0aGUgZGVmYXVsdCxcbiAqICBpZiBub3Qgc3BlY2lmaWVkLlxuICogQHBhcmFtICB7b2JqZWN0fSBbY29uZmlnLnJhdGVzXVxuICogIFRoaXMgb3B0aW9uYWwgYXJndW1lbnQgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IHRoZSByYXRlcyB3aXRoIGEgSlNPTiBvYmplY3QsIHN1YnZlcnRpbmcgdGhlIG5lZWQgZm9yIGEgZXh0ZXJuYWxcbiAqICBjb25maWcuY29udmVyc2lvblJhdGVGaWxlIHBhcmFtZXRlci4gIElmIHRoaXMgYXJndW1lbnQgaXMgc3BlY2lmaWVkLCB0aGUgY29udmVyc2lvbiByYXRlIGZpbGUgd2lsbCBub3QgYmUgbG9hZGVkLlxuICpcbiAqICBleGFtcGxlOlxuICogIHtcbiAqICAgICdHQlAnOiB7ICdDTlknOiA4LjgyODIsICdKUFknOiAxNDEuNywgJ1VTRCc6IDEuMjgyNCB9LFxuICogICAgJ1VTRCc6IHsgJ0NOWSc6IDYuODg0MiwgJ0dCUCc6IDAuNzc5OCwgJ0pQWSc6IDExMC40OSB9XG4gKiAgfVxuICogIEBwYXJhbSB7b2JqZWN0fSBbY29uZmlnLmRlZmF1bHRSYXRlc11cbiAqICBUaGlzIG9wdGlvbmFsIGN1cnJlbmN5IHJhdGVzIGRlZmluaXRpb24gZm9sbG93cyB0aGUgc2FtZSBmb3JtYXQgYXMgY29uZmlnLnJhdGVzLCBob3dldmVyIGl0IGlzIG9ubHkgdXRpbGl6ZWQgaWZcbiAqICB0aGVyZSBpcyBhbiBlcnJvciBsb2FkaW5nIHRoZSBjb25maWcuY29udmVyc2lvblJhdGVGaWxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29uZmlnKGNvbmZpZykge1xuICBsZXQgdXJsID0gREVGQVVMVF9DVVJSRU5DWV9SQVRFX1VSTDtcblxuICBpZiAodHlwZW9mIGNvbmZpZy5yYXRlcyA9PT0gJ29iamVjdCcpIHtcbiAgICBjdXJyZW5jeVJhdGVzLmNvbnZlcnNpb25zID0gY29uZmlnLnJhdGVzO1xuICAgIGN1cnJlbmN5UmF0ZXNMb2FkZWQgPSB0cnVlO1xuICAgIG5lZWRUb0NhbGxGb3JDdXJyZW5jeUZpbGUgPSBmYWxzZTsgLy8gZG9uJ3QgY2FsbCBpZiByYXRlcyBhcmUgYWxyZWFkeSBzcGVjaWZpZWRcbiAgfVxuXG4gIGlmICh0eXBlb2YgY29uZmlnLmRlZmF1bHRSYXRlcyA9PT0gJ29iamVjdCcpIHtcbiAgICBkZWZhdWx0UmF0ZXMgPSBjb25maWcuZGVmYXVsdFJhdGVzO1xuXG4gICAgLy8gc2V0IHVwIHRoZSBkZWZhdWx0IHJhdGVzIHRvIGJlIHVzZWQgaWYgdGhlIHJhdGUgZmlsZSBkb2Vzbid0IGdldCBsb2FkZWQgaW4gdGltZVxuICAgIGN1cnJlbmN5UmF0ZXMuY29udmVyc2lvbnMgPSBkZWZhdWx0UmF0ZXM7XG4gICAgY3VycmVuY3lSYXRlc0xvYWRlZCA9IHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIGNvbmZpZy5hZFNlcnZlckN1cnJlbmN5ID09PSAnc3RyaW5nJykge1xuICAgIGxvZ0luZm8oJ2VuYWJsaW5nIGN1cnJlbmN5IHN1cHBvcnQnLCBhcmd1bWVudHMpO1xuXG4gICAgYWRTZXJ2ZXJDdXJyZW5jeSA9IGNvbmZpZy5hZFNlcnZlckN1cnJlbmN5O1xuICAgIGlmIChjb25maWcuY29udmVyc2lvblJhdGVGaWxlKSB7XG4gICAgICBsb2dJbmZvKCdjdXJyZW5jeSB1c2luZyBvdmVycmlkZSBjb252ZXJzaW9uUmF0ZUZpbGU6JywgY29uZmlnLmNvbnZlcnNpb25SYXRlRmlsZSk7XG4gICAgICB1cmwgPSBjb25maWcuY29udmVyc2lvblJhdGVGaWxlO1xuICAgIH1cblxuICAgIC8vIHNlZSBpZiB0aGUgdXJsIGNvbnRhaW5zIGEgZGF0ZSBtYWNyb1xuICAgIC8vIHRoaXMgaXMgYSB3b3JrYXJvdW5kIHRvIHRoZSBmYWN0IHRoYXQganNkZWxpdnIgZG9lc24ndCBjdXJyZW50bHkgc3VwcG9ydCBzZXR0aW5nIGEgMjQtaG91ciBIVFRQIGNhY2hlIGhlYWRlclxuICAgIC8vIFNvIHRoaXMgaXMgYW4gYXBwcm9hY2ggdG8gbGV0IHRoZSBicm93c2VyIGNhY2hlIGEgY29weSBvZiB0aGUgZmlsZSBlYWNoIGRheVxuICAgIC8vIFdlIHNob3VsZCByZW1vdmUgdGhlIG1hY3JvIG9uY2UgdGhlIENETiBzdXBwb3J0IGEgZGF5LWxldmVsIEhUVFAgY2FjaGUgc2V0dGluZ1xuICAgIGNvbnN0IG1hY3JvTG9jYXRpb24gPSB1cmwuaW5kZXhPZignJCRUT0RBWSQkJyk7XG4gICAgaWYgKG1hY3JvTG9jYXRpb24gIT09IC0xKSB7XG4gICAgICAvLyBnZXQgdGhlIGRhdGUgdG8gcmVzb2x2ZSB0aGUgbWFjcm9cbiAgICAgIGNvbnN0IGQgPSBuZXcgRGF0ZSgpO1xuICAgICAgbGV0IG1vbnRoID0gYCR7ZC5nZXRNb250aCgpICsgMX1gO1xuICAgICAgbGV0IGRheSA9IGAke2QuZ2V0RGF0ZSgpfWA7XG4gICAgICBpZiAobW9udGgubGVuZ3RoIDwgMikgbW9udGggPSBgMCR7bW9udGh9YDtcbiAgICAgIGlmIChkYXkubGVuZ3RoIDwgMikgZGF5ID0gYDAke2RheX1gO1xuICAgICAgY29uc3QgdG9kYXlzRGF0ZSA9IGAke2QuZ2V0RnVsbFllYXIoKX0ke21vbnRofSR7ZGF5fWA7XG5cbiAgICAgIC8vIHJlcGxhY2UgJCRUT0RBWSQkIHdpdGggdG9kYXlzRGF0ZVxuICAgICAgdXJsID0gYCR7dXJsLnN1YnN0cmluZygwLCBtYWNyb0xvY2F0aW9uKX0ke3RvZGF5c0RhdGV9JHt1cmwuc3Vic3RyaW5nKG1hY3JvTG9jYXRpb24gKyA5LCB1cmwubGVuZ3RoKX1gO1xuICAgIH1cblxuICAgIGluaXRDdXJyZW5jeSh1cmwpO1xuICB9IGVsc2Uge1xuICAgIC8vIGN1cnJlbmN5IHN1cHBvcnQgaXMgZGlzYWJsZWQsIHNldHRpbmcgZGVmYXVsdHNcbiAgICBsb2dJbmZvKCdkaXNhYmxpbmcgY3VycmVuY3kgc3VwcG9ydCcpO1xuICAgIHJlc2V0Q3VycmVuY3koKTtcbiAgfVxuICBpZiAodHlwZW9mIGNvbmZpZy5iaWRkZXJDdXJyZW5jeURlZmF1bHQgPT09ICdvYmplY3QnKSB7XG4gICAgYmlkZGVyQ3VycmVuY3lEZWZhdWx0ID0gY29uZmlnLmJpZGRlckN1cnJlbmN5RGVmYXVsdDtcbiAgfVxufVxuY29uZmlnLmdldENvbmZpZygnY3VycmVuY3knLCBjb25maWcgPT4gc2V0Q29uZmlnKGNvbmZpZy5jdXJyZW5jeSkpO1xuXG5mdW5jdGlvbiBlcnJvclNldHRpbmdzUmF0ZXMobXNnKSB7XG4gIGlmIChkZWZhdWx0UmF0ZXMpIHtcbiAgICBsb2dXYXJuKG1zZyk7XG4gICAgbG9nV2FybignQ3VycmVuY3kgZmFpbGVkIGxvYWRpbmcgcmF0ZXMsIGZhbGxpbmcgYmFjayB0byBjdXJyZW5jeS5kZWZhdWx0UmF0ZXMnKTtcbiAgfSBlbHNlIHtcbiAgICBsb2dFcnJvcihtc2cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDdXJyZW5jeSh1cmwpIHtcbiAgY29udmVyc2lvbkNhY2hlID0ge307XG4gIGN1cnJlbmN5U3VwcG9ydEVuYWJsZWQgPSB0cnVlO1xuXG4gIGxvZ0luZm8oJ0luc3RhbGxpbmcgYWRkQmlkUmVzcG9uc2UgZGVjb3JhdG9yIGZvciBjdXJyZW5jeSBtb2R1bGUnLCBhcmd1bWVudHMpO1xuXG4gIC8vIEFkZGluZyBjb252ZXJzaW9uIGZ1bmN0aW9uIHRvIHByZWJpZCBnbG9iYWwgZm9yIGV4dGVybmFsIG1vZHVsZSBhbmQgb24gcGFnZSB1c2VcbiAgZ2V0R2xvYmFsKCkuY29udmVydEN1cnJlbmN5ID0gKGNwbSwgZnJvbUN1cnJlbmN5LCB0b0N1cnJlbmN5KSA9PiBwYXJzZUZsb2F0KGNwbSkgKiBnZXRDdXJyZW5jeUNvbnZlcnNpb24oZnJvbUN1cnJlbmN5LCB0b0N1cnJlbmN5KTtcbiAgZ2V0SG9vaygnYWRkQmlkUmVzcG9uc2UnKS5iZWZvcmUoYWRkQmlkUmVzcG9uc2VIb29rLCAxMDApO1xuXG4gIC8vIGNhbGwgZm9yIHRoZSBmaWxlIGlmIHdlIGhhdmVuJ3QgYWxyZWFkeVxuICBpZiAobmVlZFRvQ2FsbEZvckN1cnJlbmN5RmlsZSkge1xuICAgIG5lZWRUb0NhbGxGb3JDdXJyZW5jeUZpbGUgPSBmYWxzZTtcbiAgICBhamF4KHVybCxcbiAgICAgIHtcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGN1cnJlbmN5UmF0ZXMgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIGxvZ0luZm8oJ2N1cnJlbmN5UmF0ZXMgc2V0IHRvICcgKyBKU09OLnN0cmluZ2lmeShjdXJyZW5jeVJhdGVzKSk7XG4gICAgICAgICAgICBjb252ZXJzaW9uQ2FjaGUgPSB7fTtcbiAgICAgICAgICAgIGN1cnJlbmN5UmF0ZXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgcHJvY2Vzc0JpZFJlc3BvbnNlUXVldWUoKTtcbiAgICAgICAgICAgIHJlYWR5LmRvbmUoKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvclNldHRpbmdzUmF0ZXMoJ0ZhaWxlZCB0byBwYXJzZSBjdXJyZW5jeVJhdGVzIHJlc3BvbnNlOiAnICsgcmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgZXJyb3JTZXR0aW5nc1JhdGVzKC4uLmFyZ3MpO1xuICAgICAgICAgIHJlYWR5LmRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmVhZHkuZG9uZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0Q3VycmVuY3koKSB7XG4gIGxvZ0luZm8oJ1VuaW5zdGFsbGluZyBhZGRCaWRSZXNwb25zZSBkZWNvcmF0b3IgZm9yIGN1cnJlbmN5IG1vZHVsZScsIGFyZ3VtZW50cyk7XG5cbiAgZ2V0SG9vaygnYWRkQmlkUmVzcG9uc2UnKS5nZXRIb29rcyh7aG9vazogYWRkQmlkUmVzcG9uc2VIb29rfSkucmVtb3ZlKCk7XG4gIGRlbGV0ZSBnZXRHbG9iYWwoKS5jb252ZXJ0Q3VycmVuY3k7XG5cbiAgYWRTZXJ2ZXJDdXJyZW5jeSA9ICdVU0QnO1xuICBjb252ZXJzaW9uQ2FjaGUgPSB7fTtcbiAgY3VycmVuY3lTdXBwb3J0RW5hYmxlZCA9IGZhbHNlO1xuICBjdXJyZW5jeVJhdGVzTG9hZGVkID0gZmFsc2U7XG4gIG5lZWRUb0NhbGxGb3JDdXJyZW5jeUZpbGUgPSB0cnVlO1xuICBjdXJyZW5jeVJhdGVzID0ge307XG4gIGJpZGRlckN1cnJlbmN5RGVmYXVsdCA9IHt9O1xufVxuXG5leHBvcnQgY29uc3QgYWRkQmlkUmVzcG9uc2VIb29rID0gdGltZWRCaWRSZXNwb25zZUhvb2soJ2N1cnJlbmN5JywgZnVuY3Rpb24gYWRkQmlkUmVzcG9uc2VIb29rKGZuLCBhZFVuaXRDb2RlLCBiaWQsIHJlamVjdCkge1xuICBpZiAoIWJpZCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGFkVW5pdENvZGUsIGJpZCwgcmVqZWN0KTsgLy8gaWYgbm8gYmlkLCBjYWxsIG9yaWdpbmFsIGFuZCBsZXQgaXQgZGlzcGxheSB3YXJuaW5nc1xuICB9XG5cbiAgbGV0IGJpZGRlciA9IGJpZC5iaWRkZXJDb2RlIHx8IGJpZC5iaWRkZXI7XG4gIGlmIChiaWRkZXJDdXJyZW5jeURlZmF1bHRbYmlkZGVyXSkge1xuICAgIGxldCBjdXJyZW5jeURlZmF1bHQgPSBiaWRkZXJDdXJyZW5jeURlZmF1bHRbYmlkZGVyXTtcbiAgICBpZiAoYmlkLmN1cnJlbmN5ICYmIGN1cnJlbmN5RGVmYXVsdCAhPT0gYmlkLmN1cnJlbmN5KSB7XG4gICAgICBsb2dXYXJuKGBDdXJyZW5jeSBkZWZhdWx0ICcke2JpZGRlcn06ICR7Y3VycmVuY3lEZWZhdWx0fScgaWdub3JlZC4gYWRhcHRlciBzcGVjaWZpZWQgJyR7YmlkLmN1cnJlbmN5fSdgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmlkLmN1cnJlbmN5ID0gY3VycmVuY3lEZWZhdWx0O1xuICAgIH1cbiAgfVxuXG4gIC8vIGRlZmF1bHQgdG8gVVNEIGlmIGN1cnJlbmN5IG5vdCBzZXRcbiAgaWYgKCFiaWQuY3VycmVuY3kpIHtcbiAgICBsb2dXYXJuKCdDdXJyZW5jeSBub3Qgc3BlY2lmaWVkIG9uIGJpZC4gIERlZmF1bHRlZCB0byBcIlVTRFwiJyk7XG4gICAgYmlkLmN1cnJlbmN5ID0gJ1VTRCc7XG4gIH1cblxuICAvLyB1c2VkIGZvciBhbmFseXRpY3NcbiAgYmlkLmdldENwbUluTmV3Q3VycmVuY3kgPSBmdW5jdGlvbih0b0N1cnJlbmN5KSB7XG4gICAgcmV0dXJuIChwYXJzZUZsb2F0KHRoaXMuY3BtKSAqIGdldEN1cnJlbmN5Q29udmVyc2lvbih0aGlzLmN1cnJlbmN5LCB0b0N1cnJlbmN5KSkudG9GaXhlZCgzKTtcbiAgfTtcblxuICAvLyBleGVjdXRlIGltbWVkaWF0ZWx5IGlmIHRoZSBiaWQgaXMgYWxyZWFkeSBpbiB0aGUgZGVzaXJlZCBjdXJyZW5jeVxuICBpZiAoYmlkLmN1cnJlbmN5ID09PSBhZFNlcnZlckN1cnJlbmN5KSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgYWRVbml0Q29kZSwgYmlkLCByZWplY3QpO1xuICB9XG5cbiAgYmlkUmVzcG9uc2VRdWV1ZS5wdXNoKHdyYXBGdW5jdGlvbihmbiwgdGhpcywgW2FkVW5pdENvZGUsIGJpZCwgcmVqZWN0XSkpO1xuICBpZiAoIWN1cnJlbmN5U3VwcG9ydEVuYWJsZWQgfHwgY3VycmVuY3lSYXRlc0xvYWRlZCkge1xuICAgIHByb2Nlc3NCaWRSZXNwb25zZVF1ZXVlKCk7XG4gIH0gZWxzZSB7XG4gICAgZm4udW50aW1lZC5iYWlsKHJlYWR5LnByb21pc2UoKSk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBwcm9jZXNzQmlkUmVzcG9uc2VRdWV1ZSgpIHtcbiAgd2hpbGUgKGJpZFJlc3BvbnNlUXVldWUubGVuZ3RoID4gMCkge1xuICAgIChiaWRSZXNwb25zZVF1ZXVlLnNoaWZ0KCkpKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKGZuLCBjb250ZXh0LCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGxldCBiaWQgPSBwYXJhbXNbMV07XG4gICAgaWYgKGJpZCAhPT0gdW5kZWZpbmVkICYmICdjdXJyZW5jeScgaW4gYmlkICYmICdjcG0nIGluIGJpZCkge1xuICAgICAgbGV0IGZyb21DdXJyZW5jeSA9IGJpZC5jdXJyZW5jeTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBjb252ZXJzaW9uID0gZ2V0Q3VycmVuY3lDb252ZXJzaW9uKGZyb21DdXJyZW5jeSk7XG4gICAgICAgIGlmIChjb252ZXJzaW9uICE9PSAxKSB7XG4gICAgICAgICAgYmlkLmNwbSA9IChwYXJzZUZsb2F0KGJpZC5jcG0pICogY29udmVyc2lvbikudG9GaXhlZCg0KTtcbiAgICAgICAgICBiaWQuY3VycmVuY3kgPSBhZFNlcnZlckN1cnJlbmN5O1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZ1dhcm4oJ2dldEN1cnJlbmN5Q29udmVyc2lvbiB0aHJldyBlcnJvcjogJywgZSk7XG4gICAgICAgIHBhcmFtc1syXShDT05TVEFOVFMuUkVKRUNUSU9OX1JFQVNPTi5DQU5OT1RfQ09OVkVSVF9DVVJSRU5DWSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEN1cnJlbmN5Q29udmVyc2lvbihmcm9tQ3VycmVuY3ksIHRvQ3VycmVuY3kgPSBhZFNlcnZlckN1cnJlbmN5KSB7XG4gIHZhciBjb252ZXJzaW9uUmF0ZSA9IG51bGw7XG4gIHZhciByYXRlcztcbiAgbGV0IGNhY2hlS2V5ID0gYCR7ZnJvbUN1cnJlbmN5fS0+JHt0b0N1cnJlbmN5fWA7XG4gIGlmIChjYWNoZUtleSBpbiBjb252ZXJzaW9uQ2FjaGUpIHtcbiAgICBjb252ZXJzaW9uUmF0ZSA9IGNvbnZlcnNpb25DYWNoZVtjYWNoZUtleV07XG4gICAgbG9nTWVzc2FnZSgnVXNpbmcgY29udmVyc2lvbkNhY2hlIHZhbHVlICcgKyBjb252ZXJzaW9uUmF0ZSArICcgZm9yICcgKyBjYWNoZUtleSk7XG4gIH0gZWxzZSBpZiAoY3VycmVuY3lTdXBwb3J0RW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICBpZiAoZnJvbUN1cnJlbmN5ID09PSAnVVNEJykge1xuICAgICAgY29udmVyc2lvblJhdGUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ByZWJpZCBjdXJyZW5jeSBzdXBwb3J0IGhhcyBub3QgYmVlbiBlbmFibGVkIGFuZCBmcm9tQ3VycmVuY3kgaXMgbm90IFVTRCcpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChmcm9tQ3VycmVuY3kgPT09IHRvQ3VycmVuY3kpIHtcbiAgICBjb252ZXJzaW9uUmF0ZSA9IDE7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGZyb21DdXJyZW5jeSBpbiBjdXJyZW5jeVJhdGVzLmNvbnZlcnNpb25zKSB7XG4gICAgICAvLyB1c2luZyBkaXJlY3QgY29udmVyc2lvbiByYXRlIGZyb20gZnJvbUN1cnJlbmN5IHRvIHRvQ3VycmVuY3lcbiAgICAgIHJhdGVzID0gY3VycmVuY3lSYXRlcy5jb252ZXJzaW9uc1tmcm9tQ3VycmVuY3ldO1xuICAgICAgaWYgKCEodG9DdXJyZW5jeSBpbiByYXRlcykpIHtcbiAgICAgICAgLy8gYmlkIHNob3VsZCBmYWlsLCBjdXJyZW5jeSBpcyBub3Qgc3VwcG9ydGVkXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3BlY2lmaWVkIGFkU2VydmVyQ3VycmVuY3kgaW4gY29uZmlnIFxcJycgKyB0b0N1cnJlbmN5ICsgJ1xcJyBub3QgZm91bmQgaW4gdGhlIGN1cnJlbmN5IHJhdGVzIGZpbGUnKTtcbiAgICAgIH1cbiAgICAgIGNvbnZlcnNpb25SYXRlID0gcmF0ZXNbdG9DdXJyZW5jeV07XG4gICAgICBsb2dJbmZvKCdnZXRDdXJyZW5jeUNvbnZlcnNpb24gdXNpbmcgZGlyZWN0ICcgKyBmcm9tQ3VycmVuY3kgKyAnIHRvICcgKyB0b0N1cnJlbmN5ICsgJyBjb252ZXJzaW9uUmF0ZSAnICsgY29udmVyc2lvblJhdGUpO1xuICAgIH0gZWxzZSBpZiAodG9DdXJyZW5jeSBpbiBjdXJyZW5jeVJhdGVzLmNvbnZlcnNpb25zKSB7XG4gICAgICAvLyB1c2luZyByZWNpcHJvY2FsIG9mIGNvbnZlcnNpb24gcmF0ZSBmcm9tIHRvQ3VycmVuY3kgdG8gZnJvbUN1cnJlbmN5XG4gICAgICByYXRlcyA9IGN1cnJlbmN5UmF0ZXMuY29udmVyc2lvbnNbdG9DdXJyZW5jeV07XG4gICAgICBpZiAoIShmcm9tQ3VycmVuY3kgaW4gcmF0ZXMpKSB7XG4gICAgICAgIC8vIGJpZCBzaG91bGQgZmFpbCwgY3VycmVuY3kgaXMgbm90IHN1cHBvcnRlZFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NwZWNpZmllZCBmcm9tQ3VycmVuY3kgXFwnJyArIGZyb21DdXJyZW5jeSArICdcXCcgbm90IGZvdW5kIGluIHRoZSBjdXJyZW5jeSByYXRlcyBmaWxlJyk7XG4gICAgICB9XG4gICAgICBjb252ZXJzaW9uUmF0ZSA9IHJvdW5kRmxvYXQoMSAvIHJhdGVzW2Zyb21DdXJyZW5jeV0sIENVUlJFTkNZX1JBVEVfUFJFQ0lTSU9OKTtcbiAgICAgIGxvZ0luZm8oJ2dldEN1cnJlbmN5Q29udmVyc2lvbiB1c2luZyByZWNpcHJvY2FsICcgKyBmcm9tQ3VycmVuY3kgKyAnIHRvICcgKyB0b0N1cnJlbmN5ICsgJyBjb252ZXJzaW9uUmF0ZSAnICsgY29udmVyc2lvblJhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmaXJzdCBkZWZpbmVkIGN1cnJlbmN5IGJhc2UgdXNlZCBhcyBpbnRlcm1lZGlhcnlcbiAgICAgIHZhciBhbnlCYXNlQ3VycmVuY3kgPSBPYmplY3Qua2V5cyhjdXJyZW5jeVJhdGVzLmNvbnZlcnNpb25zKVswXTtcblxuICAgICAgaWYgKCEoZnJvbUN1cnJlbmN5IGluIGN1cnJlbmN5UmF0ZXMuY29udmVyc2lvbnNbYW55QmFzZUN1cnJlbmN5XSkpIHtcbiAgICAgICAgLy8gYmlkIHNob3VsZCBmYWlsLCBjdXJyZW5jeSBpcyBub3Qgc3VwcG9ydGVkXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3BlY2lmaWVkIGZyb21DdXJyZW5jeSBcXCcnICsgZnJvbUN1cnJlbmN5ICsgJ1xcJyBub3QgZm91bmQgaW4gdGhlIGN1cnJlbmN5IHJhdGVzIGZpbGUnKTtcbiAgICAgIH1cbiAgICAgIHZhciB0b0ludGVybWVkaWF0ZUNvbnZlcnNpb25SYXRlID0gMSAvIGN1cnJlbmN5UmF0ZXMuY29udmVyc2lvbnNbYW55QmFzZUN1cnJlbmN5XVtmcm9tQ3VycmVuY3ldO1xuXG4gICAgICBpZiAoISh0b0N1cnJlbmN5IGluIGN1cnJlbmN5UmF0ZXMuY29udmVyc2lvbnNbYW55QmFzZUN1cnJlbmN5XSkpIHtcbiAgICAgICAgLy8gYmlkIHNob3VsZCBmYWlsLCBjdXJyZW5jeSBpcyBub3Qgc3VwcG9ydGVkXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3BlY2lmaWVkIGFkU2VydmVyQ3VycmVuY3kgaW4gY29uZmlnIFxcJycgKyB0b0N1cnJlbmN5ICsgJ1xcJyBub3QgZm91bmQgaW4gdGhlIGN1cnJlbmN5IHJhdGVzIGZpbGUnKTtcbiAgICAgIH1cbiAgICAgIHZhciBmcm9tSW50ZXJtZWRpYXRlQ29udmVyc2lvblJhdGUgPSBjdXJyZW5jeVJhdGVzLmNvbnZlcnNpb25zW2FueUJhc2VDdXJyZW5jeV1bdG9DdXJyZW5jeV07XG5cbiAgICAgIGNvbnZlcnNpb25SYXRlID0gcm91bmRGbG9hdCh0b0ludGVybWVkaWF0ZUNvbnZlcnNpb25SYXRlICogZnJvbUludGVybWVkaWF0ZUNvbnZlcnNpb25SYXRlLCBDVVJSRU5DWV9SQVRFX1BSRUNJU0lPTik7XG4gICAgICBsb2dJbmZvKCdnZXRDdXJyZW5jeUNvbnZlcnNpb24gdXNpbmcgaW50ZXJtZWRpYXRlICcgKyBmcm9tQ3VycmVuY3kgKyAnIHRocnUgJyArIGFueUJhc2VDdXJyZW5jeSArICcgdG8gJyArIHRvQ3VycmVuY3kgKyAnIGNvbnZlcnNpb25SYXRlICcgKyBjb252ZXJzaW9uUmF0ZSk7XG4gICAgfVxuICB9XG4gIGlmICghKGNhY2hlS2V5IGluIGNvbnZlcnNpb25DYWNoZSkpIHtcbiAgICBsb2dNZXNzYWdlKCdBZGRpbmcgY29udmVyc2lvbkNhY2hlIHZhbHVlICcgKyBjb252ZXJzaW9uUmF0ZSArICcgZm9yICcgKyBjYWNoZUtleSk7XG4gICAgY29udmVyc2lvbkNhY2hlW2NhY2hlS2V5XSA9IGNvbnZlcnNpb25SYXRlO1xuICB9XG4gIHJldHVybiBjb252ZXJzaW9uUmF0ZTtcbn1cblxuZnVuY3Rpb24gcm91bmRGbG9hdChudW0sIGRlYykge1xuICB2YXIgZCA9IDE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGVjOyBpKyspIHtcbiAgICBkICs9ICcwJztcbiAgfVxuICByZXR1cm4gTWF0aC5yb3VuZChudW0gKiBkKSAvIGQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRPcnRiQ3VycmVuY3kob3J0YlJlcXVlc3QsIGJpZGRlclJlcXVlc3QsIGNvbnRleHQpIHtcbiAgaWYgKGN1cnJlbmN5U3VwcG9ydEVuYWJsZWQpIHtcbiAgICBvcnRiUmVxdWVzdC5jdXIgPSBvcnRiUmVxdWVzdC5jdXIgfHwgW2NvbnRleHQuY3VycmVuY3kgfHwgYWRTZXJ2ZXJDdXJyZW5jeV07XG4gIH1cbn1cblxucmVnaXN0ZXJPcnRiUHJvY2Vzc29yKHt0eXBlOiBSRVFVRVNULCBuYW1lOiAnY3VycmVuY3knLCBmbjogc2V0T3J0YkN1cnJlbmN5fSk7XG4iLCIvLyBMb2dpYyBmcm9tIHRoaXMgbW9kdWxlIHdhcyBtb3ZlZCBpbnRvIGNvcmUgc2luY2UgYXBwcm94LiA3LjI3XG4vLyBUT0RPOiByZW1vdmUgdGhpcyBpbiB2OFxuIiwiaW1wb3J0IHtkZWVwQWNjZXNzLCBpc0ZuLCBpc1BsYWluT2JqZWN0LCBpc1N0cn0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzLmpzJztcblxuZXhwb3J0IGNvbnN0IEVJRF9DT05GSUcgPSBuZXcgTWFwKCk7XG5cbi8vIHRoaXMgZnVuY3Rpb24gd2lsbCBjcmVhdGUgYW4gZWlkIG9iamVjdCBmb3IgdGhlIGdpdmVuIFVzZXJJZCBzdWItbW9kdWxlXG5mdW5jdGlvbiBjcmVhdGVFaWRPYmplY3QodXNlcklkRGF0YSwgc3ViTW9kdWxlS2V5KSB7XG4gIGNvbnN0IGNvbmYgPSBFSURfQ09ORklHLmdldChzdWJNb2R1bGVLZXkpO1xuICBpZiAoY29uZiAmJiB1c2VySWREYXRhKSB7XG4gICAgbGV0IGVpZCA9IHt9O1xuICAgIGVpZC5zb3VyY2UgPSBpc0ZuKGNvbmZbJ2dldFNvdXJjZSddKSA/IGNvbmZbJ2dldFNvdXJjZSddKHVzZXJJZERhdGEpIDogY29uZlsnc291cmNlJ107XG4gICAgY29uc3QgdmFsdWUgPSBpc0ZuKGNvbmZbJ2dldFZhbHVlJ10pID8gY29uZlsnZ2V0VmFsdWUnXSh1c2VySWREYXRhKSA6IHVzZXJJZERhdGE7XG4gICAgaWYgKGlzU3RyKHZhbHVlKSkge1xuICAgICAgY29uc3QgdWlkID0geyBpZDogdmFsdWUsIGF0eXBlOiBjb25mWydhdHlwZSddIH07XG4gICAgICAvLyBnZXRVaWRFeHRcbiAgICAgIGlmIChpc0ZuKGNvbmZbJ2dldFVpZEV4dCddKSkge1xuICAgICAgICBjb25zdCB1aWRFeHQgPSBjb25mWydnZXRVaWRFeHQnXSh1c2VySWREYXRhKTtcbiAgICAgICAgaWYgKHVpZEV4dCkge1xuICAgICAgICAgIHVpZC5leHQgPSB1aWRFeHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVpZC51aWRzID0gW3VpZF07XG4gICAgICAvLyBnZXRFaWRFeHRcbiAgICAgIGlmIChpc0ZuKGNvbmZbJ2dldEVpZEV4dCddKSkge1xuICAgICAgICBjb25zdCBlaWRFeHQgPSBjb25mWydnZXRFaWRFeHQnXSh1c2VySWREYXRhKTtcbiAgICAgICAgaWYgKGVpZEV4dCkge1xuICAgICAgICAgIGVpZC5leHQgPSBlaWRFeHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBlaWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vLyB0aGlzIGZ1bmN0aW9uIHdpbGwgZ2VuZXJhdGUgZWlkcyBhcnJheSBmb3IgYWxsIGF2YWlsYWJsZSBJRHMgaW4gYmlkUmVxdWVzdC51c2VySWRcbi8vIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYnkgdXNlcklkIG1vZHVsZVxuLy8gaWYgYW55IGFkYXB0ZXIgZG9lcyBub3Qgd2FudCBhbnkgcGFydGljdWxhciB1c2VySWQgdG8gYmUgcGFzc2VkIHRoZW4gYWRhcHRlciBjYW4gdXNlIEFycmF5LmZpbHRlcihlID0+IGUuc291cmNlICE9ICd0ZGlkJylcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFaWRzQXJyYXkoYmlkUmVxdWVzdFVzZXJJZCkge1xuICBsZXQgZWlkcyA9IFtdO1xuXG4gIGZvciAoY29uc3Qgc3ViTW9kdWxlS2V5IGluIGJpZFJlcXVlc3RVc2VySWQpIHtcbiAgICBpZiAoYmlkUmVxdWVzdFVzZXJJZC5oYXNPd25Qcm9wZXJ0eShzdWJNb2R1bGVLZXkpKSB7XG4gICAgICBpZiAoc3ViTW9kdWxlS2V5ID09PSAncHViUHJvdmlkZWRJZCcpIHtcbiAgICAgICAgZWlkcyA9IGVpZHMuY29uY2F0KGJpZFJlcXVlc3RVc2VySWRbJ3B1YlByb3ZpZGVkSWQnXSk7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYmlkUmVxdWVzdFVzZXJJZFtzdWJNb2R1bGVLZXldKSkge1xuICAgICAgICBiaWRSZXF1ZXN0VXNlcklkW3N1Yk1vZHVsZUtleV0uZm9yRWFjaCgoY29uZmlnLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgY29uc3QgZWlkID0gY3JlYXRlRWlkT2JqZWN0KGNvbmZpZywgc3ViTW9kdWxlS2V5KTtcblxuICAgICAgICAgIGlmIChlaWQpIHtcbiAgICAgICAgICAgIGVpZHMucHVzaChlaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGVpZCA9IGNyZWF0ZUVpZE9iamVjdChiaWRSZXF1ZXN0VXNlcklkW3N1Yk1vZHVsZUtleV0sIHN1Yk1vZHVsZUtleSk7XG4gICAgICAgIGlmIChlaWQpIHtcbiAgICAgICAgICBlaWRzLnB1c2goZWlkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlaWRzO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U3VibW9kdWxlQ29udGFpbmVyW119IHN1Ym1vZHVsZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRWlkUGVybWlzc2lvbnMoc3VibW9kdWxlcykge1xuICBsZXQgZWlkUGVybWlzc2lvbnMgPSBbXTtcbiAgc3VibW9kdWxlcy5maWx0ZXIoaSA9PiBpc1BsYWluT2JqZWN0KGkuaWRPYmopICYmIE9iamVjdC5rZXlzKGkuaWRPYmopLmxlbmd0aClcbiAgICAuZm9yRWFjaChpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKGkuaWRPYmopLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29uc3QgZWlkQ29uZiA9IEVJRF9DT05GSUcuZ2V0KGtleSkgfHwge307XG4gICAgICAgIGlmIChkZWVwQWNjZXNzKGksICdjb25maWcuYmlkZGVycycpICYmIEFycmF5LmlzQXJyYXkoaS5jb25maWcuYmlkZGVycykgJiZcbiAgICAgICAgICBlaWRDb25mLnNvdXJjZSkge1xuICAgICAgICAgIGVpZFBlcm1pc3Npb25zLnB1c2goXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogZWlkQ29uZi5zb3VyY2UsXG4gICAgICAgICAgICAgIGJpZGRlcnM6IGkuY29uZmlnLmJpZGRlcnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgcmV0dXJuIGVpZFBlcm1pc3Npb25zO1xufVxuIiwiaW1wb3J0IHtob29rfSBmcm9tICcuL2hvb2suanMnO1xuXG4vKipcbiAqIHJldHVybiB0aGUgR0FNIFBQSUQsIGlmIGF2YWlsYWJsZSAoZWlkIGZvciB0aGUgdXNlcklEIGNvbmZpZ3VyZWQgd2l0aCBgdXNlclN5bmMucHBpZFNvdXJjZWApXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQUElEID0gaG9vaygnc3luYycsICgpID0+IHVuZGVmaW5lZCk7XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGFkZHMgVXNlciBJRCBzdXBwb3J0IHRvIHByZWJpZC5qc1xuICogQG1vZHVsZSBtb2R1bGVzL3VzZXJJZFxuICovXG5cbi8qKlxuICogQGludGVyZmFjZSBTdWJtb2R1bGVcbiAqL1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHN1bW1hcnkgcGVyZm9ybXMgYWN0aW9uIHRvIG9idGFpbiBpZCBhbmQgcmV0dXJuIGEgdmFsdWUgaW4gdGhlIGNhbGxiYWNrJ3MgcmVzcG9uc2UgYXJndW1lbnQuXG4gKiAgSWYgSWRSZXNwb25zZSNpZCBpcyBkZWZpbmVkLCB0aGVuIGl0IHdpbGwgYmUgd3JpdHRlbiB0byB0aGUgY3VycmVudCBhY3RpdmUgc3RvcmFnZS5cbiAqICBJZiBJZFJlc3BvbnNlI2NhbGxiYWNrIGlzIGRlZmluZWQsIHRoZW4gaXQnbGwgY2FsbGVkIGF0IHRoZSBlbmQgb2YgYXVjdGlvbi5cbiAqICBJdCdzIHBlcm1pc3NpYmxlIHRvIHJldHVybiBuZWl0aGVyLCBvbmUsIG9yIGJvdGggZmllbGRzLlxuICogQG5hbWUgU3VibW9kdWxlI2dldElkXG4gKiBAcGFyYW0ge1N1Ym1vZHVsZUNvbmZpZ30gY29uZmlnXG4gKiBAcGFyYW0ge0NvbnNlbnREYXRhfHVuZGVmaW5lZH0gY29uc2VudERhdGFcbiAqIEBwYXJhbSB7KE9iamVjdHx1bmRlZmluZWQpfSBjYWNoZUlkT2JqXG4gKiBAcmV0dXJuIHsoSWRSZXNwb25zZXx1bmRlZmluZWQpfSBBIHJlc3BvbnNlIG9iamVjdCB0aGF0IGNvbnRhaW5zIGlkIGFuZC9vciBjYWxsYmFjay5cbiAqL1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHN1bW1hcnkgU2ltaWxhciB0byBTdWJtb2R1bGUjZ2V0SWQsIHRoaXMgb3B0aW9uYWwgbWV0aG9kIHJldHVybnMgcmVzcG9uc2UgdG8gZm9yIGlkIHRoYXQgZXhpc3RzIGFscmVhZHkuXG4gKiAgSWYgSWRSZXNwb25zZSNpZCBpcyBkZWZpbmVkLCB0aGVuIGl0IHdpbGwgYmUgd3JpdHRlbiB0byB0aGUgY3VycmVudCBhY3RpdmUgc3RvcmFnZSBldmVuIGlmIGl0IGV4aXN0cyBhbHJlYWR5LlxuICogIElmIElkUmVzcG9uc2UjY2FsbGJhY2sgaXMgZGVmaW5lZCwgdGhlbiBpdCdsbCBjYWxsZWQgYXQgdGhlIGVuZCBvZiBhdWN0aW9uLlxuICogIEl0J3MgcGVybWlzc2libGUgdG8gcmV0dXJuIG5laXRoZXIsIG9uZSwgb3IgYm90aCBmaWVsZHMuXG4gKiBAbmFtZSBTdWJtb2R1bGUjZXh0ZW5kSWRcbiAqIEBwYXJhbSB7U3VibW9kdWxlQ29uZmlnfSBjb25maWdcbiAqIEBwYXJhbSB7Q29uc2VudERhdGF8dW5kZWZpbmVkfSBjb25zZW50RGF0YVxuICogQHBhcmFtIHtPYmplY3R9IHN0b3JlZElkIC0gZXhpc3RpbmcgaWQsIGlmIGFueVxuICogQHJldHVybiB7KElkUmVzcG9uc2V8ZnVuY3Rpb24oY2FsbGJhY2s6ZnVuY3Rpb24pKX0gQSByZXNwb25zZSBvYmplY3QgdGhhdCBjb250YWlucyBpZCBhbmQvb3IgY2FsbGJhY2suXG4gKi9cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBzdW1tYXJ5IGRlY29kZSBhIHN0b3JlZCB2YWx1ZSBmb3IgcGFzc2luZyB0byBiaWQgcmVxdWVzdHNcbiAqIEBuYW1lIFN1Ym1vZHVsZSNkZWNvZGVcbiAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7U3VibW9kdWxlQ29uZmlnfHVuZGVmaW5lZH0gY29uZmlnXG4gKiBAcmV0dXJuIHsoT2JqZWN0fHVuZGVmaW5lZCl9XG4gKi9cblxuLyoqXG4gKiBAcHJvcGVydHlcbiAqIEBzdW1tYXJ5IHVzZWQgdG8gbGluayBzdWJtb2R1bGUgd2l0aCBjb25maWdcbiAqIEBuYW1lIFN1Ym1vZHVsZSNuYW1lXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5cbi8qKlxuICogQHByb3BlcnR5XG4gKiBAc3VtbWFyeSB1c2UgYSBwcmVkZWZpbmVkIGRvbWFpbiBvdmVycmlkZSBmb3IgY29va2llcyBvciBwcm92aWRlIHlvdXIgb3duXG4gKiBAbmFtZSBTdWJtb2R1bGUjZG9tYWluT3ZlcnJpZGVcbiAqIEB0eXBlIHsodW5kZWZpbmVkfGZ1bmN0aW9uKX1cbiAqL1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHN1bW1hcnkgUmV0dXJucyB0aGUgcm9vdCBkb21haW5cbiAqIEBuYW1lIFN1Ym1vZHVsZSNmaW5kUm9vdERvbWFpblxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFN1Ym1vZHVsZUNvbmZpZ1xuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWUgLSB0aGUgVXNlciBJRCBzdWJtb2R1bGUgbmFtZSAodXNlZCB0byBsaW5rIHN1Ym1vZHVsZSB3aXRoIGNvbmZpZylcbiAqIEBwcm9wZXJ0eSB7KFN1Ym1vZHVsZVN0b3JhZ2V8dW5kZWZpbmVkKX0gc3RvcmFnZSAtIGJyb3dzZXIgc3RvcmFnZSBjb25maWdcbiAqIEBwcm9wZXJ0eSB7KFN1Ym1vZHVsZVBhcmFtc3x1bmRlZmluZWQpfSBwYXJhbXMgLSBwYXJhbXMgY29uZmlnIGZvciB1c2UgYnkgdGhlIHN1Ym1vZHVsZS5nZXRJZCBmdW5jdGlvblxuICogQHByb3BlcnR5IHsoT2JqZWN0fHVuZGVmaW5lZCl9IHZhbHVlIC0gaWYgbm90IGVtcHR5LCB0aGlzIHZhbHVlIGlzIGFkZGVkIHRvIGJpZCByZXF1ZXN0cyBmb3IgYWNjZXNzIGluIGFkYXB0ZXJzXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdWJtb2R1bGVTdG9yYWdlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSAtIGJyb3dzZXIgc3RvcmFnZSB0eXBlIChodG1sNSBvciBjb29raWUpXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZSAtIGtleSBuYW1lIHRvIHVzZSB3aGVuIHNhdmluZy9yZWFkaW5nIHRvIGxvY2FsIHN0b3JhZ2Ugb3IgY29va2llc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGV4cGlyZXMgLSB0aW1lIHRvIGxpdmUgZm9yIGJyb3dzZXIgc3RvcmFnZSBpbiBkYXlzXG4gKiBAcHJvcGVydHkgeyhudW1iZXJ8dW5kZWZpbmVkKX0gcmVmcmVzaEluU2Vjb25kcyAtIGlmIG5vdCBlbXB0eSwgdGhpcyB2YWx1ZSBkZWZpbmVzIHRoZSBtYXhpbXVtIHRpbWUgc3BhbiBpbiBzZWNvbmRzIGJlZm9yZSByZWZyZXNoaW5nIHVzZXIgSUQgc3RvcmVkIGluIGJyb3dzZXJcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExpdmVJbnRlbnRDb2xsZWN0Q29uZmlnXG4gKiBAcHJvcGVydHkgeyhzdHJpbmd8dW5kZWZpbmVkKX0gZnBpU3RvcmFnZVN0cmF0ZWd5IC0gZGVmaW5lcyB3aGV0aGVyIHRoZSBmaXJzdCBwYXJ0eSBpZGVudGlmaWVycyB0aGF0IExpdmVDb25uZWN0IGNyZWF0ZXMgYW5kIHVwZGF0ZXMgYXJlIHN0b3JlZCBpbiBhIGNvb2tpZSBqYXIsIGxvY2FsIHN0b3JhZ2UsIG9yIG5vdCBjcmVhdGVkIGF0IGFsbFxuICogQHByb3BlcnR5IHsobnVtYmVyfHVuZGVmaW5lZCl9IGZwaUV4cGlyYXRpb25EYXlzIC0gdGhlIGV4cGlyYXRpb24gdGltZSBvZiBhbiBpZGVudGlmaWVyIGNyZWF0ZWQgYW5kIHVwZGF0ZWQgYnkgTGl2ZUNvbm5lY3RcbiAqIEBwcm9wZXJ0eSB7KHN0cmluZ3x1bmRlZmluZWQpfSBjb2xsZWN0b3JVcmwgLSBkZWZpbmVzIHdoZXJlIHRoZSBMaXZlSW50ZW50SWQgc2lnbmFsIHBpeGVscyBhcmUgcG9pbnRpbmcgdG9cbiAqIEBwcm9wZXJ0eSB7KHN0cmluZ3x1bmRlZmluZWQpfSBhcHBJZCAtIHRoZSAgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGFwcGxpY2F0aW9uIGluIHF1ZXN0aW9uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdWJtb2R1bGVQYXJhbXNcbiAqIEBwcm9wZXJ0eSB7KHN0cmluZ3x1bmRlZmluZWQpfSBwYXJ0bmVyIC0gcGFydG5lciB1cmwgcGFyYW0gdmFsdWVcbiAqIEBwcm9wZXJ0eSB7KHN0cmluZ3x1bmRlZmluZWQpfSB1cmwgLSB3ZWJzZXJ2aWNlIHJlcXVlc3QgdXJsIHVzZWQgdG8gbG9hZCBJZCBkYXRhXG4gKiBAcHJvcGVydHkgeyhzdHJpbmd8dW5kZWZpbmVkKX0gcGl4ZWxVcmwgLSBwdWJsaXNoZXIgcGl4ZWwgdG8gZXh0ZW5kL21vZGlmeSBjb29raWVzXG4gKiBAcHJvcGVydHkgeyhib29sZWFufHVuZGVmaW5lZCl9IGNyZWF0ZSAtIGNyZWF0ZSBpZCBpZiBtaXNzaW5nLiAgZGVmYXVsdCBpcyB0cnVlLlxuICogQHByb3BlcnR5IHsoYm9vbGVhbnx1bmRlZmluZWQpfSBleHRlbmQgLSBleHRlbmQgZXhwaXJhdGlvbiB0aW1lIG9uIGVhY2ggYWNjZXNzLiAgZGVmYXVsdCBpcyBmYWxzZS5cbiAqIEBwcm9wZXJ0eSB7KHN0cmluZ3x1bmRlZmluZWQpfSBwaWQgLSBwbGFjZW1lbnQgaWQgdXJsIHBhcmFtIHZhbHVlXG4gKiBAcHJvcGVydHkgeyhzdHJpbmd8dW5kZWZpbmVkKX0gcHVibGlzaGVySWQgLSB0aGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHB1Ymxpc2hlciBpbiBxdWVzdGlvblxuICogQHByb3BlcnR5IHsoc3RyaW5nfHVuZGVmaW5lZCl9IGFqYXhUaW1lb3V0IC0gdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYSByZXNvbHV0aW9uIHJlcXVlc3QgY2FuIHRha2UgYmVmb3JlIGF1dG9tYXRpY2FsbHkgYmVpbmcgdGVybWluYXRlZFxuICogQHByb3BlcnR5IHsoYXJyYXl8dW5kZWZpbmVkKX0gaWRlbnRpZmllcnNUb1Jlc29sdmUgLSB0aGUgaWRlbnRpZmllcnMgZnJvbSBlaXRoZXIgbHN8Y29va2llIHRvIGJlIGF0dGFjaGVkIHRvIHRoZSBnZXRJZCBxdWVyeVxuICogQHByb3BlcnR5IHsoTGl2ZUludGVudENvbGxlY3RDb25maWd8dW5kZWZpbmVkKX0gbGlDb2xsZWN0Q29uZmlnIC0gdGhlIGNvbmZpZyBmb3IgTGl2ZUludGVudCdzIGNvbGxlY3QgcmVxdWVzdHNcbiAqIEBwcm9wZXJ0eSB7KHN0cmluZ3x1bmRlZmluZWQpfSBwZCAtIHB1Ymxpc2hlciBwcm92aWRlZCBkYXRhIGZvciByZWNvbmNpbGluZyBJRDUgSURzXG4gKiBAcHJvcGVydHkgeyhzdHJpbmd8dW5kZWZpbmVkKX0gZW1haWxIYXNoIC0gaWYgcHJvdmlkZWQsIHRoZSBoYXNoZWQgZW1haWwgYWRkcmVzcyBvZiBhIHVzZXJcbiAqIEBwcm9wZXJ0eSB7KHN0cmluZ3x1bmRlZmluZWQpfSBub3RVc2UzUCAtIHVzZSB0byByZXRyaWV2ZSBlbnZlbG9wZSBmcm9tIDNwIGVuZHBvaW50XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdWJtb2R1bGVDb250YWluZXJcbiAqIEBwcm9wZXJ0eSB7U3VibW9kdWxlfSBzdWJtb2R1bGVcbiAqIEBwcm9wZXJ0eSB7U3VibW9kdWxlQ29uZmlnfSBjb25maWdcbiAqIEBwcm9wZXJ0eSB7KE9iamVjdHx1bmRlZmluZWQpfSBpZE9iaiAtIGNhY2hlIGRlY29kZWQgaWQgdmFsdWUgKHRoaXMgaXMgY29waWVkIHRvIGV2ZXJ5IGFkVW5pdCBiaWQpXG4gKiBAcHJvcGVydHkgeyhmdW5jdGlvbnx1bmRlZmluZWQpfSBjYWxsYmFjayAtIGhvbGRzIHJlZmVyZW5jZSB0byBzdWJtb2R1bGUuZ2V0SWQoKSByZXN1bHQgaWYgaXQgcmV0dXJuZWQgYSBmdW5jdGlvbi4gV2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkIGFmdGVyIGNhbGxiYWNrIGV4ZWN1dGVzXG4gKiBAcHJvcGVydHkge1N0b3JhZ2VNYW5hZ2VyfSBzdG9yYWdlTWdyXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDb25zZW50RGF0YVxuICogQHByb3BlcnR5IHsoc3RyaW5nfHVuZGVmaW5lZCl9IGNvbnNlbnRTdHJpbmdcbiAqIEBwcm9wZXJ0eSB7KE9iamVjdHx1bmRlZmluZWQpfSB2ZW5kb3JEYXRhXG4gKiBAcHJvcGVydHkgeyhib29sZWFufHVuZGVmaW5lZCl9IGdkcHJBcHBsaWVzXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBJZFJlc3BvbnNlXG4gKiBAcHJvcGVydHkgeyhPYmplY3R8dW5kZWZpbmVkKX0gaWQgLSBpZCBkYXRhXG4gKiBAcHJvcGVydHkgeyhmdW5jdGlvbnx1bmRlZmluZWQpfSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4gYW4gaWRcbiAqL1xuXG5pbXBvcnQge2ZpbmQsIGluY2x1ZGVzfSBmcm9tICcuLi8uLi9zcmMvcG9seWZpbGwuanMnO1xuaW1wb3J0IHtjb25maWd9IGZyb20gJy4uLy4uL3NyYy9jb25maWcuanMnO1xuaW1wb3J0ICogYXMgZXZlbnRzIGZyb20gJy4uLy4uL3NyYy9ldmVudHMuanMnO1xuaW1wb3J0IHtnZXRHbG9iYWx9IGZyb20gJy4uLy4uL3NyYy9wcmViaWRHbG9iYWwuanMnO1xuaW1wb3J0IGFkYXB0ZXJNYW5hZ2VyLCB7Z2RwckRhdGFIYW5kbGVyfSBmcm9tICcuLi8uLi9zcmMvYWRhcHRlck1hbmFnZXIuanMnO1xuaW1wb3J0IENPTlNUQU5UUyBmcm9tICcuLi8uLi9zcmMvY29uc3RhbnRzLmpzb24nO1xuaW1wb3J0IHttb2R1bGUsIHJlYWR5IGFzIGhvb2tzUmVhZHl9IGZyb20gJy4uLy4uL3NyYy9ob29rLmpzJztcbmltcG9ydCB7YnVpbGRFaWRQZXJtaXNzaW9ucywgY3JlYXRlRWlkc0FycmF5LCBFSURfQ09ORklHfSBmcm9tICcuL2VpZHMuanMnO1xuaW1wb3J0IHtcbiAgZ2V0Q29yZVN0b3JhZ2VNYW5hZ2VyLFxuICBnZXRTdG9yYWdlTWFuYWdlcixcbiAgU1RPUkFHRV9UWVBFX0NPT0tJRVMsXG4gIFNUT1JBR0VfVFlQRV9MT0NBTFNUT1JBR0Vcbn0gZnJvbSAnLi4vLi4vc3JjL3N0b3JhZ2VNYW5hZ2VyLmpzJztcbmltcG9ydCB7XG4gIGRlZXBBY2Nlc3MsXG4gIGRlZXBTZXRWYWx1ZSxcbiAgZGVsYXlFeGVjdXRpb24sXG4gIGdldFByZWJpZEludGVybmFsLFxuICBpc0FycmF5LFxuICBpc0VtcHR5LFxuICBpc0VtcHR5U3RyLFxuICBpc0ZuLFxuICBpc0dwdFB1YmFkc0RlZmluZWQsXG4gIGlzTnVtYmVyLFxuICBpc1BsYWluT2JqZWN0LFxuICBsb2dFcnJvcixcbiAgbG9nSW5mbyxcbiAgbG9nV2FyblxufSBmcm9tICcuLi8uLi9zcmMvdXRpbHMuanMnO1xuaW1wb3J0IHtnZXRQUElEIGFzIGNvcmVHZXRQUElEfSBmcm9tICcuLi8uLi9zcmMvYWRzZXJ2ZXIuanMnO1xuaW1wb3J0IHtkZWZlciwgR3JlZWR5UHJvbWlzZX0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL3Byb21pc2UuanMnO1xuaW1wb3J0IHtyZWdpc3Rlck9ydGJQcm9jZXNzb3IsIFJFUVVFU1R9IGZyb20gJy4uLy4uL3NyYy9wYmpzT1JUQi5qcyc7XG5pbXBvcnQge25ld01ldHJpY3MsIHRpbWVkQXVjdGlvbkhvb2ssIHVzZU1ldHJpY3N9IGZyb20gJy4uLy4uL3NyYy91dGlscy9wZXJmTWV0cmljcy5qcyc7XG5pbXBvcnQge2ZpbmRSb290RG9tYWlufSBmcm9tICcuLi8uLi9zcmMvZnBkL3Jvb3REb21haW4uanMnO1xuaW1wb3J0IHthbGxDb25zZW50LCBHRFBSX0dWTElEU30gZnJvbSAnLi4vLi4vc3JjL2NvbnNlbnRIYW5kbGVyLmpzJztcbmltcG9ydCB7TU9EVUxFX1RZUEVfVUlEfSBmcm9tICcuLi8uLi9zcmMvYWN0aXZpdGllcy9tb2R1bGVzLmpzJztcbmltcG9ydCB7aXNBY3Rpdml0eUFsbG93ZWR9IGZyb20gJy4uLy4uL3NyYy9hY3Rpdml0aWVzL3J1bGVzLmpzJztcbmltcG9ydCB7QUNUSVZJVFlfRU5SSUNIX0VJRFN9IGZyb20gJy4uLy4uL3NyYy9hY3Rpdml0aWVzL2FjdGl2aXRpZXMuanMnO1xuaW1wb3J0IHthY3Rpdml0eVBhcmFtc30gZnJvbSAnLi4vLi4vc3JjL2FjdGl2aXRpZXMvYWN0aXZpdHlQYXJhbXMuanMnO1xuXG5jb25zdCBNT0RVTEVfTkFNRSA9ICdVc2VyIElEJztcbmNvbnN0IENPT0tJRSA9IFNUT1JBR0VfVFlQRV9DT09LSUVTO1xuY29uc3QgTE9DQUxfU1RPUkFHRSA9IFNUT1JBR0VfVFlQRV9MT0NBTFNUT1JBR0U7XG5jb25zdCBERUZBVUxUX1NZTkNfREVMQVkgPSA1MDA7XG5jb25zdCBOT19BVUNUSU9OX0RFTEFZID0gMDtcbmV4cG9ydCBjb25zdCBQQkpTX1VTRVJfSURfT1BUT1VUX05BTUUgPSAnX3BianNfaWRfb3B0b3V0JztcbmV4cG9ydCBjb25zdCBjb3JlU3RvcmFnZSA9IGdldENvcmVTdG9yYWdlTWFuYWdlcigndXNlcklkJyk7XG5leHBvcnQgY29uc3QgZGVwID0ge1xuICBpc0FsbG93ZWQ6IGlzQWN0aXZpdHlBbGxvd2VkXG59XG5cbi8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbmxldCBhZGRlZFVzZXJJZEhvb2sgPSBmYWxzZTtcblxuLyoqIEB0eXBlIHtTdWJtb2R1bGVDb250YWluZXJbXX0gKi9cbmxldCBzdWJtb2R1bGVzID0gW107XG5cbi8qKiBAdHlwZSB7U3VibW9kdWxlQ29udGFpbmVyW119ICovXG5sZXQgaW5pdGlhbGl6ZWRTdWJtb2R1bGVzO1xuXG4vKiogQHR5cGUge1N1Ym1vZHVsZUNvbmZpZ1tdfSAqL1xubGV0IGNvbmZpZ1JlZ2lzdHJ5ID0gW107XG5cbi8qKiBAdHlwZSB7T2JqZWN0fSAqL1xubGV0IGlkUHJpb3JpdHkgPSB7fTtcblxuLyoqIEB0eXBlIHtTdWJtb2R1bGVbXX0gKi9cbmxldCBzdWJtb2R1bGVSZWdpc3RyeSA9IFtdO1xuXG4vKiogQHR5cGUgeyhudW1iZXJ8dW5kZWZpbmVkKX0gKi9cbmxldCB0aW1lb3V0SUQ7XG5cbi8qKiBAdHlwZSB7KG51bWJlcnx1bmRlZmluZWQpfSAqL1xuZXhwb3J0IGxldCBzeW5jRGVsYXk7XG5cbi8qKiBAdHlwZSB7KG51bWJlcnx1bmRlZmluZWQpfSAqL1xuZXhwb3J0IGxldCBhdWN0aW9uRGVsYXk7XG5cbi8qKiBAdHlwZSB7KHN0cmluZ3x1bmRlZmluZWQpfSAqL1xubGV0IHBwaWRTb3VyY2U7XG5cbmxldCBjb25maWdMaXN0ZW5lcjtcblxuY29uc3QgdWlkTWV0cmljcyA9ICgoKSA9PiB7XG4gIGxldCBtZXRyaWNzO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmIChtZXRyaWNzID09IG51bGwpIHtcbiAgICAgIG1ldHJpY3MgPSBuZXdNZXRyaWNzKCk7XG4gICAgfVxuICAgIHJldHVybiBtZXRyaWNzO1xuICB9XG59KSgpO1xuXG5mdW5jdGlvbiBzdWJtb2R1bGVNZXRyaWNzKG1vZHVsZU5hbWUpIHtcbiAgcmV0dXJuIHVpZE1ldHJpY3MoKS5mb3JrKCkucmVuYW1lV2l0aChuID0+IFtgdXNlcklkLm1vZC4ke259YCwgYHVzZXJJZC5tb2RzLiR7bW9kdWxlTmFtZX0uJHtufWBdKVxufVxuXG4vKiogQHBhcmFtIHtTdWJtb2R1bGVbXX0gc3VibW9kdWxlcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFN1Ym1vZHVsZVJlZ2lzdHJ5KHN1Ym1vZHVsZXMpIHtcbiAgc3VibW9kdWxlUmVnaXN0cnkgPSBzdWJtb2R1bGVzO1xuICB1cGRhdGVFSURDb25maWcoc3VibW9kdWxlcyk7XG59XG5cbmZ1bmN0aW9uIGNvb2tpZVNldHRlcihzdWJtb2R1bGUsIHN0b3JhZ2VNZ3IpIHtcbiAgc3RvcmFnZU1nciA9IHN0b3JhZ2VNZ3IgfHwgc3VibW9kdWxlLnN0b3JhZ2VNZ3I7XG4gIGNvbnN0IGRvbWFpbk92ZXJyaWRlID0gKHR5cGVvZiBzdWJtb2R1bGUuc3VibW9kdWxlLmRvbWFpbk92ZXJyaWRlID09PSAnZnVuY3Rpb24nKSA/IHN1Ym1vZHVsZS5zdWJtb2R1bGUuZG9tYWluT3ZlcnJpZGUoKSA6IG51bGw7XG4gIGNvbnN0IG5hbWUgPSBzdWJtb2R1bGUuY29uZmlnLnN0b3JhZ2UubmFtZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNldENvb2tpZShzdWZmaXgsIHZhbHVlLCBleHBpcmF0aW9uKSB7XG4gICAgc3RvcmFnZU1nci5zZXRDb29raWUobmFtZSArIChzdWZmaXggfHwgJycpLCB2YWx1ZSwgZXhwaXJhdGlvbiwgJ0xheCcsIGRvbWFpbk92ZXJyaWRlKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7U3VibW9kdWxlQ29udGFpbmVyfSBzdWJtb2R1bGVcbiAqIEBwYXJhbSB7KE9iamVjdHxzdHJpbmcpfSB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0U3RvcmVkVmFsdWUoc3VibW9kdWxlLCB2YWx1ZSkge1xuICAvKipcbiAgICogQHR5cGUge1N1Ym1vZHVsZVN0b3JhZ2V9XG4gICAqL1xuICBjb25zdCBzdG9yYWdlID0gc3VibW9kdWxlLmNvbmZpZy5zdG9yYWdlO1xuICBjb25zdCBtZ3IgPSBzdWJtb2R1bGUuc3RvcmFnZU1ncjtcblxuICB0cnkge1xuICAgIGNvbnN0IGV4cGlyZXNTdHIgPSAobmV3IERhdGUoRGF0ZS5ub3coKSArIChzdG9yYWdlLmV4cGlyZXMgKiAoNjAgKiA2MCAqIDI0ICogMTAwMCkpKSkudG9VVENTdHJpbmcoKTtcbiAgICBjb25zdCB2YWx1ZVN0ciA9IGlzUGxhaW5PYmplY3QodmFsdWUpID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogdmFsdWU7XG4gICAgaWYgKHN0b3JhZ2UudHlwZSA9PT0gQ09PS0lFKSB7XG4gICAgICBjb25zdCBzZXRDb29raWUgPSBjb29raWVTZXR0ZXIoc3VibW9kdWxlKTtcbiAgICAgIHNldENvb2tpZShudWxsLCB2YWx1ZVN0ciwgZXhwaXJlc1N0cik7XG4gICAgICBzZXRDb29raWUoJ19jc3QnLCBnZXRDb25zZW50SGFzaCgpLCBleHBpcmVzU3RyKTtcbiAgICAgIGlmICh0eXBlb2Ygc3RvcmFnZS5yZWZyZXNoSW5TZWNvbmRzID09PSAnbnVtYmVyJykge1xuICAgICAgICBzZXRDb29raWUoJ19sYXN0JywgbmV3IERhdGUoKS50b1VUQ1N0cmluZygpLCBleHBpcmVzU3RyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN0b3JhZ2UudHlwZSA9PT0gTE9DQUxfU1RPUkFHRSkge1xuICAgICAgbWdyLnNldERhdGFJbkxvY2FsU3RvcmFnZShgJHtzdG9yYWdlLm5hbWV9X2V4cGAsIGV4cGlyZXNTdHIpO1xuICAgICAgbWdyLnNldERhdGFJbkxvY2FsU3RvcmFnZShgJHtzdG9yYWdlLm5hbWV9X2NzdGAsIGdldENvbnNlbnRIYXNoKCkpO1xuICAgICAgbWdyLnNldERhdGFJbkxvY2FsU3RvcmFnZShzdG9yYWdlLm5hbWUsIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZVN0cikpO1xuICAgICAgaWYgKHR5cGVvZiBzdG9yYWdlLnJlZnJlc2hJblNlY29uZHMgPT09ICdudW1iZXInKSB7XG4gICAgICAgIG1nci5zZXREYXRhSW5Mb2NhbFN0b3JhZ2UoYCR7c3RvcmFnZS5uYW1lfV9sYXN0YCwgbmV3IERhdGUoKS50b1VUQ1N0cmluZygpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nRXJyb3IoZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVTdG9yZWRWYWx1ZShzdWJtb2R1bGUpIHtcbiAgbGV0IGRlbGV0ZXIsIHN1ZmZpeGVzO1xuICBzd2l0Y2ggKHN1Ym1vZHVsZS5jb25maWc/LnN0b3JhZ2U/LnR5cGUpIHtcbiAgICBjYXNlIENPT0tJRTpcbiAgICAgIGNvbnN0IHNldENvb2tpZSA9IGNvb2tpZVNldHRlcihzdWJtb2R1bGUsIGNvcmVTdG9yYWdlKTtcbiAgICAgIGNvbnN0IGV4cGlyeSA9IChuZXcgRGF0ZShEYXRlLm5vdygpIC0gMTAwMCAqIDYwICogNjAgKiAyNCkpLnRvVVRDU3RyaW5nKCk7XG4gICAgICBkZWxldGVyID0gKHN1ZmZpeCkgPT4gc2V0Q29va2llKHN1ZmZpeCwgJycsIGV4cGlyeSlcbiAgICAgIHN1ZmZpeGVzID0gWycnLCAnX2xhc3QnLCAnX2NzdCddO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBMT0NBTF9TVE9SQUdFOlxuICAgICAgZGVsZXRlciA9IChzdWZmaXgpID0+IGNvcmVTdG9yYWdlLnJlbW92ZURhdGFGcm9tTG9jYWxTdG9yYWdlKHN1Ym1vZHVsZS5jb25maWcuc3RvcmFnZS5uYW1lICsgc3VmZml4KVxuICAgICAgc3VmZml4ZXMgPSBbJycsICdfbGFzdCcsICdfZXhwJywgJ19jc3QnXTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIGlmIChkZWxldGVyKSB7XG4gICAgc3VmZml4ZXMuZm9yRWFjaChzdWZmaXggPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGVsZXRlcihzdWZmaXgpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZ0Vycm9yKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldFByZWJpZFNlcnZlckVpZFBlcm1pc3Npb25zKGluaXRpYWxpemVkU3VibW9kdWxlcykge1xuICBsZXQgc2V0RWlkUGVybWlzc2lvbnMgPSBnZXRQcmViaWRJbnRlcm5hbCgpLnNldEVpZFBlcm1pc3Npb25zO1xuICBpZiAodHlwZW9mIHNldEVpZFBlcm1pc3Npb25zID09PSAnZnVuY3Rpb24nICYmIGlzQXJyYXkoaW5pdGlhbGl6ZWRTdWJtb2R1bGVzKSkge1xuICAgIHNldEVpZFBlcm1pc3Npb25zKGJ1aWxkRWlkUGVybWlzc2lvbnMoaW5pdGlhbGl6ZWRTdWJtb2R1bGVzKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1N1Ym1vZHVsZUNvbnRhaW5lcn0gc3VibW9kdWxlXG4gKiBAcGFyYW0ge1N0cmluZ3x1bmRlZmluZWR9IGtleSBvcHRpb25hbCBrZXkgb2YgdGhlIHZhbHVlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRTdG9yZWRWYWx1ZShzdWJtb2R1bGUsIGtleSA9IHVuZGVmaW5lZCkge1xuICBjb25zdCBtZ3IgPSBzdWJtb2R1bGUuc3RvcmFnZU1ncjtcbiAgY29uc3Qgc3RvcmFnZSA9IHN1Ym1vZHVsZS5jb25maWcuc3RvcmFnZTtcbiAgY29uc3Qgc3RvcmVkS2V5ID0ga2V5ID8gYCR7c3RvcmFnZS5uYW1lfV8ke2tleX1gIDogc3RvcmFnZS5uYW1lO1xuICBsZXQgc3RvcmVkVmFsdWU7XG4gIHRyeSB7XG4gICAgaWYgKHN0b3JhZ2UudHlwZSA9PT0gQ09PS0lFKSB7XG4gICAgICBzdG9yZWRWYWx1ZSA9IG1nci5nZXRDb29raWUoc3RvcmVkS2V5KTtcbiAgICB9IGVsc2UgaWYgKHN0b3JhZ2UudHlwZSA9PT0gTE9DQUxfU1RPUkFHRSkge1xuICAgICAgY29uc3Qgc3RvcmVkVmFsdWVFeHAgPSBtZ3IuZ2V0RGF0YUZyb21Mb2NhbFN0b3JhZ2UoYCR7c3RvcmFnZS5uYW1lfV9leHBgKTtcbiAgICAgIC8vIGVtcHR5IHN0cmluZyBtZWFucyBubyBleHBpcmF0aW9uIHNldFxuICAgICAgaWYgKHN0b3JlZFZhbHVlRXhwID09PSAnJykge1xuICAgICAgICBzdG9yZWRWYWx1ZSA9IG1nci5nZXREYXRhRnJvbUxvY2FsU3RvcmFnZShzdG9yZWRLZXkpO1xuICAgICAgfSBlbHNlIGlmIChzdG9yZWRWYWx1ZUV4cCkge1xuICAgICAgICBpZiAoKG5ldyBEYXRlKHN0b3JlZFZhbHVlRXhwKSkuZ2V0VGltZSgpIC0gRGF0ZS5ub3coKSA+IDApIHtcbiAgICAgICAgICBzdG9yZWRWYWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChtZ3IuZ2V0RGF0YUZyb21Mb2NhbFN0b3JhZ2Uoc3RvcmVkS2V5KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gc3VwcG9ydCBzdG9yaW5nIGEgc3RyaW5nIG9yIGEgc3RyaW5naWZpZWQgb2JqZWN0XG4gICAgaWYgKHR5cGVvZiBzdG9yZWRWYWx1ZSA9PT0gJ3N0cmluZycgJiYgc3RvcmVkVmFsdWUudHJpbSgpLmNoYXJBdCgwKSA9PT0gJ3snKSB7XG4gICAgICBzdG9yZWRWYWx1ZSA9IEpTT04ucGFyc2Uoc3RvcmVkVmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ0Vycm9yKGUpO1xuICB9XG4gIHJldHVybiBzdG9yZWRWYWx1ZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1N1Ym1vZHVsZUNvbnRhaW5lcltdfSBzdWJtb2R1bGVzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiAtIGNhbGxiYWNrIGZvciBhZnRlciBwcm9jZXNzaW5nIGlzIGRvbmUuXG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NTdWJtb2R1bGVDYWxsYmFja3Moc3VibW9kdWxlcywgY2IsIGFsbE1vZHVsZXMpIHtcbiAgY2IgPSB1aWRNZXRyaWNzKCkuZm9yaygpLnN0YXJ0VGltaW5nKCd1c2VySWQuY2FsbGJhY2tzLnRvdGFsJykuc3RvcEJlZm9yZShjYik7XG4gIGNvbnN0IGRvbmUgPSBkZWxheUV4ZWN1dGlvbigoKSA9PiB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJRCk7XG4gICAgY2IoKTtcbiAgfSwgc3VibW9kdWxlcy5sZW5ndGgpO1xuICBzdWJtb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKHN1Ym1vZHVsZSkge1xuICAgIGNvbnN0IG1vZHVsZURvbmUgPSBzdWJtb2R1bGVNZXRyaWNzKHN1Ym1vZHVsZS5zdWJtb2R1bGUubmFtZSkuc3RhcnRUaW1pbmcoJ2NhbGxiYWNrJykuc3RvcEJlZm9yZShkb25lKTtcbiAgICBmdW5jdGlvbiBjYWxsYmFja0NvbXBsZXRlZChpZE9iaikge1xuICAgICAgLy8gaWYgdmFsaWQsIGlkIGRhdGEgc2hvdWxkIGJlIHNhdmVkIHRvIGNvb2tpZS9odG1sIHN0b3JhZ2VcbiAgICAgIGlmIChpZE9iaikge1xuICAgICAgICBpZiAoc3VibW9kdWxlLmNvbmZpZy5zdG9yYWdlKSB7XG4gICAgICAgICAgc2V0U3RvcmVkVmFsdWUoc3VibW9kdWxlLCBpZE9iaik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FjaGUgZGVjb2RlZCB2YWx1ZSAodGhpcyBpcyBjb3BpZWQgdG8gZXZlcnkgYWRVbml0IGJpZClcbiAgICAgICAgc3VibW9kdWxlLmlkT2JqID0gc3VibW9kdWxlLnN1Ym1vZHVsZS5kZWNvZGUoaWRPYmosIHN1Ym1vZHVsZS5jb25maWcpO1xuICAgICAgICB1cGRhdGVQUElEKGdldENvbWJpbmVkU3VibW9kdWxlSWRzKGFsbE1vZHVsZXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ0luZm8oYCR7TU9EVUxFX05BTUV9OiAke3N1Ym1vZHVsZS5zdWJtb2R1bGUubmFtZX0gLSByZXF1ZXN0IGlkIHJlc3BvbmRlZCB3aXRoIGFuIGVtcHR5IHZhbHVlYCk7XG4gICAgICB9XG4gICAgICBtb2R1bGVEb25lKCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBzdWJtb2R1bGUuY2FsbGJhY2soY2FsbGJhY2tDb21wbGV0ZWQsIGdldFN0b3JlZFZhbHVlLmJpbmQobnVsbCwgc3VibW9kdWxlKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nRXJyb3IoYEVycm9yIGluIHVzZXJJRCBtb2R1bGUgJyR7c3VibW9kdWxlLnN1Ym1vZHVsZS5uYW1lfSc6YCwgZSk7XG4gICAgICBtb2R1bGVEb25lKCk7XG4gICAgfVxuICAgIC8vIGNsZWFyIGNhbGxiYWNrLCB0aGlzIHByb3AgaXMgdXNlZCB0byB0ZXN0IGlmIGFsbCBzdWJtb2R1bGUgY2FsbGJhY2tzIGFyZSBjb21wbGV0ZSBiZWxvd1xuICAgIHN1Ym1vZHVsZS5jYWxsYmFjayA9IHVuZGVmaW5lZDtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGNyZWF0ZSBhIGNvbWJpbmVkIG9iamVjdCBmb3IgYWxsIHN1Yk1vZHVsZSBJZHNcbiAqIEBwYXJhbSB7U3VibW9kdWxlQ29udGFpbmVyW119IHN1Ym1vZHVsZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Q29tYmluZWRTdWJtb2R1bGVJZHMoc3VibW9kdWxlcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoc3VibW9kdWxlcykgfHwgIXN1Ym1vZHVsZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiBnZXRQcmlvcml0aXplZENvbWJpbmVkU3VibW9kdWxlSWRzKHN1Ym1vZHVsZXMpXG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBhIHN1Ym1vZHVsZSBJRCBvYmplY3QgZm9yIHBhcnRpY3VsYXIgc291cmNlIG5hbWVcbiAqIEBwYXJhbSB7U3VibW9kdWxlQ29udGFpbmVyW119IHN1Ym1vZHVsZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VOYW1lXG4gKi9cbmZ1bmN0aW9uIGdldFN1Ym1vZHVsZUlkKHN1Ym1vZHVsZXMsIHNvdXJjZU5hbWUpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHN1Ym1vZHVsZXMpIHx8ICFzdWJtb2R1bGVzLmxlbmd0aCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IHByaW9yaXRpc2VkSWRzID0gZ2V0UHJpb3JpdGl6ZWRDb21iaW5lZFN1Ym1vZHVsZUlkcyhzdWJtb2R1bGVzKTtcbiAgY29uc3QgZWxpZ2libGVJZE5hbWUgPSBPYmplY3Qua2V5cyhwcmlvcml0aXNlZElkcykuZmluZChpZE5hbWUgPT4ge1xuICAgIGNvbnN0IGNvbmZpZyA9IEVJRF9DT05GSUcuZ2V0KGlkTmFtZSk7XG4gICAgcmV0dXJuIGNvbmZpZz8uc291cmNlID09PSBzb3VyY2VOYW1lIHx8IChpc0ZuKGNvbmZpZz8uZ2V0U291cmNlKSAmJiBjb25maWcuZ2V0U291cmNlKCkgPT09IHNvdXJjZU5hbWUpO1xuICB9KTtcblxuICByZXR1cm4gZWxpZ2libGVJZE5hbWUgPyB7W2VsaWdpYmxlSWROYW1lXTogcHJpb3JpdGlzZWRJZHNbZWxpZ2libGVJZE5hbWVdfSA6IFtdO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBjcmVhdGUgYSBjb21iaW5lZCBvYmplY3QgZm9yIGJpZGRlciB3aXRoIGFsbG93ZWQgc3ViTW9kdWxlIElkc1xuICogQHBhcmFtIHtTdWJtb2R1bGVDb250YWluZXJbXX0gc3VibW9kdWxlc1xuICogQHBhcmFtIHtzdHJpbmd9IGJpZGRlclxuICovXG5mdW5jdGlvbiBnZXRDb21iaW5lZFN1Ym1vZHVsZUlkc0ZvckJpZGRlcihzdWJtb2R1bGVzLCBiaWRkZXIpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHN1Ym1vZHVsZXMpIHx8ICFzdWJtb2R1bGVzLmxlbmd0aCB8fCAhYmlkZGVyKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IGVsaWdpYmxlU3VibW9kdWxlcyA9IHN1Ym1vZHVsZXNcbiAgICAuZmlsdGVyKGkgPT4gIWkuY29uZmlnLmJpZGRlcnMgfHwgIWlzQXJyYXkoaS5jb25maWcuYmlkZGVycykgfHwgaW5jbHVkZXMoaS5jb25maWcuYmlkZGVycywgYmlkZGVyKSlcblxuICByZXR1cm4gZ2V0UHJpb3JpdGl6ZWRDb21iaW5lZFN1Ym1vZHVsZUlkcyhlbGlnaWJsZVN1Ym1vZHVsZXMpO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0QnlQcmlvcml0eShzdWJtb2R1bGVzLCBnZXRJZHMsIGdldE5hbWUpIHtcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhzdWJtb2R1bGVzLnJlZHVjZSgoY2FycnksIHN1Ym1vZCkgPT4ge1xuICAgIGNvbnN0IGlkcyA9IGdldElkcyhzdWJtb2QpO1xuICAgIGlkcyAmJiBPYmplY3Qua2V5cyhpZHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IG1heWJlQ3VycmVudElkUHJpb3JpdHkgPSBpZFByaW9yaXR5W2tleV0/LmluZGV4T2YoZ2V0TmFtZShzdWJtb2QpKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRJZFByaW9yaXR5ID0gaXNOdW1iZXIobWF5YmVDdXJyZW50SWRQcmlvcml0eSkgPyBtYXliZUN1cnJlbnRJZFByaW9yaXR5IDogLTE7XG4gICAgICBjb25zdCBjdXJyZW50SWRTdGF0ZSA9IHtwcmlvcml0eTogY3VycmVudElkUHJpb3JpdHksIHZhbHVlOiBpZHNba2V5XX07XG4gICAgICBpZiAoY2Fycnlba2V5XSkge1xuICAgICAgICBjb25zdCB3aW5uZXJJZFN0YXRlID0gY3VycmVudElkU3RhdGUucHJpb3JpdHkgPiBjYXJyeVtrZXldLnByaW9yaXR5ID8gY3VycmVudElkU3RhdGUgOiBjYXJyeVtrZXldO1xuICAgICAgICBjYXJyeVtrZXldID0gd2lubmVySWRTdGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcnJ5W2tleV0gPSBjdXJyZW50SWRTdGF0ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2Fycnk7XG4gIH0sIHt9KSkubWFwKChbaywgdl0pID0+IFtrLCB2LnZhbHVlXSkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U3VibW9kdWxlQ29udGFpbmVyW119IHN1Ym1vZHVsZXNcbiAqL1xuZnVuY3Rpb24gZ2V0UHJpb3JpdGl6ZWRDb21iaW5lZFN1Ym1vZHVsZUlkcyhzdWJtb2R1bGVzKSB7XG4gIHJldHVybiBjb2xsZWN0QnlQcmlvcml0eShcbiAgICBzdWJtb2R1bGVzLmZpbHRlcihpID0+IGlzUGxhaW5PYmplY3QoaS5pZE9iaikgJiYgT2JqZWN0LmtleXMoaS5pZE9iaikubGVuZ3RoKSxcbiAgICAoc3VibW9kKSA9PiBzdWJtb2QuaWRPYmosXG4gICAgKHN1Ym1vZCkgPT4gc3VibW9kLnN1Ym1vZHVsZS5uYW1lXG4gIClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FkVW5pdFtdfSBhZFVuaXRzXG4gKiBAcGFyYW0ge1N1Ym1vZHVsZUNvbnRhaW5lcltdfSBzdWJtb2R1bGVzXG4gKi9cbmZ1bmN0aW9uIGFkZElkRGF0YVRvQWRVbml0QmlkcyhhZFVuaXRzLCBzdWJtb2R1bGVzKSB7XG4gIGlmIChbYWRVbml0c10uc29tZShpID0+ICFBcnJheS5pc0FycmF5KGkpIHx8ICFpLmxlbmd0aCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYWRVbml0cy5mb3JFYWNoKGFkVW5pdCA9PiB7XG4gICAgaWYgKGFkVW5pdC5iaWRzICYmIGlzQXJyYXkoYWRVbml0LmJpZHMpKSB7XG4gICAgICBhZFVuaXQuYmlkcy5mb3JFYWNoKGJpZCA9PiB7XG4gICAgICAgIGNvbnN0IGNvbWJpbmVkU3VibW9kdWxlSWRzID0gZ2V0Q29tYmluZWRTdWJtb2R1bGVJZHNGb3JCaWRkZXIoc3VibW9kdWxlcywgYmlkLmJpZGRlcik7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhjb21iaW5lZFN1Ym1vZHVsZUlkcykubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gY3JlYXRlIGEgVXNlciBJRCBvYmplY3Qgb24gdGhlIGJpZCxcbiAgICAgICAgICBiaWQudXNlcklkID0gY29tYmluZWRTdWJtb2R1bGVJZHM7XG4gICAgICAgICAgYmlkLnVzZXJJZEFzRWlkcyA9IGNyZWF0ZUVpZHNBcnJheShjb21iaW5lZFN1Ym1vZHVsZUlkcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmNvbnN0IElOSVRfQ0FOQ0VMRUQgPSB7fTtcblxuZnVuY3Rpb24gaWRTeXN0ZW1Jbml0aWFsaXplcih7ZGVsYXkgPSBHcmVlZHlQcm9taXNlLnRpbWVvdXR9ID0ge30pIHtcbiAgY29uc3Qgc3RhcnRJbml0ID0gZGVmZXIoKTtcbiAgY29uc3Qgc3RhcnRDYWxsYmFja3MgPSBkZWZlcigpO1xuICBsZXQgY2FuY2VsO1xuICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgbGV0IGluaXRNZXRyaWNzO1xuXG4gIGZ1bmN0aW9uIGNhbmNlbEFuZFRyeShwcm9taXNlKSB7XG4gICAgaW5pdE1ldHJpY3MgPSB1aWRNZXRyaWNzKCkuZm9yaygpO1xuICAgIGlmIChjYW5jZWwgIT0gbnVsbCkge1xuICAgICAgY2FuY2VsLnJlamVjdChJTklUX0NBTkNFTEVEKTtcbiAgICB9XG4gICAgY2FuY2VsID0gZGVmZXIoKTtcbiAgICByZXR1cm4gR3JlZWR5UHJvbWlzZS5yYWNlKFtwcm9taXNlLCBjYW5jZWwucHJvbWlzZV0pXG4gICAgICAuZmluYWxseShpbml0TWV0cmljcy5zdGFydFRpbWluZygndXNlcklkLnRvdGFsJykpXG4gIH1cblxuICAvLyBncmFiIGEgcmVmZXJlbmNlIHRvIGdsb2JhbCB2YXJzIHNvIHRoYXQgdGhlIHByb21pc2UgY2hhaW5zIHJlbWFpbiBpc29sYXRlZDtcbiAgLy8gbXVsdGlwbGUgY2FsbHMgdG8gYGluaXRgIChmcm9tIHRlc3RzKSBtaWdodCBvdGhlcndpc2UgY2F1c2UgdGhlbSB0byBpbnRlcmZlcmUgd2l0aCBlYWNoIG90aGVyXG4gIGxldCBpbml0TW9kdWxlcyA9IGluaXRpYWxpemVkU3VibW9kdWxlcztcbiAgbGV0IGFsbE1vZHVsZXMgPSBzdWJtb2R1bGVzO1xuXG4gIGZ1bmN0aW9uIGNoZWNrUmVmcyhmbikge1xuICAgIC8vIHVuZm9ydHVuYXRlbHkgdGVzdHMgaGF2ZSB0aGVpciBvd24gZ2xvYmFsIHN0YXRlIHRoYXQgbmVlZHMgdG8gYmUgZ3VhcmRlZCwgc28gZXZlbiBpZiB3ZSBrZWVwIG91cnMgdGlkeSxcbiAgICAvLyB3ZSBjYW5ub3QgbGV0IHRoaW5ncyBsaWtlIHN1Ym1vZHVsZSBjYWxsYmFja3MgcnVuICh0aGV5IHBvbGx1dGUgdGhpbmdzIGxpa2UgdGhlIGdsb2JhbCBgc2VydmVyYCBYSFIgbW9jaylcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgaWYgKGluaXRNb2R1bGVzID09PSBpbml0aWFsaXplZFN1Ym1vZHVsZXMgJiYgYWxsTW9kdWxlcyA9PT0gc3VibW9kdWxlcykge1xuICAgICAgICByZXR1cm4gZm4oLi4uYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdGltZUNvbnNlbnQoKSB7XG4gICAgcmV0dXJuIGFsbENvbnNlbnQucHJvbWlzZS5maW5hbGx5KGluaXRNZXRyaWNzLnN0YXJ0VGltaW5nKCd1c2VySWQuaW5pdC5jb25zZW50JykpXG4gIH1cblxuICBsZXQgZG9uZSA9IGNhbmNlbEFuZFRyeShcbiAgICBHcmVlZHlQcm9taXNlLmFsbChbaG9va3NSZWFkeSwgc3RhcnRJbml0LnByb21pc2VdKVxuICAgICAgLnRoZW4odGltZUNvbnNlbnQpXG4gICAgICAudGhlbihjaGVja1JlZnMoKCkgPT4ge1xuICAgICAgICBpbml0U3VibW9kdWxlcyhpbml0TW9kdWxlcywgYWxsTW9kdWxlcyk7XG4gICAgICB9KSlcbiAgICAgIC50aGVuKCgpID0+IHN0YXJ0Q2FsbGJhY2tzLnByb21pc2UuZmluYWxseShpbml0TWV0cmljcy5zdGFydFRpbWluZygndXNlcklkLmNhbGxiYWNrcy5wZW5kaW5nJykpKVxuICAgICAgLnRoZW4oY2hlY2tSZWZzKCgpID0+IHtcbiAgICAgICAgY29uc3QgbW9kV2l0aENiID0gaW5pdE1vZHVsZXMuZmlsdGVyKGl0ZW0gPT4gaXNGbihpdGVtLmNhbGxiYWNrKSk7XG4gICAgICAgIGlmIChtb2RXaXRoQ2IubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBHcmVlZHlQcm9taXNlKChyZXNvbHZlKSA9PiBwcm9jZXNzU3VibW9kdWxlQ2FsbGJhY2tzKG1vZFdpdGhDYiwgcmVzb2x2ZSwgaW5pdE1vZHVsZXMpKTtcbiAgICAgICAgfVxuICAgICAgfSkpXG4gICk7XG5cbiAgLyoqXG4gICAqIHdpdGggYHJlYWR5YCA9IHRydWUsIHN0YXJ0cyBpbml0aWFsaXphdGlvbjsgd2l0aCBgcmVmcmVzaGAgPSB0cnVlLCByZWluaXRpYWxpemUgc3VibW9kdWxlcyAob3B0aW9uYWxseVxuICAgKiBmaWx0ZXJlZCBieSBgc3VibW9kdWxlTmFtZXNgKS5cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAoe3JlZnJlc2ggPSBmYWxzZSwgc3VibW9kdWxlTmFtZXMgPSBudWxsLCByZWFkeSA9IGZhbHNlfSA9IHt9KSB7XG4gICAgaWYgKHJlYWR5ICYmICFpbml0aWFsaXplZCkge1xuICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgc3RhcnRJbml0LnJlc29sdmUoKTtcbiAgICAgIC8vIHN1Ym1vZHVsZSBjYWxsYmFja3Mgc2hvdWxkIHJ1biBpbW1lZGlhdGVseSBpZiBgYXVjdGlvbkRlbGF5YCA+IDAsIG9yIGBzeW5jRGVsYXlgIG1zIGFmdGVyIHRoZVxuICAgICAgLy8gYXVjdGlvbiBlbmRzIG90aGVyd2lzZVxuICAgICAgaWYgKGF1Y3Rpb25EZWxheSA+IDApIHtcbiAgICAgICAgc3RhcnRDYWxsYmFja3MucmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXZlbnRzLm9uKENPTlNUQU5UUy5FVkVOVFMuQVVDVElPTl9FTkQsIGZ1bmN0aW9uIGF1Y3Rpb25FbmRIYW5kbGVyKCkge1xuICAgICAgICAgIGV2ZW50cy5vZmYoQ09OU1RBTlRTLkVWRU5UUy5BVUNUSU9OX0VORCwgYXVjdGlvbkVuZEhhbmRsZXIpO1xuICAgICAgICAgIGRlbGF5KHN5bmNEZWxheSkudGhlbihzdGFydENhbGxiYWNrcy5yZXNvbHZlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZWZyZXNoICYmIGluaXRpYWxpemVkKSB7XG4gICAgICBkb25lID0gY2FuY2VsQW5kVHJ5KFxuICAgICAgICBkb25lXG4gICAgICAgICAgLmNhdGNoKCgpID0+IG51bGwpXG4gICAgICAgICAgLnRoZW4odGltZUNvbnNlbnQpIC8vIGZldGNoIGFnYWluIGluIGNhc2UgYSByZWZyZXNoIHdhcyBmb3JjZWQgYmVmb3JlIHRoaXMgd2FzIHJlc29sdmVkXG4gICAgICAgICAgLnRoZW4oY2hlY2tSZWZzKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNiTW9kdWxlcyA9IGluaXRTdWJtb2R1bGVzKFxuICAgICAgICAgICAgICBpbml0TW9kdWxlcyxcbiAgICAgICAgICAgICAgYWxsTW9kdWxlcy5maWx0ZXIoKHNtKSA9PiBzdWJtb2R1bGVOYW1lcyA9PSBudWxsIHx8IHN1Ym1vZHVsZU5hbWVzLmluY2x1ZGVzKHNtLnN1Ym1vZHVsZS5uYW1lKSksXG4gICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICkuZmlsdGVyKChzbSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gc20uY2FsbGJhY2sgIT0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGNiTW9kdWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBHcmVlZHlQcm9taXNlKChyZXNvbHZlKSA9PiBwcm9jZXNzU3VibW9kdWxlQ2FsbGJhY2tzKGNiTW9kdWxlcywgcmVzb2x2ZSwgaW5pdE1vZHVsZXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSlcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkb25lO1xuICB9O1xufVxuXG5sZXQgaW5pdElkU3lzdGVtO1xuXG5mdW5jdGlvbiBnZXRQUElEKGVpZHMgPSBnZXRVc2VySWRzQXNFaWRzKCkgfHwgW10pIHtcbiAgLy8gdXNlclN5bmMucHBpZCBzaG91bGQgYmUgb25lIG9mIHRoZSAnc291cmNlJyB2YWx1ZXMgaW4gZ2V0VXNlcklkc0FzRWlkcygpIGVnIHB1YmNpZC5vcmcgb3IgaWQ1LXN5bmMuY29tXG4gIGNvbnN0IG1hdGNoaW5nVXNlcklkID0gcHBpZFNvdXJjZSAmJiBlaWRzLmZpbmQodXNlcklEID0+IHVzZXJJRC5zb3VyY2UgPT09IHBwaWRTb3VyY2UpO1xuICBpZiAobWF0Y2hpbmdVc2VySWQgJiYgdHlwZW9mIGRlZXBBY2Nlc3MobWF0Y2hpbmdVc2VySWQsICd1aWRzLjAuaWQnKSA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBwcGlkVmFsdWUgPSBtYXRjaGluZ1VzZXJJZC51aWRzWzBdLmlkLnJlcGxhY2UoL1tcXFdfXS9nLCAnJyk7XG4gICAgaWYgKHBwaWRWYWx1ZS5sZW5ndGggPj0gMzIgJiYgcHBpZFZhbHVlLmxlbmd0aCA8PSAxNTApIHtcbiAgICAgIHJldHVybiBwcGlkVmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ1dhcm4oYFVzZXIgSUQgLSBHb29nbGV0YWcgUHVibGlzaGVyIFByb3ZpZGVkIElEIGZvciAke3BwaWRTb3VyY2V9IGlzIG5vdCBiZXR3ZWVuIDMyIGFuZCAxNTAgY2hhcmFjdGVycyAtICR7cHBpZFZhbHVlfWApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEhvb2sgaXMgZXhlY3V0ZWQgYmVmb3JlIGFkYXB0ZXJzLCBidXQgYWZ0ZXIgY29uc2VudE1hbmFnZW1lbnQuIENvbnNlbnQgZGF0YSBpcyByZXF1aWVkIGJlY2F1c2VcbiAqIHRoaXMgbW9kdWxlIHJlcXVpcmVzIEdEUFIgY29uc2VudCB3aXRoIFB1cnBvc2UgIzEgdG8gc2F2ZSBkYXRhIGxvY2FsbHkuXG4gKiBUaGUgdHdvIG1haW4gYWN0aW9ucyBoYW5kbGVkIGJ5IHRoZSBob29rIGFyZTpcbiAqIDEuIGNoZWNrIGdkcHIgY29uc2VudERhdGEgYW5kIGhhbmRsZSBzdWJtb2R1bGUgaW5pdGlhbGl6YXRpb24uXG4gKiAyLiBhcHBlbmQgdXNlciBpZCBkYXRhIChsb2FkZWQgZnJvbSBjb29raWVkL2h0bWwgb3IgZnJvbSB0aGUgZ2V0SWQgbWV0aG9kKSB0byBiaWRzIHRvIGJlIGFjY2Vzc2VkIGluIGFkYXB0ZXJzLlxuICogQHBhcmFtIHtPYmplY3R9IHJlcUJpZHNDb25maWdPYmogcmVxdWlyZWQ7IFRoaXMgaXMgdGhlIHNhbWUgcGFyYW0gdGhhdCdzIHVzZWQgaW4gcGJqcy5yZXF1ZXN0Qmlkcy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIHJlcXVpcmVkOyBUaGUgbmV4dCBmdW5jdGlvbiBpbiB0aGUgY2hhaW4sIHVzZWQgYnkgaG9vay5qc1xuICovXG5leHBvcnQgY29uc3QgcmVxdWVzdEJpZHNIb29rID0gdGltZWRBdWN0aW9uSG9vaygndXNlcklkJywgZnVuY3Rpb24gcmVxdWVzdEJpZHNIb29rKGZuLCByZXFCaWRzQ29uZmlnT2JqLCB7ZGVsYXkgPSBHcmVlZHlQcm9taXNlLnRpbWVvdXQsIGdldElkcyA9IGdldFVzZXJJZHNBc3luY30gPSB7fSkge1xuICBHcmVlZHlQcm9taXNlLnJhY2UoW1xuICAgIGdldElkcygpLmNhdGNoKCgpID0+IG51bGwpLFxuICAgIGRlbGF5KGF1Y3Rpb25EZWxheSlcbiAgXSkudGhlbigoKSA9PiB7XG4gICAgLy8gcGFzcyBhdmFpbGFibGUgdXNlciBpZCBkYXRhIHRvIGJpZCBhZGFwdGVyc1xuICAgIGFkZElkRGF0YVRvQWRVbml0QmlkcyhyZXFCaWRzQ29uZmlnT2JqLmFkVW5pdHMgfHwgZ2V0R2xvYmFsKCkuYWRVbml0cywgaW5pdGlhbGl6ZWRTdWJtb2R1bGVzKTtcbiAgICB1aWRNZXRyaWNzKCkuam9pbih1c2VNZXRyaWNzKHJlcUJpZHNDb25maWdPYmoubWV0cmljcyksIHtwcm9wYWdhdGU6IGZhbHNlLCBpbmNsdWRlR3JvdXBzOiB0cnVlfSk7XG4gICAgLy8gY2FsbGluZyBmbiBhbGxvd3MgcHJlYmlkIHRvIGNvbnRpbnVlIHByb2Nlc3NpbmdcbiAgICBmbi5jYWxsKHRoaXMsIHJlcUJpZHNDb25maWdPYmopO1xuICB9KTtcbn0pO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBleHBvc2VkIGluIGdsb2JhbC1uYW1lLXNwYWNlIHNvIHRoYXQgdXNlcklkcyBzdG9yZWQgYnkgUHJlYmlkIFVzZXJJZCBtb2R1bGUgY2FuIGJlIHVzZWQgYnkgZXh0ZXJuYWwgY29kZXMgYXMgd2VsbC5cbiAqIFNpbXBsZSB1c2UgY2FzZSB3aWxsIGJlIHBhc3NpbmcgdGhlc2UgVXNlcklkcyB0byBBOSB3cmFwcGVyIHNvbHV0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldFVzZXJJZHMoKSB7XG4gIHJldHVybiBnZXRDb21iaW5lZFN1Ym1vZHVsZUlkcyhpbml0aWFsaXplZFN1Ym1vZHVsZXMpXG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGV4cG9zZWQgaW4gZ2xvYmFsLW5hbWUtc3BhY2Ugc28gdGhhdCB1c2VySWRzIHN0b3JlZCBieSBQcmViaWQgVXNlcklkIG1vZHVsZSBjYW4gYmUgdXNlZCBieSBleHRlcm5hbCBjb2RlcyBhcyB3ZWxsLlxuICogU2ltcGxlIHVzZSBjYXNlIHdpbGwgYmUgcGFzc2luZyB0aGVzZSBVc2VySWRzIHRvIEE5IHdyYXBwZXIgc29sdXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0VXNlcklkc0FzRWlkcygpIHtcbiAgcmV0dXJuIGNyZWF0ZUVpZHNBcnJheShnZXRVc2VySWRzKCkpXG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGV4cG9zZWQgaW4gZ2xvYmFsLW5hbWUtc3BhY2Ugc28gdGhhdCB1c2VySWRzIHN0b3JlZCBieSBQcmViaWQgVXNlcklkIG1vZHVsZSBjYW4gYmUgdXNlZCBieSBleHRlcm5hbCBjb2RlcyBhcyB3ZWxsLlxuICogU2ltcGxlIHVzZSBjYXNlIHdpbGwgYmUgcGFzc2luZyB0aGVzZSBVc2VySWRzIHRvIEE5IHdyYXBwZXIgc29sdXRpb25cbiAqL1xuXG5mdW5jdGlvbiBnZXRVc2VySWRzQXNFaWRCeVNvdXJjZShzb3VyY2VOYW1lKSB7XG4gIHJldHVybiBjcmVhdGVFaWRzQXJyYXkoZ2V0U3VibW9kdWxlSWQoaW5pdGlhbGl6ZWRTdWJtb2R1bGVzLCBzb3VyY2VOYW1lKSlbMF07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGV4cG9zZWQgaW4gZ2xvYmFsLW5hbWUtc3BhY2Ugc28gdGhhdCB1c2VySWRzIGZvciBhIHNvdXJjZSBjYW4gYmUgZXhwb3NlZFxuICogU2FtcGxlIHVzZSBjYXNlIGlzIGV4cG9zaW5nIHRoaXMgZnVuY3Rpb24gdG8gRVNQXG4gKi9cbmZ1bmN0aW9uIGdldEVuY3J5cHRlZEVpZHNGb3JTb3VyY2Uoc291cmNlLCBlbmNyeXB0LCBjdXN0b21GdW5jdGlvbikge1xuICByZXR1cm4gaW5pdElkU3lzdGVtKCkudGhlbigoKSA9PiB7XG4gICAgbGV0IGVpZHNTaWduYWxzID0ge307XG5cbiAgICBpZiAoaXNGbihjdXN0b21GdW5jdGlvbikpIHtcbiAgICAgIGxvZ0luZm8oYCR7TU9EVUxFX05BTUV9IC0gR2V0dGluZyBlbmNyeXB0ZWQgc2lnbmFsIGZyb20gY3VzdG9tIGZ1bmN0aW9uIDogJHtjdXN0b21GdW5jdGlvbi5uYW1lfSAmIHNvdXJjZSA6ICR7c291cmNlfSBgKTtcbiAgICAgIC8vIFB1Ymxpc2hlcnMgYXJlIGV4cGVjdGVkIHRvIGRlZmluZSBhIGNvbW1vbiBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIHByb3h5IGZvciBzaWduYWwgZnVuY3Rpb24uXG4gICAgICBjb25zdCBjdXN0b21TaWduYWxzID0gY3VzdG9tRnVuY3Rpb24oc291cmNlKTtcbiAgICAgIGVpZHNTaWduYWxzW3NvdXJjZV0gPSBjdXN0b21TaWduYWxzID8gZW5jcnlwdFNpZ25hbHMoY3VzdG9tU2lnbmFscykgOiBudWxsOyAvLyBieSBkZWZhdWx0IGVuY3J5cHQgdXNpbmcgYmFzZTY0IHRvIGF2b2lkIEpTT04gZXJyb3JzXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluaXRpYWxpemUgc2lnbmFsIHdpdGggZWlkcyBieSBkZWZhdWx0XG4gICAgICBjb25zdCBlaWQgPSBnZXRVc2VySWRzQXNFaWRCeVNvdXJjZShzb3VyY2UpO1xuICAgICAgbG9nSW5mbyhgJHtNT0RVTEVfTkFNRX0gLSBHZXR0aW5nIGVuY3J5cHRlZCBzaWduYWwgZm9yIGVpZHMgOiR7SlNPTi5zdHJpbmdpZnkoZWlkKX1gKTtcbiAgICAgIGlmICghaXNFbXB0eShlaWQpKSB7XG4gICAgICAgIGVpZHNTaWduYWxzW2VpZC5zb3VyY2VdID0gZW5jcnlwdCA9PT0gdHJ1ZSA/IGVuY3J5cHRTaWduYWxzKGVpZCkgOiBlaWQudWlkc1swXS5pZDsgLy8gSWYgZW5jcnlwdGlvbiBpcyBlbmFibGVkIGFwcGVuZCB2ZXJzaW9uICgxfHwpIGFuZCBlbmNyeXB0IGVudGlyZSBvYmplY3RcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nSW5mbyhgJHtNT0RVTEVfTkFNRX0gLSBGZXRjaGluZyBlbmNyeXB0ZWQgZWlkczogJHtlaWRzU2lnbmFsc1tzb3VyY2VdfWApO1xuICAgIHJldHVybiBlaWRzU2lnbmFsc1tzb3VyY2VdO1xuICB9KVxufVxuXG5mdW5jdGlvbiBlbmNyeXB0U2lnbmFscyhzaWduYWxzLCB2ZXJzaW9uID0gMSkge1xuICBsZXQgZW5jcnlwdGVkU2lnID0gJyc7XG4gIHN3aXRjaCAodmVyc2lvbikge1xuICAgIGNhc2UgMTogLy8gQmFzZTY0IEVuY3J5cHRpb25cbiAgICAgIGVuY3J5cHRlZFNpZyA9IHR5cGVvZiBzaWduYWxzID09PSAnb2JqZWN0JyA/IHdpbmRvdy5idG9hKEpTT04uc3RyaW5naWZ5KHNpZ25hbHMpKSA6IHdpbmRvdy5idG9hKHNpZ25hbHMpOyAvLyBUZXN0IGVuY3J5cHRpb24uIFRvIGJlIHJlcGxhY2VkIHdpdGggYmV0dGVyIGFsZ29cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gYCR7dmVyc2lvbn18fCR7ZW5jcnlwdGVkU2lnfWA7XG59XG5cbi8qKlxuKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgZXhwb3NlZCBpbiB0aGUgZ2xvYmFsLW5hbWUtc3BhY2Ugc28gdGhhdCBwdWJsaXNoZXIgY2FuIHJlZ2lzdGVyIHRoZSBzaWduYWxzLUVTUC5cbiovXG5mdW5jdGlvbiByZWdpc3RlclNpZ25hbFNvdXJjZXMoKSB7XG4gIGlmICghaXNHcHRQdWJhZHNEZWZpbmVkKCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgd2luZG93Lmdvb2dsZXRhZy5zZWN1cmVTaWduYWxQcm92aWRlcnMgPSB3aW5kb3cuZ29vZ2xldGFnLnNlY3VyZVNpZ25hbFByb3ZpZGVycyB8fCBbXTtcbiAgY29uc3QgZW5jcnlwdGVkU2lnbmFsU291cmNlcyA9IGNvbmZpZy5nZXRDb25maWcoJ3VzZXJTeW5jLmVuY3J5cHRlZFNpZ25hbFNvdXJjZXMnKTtcbiAgaWYgKGVuY3J5cHRlZFNpZ25hbFNvdXJjZXMpIHtcbiAgICBjb25zdCByZWdpc3RlckRlbGF5ID0gZW5jcnlwdGVkU2lnbmFsU291cmNlcy5yZWdpc3RlckRlbGF5IHx8IDA7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBlbmNyeXB0ZWRTaWduYWxTb3VyY2VzWydzb3VyY2VzJ10gJiYgZW5jcnlwdGVkU2lnbmFsU291cmNlc1snc291cmNlcyddLmZvckVhY2goKHsgc291cmNlLCBlbmNyeXB0LCBjdXN0b21GdW5jIH0pID0+IHtcbiAgICAgICAgc291cmNlLmZvckVhY2goKHNyYykgPT4ge1xuICAgICAgICAgIHdpbmRvdy5nb29nbGV0YWcuc2VjdXJlU2lnbmFsUHJvdmlkZXJzLnB1c2goe1xuICAgICAgICAgICAgaWQ6IHNyYyxcbiAgICAgICAgICAgIGNvbGxlY3RvckZ1bmN0aW9uOiAoKSA9PiBnZXRFbmNyeXB0ZWRFaWRzRm9yU291cmNlKHNyYywgZW5jcnlwdCwgY3VzdG9tRnVuYylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgIH0sIHJlZ2lzdGVyRGVsYXkpXG4gIH0gZWxzZSB7XG4gICAgbG9nV2FybihgJHtNT0RVTEVfTkFNRX0gLSBFU1AgOiBlbmNyeXB0ZWRTaWduYWxTb3VyY2VzIGNvbmZpZyBub3QgZGVmaW5lZCB1bmRlciB1c2VyU3luYyBPYmplY3RgKTtcbiAgfVxufVxuXG4vKipcbiAqIEZvcmNlIChyZSlpbml0aWFsaXphdGlvbiBvZiBJRCBzdWJtb2R1bGVzLlxuICpcbiAqIFRoaXMgd2lsbCBmb3JjZSBhIHJlZnJlc2ggb2YgdGhlIHNwZWNpZmllZCBJRCBzdWJtb2R1bGVzIHJlZ2FyZGxlc3Mgb2YgYGF1Y3Rpb25EZWxheWAgLyBgc3luY0RlbGF5YCBzZXR0aW5ncywgYW5kXG4gKiByZXR1cm4gYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHNhbWUgdmFsdWUgYXMgYGdldFVzZXJJZHMoKWAgd2hlbiB0aGUgcmVmcmVzaCBpcyBjb21wbGV0ZS5cbiAqIElmIGEgcmVmcmVzaCBpcyBhbHJlYWR5IGluIHByb2dyZXNzLCBpdCB3aWxsIGJlIGNhbmNlbGVkIChyZWplY3RpbmcgcHJvbWlzZXMgcmV0dXJuZWQgYnkgcHJldmlvdXMgY2FsbHMgdG8gYHJlZnJlc2hVc2VySWRzYCkuXG4gKlxuICogQHBhcmFtIHN1Ym1vZHVsZU5hbWVzPyBzdWJtb2R1bGVzIHRvIHJlZnJlc2guIElmIG9taXR0ZWQsIHJlZnJlc2ggYWxsIHN1Ym1vZHVsZXMuXG4gKiBAcGFyYW0gY2FsbGJhY2s/IGNhbGxlZCB3aGVuIHRoZSByZWZyZXNoIGlzIGNvbXBsZXRlXG4gKi9cbmZ1bmN0aW9uIHJlZnJlc2hVc2VySWRzKHtzdWJtb2R1bGVOYW1lc30gPSB7fSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGluaXRJZFN5c3RlbSh7cmVmcmVzaDogdHJ1ZSwgc3VibW9kdWxlTmFtZXN9KVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIGlmIChjYWxsYmFjayAmJiBpc0ZuKGNhbGxiYWNrKSkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdldFVzZXJJZHMoKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgc2FtZSB2YWx1ZSBhcyBgZ2V0VXNlcklkcygpYCwgYnV0IG9ubHkgb25jZSBhbGwgSUQgc3VibW9kdWxlcyBoYXZlIGNvbXBsZXRlZFxuICogaW5pdGlhbGl6YXRpb24uIFRoaXMgY2FuIGFsc28gYmUgdXNlZCB0byBzeW5jaHJvbml6ZSBjYWxscyB0byBvdGhlciBJRCBhY2Nlc3NvcnMsIGUuZy5cbiAqXG4gKiBgYGBcbiAqIHBianMuZ2V0VXNlcklkc0FzeW5jKCkudGhlbigoKSA9PiB7XG4gKiAgIGNvbnN0IGVpZHMgPSBwYmpzLmdldFVzZXJJZHNBc0VpZHMoKTsgLy8gZ3VhcmFudGVlZCB0byBiZSBjb21wbGV0ZWx5IGluaXRpYWxpemVkIGF0IHRoaXMgcG9pbnRcbiAqIH0pO1xuICogYGBgXG4gKi9cblxuZnVuY3Rpb24gZ2V0VXNlcklkc0FzeW5jKCkge1xuICByZXR1cm4gaW5pdElkU3lzdGVtKCkudGhlbihcbiAgICAoKSA9PiBnZXRVc2VySWRzKCksXG4gICAgKGUpID0+IHtcbiAgICAgIGlmIChlID09PSBJTklUX0NBTkNFTEVEKSB7XG4gICAgICAgIC8vIHRoZXJlJ3MgYSBwZW5kaW5nIHJlZnJlc2ggLSBiZWNhdXNlIEdyZWVkeVByb21pc2UgcnVucyB0aGlzIHN5bmNocm9ub3VzbHksIHdlIGFyZSBub3cgaW4gdGhlIG1pZGRsZVxuICAgICAgICAvLyBvZiBjYW5jZWxpbmcgdGhlIHByZXZpb3VzIGluaXQsIGJlZm9yZSB0aGUgcmVmcmVzaCBsb2dpYyBoYXMgaGFkIGEgY2hhbmNlIHRvIHJ1bi5cbiAgICAgICAgLy8gVXNlIGEgXCJub3JtYWxcIiBQcm9taXNlIHRvIGNsZWFyIHRoZSBzdGFjayBhbmQgbGV0IGl0IGNvbXBsZXRlIChvciB0aGlzIHdpbGwganVzdCByZWN1cnNlIGluZmluaXRlbHkpXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGdldFVzZXJJZHNBc3luYylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ0Vycm9yKCdFcnJvciBpbml0aWFsaXppbmcgdXNlcklkJywgZSlcbiAgICAgICAgcmV0dXJuIEdyZWVkeVByb21pc2UucmVqZWN0KGUpXG4gICAgICB9XG4gICAgfVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29uc2VudEhhc2goKSB7XG4gIC8vIHRyYW5zZm9ybSBkZWNpbWFsIHN0cmluZyBpbnRvIGJhc2U2NCB0byBzYXZlIHNvbWUgc3BhY2Ugb24gY29va2llc1xuICBsZXQgaGFzaCA9IE51bWJlcihhbGxDb25zZW50Lmhhc2gpO1xuICBjb25zdCBieXRlcyA9IFtdO1xuICB3aGlsZSAoaGFzaCA+IDApIHtcbiAgICBieXRlcy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoaGFzaCAmIDI1NSkpO1xuICAgIGhhc2ggPSBoYXNoID4+PiA4O1xuICB9XG4gIHJldHVybiBidG9hKGJ5dGVzLmpvaW4oKSk7XG59XG5cbmZ1bmN0aW9uIGNvbnNlbnRDaGFuZ2VkKHN1Ym1vZHVsZSkge1xuICBjb25zdCBzdG9yZWRDb25zZW50ID0gZ2V0U3RvcmVkVmFsdWUoc3VibW9kdWxlLCAnY3N0Jyk7XG4gIHJldHVybiAhc3RvcmVkQ29uc2VudCB8fCBzdG9yZWRDb25zZW50ICE9PSBnZXRDb25zZW50SGFzaCgpO1xufVxuXG5mdW5jdGlvbiBwb3B1bGF0ZVN1Ym1vZHVsZUlkKHN1Ym1vZHVsZSwgZm9yY2VSZWZyZXNoLCBhbGxTdWJtb2R1bGVzKSB7XG4gIC8vIFRPRE86IHRoZSBJRCBzdWJtb2R1bGUgQVBJIG9ubHkgdGFrZXMgR0RQUiBjb25zZW50OyBpdCBzaG91bGQgYmUgdXBkYXRlZCBub3cgdGhhdCBHRFBSXG4gIC8vIGlzIG9ubHkgYSB0aW55IGZyYWN0aW9uIG9mIGEgdmFzdCBjb25zZW50IHVuaXZlcnNlXG4gIGNvbnN0IGdkcHJDb25zZW50ID0gZ2RwckRhdGFIYW5kbGVyLmdldENvbnNlbnREYXRhKCk7XG5cbiAgLy8gVGhlcmUgYXJlIHR3byBzdWJtb2R1bGUgY29uZmlndXJhdGlvbiB0eXBlcyB0byBoYW5kbGU6IHN0b3JhZ2Ugb3IgdmFsdWVcbiAgLy8gMS4gc3RvcmFnZTogcmV0cmlldmUgdXNlciBpZCBkYXRhIGZyb20gY29va2llL2h0bWwgc3RvcmFnZSBvciB3aXRoIHRoZSBzdWJtb2R1bGUncyBnZXRJZCBtZXRob2RcbiAgLy8gMi4gdmFsdWU6IHBhc3MgZGlyZWN0bHkgdG8gYmlkc1xuICBpZiAoc3VibW9kdWxlLmNvbmZpZy5zdG9yYWdlKSB7XG4gICAgbGV0IHN0b3JlZElkID0gZ2V0U3RvcmVkVmFsdWUoc3VibW9kdWxlKTtcbiAgICBsZXQgcmVzcG9uc2U7XG5cbiAgICBsZXQgcmVmcmVzaE5lZWRlZCA9IGZhbHNlO1xuICAgIGlmICh0eXBlb2Ygc3VibW9kdWxlLmNvbmZpZy5zdG9yYWdlLnJlZnJlc2hJblNlY29uZHMgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25zdCBzdG9yZWREYXRlID0gbmV3IERhdGUoZ2V0U3RvcmVkVmFsdWUoc3VibW9kdWxlLCAnbGFzdCcpKTtcbiAgICAgIHJlZnJlc2hOZWVkZWQgPSBzdG9yZWREYXRlICYmIChEYXRlLm5vdygpIC0gc3RvcmVkRGF0ZS5nZXRUaW1lKCkgPiBzdWJtb2R1bGUuY29uZmlnLnN0b3JhZ2UucmVmcmVzaEluU2Vjb25kcyAqIDEwMDApO1xuICAgIH1cblxuICAgIGlmICghc3RvcmVkSWQgfHwgcmVmcmVzaE5lZWRlZCB8fCBmb3JjZVJlZnJlc2ggfHwgY29uc2VudENoYW5nZWQoc3VibW9kdWxlKSkge1xuICAgICAgLy8gTm8gaWQgcHJldmlvdXNseSBzYXZlZCwgb3IgYSByZWZyZXNoIGlzIG5lZWRlZCwgb3IgY29uc2VudCBoYXMgY2hhbmdlZC4gUmVxdWVzdCBhIG5ldyBpZCBmcm9tIHRoZSBzdWJtb2R1bGUuXG4gICAgICByZXNwb25zZSA9IHN1Ym1vZHVsZS5zdWJtb2R1bGUuZ2V0SWQoc3VibW9kdWxlLmNvbmZpZywgZ2RwckNvbnNlbnQsIHN0b3JlZElkKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdWJtb2R1bGUuc3VibW9kdWxlLmV4dGVuZElkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBJZiB0aGUgaWQgZXhpc3RzIGFscmVhZHksIGdpdmUgc3VibW9kdWxlIGEgY2hhbmNlIHRvIGRlY2lkZSBhZGRpdGlvbmFsIGFjdGlvbnMgdGhhdCBuZWVkIHRvIGJlIHRha2VuXG4gICAgICByZXNwb25zZSA9IHN1Ym1vZHVsZS5zdWJtb2R1bGUuZXh0ZW5kSWQoc3VibW9kdWxlLmNvbmZpZywgZ2RwckNvbnNlbnQsIHN0b3JlZElkKTtcbiAgICB9XG5cbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXNwb25zZSkpIHtcbiAgICAgIGlmIChyZXNwb25zZS5pZCkge1xuICAgICAgICAvLyBBIGdldElkL2V4dGVuZElkIHJlc3VsdCBhc3N1bWVkIHRvIGJlIHZhbGlkIHVzZXIgaWQgZGF0YSwgd2hpY2ggc2hvdWxkIGJlIHNhdmVkIHRvIHVzZXJzIGxvY2FsIHN0b3JhZ2Ugb3IgY29va2llc1xuICAgICAgICBzZXRTdG9yZWRWYWx1ZShzdWJtb2R1bGUsIHJlc3BvbnNlLmlkKTtcbiAgICAgICAgc3RvcmVkSWQgPSByZXNwb25zZS5pZDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiByZXNwb25zZS5jYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBTYXZlIGFzeW5jIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgYWZ0ZXIgYXVjdGlvblxuICAgICAgICBzdWJtb2R1bGUuY2FsbGJhY2sgPSByZXNwb25zZS5jYWxsYmFjaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RvcmVkSWQpIHtcbiAgICAgIC8vIGNhY2hlIGRlY29kZWQgdmFsdWUgKHRoaXMgaXMgY29waWVkIHRvIGV2ZXJ5IGFkVW5pdCBiaWQpXG4gICAgICBzdWJtb2R1bGUuaWRPYmogPSBzdWJtb2R1bGUuc3VibW9kdWxlLmRlY29kZShzdG9yZWRJZCwgc3VibW9kdWxlLmNvbmZpZyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHN1Ym1vZHVsZS5jb25maWcudmFsdWUpIHtcbiAgICAvLyBjYWNoZSBkZWNvZGVkIHZhbHVlICh0aGlzIGlzIGNvcGllZCB0byBldmVyeSBhZFVuaXQgYmlkKVxuICAgIHN1Ym1vZHVsZS5pZE9iaiA9IHN1Ym1vZHVsZS5jb25maWcudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBzdWJtb2R1bGUuc3VibW9kdWxlLmdldElkKHN1Ym1vZHVsZS5jb25maWcsIGdkcHJDb25zZW50LCB1bmRlZmluZWQpO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3BvbnNlKSkge1xuICAgICAgaWYgKHR5cGVvZiByZXNwb25zZS5jYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgeyBzdWJtb2R1bGUuY2FsbGJhY2sgPSByZXNwb25zZS5jYWxsYmFjazsgfVxuICAgICAgaWYgKHJlc3BvbnNlLmlkKSB7IHN1Ym1vZHVsZS5pZE9iaiA9IHN1Ym1vZHVsZS5zdWJtb2R1bGUuZGVjb2RlKHJlc3BvbnNlLmlkLCBzdWJtb2R1bGUuY29uZmlnKTsgfVxuICAgIH1cbiAgfVxuICB1cGRhdGVQUElEKGdldENvbWJpbmVkU3VibW9kdWxlSWRzKGFsbFN1Ym1vZHVsZXMpKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlUFBJRCh1c2VySWRzID0gZ2V0VXNlcklkcygpKSB7XG4gIGlmICh1c2VySWRzICYmIHBwaWRTb3VyY2UpIHtcbiAgICBjb25zdCBwcGlkID0gZ2V0UFBJRChjcmVhdGVFaWRzQXJyYXkodXNlcklkcykpO1xuICAgIGlmIChwcGlkKSB7XG4gICAgICBpZiAoaXNHcHRQdWJhZHNEZWZpbmVkKCkpIHtcbiAgICAgICAgd2luZG93Lmdvb2dsZXRhZy5wdWJhZHMoKS5zZXRQdWJsaXNoZXJQcm92aWRlZElkKHBwaWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93Lmdvb2dsZXRhZyA9IHdpbmRvdy5nb29nbGV0YWcgfHwge307XG4gICAgICAgIHdpbmRvdy5nb29nbGV0YWcuY21kID0gd2luZG93Lmdvb2dsZXRhZy5jbWQgfHwgW107XG4gICAgICAgIHdpbmRvdy5nb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgd2luZG93Lmdvb2dsZXRhZy5wdWJhZHMoKS5zZXRQdWJsaXNoZXJQcm92aWRlZElkKHBwaWQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFN1Ym1vZHVsZXMoZGVzdCwgc3VibW9kdWxlcywgZm9yY2VSZWZyZXNoID0gZmFsc2UpIHtcbiAgcmV0dXJuIHVpZE1ldHJpY3MoKS5mb3JrKCkubWVhc3VyZVRpbWUoJ3VzZXJJZC5pbml0Lm1vZHVsZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzdWJtb2R1bGVzLmxlbmd0aCkgcmV0dXJuIFtdOyAvLyB0byBzaW1wbGlmeSBsb2cgbWVzc2FnZXMgZnJvbSBoZXJlIG9uXG5cbiAgICAvKipcbiAgICAgKiBmaWx0ZXIgb3V0IHN1Ym1vZHVsZXMgdGhhdDpcbiAgICAgKlxuICAgICAqICAtIGNhbm5vdCB1c2UgdGhlIHN0b3JhZ2UgdGhleSd2ZSBiZWVuIHNldCB1cCB3aXRoIChzdG9yYWdlIG5vdCBhdmFpbGFibGUgLyBub3QgYWxsb3dlZCAvIGRpc2FibGVkKVxuICAgICAqICAtIGFyZSBub3QgYWxsb3dlZCB0byBwZXJmb3JtIHRoZSBgZW5yaWNoRWlkc2AgYWN0aXZpdHlcbiAgICAgKi9cbiAgICBzdWJtb2R1bGVzID0gc3VibW9kdWxlcy5maWx0ZXIoKHN1Ym1vZCkgPT4ge1xuICAgICAgcmV0dXJuICghc3VibW9kLmNvbmZpZy5zdG9yYWdlIHx8IGNhblVzZVN0b3JhZ2Uoc3VibW9kKSkgJiZcbiAgICAgICAgZGVwLmlzQWxsb3dlZChBQ1RJVklUWV9FTlJJQ0hfRUlEUywgYWN0aXZpdHlQYXJhbXMoTU9EVUxFX1RZUEVfVUlELCBzdWJtb2QuY29uZmlnLm5hbWUpKTtcbiAgICB9KTtcblxuICAgIGlmICghc3VibW9kdWxlcy5sZW5ndGgpIHtcbiAgICAgIGxvZ1dhcm4oYCR7TU9EVUxFX05BTUV9IC0gbm8gSUQgbW9kdWxlIGNvbmZpZ3VyZWRgKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBpbml0aWFsaXplZCA9IHN1Ym1vZHVsZXMucmVkdWNlKChjYXJyeSwgc3VibW9kdWxlKSA9PiB7XG4gICAgICByZXR1cm4gc3VibW9kdWxlTWV0cmljcyhzdWJtb2R1bGUuc3VibW9kdWxlLm5hbWUpLm1lYXN1cmVUaW1lKCdpbml0JywgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHBvcHVsYXRlU3VibW9kdWxlSWQoc3VibW9kdWxlLCBmb3JjZVJlZnJlc2gsIHN1Ym1vZHVsZXMpO1xuICAgICAgICAgIGNhcnJ5LnB1c2goc3VibW9kdWxlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGxvZ0Vycm9yKGBFcnJvciBpbiB1c2VySUQgbW9kdWxlICcke3N1Ym1vZHVsZS5zdWJtb2R1bGUubmFtZX0nOmAsIGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYXJyeTtcbiAgICAgIH0pXG4gICAgfSwgW10pO1xuICAgIGlmIChpbml0aWFsaXplZC5sZW5ndGgpIHtcbiAgICAgIHNldFByZWJpZFNlcnZlckVpZFBlcm1pc3Npb25zKGluaXRpYWxpemVkKTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZWQuZm9yRWFjaCh1cGRhdGVJbml0aWFsaXplZFN1Ym1vZHVsZXMuYmluZChudWxsLCBkZXN0KSk7XG4gICAgcmV0dXJuIGluaXRpYWxpemVkO1xuICB9KVxufVxuXG5mdW5jdGlvbiB1cGRhdGVJbml0aWFsaXplZFN1Ym1vZHVsZXMoZGVzdCwgc3VibW9kdWxlKSB7XG4gIGxldCB1cGRhdGVkID0gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGVzdC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdWJtb2R1bGUuY29uZmlnLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gZGVzdFtpXS5jb25maWcubmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICAgIGRlc3RbaV0gPSBzdWJtb2R1bGU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIXVwZGF0ZWQpIHtcbiAgICBkZXN0LnB1c2goc3VibW9kdWxlKTtcbiAgfVxufVxuXG4vKipcbiAqIGxpc3Qgb2Ygc3VibW9kdWxlIGNvbmZpZ3VyYXRpb25zIHdpdGggdmFsaWQgJ3N0b3JhZ2UnIG9yICd2YWx1ZScgb2JqIGRlZmluaXRpb25zXG4gKiAqIHN0b3JhZ2UgY29uZmlnOiBjb250YWlucyB2YWx1ZXMgZm9yIHN0b3JpbmcvcmV0cmlldmluZyBVc2VyIElEIGRhdGEgaW4gYnJvd3NlciBzdG9yYWdlXG4gKiAqIHZhbHVlIGNvbmZpZzogb2JqZWN0IHByb3BlcnRpZXMgdGhhdCBhcmUgY29waWVkIHRvIGJpZHMgKHdpdGhvdXQgc2F2aW5nIHRvIHN0b3JhZ2UpXG4gKiBAcGFyYW0ge1N1Ym1vZHVsZUNvbmZpZ1tdfSBjb25maWdSZWdpc3RyeVxuICogQHBhcmFtIHtTdWJtb2R1bGVbXX0gc3VibW9kdWxlUmVnaXN0cnlcbiAqIEBwYXJhbSB7c3RyaW5nW119IGFjdGl2ZVN0b3JhZ2VUeXBlc1xuICogQHJldHVybnMge1N1Ym1vZHVsZUNvbmZpZ1tdfVxuICovXG5mdW5jdGlvbiBnZXRWYWxpZFN1Ym1vZHVsZUNvbmZpZ3MoY29uZmlnUmVnaXN0cnksIHN1Ym1vZHVsZVJlZ2lzdHJ5KSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShjb25maWdSZWdpc3RyeSkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIGNvbmZpZ1JlZ2lzdHJ5LnJlZHVjZSgoY2FycnksIGNvbmZpZykgPT4ge1xuICAgIC8vIGV2ZXJ5IHN1Ym1vZHVsZSBjb25maWcgb2JqIG11c3QgY29udGFpbiBhIHZhbGlkICduYW1lJ1xuICAgIGlmICghY29uZmlnIHx8IGlzRW1wdHlTdHIoY29uZmlnLm5hbWUpKSB7XG4gICAgICByZXR1cm4gY2Fycnk7XG4gICAgfVxuICAgIC8vIFZhbGlkYXRlIHN0b3JhZ2UgY29uZmlnIGNvbnRhaW5zICd0eXBlJyBhbmQgJ25hbWUnIHByb3BlcnRpZXMgd2l0aCBub24tZW1wdHkgc3RyaW5nIHZhbHVlc1xuICAgIC8vICd0eXBlJyBtdXN0IGJlIG9uZSBvZiBodG1sNSwgY29va2llc1xuICAgIGlmIChjb25maWcuc3RvcmFnZSAmJlxuICAgICAgIWlzRW1wdHlTdHIoY29uZmlnLnN0b3JhZ2UudHlwZSkgJiZcbiAgICAgICFpc0VtcHR5U3RyKGNvbmZpZy5zdG9yYWdlLm5hbWUpICYmXG4gICAgICBBTExfU1RPUkFHRV9UWVBFUy5oYXMoY29uZmlnLnN0b3JhZ2UudHlwZSkpIHtcbiAgICAgIGNhcnJ5LnB1c2goY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoY29uZmlnLnZhbHVlKSkge1xuICAgICAgY2FycnkucHVzaChjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoIWNvbmZpZy5zdG9yYWdlICYmICFjb25maWcudmFsdWUpIHtcbiAgICAgIGNhcnJ5LnB1c2goY29uZmlnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcnJ5O1xuICB9LCBbXSk7XG59XG5cbmNvbnN0IEFMTF9TVE9SQUdFX1RZUEVTID0gbmV3IFNldChbTE9DQUxfU1RPUkFHRSwgQ09PS0lFXSk7XG5cbmZ1bmN0aW9uIGNhblVzZVN0b3JhZ2Uoc3VibW9kdWxlKSB7XG4gIHN3aXRjaCAoc3VibW9kdWxlLmNvbmZpZz8uc3RvcmFnZT8udHlwZSkge1xuICAgIGNhc2UgTE9DQUxfU1RPUkFHRTpcbiAgICAgIGlmIChzdWJtb2R1bGUuc3RvcmFnZU1nci5sb2NhbFN0b3JhZ2VJc0VuYWJsZWQoKSkge1xuICAgICAgICBpZiAoY29yZVN0b3JhZ2UuZ2V0RGF0YUZyb21Mb2NhbFN0b3JhZ2UoUEJKU19VU0VSX0lEX09QVE9VVF9OQU1FKSkge1xuICAgICAgICAgIGxvZ0luZm8oYCR7TU9EVUxFX05BTUV9IC0gb3B0LW91dCBsb2NhbFN0b3JhZ2UgZm91bmQsIHN0b3JhZ2UgZGlzYWJsZWRgKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQ09PS0lFOlxuICAgICAgaWYgKHN1Ym1vZHVsZS5zdG9yYWdlTWdyLmNvb2tpZXNBcmVFbmFibGVkKCkpIHtcbiAgICAgICAgaWYgKGNvcmVTdG9yYWdlLmdldENvb2tpZShQQkpTX1VTRVJfSURfT1BUT1VUX05BTUUpKSB7XG4gICAgICAgICAgbG9nSW5mbyhgJHtNT0RVTEVfTkFNRX0gLSBvcHQtb3V0IGNvb2tpZSBmb3VuZCwgc3RvcmFnZSBkaXNhYmxlZGApO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVFSURDb25maWcoc3VibW9kdWxlcykge1xuICBFSURfQ09ORklHLmNsZWFyKCk7XG4gIE9iamVjdC5lbnRyaWVzKGNvbGxlY3RCeVByaW9yaXR5KFxuICAgIHN1Ym1vZHVsZXMsXG4gICAgKG1vZCkgPT4gbW9kLmVpZHMsXG4gICAgKG1vZCkgPT4gbW9kLm5hbWVcbiAgKSkuZm9yRWFjaCgoW2lkLCBjb25mXSkgPT4gRUlEX0NPTkZJRy5zZXQoaWQsIGNvbmYpKTtcbn1cblxuLyoqXG4gKiB1cGRhdGUgc3VibW9kdWxlcyBieSB2YWxpZGF0aW5nIGFnYWluc3QgZXhpc3RpbmcgY29uZmlncyBhbmQgc3RvcmFnZSB0eXBlc1xuICovXG5mdW5jdGlvbiB1cGRhdGVTdWJtb2R1bGVzKCkge1xuICB1cGRhdGVFSURDb25maWcoc3VibW9kdWxlUmVnaXN0cnkpO1xuICBjb25zdCBjb25maWdzID0gZ2V0VmFsaWRTdWJtb2R1bGVDb25maWdzKGNvbmZpZ1JlZ2lzdHJ5LCBzdWJtb2R1bGVSZWdpc3RyeSk7XG4gIGlmICghY29uZmlncy5sZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZG8gdGhpcyB0byBhdm9pZCByZXByb2Nlc3Npbmcgc3VibW9kdWxlc1xuICAvLyBUT0RPOiB0aGUgbG9naWMgZG9lcyBub3QgbWF0Y2ggdGhlIGNvbW1lbnQgLSBhZGRlZFN1Ym1vZHVsZXMgaXMgYWx3YXlzIGEgY29weSBvZiBzdWJtb2R1bGVSZWdpc3RyeVxuICAvLyAoaWYgaXQgZGlkIGl0IHdvdWxkIG5vdCBiZSBjb3JyZWN0IC0gaXQncyBub3QgZW5vdWdoIHRvIGZpbmQgbmV3IG1vZHVsZXMsIGFzIG90aGVycyBtYXkgaGF2ZSBiZWVuIHJlbW92ZWQgb3IgY2hhbmdlZClcbiAgY29uc3QgYWRkZWRTdWJtb2R1bGVzID0gc3VibW9kdWxlUmVnaXN0cnkuZmlsdGVyKGkgPT4gIWZpbmQoc3VibW9kdWxlcywgaiA9PiBqLm5hbWUgPT09IGkubmFtZSkpO1xuXG4gIHN1Ym1vZHVsZXMuc3BsaWNlKDAsIHN1Ym1vZHVsZXMubGVuZ3RoKTtcbiAgLy8gZmluZCBzdWJtb2R1bGUgYW5kIHRoZSBtYXRjaGluZyBjb25maWd1cmF0aW9uLCBpZiBmb3VuZCBjcmVhdGUgYW5kIGFwcGVuZCBhIFN1Ym1vZHVsZUNvbnRhaW5lclxuICBhZGRlZFN1Ym1vZHVsZXMubWFwKGkgPT4ge1xuICAgIGNvbnN0IHN1Ym1vZHVsZUNvbmZpZyA9IGZpbmQoY29uZmlncywgaiA9PiBqLm5hbWUgJiYgKGoubmFtZS50b0xvd2VyQ2FzZSgpID09PSBpLm5hbWUudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgKGkuYWxpYXNOYW1lICYmIGoubmFtZS50b0xvd2VyQ2FzZSgpID09PSBpLmFsaWFzTmFtZS50b0xvd2VyQ2FzZSgpKSkpO1xuICAgIGlmIChzdWJtb2R1bGVDb25maWcgJiYgaS5uYW1lICE9PSBzdWJtb2R1bGVDb25maWcubmFtZSkgc3VibW9kdWxlQ29uZmlnLm5hbWUgPSBpLm5hbWU7XG4gICAgaS5maW5kUm9vdERvbWFpbiA9IGZpbmRSb290RG9tYWluO1xuICAgIHJldHVybiBzdWJtb2R1bGVDb25maWcgPyB7XG4gICAgICBzdWJtb2R1bGU6IGksXG4gICAgICBjb25maWc6IHN1Ym1vZHVsZUNvbmZpZyxcbiAgICAgIGNhbGxiYWNrOiB1bmRlZmluZWQsXG4gICAgICBpZE9iajogdW5kZWZpbmVkLFxuICAgICAgc3RvcmFnZU1ncjogZ2V0U3RvcmFnZU1hbmFnZXIoe21vZHVsZVR5cGU6IE1PRFVMRV9UWVBFX1VJRCwgbW9kdWxlTmFtZTogc3VibW9kdWxlQ29uZmlnLm5hbWV9KSxcbiAgICB9IDogbnVsbDtcbiAgfSkuZmlsdGVyKHN1Ym1vZHVsZSA9PiBzdWJtb2R1bGUgIT09IG51bGwpXG4gICAgLmZvckVhY2goKHNtKSA9PiBzdWJtb2R1bGVzLnB1c2goc20pKTtcblxuICBpZiAoIWFkZGVkVXNlcklkSG9vayAmJiBzdWJtb2R1bGVzLmxlbmd0aCkge1xuICAgIC8vIHByaW9yaXR5IHZhbHVlIDQwIHdpbGwgbG9hZCBhZnRlciBjb25zZW50TWFuYWdlbWVudCB3aXRoIGEgcHJpb3JpdHkgb2YgNTBcbiAgICBnZXRHbG9iYWwoKS5yZXF1ZXN0Qmlkcy5iZWZvcmUocmVxdWVzdEJpZHNIb29rLCA0MCk7XG4gICAgYWRhcHRlck1hbmFnZXIuY2FsbERhdGFEZWxldGlvblJlcXVlc3QuYmVmb3JlKHJlcXVlc3REYXRhRGVsZXRpb24pO1xuICAgIGNvcmVHZXRQUElELmFmdGVyKChuZXh0KSA9PiBuZXh0KGdldFBQSUQoKSkpO1xuICAgIGxvZ0luZm8oYCR7TU9EVUxFX05BTUV9IC0gdXNlcnN5bmMgY29uZmlnIHVwZGF0ZWQgZm9yICR7c3VibW9kdWxlcy5sZW5ndGh9IHN1Ym1vZHVsZXM6IGAsIHN1Ym1vZHVsZXMubWFwKGEgPT4gYS5zdWJtb2R1bGUubmFtZSkpO1xuICAgIGFkZGVkVXNlcklkSG9vayA9IHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgdXBkYXRlIHRoZSBpZFByaW9yaXR5IGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgY29uZmlndXJhdGlvblxuICogQHBhcmFtIHtPYmplY3R9IGlkUHJpb3JpdHlDb25maWdcbiAqIEBwYXJhbSB7U3VibW9kdWxlQ29udGFpbmVyW119IHN1Ym1vZHVsZXNcbiAqL1xuZnVuY3Rpb24gdXBkYXRlSWRQcmlvcml0eShpZFByaW9yaXR5Q29uZmlnLCBzdWJtb2R1bGVzKSB7XG4gIGlmIChpZFByaW9yaXR5Q29uZmlnKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgY29uc3QgYWxpYXNUb05hbWUgPSBuZXcgTWFwKHN1Ym1vZHVsZXMubWFwKHMgPT4gcy5zdWJtb2R1bGUuYWxpYXNOYW1lID8gW3Muc3VibW9kdWxlLmFsaWFzTmFtZSwgcy5zdWJtb2R1bGUubmFtZV0gOiBbXSkpO1xuICAgIE9iamVjdC5rZXlzKGlkUHJpb3JpdHlDb25maWcpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IHByaW9yaXR5ID0gaXNBcnJheShpZFByaW9yaXR5Q29uZmlnW2tleV0pID8gWy4uLmlkUHJpb3JpdHlDb25maWdba2V5XV0ucmV2ZXJzZSgpIDogW11cbiAgICAgIHJlc3VsdFtrZXldID0gcHJpb3JpdHkubWFwKHMgPT4gYWxpYXNUb05hbWUuaGFzKHMpID8gYWxpYXNUb05hbWUuZ2V0KHMpIDogcyk7XG4gICAgfSk7XG4gICAgaWRQcmlvcml0eSA9IHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICBpZFByaW9yaXR5ID0ge307XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3REYXRhRGVsZXRpb24obmV4dCwgLi4uYXJncykge1xuICBsb2dJbmZvKCdVc2VySUQ6IHJlY2VpdmVkIGRhdGEgZGVsZXRpb24gcmVxdWVzdDsgZGVsZXRpbmcgYWxsIHN0b3JlZCBJRHMuLi4nKVxuICBzdWJtb2R1bGVzLmZvckVhY2goc3VibW9kdWxlID0+IHtcbiAgICBpZiAodHlwZW9mIHN1Ym1vZHVsZS5zdWJtb2R1bGUub25EYXRhRGVsZXRpb25SZXF1ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzdWJtb2R1bGUuc3VibW9kdWxlLm9uRGF0YURlbGV0aW9uUmVxdWVzdChzdWJtb2R1bGUuY29uZmlnLCBzdWJtb2R1bGUuaWRPYmosIC4uLmFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2dFcnJvcihgRXJyb3IgY2FsbGluZyBvbkRhdGFEZWxldGlvblJlcXVlc3QgZm9yIElEIHN1Ym1vZHVsZSAke3N1Ym1vZHVsZS5zdWJtb2R1bGUubmFtZX1gLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZGVsZXRlU3RvcmVkVmFsdWUoc3VibW9kdWxlKTtcbiAgfSlcbiAgbmV4dC5hcHBseSh0aGlzLCBhcmdzKTtcbn1cblxuLyoqXG4gKiBlbmFibGUgc3VibW9kdWxlIGluIFVzZXIgSURcbiAqIEBwYXJhbSB7U3VibW9kdWxlfSBzdWJtb2R1bGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaElkU3lzdGVtKHN1Ym1vZHVsZSkge1xuICBpZiAoIWZpbmQoc3VibW9kdWxlUmVnaXN0cnksIGkgPT4gaS5uYW1lID09PSBzdWJtb2R1bGUubmFtZSkpIHtcbiAgICBzdWJtb2R1bGVSZWdpc3RyeS5wdXNoKHN1Ym1vZHVsZSk7XG4gICAgR0RQUl9HVkxJRFMucmVnaXN0ZXIoTU9EVUxFX1RZUEVfVUlELCBzdWJtb2R1bGUubmFtZSwgc3VibW9kdWxlLmd2bGlkKVxuICAgIHVwZGF0ZVN1Ym1vZHVsZXMoKTtcbiAgICAvLyBUT0RPOiBhIHRlc3QgY2FzZSB3YW50cyB0aGlzIHRvIHdvcmsgZXZlbiBpZiBjYWxsZWQgYWZ0ZXIgaW5pdCAodGhlIHNldENvbmZpZyh7dXNlcklkfSkpXG4gICAgLy8gc28gd2UgdHJpZ2dlciBhIHJlZnJlc2guIEJ1dCBpcyB0aGF0IGV2ZW4gcG9zc2libGUgb3V0c2lkZSBvZiB0ZXN0cz9cbiAgICBpbml0SWRTeXN0ZW0oe3JlZnJlc2g6IHRydWUsIHN1Ym1vZHVsZU5hbWVzOiBbc3VibW9kdWxlLm5hbWVdfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplUHJvbWlzZShmbikge1xuICAvLyBmb3IgcHVibGljIG1ldGhvZHMgdGhhdCByZXR1cm4gcHJvbWlzZXMsIG1ha2Ugc3VyZSB3ZSByZXR1cm4gYSBcIm5vcm1hbFwiIG9uZSAtIHRvIGF2b2lkXG4gIC8vIGV4cG9zaW5nIGNvbmZ1c2luZyBzdGFjayB0cmFjZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cbn1cblxuLyoqXG4gKiB0ZXN0IGJyb3dzZXIgc3VwcG9ydCBmb3Igc3RvcmFnZSBjb25maWcgdHlwZXMgKGxvY2FsIHN0b3JhZ2Ugb3IgY29va2llKSwgaW5pdGlhbGl6ZXMgc3VibW9kdWxlcyBidXQgY29uc2VudE1hbmFnZW1lbnQgaXMgcmVxdWlyZWQsXG4gKiBzbyBhIGNhbGxiYWNrIGlzIGFkZGVkIHRvIGZpcmUgYWZ0ZXIgdGhlIGNvbnNlbnRNYW5hZ2VtZW50IG1vZHVsZS5cbiAqIEBwYXJhbSB7e2dldENvbmZpZzpmdW5jdGlvbn19IGNvbmZpZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdChjb25maWcsIHtkZWxheSA9IEdyZWVkeVByb21pc2UudGltZW91dH0gPSB7fSkge1xuICBwcGlkU291cmNlID0gdW5kZWZpbmVkO1xuICBzdWJtb2R1bGVzID0gW107XG4gIGNvbmZpZ1JlZ2lzdHJ5ID0gW107XG4gIGFkZGVkVXNlcklkSG9vayA9IGZhbHNlO1xuICBpbml0aWFsaXplZFN1Ym1vZHVsZXMgPSBbXTtcbiAgaW5pdElkU3lzdGVtID0gaWRTeXN0ZW1Jbml0aWFsaXplcih7ZGVsYXl9KTtcbiAgaWYgKGNvbmZpZ0xpc3RlbmVyICE9IG51bGwpIHtcbiAgICBjb25maWdMaXN0ZW5lcigpO1xuICB9XG4gIHN1Ym1vZHVsZVJlZ2lzdHJ5ID0gW107XG5cbiAgLy8gbGlzdGVuIGZvciBjb25maWcgdXNlclN5bmNzIHRvIGJlIHNldFxuICBjb25maWdMaXN0ZW5lciA9IGNvbmZpZy5nZXRDb25maWcoJ3VzZXJTeW5jJywgY29uZiA9PiB7XG4gICAgLy8gTm90ZTogc3VwcG9ydCBmb3IgJ3VzZXJzeW5jJyB3YXMgZHJvcHBlZCBhcyBwYXJ0IG9mIFByZWJpZC5qcyA0LjBcbiAgICBjb25zdCB1c2VyU3luYyA9IGNvbmYudXNlclN5bmM7XG4gICAgaWYgKHVzZXJTeW5jKSB7XG4gICAgICBwcGlkU291cmNlID0gdXNlclN5bmMucHBpZDtcbiAgICAgIGlmICh1c2VyU3luYy51c2VySWRzKSB7XG4gICAgICAgIGNvbmZpZ1JlZ2lzdHJ5ID0gdXNlclN5bmMudXNlcklkcztcbiAgICAgICAgc3luY0RlbGF5ID0gaXNOdW1iZXIodXNlclN5bmMuc3luY0RlbGF5KSA/IHVzZXJTeW5jLnN5bmNEZWxheSA6IERFRkFVTFRfU1lOQ19ERUxBWTtcbiAgICAgICAgYXVjdGlvbkRlbGF5ID0gaXNOdW1iZXIodXNlclN5bmMuYXVjdGlvbkRlbGF5KSA/IHVzZXJTeW5jLmF1Y3Rpb25EZWxheSA6IE5PX0FVQ1RJT05fREVMQVk7XG4gICAgICAgIHVwZGF0ZVN1Ym1vZHVsZXMoKTtcbiAgICAgICAgdXBkYXRlSWRQcmlvcml0eSh1c2VyU3luYy5pZFByaW9yaXR5LCBzdWJtb2R1bGVzKTtcbiAgICAgICAgaW5pdElkU3lzdGVtKHtyZWFkeTogdHJ1ZX0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gZXhwb3NpbmcgZ2V0VXNlcklkcyBmdW5jdGlvbiBpbiBnbG9iYWwtbmFtZS1zcGFjZSBzbyB0aGF0IHVzZXJJZHMgc3RvcmVkIGluIFByZWJpZCBjYW4gYmUgdXNlZCBieSBleHRlcm5hbCBjb2Rlcy5cbiAgKGdldEdsb2JhbCgpKS5nZXRVc2VySWRzID0gZ2V0VXNlcklkcztcbiAgKGdldEdsb2JhbCgpKS5nZXRVc2VySWRzQXNFaWRzID0gZ2V0VXNlcklkc0FzRWlkcztcbiAgKGdldEdsb2JhbCgpKS5nZXRFbmNyeXB0ZWRFaWRzRm9yU291cmNlID0gbm9ybWFsaXplUHJvbWlzZShnZXRFbmNyeXB0ZWRFaWRzRm9yU291cmNlKTtcbiAgKGdldEdsb2JhbCgpKS5yZWdpc3RlclNpZ25hbFNvdXJjZXMgPSByZWdpc3RlclNpZ25hbFNvdXJjZXM7XG4gIChnZXRHbG9iYWwoKSkucmVmcmVzaFVzZXJJZHMgPSBub3JtYWxpemVQcm9taXNlKHJlZnJlc2hVc2VySWRzKTtcbiAgKGdldEdsb2JhbCgpKS5nZXRVc2VySWRzQXN5bmMgPSBub3JtYWxpemVQcm9taXNlKGdldFVzZXJJZHNBc3luYyk7XG4gIChnZXRHbG9iYWwoKSkuZ2V0VXNlcklkc0FzRWlkQnlTb3VyY2UgPSBnZXRVc2VySWRzQXNFaWRCeVNvdXJjZTtcbn1cblxuLy8gaW5pdCBjb25maWcgdXBkYXRlIGxpc3RlbmVyIHRvIHN0YXJ0IHRoZSBhcHBsaWNhdGlvblxuaW5pdChjb25maWcpO1xuXG5tb2R1bGUoJ3VzZXJJZCcsIGF0dGFjaElkU3lzdGVtKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldE9ydGJVc2VyRXh0RWlkcyhvcnRiUmVxdWVzdCwgYmlkZGVyUmVxdWVzdCwgY29udGV4dCkge1xuICBjb25zdCBlaWRzID0gZGVlcEFjY2Vzcyhjb250ZXh0LCAnYmlkUmVxdWVzdHMuMC51c2VySWRBc0VpZHMnKTtcbiAgaWYgKGVpZHMgJiYgT2JqZWN0LmtleXMoZWlkcykubGVuZ3RoID4gMCkge1xuICAgIGRlZXBTZXRWYWx1ZShvcnRiUmVxdWVzdCwgJ3VzZXIuZXh0LmVpZHMnLCBlaWRzKTtcbiAgfVxufVxucmVnaXN0ZXJPcnRiUHJvY2Vzc29yKHt0eXBlOiBSRVFVRVNULCBuYW1lOiAndXNlckV4dEVpZHMnLCBmbjogc2V0T3J0YlVzZXJFeHRFaWRzfSk7XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGFkZHMgU2hhcmVkSWQgdG8gdGhlIFVzZXIgSUQgbW9kdWxlXG4gKiBUaGUge0BsaW5rIG1vZHVsZTptb2R1bGVzL3VzZXJJZH0gbW9kdWxlIGlzIHJlcXVpcmVkXG4gKiBAbW9kdWxlIG1vZHVsZXMvc2hhcmVkSWRTeXN0ZW1cbiAqIEByZXF1aXJlcyBtb2R1bGU6bW9kdWxlcy91c2VySWRcbiAqL1xuXG5pbXBvcnQge3BhcnNlVXJsLCBidWlsZFVybCwgdHJpZ2dlclBpeGVsLCBsb2dJbmZvLCBoYXNEZXZpY2VBY2Nlc3MsIGdlbmVyYXRlVVVJRH0gZnJvbSAnLi4vc3JjL3V0aWxzLmpzJztcbmltcG9ydCB7c3VibW9kdWxlfSBmcm9tICcuLi9zcmMvaG9vay5qcyc7XG5pbXBvcnQge2NvcHBhRGF0YUhhbmRsZXJ9IGZyb20gJy4uL3NyYy9hZGFwdGVyTWFuYWdlci5qcyc7XG5pbXBvcnQge2dldFN0b3JhZ2VNYW5hZ2VyfSBmcm9tICcuLi9zcmMvc3RvcmFnZU1hbmFnZXIuanMnO1xuaW1wb3J0IHtWRU5ET1JMRVNTX0dWTElEfSBmcm9tICcuLi9zcmMvY29uc2VudEhhbmRsZXIuanMnO1xuaW1wb3J0IHtNT0RVTEVfVFlQRV9VSUR9IGZyb20gJy4uL3NyYy9hY3Rpdml0aWVzL21vZHVsZXMuanMnO1xuaW1wb3J0IHtkb21haW5PdmVycmlkZVRvUm9vdERvbWFpbn0gZnJvbSAnLi4vbGlicmFyaWVzL2RvbWFpbk92ZXJyaWRlVG9Sb290RG9tYWluL2luZGV4LmpzJztcblxuZXhwb3J0IGNvbnN0IHN0b3JhZ2UgPSBnZXRTdG9yYWdlTWFuYWdlcih7bW9kdWxlVHlwZTogTU9EVUxFX1RZUEVfVUlELCBtb2R1bGVOYW1lOiAnc2hhcmVkSWQnfSk7XG5jb25zdCBDT09LSUUgPSAnY29va2llJztcbmNvbnN0IExPQ0FMX1NUT1JBR0UgPSAnaHRtbDUnO1xuY29uc3QgT1BUT1VUX05BTUUgPSAnX3B1YmNpZF9vcHRvdXQnO1xuY29uc3QgUFVCX0NPTU1PTl9JRCA9ICdQdWJsaXNoZXJDb21tb25JZCc7XG5cbi8qKlxuICogUmVhZCBhIHZhbHVlIGVpdGhlciBmcm9tIGNvb2tpZSBvciBsb2NhbCBzdG9yYWdlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBpdGVtXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBzdG9yYWdlIHR5cGUgb3ZlcnJpZGVcbiAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gYSBzdHJpbmcgaWYgaXRlbSBleGlzdHNcbiAqL1xuZnVuY3Rpb24gcmVhZFZhbHVlKG5hbWUsIHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09IENPT0tJRSkge1xuICAgIHJldHVybiBzdG9yYWdlLmdldENvb2tpZShuYW1lKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBMT0NBTF9TVE9SQUdFKSB7XG4gICAgaWYgKHN0b3JhZ2UuaGFzTG9jYWxTdG9yYWdlKCkpIHtcbiAgICAgIGNvbnN0IGV4cFZhbHVlID0gc3RvcmFnZS5nZXREYXRhRnJvbUxvY2FsU3RvcmFnZShgJHtuYW1lfV9leHBgKTtcbiAgICAgIGlmICghZXhwVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHN0b3JhZ2UuZ2V0RGF0YUZyb21Mb2NhbFN0b3JhZ2UobmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKChuZXcgRGF0ZShleHBWYWx1ZSkpLmdldFRpbWUoKSAtIERhdGUubm93KCkgPiAwKSB7XG4gICAgICAgIHJldHVybiBzdG9yYWdlLmdldERhdGFGcm9tTG9jYWxTdG9yYWdlKG5hbWUpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldElkQ2FsbGJhY2socHViY2lkLCBwaXhlbFVybCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrLCBnZXRTdG9yZWRJZCkge1xuICAgIGlmIChwaXhlbFVybCkge1xuICAgICAgcXVldWVQaXhlbENhbGxiYWNrKHBpeGVsVXJsLCBwdWJjaWQsICgpID0+IHtcbiAgICAgICAgY2FsbGJhY2soZ2V0U3RvcmVkSWQoKSB8fCBwdWJjaWQpO1xuICAgICAgfSkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2socHViY2lkKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcXVldWVQaXhlbENhbGxiYWNrKHBpeGVsVXJsLCBpZCA9ICcnLCBjYWxsYmFjaykge1xuICBpZiAoIXBpeGVsVXJsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVXNlIHB1YmNpZCBhcyBhIGNhY2hlIGJ1c3RlclxuICBjb25zdCB1cmxJbmZvID0gcGFyc2VVcmwocGl4ZWxVcmwpO1xuICB1cmxJbmZvLnNlYXJjaC5pZCA9IGVuY29kZVVSSUNvbXBvbmVudCgncHViY2lkOicgKyBpZCk7XG4gIGNvbnN0IHRhcmdldFVybCA9IGJ1aWxkVXJsKHVybEluZm8pO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdHJpZ2dlclBpeGVsKHRhcmdldFVybCwgY2FsbGJhY2spO1xuICB9O1xufVxuXG5mdW5jdGlvbiBoYXNPcHRlZE91dCgpIHtcbiAgcmV0dXJuICEhKChzdG9yYWdlLmNvb2tpZXNBcmVFbmFibGVkKCkgJiYgcmVhZFZhbHVlKE9QVE9VVF9OQU1FLCBDT09LSUUpKSB8fFxuICAgIChzdG9yYWdlLmhhc0xvY2FsU3RvcmFnZSgpICYmIHJlYWRWYWx1ZShPUFRPVVRfTkFNRSwgTE9DQUxfU1RPUkFHRSkpKTtcbn1cblxuZXhwb3J0IGNvbnN0IHNoYXJlZElkU3lzdGVtU3VibW9kdWxlID0ge1xuICAvKipcbiAgICogdXNlZCB0byBsaW5rIHN1Ym1vZHVsZSB3aXRoIGNvbmZpZ1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgbmFtZTogJ3NoYXJlZElkJyxcbiAgYWxpYXNOYW1lOiAncHViQ29tbW9uSWQnLFxuICBndmxpZDogVkVORE9STEVTU19HVkxJRCxcblxuICAvKipcbiAgICogZGVjb2RlIHRoZSBzdG9yZWQgaWQgdmFsdWUgZm9yIHBhc3NpbmcgdG8gYmlkIHJlcXVlc3RzXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogQHBhcmFtIHtTdWJtb2R1bGVDb25maWd9IGNvbmZpZ1xuICAgKiBAcmV0dXJucyB7e3B1YmNpZDpzdHJpbmd9fVxuICAgKi9cbiAgZGVjb2RlKHZhbHVlLCBjb25maWcpIHtcbiAgICBpZiAoaGFzT3B0ZWRPdXQoKSkge1xuICAgICAgbG9nSW5mbygnUHViQ29tbW9uSWQgZGVjb2RlOiBIYXMgb3B0ZWQtb3V0Jyk7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBsb2dJbmZvKCcgRGVjb2RlZCB2YWx1ZSBQdWJDb21tb25JZCAnICsgdmFsdWUpO1xuICAgIGNvbnN0IGlkT2JqID0geydwdWJjaWQnOiB2YWx1ZX07XG4gICAgcmV0dXJuIGlkT2JqO1xuICB9LFxuICAvKipcbiAgICogcGVyZm9ybXMgYWN0aW9uIHRvIG9idGFpbiBpZFxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdWJtb2R1bGVDb25maWd9IFtjb25maWddIENvbmZpZyBvYmplY3Qgd2l0aCBwYXJhbXMgYW5kIHN0b3JhZ2UgcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge09iamVjdH0gY29uc2VudERhdGFcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0b3JlZElkIEV4aXN0aW5nIHB1YmNvbW1vbiBpZFxuICAgKiBAcmV0dXJucyB7SWRSZXNwb25zZX1cbiAgICovXG4gIGdldElkOiBmdW5jdGlvbiAoY29uZmlnID0ge30sIGNvbnNlbnREYXRhLCBzdG9yZWRJZCkge1xuICAgIGlmIChoYXNPcHRlZE91dCgpKSB7XG4gICAgICBsb2dJbmZvKCdQdWJDb21tb25JZDogSGFzIG9wdGVkLW91dCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjb3BwYSA9IGNvcHBhRGF0YUhhbmRsZXIuZ2V0Q29wcGEoKTtcblxuICAgIGlmIChjb3BwYSkge1xuICAgICAgbG9nSW5mbygnUHViQ29tbW9uSWQ6IElEcyBub3QgcHJvdmlkZWQgZm9yIGNvcHBhIHJlcXVlc3RzLCBleGl0aW5nIFB1YkNvbW1vbklkJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHtwYXJhbXM6IHtjcmVhdGUgPSB0cnVlLCBwaXhlbFVybH0gPSB7fX0gPSBjb25maWc7XG4gICAgbGV0IG5ld0lkID0gc3RvcmVkSWQ7XG4gICAgaWYgKCFuZXdJZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3dbUFVCX0NPTU1PTl9JRF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIHBhZ2UgaW5jbHVkZXMgaXRzIG93biBwdWJjaWQgbW9kdWxlLCB0aGVuIHNhdmUgYSBjb3B5IG9mIGlkLlxuICAgICAgICAgIG5ld0lkID0gd2luZG93W1BVQl9DT01NT05fSURdLmdldElkKCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIH1cblxuICAgICAgaWYgKCFuZXdJZCkgbmV3SWQgPSAoY3JlYXRlICYmIGhhc0RldmljZUFjY2VzcygpKSA/IGdlbmVyYXRlVVVJRCgpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiB7aWQ6IG5ld0lkLCBjYWxsYmFjazogZ2V0SWRDYWxsYmFjayhuZXdJZCwgcGl4ZWxVcmwpfTtcbiAgfSxcbiAgLyoqXG4gICAqIHBlcmZvcm1zIGFjdGlvbiB0byBleHRlbmQgYW4gaWQuICBUaGVyZSBhcmUgZ2VuZXJhbGx5IHR3byB3YXlzIHRvIGV4dGVuZCB0aGUgZXhwaXJhdGlvbiB0aW1lXG4gICAqIG9mIHN0b3JlZCBpZDogdXNpbmcgcGl4ZWxVcmwgb3IgcmV0dXJuIHRoZSBpZCBhbmQgbGV0IG1haW4gdXNlciBpZCBtb2R1bGUgd3JpdGUgaXQgYWdhaW4gd2l0aFxuICAgKiB0aGUgbmV3IGV4cGlyYXRpb24gdGltZS5cbiAgICpcbiAgICogUGl4ZWxVcmwsIGlmIGRlZmluZWQsIHNob3VsZCBwb2ludCBiYWNrIHRvIGEgZmlyc3QgcGFydHkgZG9tYWluIGVuZHBvaW50LiAgT24gdGhlIHNlcnZlclxuICAgKiBzaWRlLCB0aGVyZSBpcyBlaXRoZXIgYSBwbHVnaW4sIG9yIGN1c3RvbWl6ZWQgbG9naWMgdG8gcmVhZCBhbmQgd3JpdGUgYmFjayB0aGUgcHViY2lkIGNvb2tpZS5cbiAgICogVGhlIGV4dGVuZElkIGZ1bmN0aW9uIGl0c2VsZiBzaG91bGQgcmV0dXJuIG9ubHkgdGhlIGNhbGxiYWNrLCBhbmQgbm90IHRoZSBpZCBpdHNlbGYgdG8gYXZvaWRcbiAgICogaGF2aW5nIHRoZSBzY3JpcHQtc2lkZSBvdmVyd3JpdGluZyBzZXJ2ZXItc2lkZS4gIFRoaXMgYXBwbGllcyB0byBib3RoIHB1YmNpZCBhbmQgc2hhcmVkaWQuXG4gICAqXG4gICAqIE9uIHRoZSBvdGhlciBoYW5kLCBpZiB0aGVyZSBpcyBubyBwaXhlbFVybCwgdGhlbiB0aGUgZXh0ZW5kSWQgc2hvdWxkIHJldHVybiBzdG9yZWRJZCBzbyB0aGF0XG4gICAqIGl0cyBleHBpcmF0aW9uIHRpbWUgaXMgdXBkYXRlZC5cbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3VibW9kdWxlUGFyYW1zfSBbY29uZmlnXVxuICAgKiBAcGFyYW0ge0NvbnNlbnREYXRhfHVuZGVmaW5lZH0gY29uc2VudERhdGFcbiAgICogQHBhcmFtIHtPYmplY3R9IHN0b3JlZElkIGV4aXN0aW5nIGlkXG4gICAqIEByZXR1cm5zIHtJZFJlc3BvbnNlfHVuZGVmaW5lZH1cbiAgICovXG4gIGV4dGVuZElkOiBmdW5jdGlvbihjb25maWcgPSB7fSwgY29uc2VudERhdGEsIHN0b3JlZElkKSB7XG4gICAgaWYgKGhhc09wdGVkT3V0KCkpIHtcbiAgICAgIGxvZ0luZm8oJ1B1YkNvbW1vbklkOiBIYXMgb3B0ZWQtb3V0Jyk7XG4gICAgICByZXR1cm4ge2lkOiB1bmRlZmluZWR9O1xuICAgIH1cbiAgICBjb25zdCBjb3BwYSA9IGNvcHBhRGF0YUhhbmRsZXIuZ2V0Q29wcGEoKTtcbiAgICBpZiAoY29wcGEpIHtcbiAgICAgIGxvZ0luZm8oJ1B1YkNvbW1vbklkOiBJRHMgbm90IHByb3ZpZGVkIGZvciBjb3BwYSByZXF1ZXN0cywgZXhpdGluZyBQdWJDb21tb25JZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7cGFyYW1zOiB7ZXh0ZW5kID0gZmFsc2UsIHBpeGVsVXJsfSA9IHt9fSA9IGNvbmZpZztcblxuICAgIGlmIChleHRlbmQpIHtcbiAgICAgIGlmIChwaXhlbFVybCkge1xuICAgICAgICBjb25zdCBjYWxsYmFjayA9IHF1ZXVlUGl4ZWxDYWxsYmFjayhwaXhlbFVybCwgc3RvcmVkSWQpO1xuICAgICAgICByZXR1cm4ge2NhbGxiYWNrOiBjYWxsYmFja307XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge2lkOiBzdG9yZWRJZH07XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRvbWFpbk92ZXJyaWRlOiBkb21haW5PdmVycmlkZVRvUm9vdERvbWFpbihzdG9yYWdlLCAnc2hhcmVkSWQnKSxcbiAgZWlkczoge1xuICAgICdwdWJjaWQnOiB7XG4gICAgICBzb3VyY2U6ICdwdWJjaWQub3JnJyxcbiAgICAgIGF0eXBlOiAxXG4gICAgfSxcbiAgfVxufTtcblxuc3VibW9kdWxlKCd1c2VySWQnLCBzaGFyZWRJZFN5c3RlbVN1Ym1vZHVsZSk7XG4iLCIvKipcbiAqIENyZWF0ZSBhIGRvbWFpbk92ZXJyaWRlIGNhbGxiYWNrIGZvciBhbiBJRCBtb2R1bGUsIGNsb3Npbmcgb3ZlclxuICogYW4gaW5zdGFuY2Ugb2YgU3RvcmFnZU1hbmFnZXIuXG4gKlxuICogVGhlIGRvbWFpbk92ZXJyaWRlIGZ1bmN0aW9uLCBnaXZlbiBkb2N1bWVudC5kb21haW4sIHdpbGwgcmV0dXJuXG4gKiB0aGUgdG9wbW9zdCBkb21haW4gd2UgYXJlIGFibGUgdG8gc2V0IGEgY29va2llIG9uLiBGb3IgZXhhbXBsZSxcbiAqIGdpdmVuIHN1YmRvbWFpbi5leGFtcGxlLmNvbSwgaXQgd291bGQgcmV0dXJuIGV4YW1wbGUuY29tLlxuICpcbiAqIEBwYXJhbSB7U3RvcmFnZU1hbmFnZXJ9IHN0b3JhZ2UgZS5nLiBmcm9tIGdldFN0b3JhZ2VNYW5hZ2VyKClcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lIHRoZSBuYW1lIG9mIHRoZSBtb2R1bGUgdXNpbmcgdGhpcyBmdW5jdGlvblxuICogQHJldHVybnMge2Z1bmN0aW9uKCk6IHN0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvbWFpbk92ZXJyaWRlVG9Sb290RG9tYWluKHN0b3JhZ2UsIG1vZHVsZU5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGRvbWFpbkVsZW1lbnRzID0gZG9jdW1lbnQuZG9tYWluLnNwbGl0KCcuJyk7XG4gICAgY29uc3QgY29va2llTmFtZSA9IGBfZ2Qke0RhdGUubm93KCl9XyR7bW9kdWxlTmFtZX1gO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIHRvcERvbWFpbiwgdGVzdENvb2tpZTsgaSA8IGRvbWFpbkVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBuZXh0RG9tYWluID0gZG9tYWluRWxlbWVudHMuc2xpY2UoaSkuam9pbignLicpO1xuXG4gICAgICAvLyB3cml0ZSB0ZXN0IGNvb2tpZVxuICAgICAgc3RvcmFnZS5zZXRDb29raWUoY29va2llTmFtZSwgJzEnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbmV4dERvbWFpbik7XG5cbiAgICAgIC8vIHJlYWQgdGVzdCBjb29raWUgdG8gdmVyaWZ5IGRvbWFpbiB3YXMgdmFsaWRcbiAgICAgIHRlc3RDb29raWUgPSBzdG9yYWdlLmdldENvb2tpZShjb29raWVOYW1lKTtcblxuICAgICAgLy8gZGVsZXRlIHRlc3QgY29va2llXG4gICAgICBzdG9yYWdlLnNldENvb2tpZShjb29raWVOYW1lLCAnJywgJ1RodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDEgR01UJywgdW5kZWZpbmVkLCBuZXh0RG9tYWluKTtcblxuICAgICAgaWYgKHRlc3RDb29raWUgPT09ICcxJykge1xuICAgICAgICAvLyBjb29raWUgd2FzIHdyaXR0ZW4gc3VjY2Vzc2Z1bGx5IHVzaW5nIHRlc3QgZG9tYWluIHNvIHRoZSB0b3BEb21haW4gaXMgdXBkYXRlZFxuICAgICAgICB0b3BEb21haW4gPSBuZXh0RG9tYWluO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29va2llIGZhaWxlZCB0byB3cml0ZSB1c2luZyB0ZXN0IGRvbWFpbiBzbyBleGl0IGJ5IHJldHVybmluZyB0aGUgdG9wRG9tYWluXG4gICAgICAgIHJldHVybiB0b3BEb21haW47XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGFkZHMgQWRyaXZlcklkIHRvIHRoZSBVc2VyIElEIG1vZHVsZVxuICogVGhlIHtAbGluayBtb2R1bGU6bW9kdWxlcy91c2VySWR9IG1vZHVsZSBpcyByZXF1aXJlZFxuICogQG1vZHVsZSBtb2R1bGVzL2Fkcml2ZXJJZFN1Ym1vZHVsZVxuICogQHJlcXVpcmVzIG1vZHVsZTptb2R1bGVzL3VzZXJJZFxuICovXG5cbmltcG9ydCB7IGxvZ0Vycm9yLCBpc1BsYWluT2JqZWN0IH0gZnJvbSAnLi4vc3JjL3V0aWxzLmpzJ1xuaW1wb3J0IHsgYWpheCB9IGZyb20gJy4uL3NyYy9hamF4LmpzJztcbmltcG9ydCB7IHN1Ym1vZHVsZSB9IGZyb20gJy4uL3NyYy9ob29rLmpzJztcbmltcG9ydCB7Z2V0U3RvcmFnZU1hbmFnZXJ9IGZyb20gJy4uL3NyYy9zdG9yYWdlTWFuYWdlci5qcyc7XG5pbXBvcnQge01PRFVMRV9UWVBFX1VJRH0gZnJvbSAnLi4vc3JjL2FjdGl2aXRpZXMvbW9kdWxlcy5qcyc7XG5cbmNvbnN0IE1PRFVMRV9OQU1FID0gJ2Fkcml2ZXJJZCc7XG5cbmV4cG9ydCBjb25zdCBzdG9yYWdlID0gZ2V0U3RvcmFnZU1hbmFnZXIoe21vZHVsZVR5cGU6IE1PRFVMRV9UWVBFX1VJRCwgbW9kdWxlTmFtZTogTU9EVUxFX05BTUV9KTtcblxuLyoqIEB0eXBlIHtTdWJtb2R1bGV9ICovXG5leHBvcnQgY29uc3QgYWRyaXZlcklkU3VibW9kdWxlID0ge1xuICAvKipcbiAgICogdXNlZCB0byBsaW5rIHN1Ym1vZHVsZSB3aXRoIGNvbmZpZ1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgbmFtZTogTU9EVUxFX05BTUUsXG4gIC8qKlxuICAgKiBkZWNvZGUgdGhlIHN0b3JlZCBpZCB2YWx1ZSBmb3IgcGFzc2luZyB0byBiaWQgcmVxdWVzdHNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiBAcmV0dXJucyB7e2Fkcml2ZXJJZDpzdHJpbmd9fVxuICAgKi9cbiAgZGVjb2RlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHsgYWRyY2lkOiB2YWx1ZSB9XG4gIH0sXG4gIC8qKlxuICAgKiBwZXJmb3JtcyBhY3Rpb24gdG8gb2J0YWluIGlkIGFuZCByZXR1cm4gYSB2YWx1ZSBpbiB0aGUgY2FsbGJhY2sncyByZXNwb25zZSBhcmd1bWVudFxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdWJtb2R1bGVDb25maWd9IFtjb25maWddXG4gICAqIEBwYXJhbSB7Q29uc2VudERhdGF9IFtjb25zZW50RGF0YV1cbiAgICogQHJldHVybnMge0lkUmVzcG9uc2V8dW5kZWZpbmVkfVxuICAgKi9cbiAgZ2V0SWQoY29uZmlnKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGNvbmZpZy5wYXJhbXMpKSB7XG4gICAgICBjb25maWcucGFyYW1zID0ge307XG4gICAgfVxuICAgIGNvbnN0IHVybCA9ICdodHRwczovL2FkLmFkcml2ZXIucnUvY2dpLWJpbi9qc29uLmNnaT9zaWQ9MSZhZD03MTk0NzMmYnQ9NTUmcGlkPTMxOTg2ODAmYmlkPTcxODkxNjUmYm49NzE4OTE2NSZ0dWlkPTEmY2ZhPTEnO1xuICAgIGNvbnN0IHJlc3AgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIGxldCBjcmVhdGlvbkRhdGUgPSBzdG9yYWdlLmdldERhdGFGcm9tTG9jYWxTdG9yYWdlKCdhZHJjaWRfY2QnKSB8fCBzdG9yYWdlLmdldENvb2tpZSgnYWRyY2lkX2NkJyk7XG4gICAgICBsZXQgY29va2llID0gc3RvcmFnZS5nZXREYXRhRnJvbUxvY2FsU3RvcmFnZSgnYWRyY2lkJykgfHwgc3RvcmFnZS5nZXRDb29raWUoJ2FkcmNpZCcpO1xuXG4gICAgICBpZiAoY29va2llICYmIGNyZWF0aW9uRGF0ZSAmJiAoKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gY3JlYXRpb25EYXRlKSA8IDg2NDAwMDAwKSkge1xuICAgICAgICBjb25zdCByZXNwb25zZU9iaiA9IGNvb2tpZTtcbiAgICAgICAgY2FsbGJhY2socmVzcG9uc2VPYmopO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0ge1xuICAgICAgICAgIHN1Y2Nlc3M6IHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGxldCByZXNwb25zZU9iajtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlT2JqID0gSlNPTi5wYXJzZShyZXNwb25zZSkuYWRyY2lkO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ0Vycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsZXQgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgbm93LnNldFRpbWUobm93LmdldFRpbWUoKSArIDg2NDAwICogMTgyNSAqIDEwMDApO1xuICAgICAgICAgICAgICBzdG9yYWdlLnNldENvb2tpZSgnYWRyY2lkJywgcmVzcG9uc2VPYmosIG5vdy50b1VUQ1N0cmluZygpLCAnTGF4Jyk7XG4gICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0RGF0YUluTG9jYWxTdG9yYWdlKCdhZHJjaWQnLCByZXNwb25zZU9iaik7XG4gICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0Q29va2llKCdhZHJjaWRfY2QnLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSwgbm93LnRvVVRDU3RyaW5nKCksICdMYXgnKTtcbiAgICAgICAgICAgICAgc3RvcmFnZS5zZXREYXRhSW5Mb2NhbFN0b3JhZ2UoJ2FkcmNpZF9jZCcsIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlT2JqKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBlcnJvciA9PiB7XG4gICAgICAgICAgICBsb2dFcnJvcihgJHtNT0RVTEVfTkFNRX06IElEIGZldGNoIGVuY291bnRlcmVkIGFuIGVycm9yYCwgZXJyb3IpO1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGxldCBuZXdVcmwgPSB1cmwgKyAnJmNpZD0nICsgKHN0b3JhZ2UuZ2V0RGF0YUZyb21Mb2NhbFN0b3JhZ2UoJ2FkcmNpZCcpIHx8IHN0b3JhZ2UuZ2V0Q29va2llKCdhZHJjaWQnKSk7XG4gICAgICAgIGFqYXgobmV3VXJsLCBjYWxsYmFja3MsIHVuZGVmaW5lZCwge21ldGhvZDogJ0dFVCd9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7Y2FsbGJhY2s6IHJlc3B9O1xuICB9XG59O1xuXG5zdWJtb2R1bGUoJ3VzZXJJZCcsIGFkcml2ZXJJZFN1Ym1vZHVsZSk7XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGFkZHMgUEFJUiBJZCB0byB0aGUgVXNlciBJRCBtb2R1bGVcbiAqIFRoZSB7QGxpbmsgbW9kdWxlOm1vZHVsZXMvdXNlcklkfSBtb2R1bGUgaXMgcmVxdWlyZWRcbiAqIEBtb2R1bGUgbW9kdWxlcy9wYWlySWRTeXN0ZW1cbiAqIEByZXF1aXJlcyBtb2R1bGU6bW9kdWxlcy91c2VySWRcbiAqL1xuXG5pbXBvcnQgeyBzdWJtb2R1bGUgfSBmcm9tICcuLi9zcmMvaG9vay5qcyc7XG5pbXBvcnQge2dldFN0b3JhZ2VNYW5hZ2VyfSBmcm9tICcuLi9zcmMvc3RvcmFnZU1hbmFnZXIuanMnXG5pbXBvcnQgeyBsb2dJbmZvIH0gZnJvbSAnLi4vc3JjL3V0aWxzLmpzJztcbmltcG9ydCB7TU9EVUxFX1RZUEVfVUlEfSBmcm9tICcuLi9zcmMvYWN0aXZpdGllcy9tb2R1bGVzLmpzJztcblxuY29uc3QgTU9EVUxFX05BTUUgPSAncGFpcklkJztcbmNvbnN0IFBBSVJfSURfS0VZID0gJ3BhaXJJZCc7XG5jb25zdCBERUZBVUxUX0xJVkVSQU1QX1BBSVJfSURfS0VZID0gJ19scl9wYWlySWQnO1xuXG5leHBvcnQgY29uc3Qgc3RvcmFnZSA9IGdldFN0b3JhZ2VNYW5hZ2VyKHttb2R1bGVUeXBlOiBNT0RVTEVfVFlQRV9VSUQsIG1vZHVsZU5hbWU6IE1PRFVMRV9OQU1FfSk7XG5cbmZ1bmN0aW9uIHBhaXJJZEZyb21Mb2NhbFN0b3JhZ2Uoa2V5KSB7XG4gIHJldHVybiBzdG9yYWdlLmxvY2FsU3RvcmFnZUlzRW5hYmxlZCgpID8gc3RvcmFnZS5nZXREYXRhRnJvbUxvY2FsU3RvcmFnZShrZXkpIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcGFpcklkRnJvbUNvb2tpZShrZXkpIHtcbiAgcmV0dXJuIHN0b3JhZ2UuY29va2llc0FyZUVuYWJsZWQoKSA/IHN0b3JhZ2UuZ2V0Q29va2llKGtleSkgOiBudWxsO1xufVxuXG4vKiogQHR5cGUge1N1Ym1vZHVsZX0gKi9cbmV4cG9ydCBjb25zdCBwYWlySWRTdWJtb2R1bGUgPSB7XG4gIC8qKlxuICAqIHVzZWQgdG8gbGluayBzdWJtb2R1bGUgd2l0aCBjb25maWdcbiAgKiBAdHlwZSB7c3RyaW5nfVxuICAqL1xuICBuYW1lOiBNT0RVTEVfTkFNRSxcbiAgLyoqXG4gICogdXNlZCB0byBzcGVjaWZ5IHZlbmRvciBpZFxuICAqIEB0eXBlIHtudW1iZXJ9XG4gICovXG4gIGd2bGlkOiA3NTUsXG4gIC8qKlxuICAqIGRlY29kZSB0aGUgc3RvcmVkIGlkIHZhbHVlIGZvciBwYXNzaW5nIHRvIGJpZCByZXF1ZXN0c1xuICAqIEBmdW5jdGlvblxuICAqIEBwYXJhbSB7IHN0cmluZyB8IHVuZGVmaW5lZCB9IHZhbHVlXG4gICogQHJldHVybnMge3twYWlySWQ6c3RyaW5nfSB8IHVuZGVmaW5lZCB9XG4gICovXG4gIGRlY29kZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHsncGFpcklkJzogdmFsdWV9IDogdW5kZWZpbmVkXG4gIH0sXG4gIC8qKlxuICAqIHBlcmZvcm1zIGFjdGlvbiB0byBvYnRhaW4gaWQgYW5kIHJldHVybiBhIHZhbHVlIGluIHRoZSBjYWxsYmFjaydzIHJlc3BvbnNlIGFyZ3VtZW50XG4gICogQGZ1bmN0aW9uXG4gICogQHJldHVybnMge2lkOiBzdHJpbmcgfCB1bmRlZmluZWQgfVxuICAqL1xuICBnZXRJZChjb25maWcpIHtcbiAgICBjb25zdCBwYWlySWRzU3RyaW5nID0gcGFpcklkRnJvbUxvY2FsU3RvcmFnZShQQUlSX0lEX0tFWSkgfHwgcGFpcklkRnJvbUNvb2tpZShQQUlSX0lEX0tFWSlcbiAgICBsZXQgaWRzID0gW11cbiAgICBpZiAocGFpcklkc1N0cmluZyAmJiB0eXBlb2YgcGFpcklkc1N0cmluZyA9PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWRzID0gaWRzLmNvbmNhdChKU09OLnBhcnNlKGF0b2IocGFpcklkc1N0cmluZykpKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nSW5mbyhlcnJvcilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb25maWdQYXJhbXMgPSAoY29uZmlnICYmIGNvbmZpZy5wYXJhbXMpIHx8IHt9O1xuICAgIGlmIChjb25maWdQYXJhbXMgJiYgY29uZmlnUGFyYW1zLmxpdmVyYW1wKSB7XG4gICAgICBsZXQgTFJTdG9yYWdlTG9jYXRpb24gPSBjb25maWdQYXJhbXMubGl2ZXJhbXAuc3RvcmFnZUtleSB8fCBERUZBVUxUX0xJVkVSQU1QX1BBSVJfSURfS0VZXG4gICAgICBjb25zdCBsaXZlcmFtcFZhbHVlID0gcGFpcklkRnJvbUxvY2FsU3RvcmFnZShMUlN0b3JhZ2VMb2NhdGlvbikgfHwgcGFpcklkRnJvbUNvb2tpZShMUlN0b3JhZ2VMb2NhdGlvbilcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IEpTT04ucGFyc2UoYXRvYihsaXZlcmFtcFZhbHVlKSk7XG4gICAgICAgIGlkcyA9IGlkcy5jb25jYXQob2JqLmVudmVsb3BlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZ0luZm8oZXJyb3IpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlkcy5sZW5ndGggPT0gMCkge1xuICAgICAgbG9nSW5mbygnUGFpcklkIG5vdCBmb3VuZC4nKVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHsnaWQnOiBpZHN9O1xuICB9LFxuICBlaWRzOiB7XG4gICAgJ3BhaXJJZCc6IHtcbiAgICAgIHNvdXJjZTogJ2dvb2dsZS5jb20nLFxuICAgICAgYXR5cGU6IDU3MTE4N1xuICAgIH0sXG4gIH1cbn07XG5cbnN1Ym1vZHVsZSgndXNlcklkJywgcGFpcklkU3VibW9kdWxlKTtcbiIsImltcG9ydCB7aXNEYXRhLCBvYmplY3RUcmFuc2Zvcm1lciwgc2Vzc2lvbmVkQXBwbGllc30gZnJvbSAnLi4vLi4vc3JjL2FjdGl2aXRpZXMvcmVkYWN0b3IuanMnO1xuaW1wb3J0IHtkZWVwQWNjZXNzLCBkZWVwQ2xvbmUsIGRlZXBFcXVhbCwgZGVlcFNldFZhbHVlfSBmcm9tICcuLi8uLi9zcmMvdXRpbHMuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE9iamVjdEd1YXJkXG4gKiBAcHJvcGVydHkgeyp9IG9iaiBhIHZpZXcgb24gdGhlIGd1YXJkZWQgb2JqZWN0XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IHZlcmlmeSBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGZvciBhbmQgcm9sbHMgYmFjayBkaXNhbGxvd2VkIGNoYW5nZXMgdG8gdGhlIGd1YXJkZWQgb2JqZWN0XG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgYSBmYWN0b3J5IGZ1bmN0aW9uIGZvciBvYmplY3QgZ3VhcmRzIHVzaW5nIHRoZSBnaXZlbiBydWxlcy5cbiAqXG4gKiBBbiBvYmplY3QgZ3VhcmQgaXMgYSBwYWlyIHtvYmosIHZlcmlmeX0gd2hlcmU6XG4gKiAgLSBgb2JqYCBpcyBhIHZpZXcgb24gdGhlIGd1YXJkZWQgb2JqZWN0IHRoYXQgYXBwbGllcyBcInJlZGFjdFwiIHJ1bGVzICh0aGUgc2FtZSBydWxlcyB1c2VkIGluIGFjdGl2aXRlcy9yZWRhY3Rvci5qcylcbiAqICAtIGB2ZXJpZnlgIGlzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIHdpbGwgY2hlY2sgdGhhdCB0aGUgZ3VhcmRlZCBvYmplY3Qgd2FzIG5vdCBtb2RpZmllZFxuICogICBpbiBhIHdheSB0aGF0IHZpb2xhdGVzIGFueSBcIndyaXRlIHByb3RlY3RcIiBydWxlcywgYW5kIHJvbGxzIGJhY2sgYW55IG9mZmVuZGluZyBjaGFuZ2VzLlxuICpcbiAqIFRoaXMgaXMgbWVhbnQgdG8gcHJvdmlkZSBzYW5kYm94ZWQgdmVyc2lvbiBvZiBhIHByaXZhY3ktc2Vuc2l0aXZlIG9iamVjdCwgd2hlcmUgcmVhZHNcbiAqIGFyZSBmaWx0ZXJlZCB0aHJvdWdoIHJlZGFjdGlvbiBydWxlcyBhbmQgd3JpdGVzIGFyZSBjaGVja2VkIGFnYWluc3Qgd3JpdGUgcHJvdGVjdCBydWxlcy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5W1RyYW5zZm9ybWF0aW9uUnVsZV19IHJ1bGVzXG4gKiBAcmV0dXJuIHtmdW5jdGlvbigqLCAuLi5bKl0pOiBPYmplY3RHdWFyZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9iamVjdEd1YXJkKHJ1bGVzKSB7XG4gIGNvbnN0IHJvb3QgPSB7fTtcbiAgY29uc3Qgd3JpdGVSdWxlcyA9IFtdO1xuXG4gIHJ1bGVzLmZvckVhY2gocnVsZSA9PiB7XG4gICAgaWYgKHJ1bGUud3ApIHdyaXRlUnVsZXMucHVzaChydWxlKTtcbiAgICBpZiAoIXJ1bGUuZ2V0KSByZXR1cm47XG4gICAgcnVsZS5wYXRocy5mb3JFYWNoKHBhdGggPT4ge1xuICAgICAgbGV0IG5vZGUgPSByb290O1xuICAgICAgcGF0aC5zcGxpdCgnLicpLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBub2RlLmNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbiB8fCB7fTtcbiAgICAgICAgbm9kZS5jaGlsZHJlbltlbF0gPSBub2RlLmNoaWxkcmVuW2VsXSB8fCB7fTtcbiAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGRyZW5bZWxdO1xuICAgICAgfSlcbiAgICAgIG5vZGUucnVsZSA9IHJ1bGU7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IHdwVHJhbnNmb3JtZXIgPSBvYmplY3RUcmFuc2Zvcm1lcih3cml0ZVJ1bGVzKTtcblxuICBmdW5jdGlvbiBta0d1YXJkKG9iaiwgdHJlZSwgYXBwbGllcykge1xuICAgIHJldHVybiBuZXcgUHJveHkob2JqLCB7XG4gICAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBjb25zdCB2YWwgPSBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICAgICAgaWYgKHRyZWUuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICBjb25zdCB7Y2hpbGRyZW4sIHJ1bGV9ID0gdHJlZVtwcm9wXTtcbiAgICAgICAgICBpZiAoY2hpbGRyZW4gJiYgdmFsICE9IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBta0d1YXJkKHZhbCwgY2hpbGRyZW4sIGFwcGxpZXMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocnVsZSAmJiBpc0RhdGEodmFsKSAmJiBhcHBsaWVzKHJ1bGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gcnVsZS5nZXQodmFsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBta1ZlcmlmeSh0cmFuc2Zvcm1SZXN1bHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdHJhbnNmb3JtUmVzdWx0LmZvckVhY2goZm4gPT4gZm4oKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGd1YXJkKG9iaiwgLi4uYXJncykge1xuICAgIGNvbnN0IHNlc3Npb24gPSB7fTtcbiAgICByZXR1cm4ge1xuICAgICAgb2JqOiBta0d1YXJkKG9iaiwgcm9vdC5jaGlsZHJlbiB8fCB7fSwgc2Vzc2lvbmVkQXBwbGllcyhzZXNzaW9uLCAuLi5hcmdzKSksXG4gICAgICB2ZXJpZnk6IG1rVmVyaWZ5KHdwVHJhbnNmb3JtZXIoc2Vzc2lvbiwgb2JqLCAuLi5hcmdzKSlcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2Zvcm1hdGlvblJ1bGVEZWZ9IHJ1bGVEZWZcbiAqIEByZXR1cm4ge1RyYW5zZm9ybWF0aW9uUnVsZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlUHJvdGVjdFJ1bGUocnVsZURlZikge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7XG4gICAgd3A6IHRydWUsXG4gICAgcnVuKHJvb3QsIHBhdGgsIG9iamVjdCwgcHJvcGVydHksIGFwcGxpZXMpIHtcbiAgICAgIGNvbnN0IG9yaWdIYXNQcm9wID0gb2JqZWN0ICYmIG9iamVjdC5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgICBjb25zdCBvcmlnaW5hbCA9IG9yaWdIYXNQcm9wID8gb2JqZWN0W3Byb3BlcnR5XSA6IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IG9yaWdDb3B5ID0gb3JpZ0hhc1Byb3AgJiYgb3JpZ2luYWwgIT0gbnVsbCAmJiB0eXBlb2Ygb3JpZ2luYWwgPT09ICdvYmplY3QnID8gZGVlcENsb25lKG9yaWdpbmFsKSA6IG9yaWdpbmFsO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgb2JqZWN0ID0gcGF0aCA9PSBudWxsID8gcm9vdCA6IGRlZXBBY2Nlc3Mocm9vdCwgcGF0aCk7XG4gICAgICAgIGNvbnN0IGZpbmFsSGFzUHJvcCA9IG9iamVjdCAmJiBpc0RhdGEob2JqZWN0W3Byb3BlcnR5XSk7XG4gICAgICAgIGNvbnN0IGZpbmFsVmFsdWUgPSBmaW5hbEhhc1Byb3AgPyBvYmplY3RbcHJvcGVydHldIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoIW9yaWdIYXNQcm9wICYmIGZpbmFsSGFzUHJvcCAmJiBhcHBsaWVzKCkpIHtcbiAgICAgICAgICBkZWxldGUgb2JqZWN0W3Byb3BlcnR5XTtcbiAgICAgICAgfSBlbHNlIGlmICgob3JpZ0hhc1Byb3AgIT09IGZpbmFsSGFzUHJvcCB8fCBmaW5hbFZhbHVlICE9PSBvcmlnaW5hbCB8fCAhZGVlcEVxdWFsKGZpbmFsVmFsdWUsIG9yaWdDb3B5KSkgJiYgYXBwbGllcygpKSB7XG4gICAgICAgICAgZGVlcFNldFZhbHVlKHJvb3QsIChwYXRoID09IG51bGwgPyBbXSA6IFtwYXRoXSkuY29uY2F0KHByb3BlcnR5KS5qb2luKCcuJyksIG9yaWdDb3B5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwgcnVsZURlZilcbn1cbiIsImltcG9ydCB7aXNBY3Rpdml0eUFsbG93ZWR9IGZyb20gJy4uLy4uL3NyYy9hY3Rpdml0aWVzL3J1bGVzLmpzJztcbmltcG9ydCB7QUNUSVZJVFlfRU5SSUNIX0VJRFMsIEFDVElWSVRZX0VOUklDSF9VRlBEfSBmcm9tICcuLi8uLi9zcmMvYWN0aXZpdGllcy9hY3Rpdml0aWVzLmpzJztcbmltcG9ydCB7XG4gIGFwcGxpZXNXaGVuQWN0aXZpdHlEZW5pZWQsXG4gIG9ydGIyVHJhbnNtaXRSdWxlcyxcbiAgT1JUQl9FSURTX1BBVEhTLFxuICBPUlRCX1VGUERfUEFUSFNcbn0gZnJvbSAnLi4vLi4vc3JjL2FjdGl2aXRpZXMvcmVkYWN0b3IuanMnO1xuaW1wb3J0IHtvYmplY3RHdWFyZCwgd3JpdGVQcm90ZWN0UnVsZX0gZnJvbSAnLi9vYmplY3RHdWFyZC5qcyc7XG5pbXBvcnQge21lcmdlRGVlcH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzLmpzJztcblxuZnVuY3Rpb24gb3J0YjJFbnJpY2hSdWxlcyhpc0FsbG93ZWQgPSBpc0FjdGl2aXR5QWxsb3dlZCkge1xuICByZXR1cm4gW1xuICAgIHtcbiAgICAgIG5hbWU6IEFDVElWSVRZX0VOUklDSF9FSURTLFxuICAgICAgcGF0aHM6IE9SVEJfRUlEU19QQVRIUyxcbiAgICAgIGFwcGxpZXM6IGFwcGxpZXNXaGVuQWN0aXZpdHlEZW5pZWQoQUNUSVZJVFlfRU5SSUNIX0VJRFMsIGlzQWxsb3dlZClcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IEFDVElWSVRZX0VOUklDSF9VRlBELFxuICAgICAgcGF0aHM6IE9SVEJfVUZQRF9QQVRIUyxcbiAgICAgIGFwcGxpZXM6IGFwcGxpZXNXaGVuQWN0aXZpdHlEZW5pZWQoQUNUSVZJVFlfRU5SSUNIX1VGUEQsIGlzQWxsb3dlZClcbiAgICB9XG4gIF0ubWFwKHdyaXRlUHJvdGVjdFJ1bGUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvcnRiMkd1YXJkRmFjdG9yeShpc0FsbG93ZWQgPSBpc0FjdGl2aXR5QWxsb3dlZCkge1xuICByZXR1cm4gb2JqZWN0R3VhcmQob3J0YjJUcmFuc21pdFJ1bGVzKGlzQWxsb3dlZCkuY29uY2F0KG9ydGIyRW5yaWNoUnVsZXMoaXNBbGxvd2VkKSkpO1xufVxuXG4vKipcbiAqXG4gKlxuICogQHR5cGVkZWYge0Z1bmN0aW9ufSBvcnRiMkd1YXJkXG4gKiBAcGFyYW0ge3t9fSBvcnRiMiBPUlRCIG9iamVjdCB0byBndWFyZFxuICogQHBhcmFtIHt7fX0gcGFyYW1zIGFjdGl2aXR5IHBhcmFtcyB0byB1c2UgZm9yIGFjdGl2aXR5IGNoZWNrc1xuICogQHJldHVybnMge09iamVjdEd1YXJkfVxuICovXG5cbi8qXG4gKiBHZXQgYSBndWFyZCBmb3IgYW4gT1JUQiBvYmplY3QuIFJlYWQgYWNjZXNzIGlzIHJlc3RyaWN0ZWQgaW4gdGhlIHNhbWUgd2F5IGl0J2QgYmUgcmVkYWN0ZWQgKHNlZSBhY3Rpdml0ZXMvcmVkYWN0b3IuanMpO1xuICogYW5kIHdyaXRlcyBhcmUgY2hlY2tlZCBhZ2FpbnN0IHRoZSBlbnJpY2gqIGFjdGl2aXRlcy5cbiAqXG4gKiBAdHlwZSBvcnRiMkd1YXJkXG4gKi9cbmV4cG9ydCBjb25zdCBvcnRiMkd1YXJkID0gb3J0YjJHdWFyZEZhY3RvcnkoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG9ydGIyRnJhZ21lbnRzR3VhcmRGYWN0b3J5KGd1YXJkT3J0YjIgPSBvcnRiMkd1YXJkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBndWFyZE9ydGIyRnJhZ21lbnRzKGZyYWdtZW50cywgcGFyYW1zKSB7XG4gICAgZnJhZ21lbnRzLmdsb2JhbCA9IGZyYWdtZW50cy5nbG9iYWwgfHwge307XG4gICAgZnJhZ21lbnRzLmJpZGRlciA9IGZyYWdtZW50cy5iaWRkZXIgfHwge307XG4gICAgY29uc3QgYmlkZGVycyA9IG5ldyBTZXQoT2JqZWN0LmtleXMoZnJhZ21lbnRzLmJpZGRlcikpO1xuICAgIGNvbnN0IHZlcmlmaWVycyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gbWFrZUd1YXJkKG9ydGIyKSB7XG4gICAgICBjb25zdCBndWFyZCA9IGd1YXJkT3J0YjIob3J0YjIsIHBhcmFtcyk7XG4gICAgICB2ZXJpZmllcnMucHVzaChndWFyZC52ZXJpZnkpO1xuICAgICAgcmV0dXJuIGd1YXJkLm9iajtcbiAgICB9XG5cbiAgICBjb25zdCBvYmogPSB7XG4gICAgICBnbG9iYWw6IG1ha2VHdWFyZChmcmFnbWVudHMuZ2xvYmFsKSxcbiAgICAgIGJpZGRlcjogT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGZyYWdtZW50cy5iaWRkZXIpLm1hcCgoW2JpZGRlciwgb3J0YjJdKSA9PiBbYmlkZGVyLCBtYWtlR3VhcmQob3J0YjIpXSkpXG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICBvYmosXG4gICAgICB2ZXJpZnkoKSB7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG9iai5iaWRkZXIpXG4gICAgICAgICAgLmZpbHRlcigoW2JpZGRlcl0pID0+ICFiaWRkZXJzLmhhcyhiaWRkZXIpKVxuICAgICAgICAgIC5mb3JFYWNoKChbYmlkZGVyLCBvcnRiMl0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcGwgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGd1YXJkID0gZ3VhcmRPcnRiMihyZXBsLCBwYXJhbXMpO1xuICAgICAgICAgICAgbWVyZ2VEZWVwKGd1YXJkLm9iaiwgb3J0YjIpO1xuICAgICAgICAgICAgZ3VhcmQudmVyaWZ5KCk7XG4gICAgICAgICAgICBmcmFnbWVudHMuYmlkZGVyW2JpZGRlcl0gPSByZXBsO1xuICAgICAgICAgIH0pXG4gICAgICAgIHZlcmlmaWVycy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEdldCBhIGd1YXJkIGZvciBhbiBvcnRiMkZyYWdtZW50cyBvYmplY3QuXG4gKiBAdHlwZSB7ZnVuY3Rpb24oKiwgKik6IE9iamVjdEd1YXJkfVxuICovXG5leHBvcnQgY29uc3QgZ3VhcmRPcnRiMkZyYWdtZW50cyA9IG9ydGIyRnJhZ21lbnRzR3VhcmRGYWN0b3J5KCk7XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGFkZHMgUmVhbCB0aW1lIGRhdGEgc3VwcG9ydCB0byBwcmViaWQuanNcbiAqIEBtb2R1bGUgbW9kdWxlcy9yZWFsVGltZURhdGFcbiAqL1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgVXNlckNvbnNlbnREYXRhXG4gKi9cbi8qKlxuICogQHByb3BlcnR5XG4gKiBAc3VtbWFyeSBnZHByIGNvbnNlbnRcbiAqIEBuYW1lIFVzZXJDb25zZW50RGF0YSNnZHByXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG4vKipcbiAqIEBwcm9wZXJ0eVxuICogQHN1bW1hcnkgdXNwIGNvbnNlbnRcbiAqIEBuYW1lIFVzZXJDb25zZW50RGF0YSN1c3BcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbi8qKlxuICogQHByb3BlcnR5XG4gKiBAc3VtbWFyeSBjb3BwYVxuICogQG5hbWUgVXNlckNvbnNlbnREYXRhI2NvcHBhXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgUnRkU3VibW9kdWxlXG4gKi9cblxuLyoqXG4gKiBAZnVuY3Rpb24/XG4gKiBAc3VtbWFyeSByZXR1cm4gcmVhbCB0aW1lIGRhdGFcbiAqIEBuYW1lIFJ0ZFN1Ym1vZHVsZSNnZXRUYXJnZXRpbmdEYXRhXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhZFVuaXRzQ29kZXNcbiAqIEBwYXJhbSB7U3VibW9kdWxlQ29uZmlnfSBjb25maWdcbiAqIEBwYXJhbSB7VXNlckNvbnNlbnREYXRhfSB1c2VyQ29uc2VudFxuICogQHBhcmFtIHthdWN0aW9ufSBhdWN0aW9uXG4gKi9cblxuLyoqXG4gKiBAZnVuY3Rpb24/XG4gKiBAc3VtbWFyeSBtb2RpZnkgYmlkIHJlcXVlc3QgZGF0YVxuICogQG5hbWUgUnRkU3VibW9kdWxlI2dldEJpZFJlcXVlc3REYXRhXG4gKiBAcGFyYW0ge09iamVjdH0gcmVxQmlkc0NvbmZpZ09ialxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3VibW9kdWxlQ29uZmlnfSBjb25maWdcbiAqIEBwYXJhbSB7VXNlckNvbnNlbnREYXRhfSB1c2VyQ29uc2VudFxuICovXG5cbi8qKlxuICogQHByb3BlcnR5XG4gKiBAc3VtbWFyeSB1c2VkIHRvIGxpbmsgc3VibW9kdWxlIHdpdGggY29uZmlnXG4gKiBAbmFtZSBSdGRTdWJtb2R1bGUjbmFtZVxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuXG4vKipcbiAqIEBwcm9wZXJ0eVxuICogQHN1bW1hcnkgdXNlZCB0byBsaW5rIHN1Ym1vZHVsZSB3aXRoIGNvbmZpZ1xuICogQG5hbWUgUnRkU3VibW9kdWxlI2NvbmZpZ1xuICogQHR5cGUge09iamVjdH1cbiAqL1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHN1bW1hcnkgaW5pdCBzdWIgbW9kdWxlXG4gKiBAbmFtZSBSdGRTdWJtb2R1bGUjaW5pdFxuICogQHBhcmFtIHtTdWJtb2R1bGVDb25maWd9IGNvbmZpZ1xuICogQHBhcmFtIHtVc2VyQ29uc2VudERhdGF9IHVzZXIgY29uc2VudFxuICogQHJldHVybiB7Ym9vbGVhbn0gZmFsc2UgdG8gcmVtb3ZlIHN1YiBtb2R1bGVcbiAqL1xuXG4vKipcbiAqIEBmdW5jdGlvbj9cbiAqIEBzdW1tYXJ5IG9uIGF1Y3Rpb24gaW5pdCBldmVudFxuICogQG5hbWUgUnRkU3VibW9kdWxlI29uQXVjdGlvbkluaXRFdmVudFxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7U3VibW9kdWxlQ29uZmlnfSBjb25maWdcbiAqIEBwYXJhbSB7VXNlckNvbnNlbnREYXRhfSB1c2VyQ29uc2VudFxuICovXG5cbi8qKlxuICogQGZ1bmN0aW9uP1xuICogQHN1bW1hcnkgb24gYXVjdGlvbiBlbmQgZXZlbnRcbiAqIEBuYW1lIFJ0ZFN1Ym1vZHVsZSNvbkF1Y3Rpb25FbmRFdmVudFxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7U3VibW9kdWxlQ29uZmlnfSBjb25maWdcbiAqIEBwYXJhbSB7VXNlckNvbnNlbnREYXRhfSB1c2VyQ29uc2VudFxuICovXG5cbi8qKlxuICogQGZ1bmN0aW9uP1xuICogQHN1bW1hcnkgb24gYmlkIHJlc3BvbnNlIGV2ZW50XG4gKiBAbmFtZSBSdGRTdWJtb2R1bGUjb25CaWRSZXNwb25zZUV2ZW50XG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICogQHBhcmFtIHtTdWJtb2R1bGVDb25maWd9IGNvbmZpZ1xuICogQHBhcmFtIHtVc2VyQ29uc2VudERhdGF9IHVzZXJDb25zZW50XG4gKi9cblxuLyoqXG4gKiBAZnVuY3Rpb24/XG4gKiBAc3VtbWFyeSBvbiBiaWQgcmVxdWVzdGVkIGV2ZW50XG4gKiBAbmFtZSBSdGRTdWJtb2R1bGUjb25CaWRSZXF1ZXN0RXZlbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge1N1Ym1vZHVsZUNvbmZpZ30gY29uZmlnXG4gKiBAcGFyYW0ge1VzZXJDb25zZW50RGF0YX0gdXNlckNvbnNlbnRcbiAqL1xuXG4vKipcbiAqIEBmdW5jdGlvbj9cbiAqIEBzdW1tYXJ5IG9uIGRhdGEgZGVsZXRpb24gcmVxdWVzdFxuICogQG5hbWUgUnRkU3VibW9kdWxlI29uRGF0YURlbGV0aW9uUmVxdWVzdFxuICogQHBhcmFtIHtTdWJtb2R1bGVDb25maWd9IGNvbmZpZ1xuICovXG5cbi8qKlxuICogQGludGVyZmFjZSBNb2R1bGVDb25maWdcbiAqL1xuXG4vKipcbiAqIEBwcm9wZXJ0eVxuICogQHN1bW1hcnkgYXVjdGlvbiBkZWxheVxuICogQG5hbWUgTW9kdWxlQ29uZmlnI2F1Y3Rpb25EZWxheVxuICogQHR5cGUge251bWJlcn1cbiAqL1xuXG4vKipcbiAqIEBwcm9wZXJ0eVxuICogQHN1bW1hcnkgbGlzdCBvZiBzdWIgbW9kdWxlc1xuICogQG5hbWUgTW9kdWxlQ29uZmlnI2RhdGFQcm92aWRlcnNcbiAqIEB0eXBlIHtTdWJtb2R1bGVDb25maWdbXX1cbiAqL1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgU3ViTW9kdWxlQ29uZmlnXG4gKi9cblxuLyoqXG4gKiBAcHJvcGVydHlcbiAqIEBzdW1tYXJ5IHBhcmFtcyBmb3IgcHJvdmlkZSAoc3ViIG1vZHVsZSlcbiAqIEBuYW1lIFN1Yk1vZHVsZUNvbmZpZyNwYXJhbXNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxuLyoqXG4gKiBAcHJvcGVydHlcbiAqIEBzdW1tYXJ5IG5hbWVcbiAqIEBuYW1lIE1vZHVsZUNvbmZpZyNuYW1lXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5cbi8qKlxuICogQHByb3BlcnR5XG4gKiBAc3VtbWFyeSBkZWxheSBhdWN0aW9uIGZvciB0aGlzIHN1YiBtb2R1bGVcbiAqIEBuYW1lIE1vZHVsZUNvbmZpZyN3YWl0Rm9ySXRcbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5cbmltcG9ydCB7Y29uZmlnfSBmcm9tICcuLi8uLi9zcmMvY29uZmlnLmpzJztcbmltcG9ydCB7Z2V0SG9vaywgbW9kdWxlfSBmcm9tICcuLi8uLi9zcmMvaG9vay5qcyc7XG5pbXBvcnQge2xvZ0Vycm9yLCBsb2dJbmZvLCBsb2dXYXJufSBmcm9tICcuLi8uLi9zcmMvdXRpbHMuanMnO1xuaW1wb3J0ICogYXMgZXZlbnRzIGZyb20gJy4uLy4uL3NyYy9ldmVudHMuanMnO1xuaW1wb3J0IENPTlNUQU5UUyBmcm9tICcuLi8uLi9zcmMvY29uc3RhbnRzLmpzb24nO1xuaW1wb3J0IGFkYXB0ZXJNYW5hZ2VyLCB7Z2RwckRhdGFIYW5kbGVyLCB1c3BEYXRhSGFuZGxlciwgZ3BwRGF0YUhhbmRsZXJ9IGZyb20gJy4uLy4uL3NyYy9hZGFwdGVyTWFuYWdlci5qcyc7XG5pbXBvcnQge2ZpbmR9IGZyb20gJy4uLy4uL3NyYy9wb2x5ZmlsbC5qcyc7XG5pbXBvcnQge3RpbWVkQXVjdGlvbkhvb2t9IGZyb20gJy4uLy4uL3NyYy91dGlscy9wZXJmTWV0cmljcy5qcyc7XG5pbXBvcnQge0dEUFJfR1ZMSURTfSBmcm9tICcuLi8uLi9zcmMvY29uc2VudEhhbmRsZXIuanMnO1xuaW1wb3J0IHtNT0RVTEVfVFlQRV9SVER9IGZyb20gJy4uLy4uL3NyYy9hY3Rpdml0aWVzL21vZHVsZXMuanMnO1xuaW1wb3J0IHtndWFyZE9ydGIyRnJhZ21lbnRzfSBmcm9tICcuLi8uLi9saWJyYXJpZXMvb2JqZWN0R3VhcmQvb3J0Ykd1YXJkLmpzJztcbmltcG9ydCB7YWN0aXZpdHlQYXJhbXNCdWlsZGVyfSBmcm9tICcuLi8uLi9zcmMvYWN0aXZpdGllcy9wYXJhbXMuanMnO1xuXG5jb25zdCBhY3Rpdml0eVBhcmFtcyA9IGFjdGl2aXR5UGFyYW1zQnVpbGRlcigoYWwpID0+IGFkYXB0ZXJNYW5hZ2VyLnJlc29sdmVBbGlhcyhhbCkpO1xuXG4vKiogQHR5cGUge3N0cmluZ30gKi9cbmNvbnN0IE1PRFVMRV9OQU1FID0gJ3JlYWxUaW1lRGF0YSc7XG4vKiogQHR5cGUge1J0ZFN1Ym1vZHVsZVtdfSAqL1xubGV0IHJlZ2lzdGVyZWRTdWJNb2R1bGVzID0gW107XG4vKiogQHR5cGUge1J0ZFN1Ym1vZHVsZVtdfSAqL1xuZXhwb3J0IGxldCBzdWJNb2R1bGVzID0gW107XG4vKiogQHR5cGUge01vZHVsZUNvbmZpZ30gKi9cbmxldCBfbW9kdWxlQ29uZmlnO1xuLyoqIEB0eXBlIHtTdWJtb2R1bGVDb25maWdbXX0gKi9cbmxldCBfZGF0YVByb3ZpZGVycyA9IFtdO1xuLyoqIEB0eXBlIHtVc2VyQ29uc2VudERhdGF9ICovXG5sZXQgX3VzZXJDb25zZW50O1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgUlREIHN1Ym1vZHVsZS5cbiAqXG4gKiBAcGFyYW0ge1J0ZFN1Ym1vZHVsZX0gc3VibW9kdWxlXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gYSBkZS1yZWdpc3RyYXRpb24gZnVuY3Rpb24gdGhhdCB3aWxsIHVucmVnaXN0ZXIgdGhlIG1vZHVsZSB3aGVuIGNhbGxlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaFJlYWxUaW1lRGF0YVByb3ZpZGVyKHN1Ym1vZHVsZSkge1xuICByZWdpc3RlcmVkU3ViTW9kdWxlcy5wdXNoKHN1Ym1vZHVsZSk7XG4gIEdEUFJfR1ZMSURTLnJlZ2lzdGVyKE1PRFVMRV9UWVBFX1JURCwgc3VibW9kdWxlLm5hbWUsIHN1Ym1vZHVsZS5ndmxpZClcbiAgcmV0dXJuIGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICBjb25zdCBpZHggPSByZWdpc3RlcmVkU3ViTW9kdWxlcy5pbmRleE9mKHN1Ym1vZHVsZSlcbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIHJlZ2lzdGVyZWRTdWJNb2R1bGVzLnNwbGljZShpZHgsIDEpO1xuICAgICAgaW5pdFN1Yk1vZHVsZXMoKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBjYWxsIGVhY2ggc3ViIG1vZHVsZSBldmVudCBmdW5jdGlvbiBieSBjb25maWcgb3JkZXJcbiAqL1xuY29uc3Qgc2V0RXZlbnRzTGlzdGVuZXJzID0gKGZ1bmN0aW9uICgpIHtcbiAgbGV0IHJlZ2lzdGVyZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNldEV2ZW50c0xpc3RlbmVycygpIHtcbiAgICBpZiAoIXJlZ2lzdGVyZWQpIHtcbiAgICAgIE9iamVjdC5lbnRyaWVzKHtcbiAgICAgICAgW0NPTlNUQU5UUy5FVkVOVFMuQVVDVElPTl9JTklUXTogWydvbkF1Y3Rpb25Jbml0RXZlbnQnXSxcbiAgICAgICAgW0NPTlNUQU5UUy5FVkVOVFMuQVVDVElPTl9FTkRdOiBbJ29uQXVjdGlvbkVuZEV2ZW50JywgZ2V0QWRVbml0VGFyZ2V0aW5nXSxcbiAgICAgICAgW0NPTlNUQU5UUy5FVkVOVFMuQklEX1JFU1BPTlNFXTogWydvbkJpZFJlc3BvbnNlRXZlbnQnXSxcbiAgICAgICAgW0NPTlNUQU5UUy5FVkVOVFMuQklEX1JFUVVFU1RFRF06IFsnb25CaWRSZXF1ZXN0RXZlbnQnXVxuICAgICAgfSkuZm9yRWFjaCgoW2V2LCBbaGFuZGxlciwgcHJlcHJvY2Vzc11dKSA9PiB7XG4gICAgICAgIGV2ZW50cy5vbihldiwgKGFyZ3MpID0+IHtcbiAgICAgICAgICBwcmVwcm9jZXNzICYmIHByZXByb2Nlc3MoYXJncyk7XG4gICAgICAgICAgc3ViTW9kdWxlcy5mb3JFYWNoKHNtID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHNtW2hhbmRsZXJdICYmIHNtW2hhbmRsZXJdKGFyZ3MsIHNtLmNvbmZpZywgX3VzZXJDb25zZW50KVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBsb2dFcnJvcihgUlREIHByb3ZpZGVyICcke3NtLm5hbWV9JzogZXJyb3IgaW4gJyR7aGFuZGxlcn0nOmAsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICByZWdpc3RlcmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn0pKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KGNvbmZpZykge1xuICBjb25zdCBjb25mTGlzdGVuZXIgPSBjb25maWcuZ2V0Q29uZmlnKE1PRFVMRV9OQU1FLCAoe3JlYWxUaW1lRGF0YX0pID0+IHtcbiAgICBpZiAoIXJlYWxUaW1lRGF0YS5kYXRhUHJvdmlkZXJzKSB7XG4gICAgICBsb2dFcnJvcignbWlzc2luZyBwYXJhbWV0ZXJzIGZvciByZWFsIHRpbWUgbW9kdWxlJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbmZMaXN0ZW5lcigpOyAvLyB1bnN1YnNjcmliZSBjb25maWcgbGlzdGVuZXJcbiAgICBfbW9kdWxlQ29uZmlnID0gcmVhbFRpbWVEYXRhO1xuICAgIF9kYXRhUHJvdmlkZXJzID0gcmVhbFRpbWVEYXRhLmRhdGFQcm92aWRlcnM7XG4gICAgc2V0RXZlbnRzTGlzdGVuZXJzKCk7XG4gICAgZ2V0SG9vaygnc3RhcnRBdWN0aW9uJykuYmVmb3JlKHNldEJpZFJlcXVlc3RzRGF0YSwgMjApOyAvLyBSVEQgc2hvdWxkIHJ1biBiZWZvcmUgRlBEXG4gICAgYWRhcHRlck1hbmFnZXIuY2FsbERhdGFEZWxldGlvblJlcXVlc3QuYmVmb3JlKG9uRGF0YURlbGV0aW9uUmVxdWVzdCk7XG4gICAgaW5pdFN1Yk1vZHVsZXMoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldENvbnNlbnREYXRhKCkge1xuICByZXR1cm4ge1xuICAgIGdkcHI6IGdkcHJEYXRhSGFuZGxlci5nZXRDb25zZW50RGF0YSgpLFxuICAgIHVzcDogdXNwRGF0YUhhbmRsZXIuZ2V0Q29uc2VudERhdGEoKSxcbiAgICBncHA6IGdwcERhdGFIYW5kbGVyLmdldENvbnNlbnREYXRhKCksXG4gICAgY29wcGE6ICEhKGNvbmZpZy5nZXRDb25maWcoJ2NvcHBhJykpXG4gIH1cbn1cblxuLyoqXG4gKiBjYWxsIGVhY2ggc3ViIG1vZHVsZSBpbml0IGZ1bmN0aW9uIGJ5IGNvbmZpZyBvcmRlclxuICogaWYgbm8gaW5pdCBmdW5jdGlvbiAvIGluaXQgcmV0dXJuIGZhaWx1cmUgLyBtb2R1bGUgbm90IGNvbmZpZ3VyZWQgLSByZW1vdmUgaXQgZnJvbSBzdWJtb2R1bGVzIGxpc3RcbiAqL1xuZnVuY3Rpb24gaW5pdFN1Yk1vZHVsZXMoKSB7XG4gIF91c2VyQ29uc2VudCA9IGdldENvbnNlbnREYXRhKCk7XG4gIGxldCBzdWJNb2R1bGVzQnlPcmRlciA9IFtdO1xuICBfZGF0YVByb3ZpZGVycy5mb3JFYWNoKHByb3ZpZGVyID0+IHtcbiAgICBjb25zdCBzbSA9IGZpbmQocmVnaXN0ZXJlZFN1Yk1vZHVsZXMsIHMgPT4gcy5uYW1lID09PSBwcm92aWRlci5uYW1lKTtcbiAgICBjb25zdCBpbml0UmVzcG9uc2UgPSBzbSAmJiBzbS5pbml0ICYmIHNtLmluaXQocHJvdmlkZXIsIF91c2VyQ29uc2VudCk7XG4gICAgaWYgKGluaXRSZXNwb25zZSkge1xuICAgICAgc3ViTW9kdWxlc0J5T3JkZXIucHVzaChPYmplY3QuYXNzaWduKHNtLCB7Y29uZmlnOiBwcm92aWRlcn0pKTtcbiAgICB9XG4gIH0pO1xuICBzdWJNb2R1bGVzID0gc3ViTW9kdWxlc0J5T3JkZXI7XG4gIGxvZ0luZm8oYFJlYWwgdGltZSBkYXRhIG1vZHVsZSBlbmFibGVkLCB1c2luZyBzdWJtb2R1bGVzOiAke3N1Yk1vZHVsZXMubWFwKChtKSA9PiBtLm5hbWUpLmpvaW4oJywgJyl9YCk7XG59XG5cbi8qKlxuICogbG9vcCB0aHJvdWdoIGNvbmZpZ3VyZWQgZGF0YSBwcm92aWRlcnMgSWYgdGhlIGRhdGEgcHJvdmlkZXIgaGFzIHJlZ2lzdGVyZWQgZ2V0QmlkUmVxdWVzdERhdGEsXG4gKiBjYWxsIGl0LCBwcm92aWRpbmcgcmVxQmlkc0NvbmZpZ09iaiwgY29uc2VudCBkYXRhIGFuZCBtb2R1bGUgcGFyYW1zXG4gKiB0aGlzIGFsbG93cyBzdWJtb2R1bGVzIHRvIG1vZGlmeSBiaWRkZXJzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVxQmlkc0NvbmZpZ09iaiByZXF1aXJlZDsgVGhpcyBpcyB0aGUgc2FtZSBwYXJhbSB0aGF0J3MgdXNlZCBpbiBwYmpzLnJlcXVlc3RCaWRzLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gcmVxdWlyZWQ7IFRoZSBuZXh0IGZ1bmN0aW9uIGluIHRoZSBjaGFpbiwgdXNlZCBieSBob29rLmpzXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRCaWRSZXF1ZXN0c0RhdGEgPSB0aW1lZEF1Y3Rpb25Ib29rKCdydGQnLCBmdW5jdGlvbiBzZXRCaWRSZXF1ZXN0c0RhdGEoZm4sIHJlcUJpZHNDb25maWdPYmopIHtcbiAgX3VzZXJDb25zZW50ID0gZ2V0Q29uc2VudERhdGEoKTtcblxuICBjb25zdCByZWxldmFudFN1Yk1vZHVsZXMgPSBbXTtcbiAgY29uc3QgcHJpb3JpdHlTdWJNb2R1bGVzID0gW107XG4gIHN1Yk1vZHVsZXMuZm9yRWFjaChzbSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzbS5nZXRCaWRSZXF1ZXN0RGF0YSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZWxldmFudFN1Yk1vZHVsZXMucHVzaChzbSk7XG4gICAgY29uc3QgY29uZmlnID0gc20uY29uZmlnO1xuICAgIGlmIChjb25maWcgJiYgY29uZmlnLndhaXRGb3JJdCkge1xuICAgICAgcHJpb3JpdHlTdWJNb2R1bGVzLnB1c2goc20pO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3Qgc2hvdWxkRGVsYXlBdWN0aW9uID0gcHJpb3JpdHlTdWJNb2R1bGVzLmxlbmd0aCAmJiBfbW9kdWxlQ29uZmlnLmF1Y3Rpb25EZWxheSAmJiBfbW9kdWxlQ29uZmlnLmF1Y3Rpb25EZWxheSA+IDA7XG4gIGxldCBjYWxsYmFja3NFeHBlY3RlZCA9IHByaW9yaXR5U3ViTW9kdWxlcy5sZW5ndGg7XG4gIGxldCBpc0RvbmUgPSBmYWxzZTtcbiAgbGV0IHdhaXRUaW1lb3V0O1xuICBjb25zdCB2ZXJpZmllcnMgPSBbXTtcblxuICBpZiAoIXJlbGV2YW50U3ViTW9kdWxlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZXhpdEhvb2soKTtcbiAgfVxuXG4gIHdhaXRUaW1lb3V0ID0gc2V0VGltZW91dChleGl0SG9vaywgc2hvdWxkRGVsYXlBdWN0aW9uID8gX21vZHVsZUNvbmZpZy5hdWN0aW9uRGVsYXkgOiAwKTtcblxuICByZWxldmFudFN1Yk1vZHVsZXMuZm9yRWFjaChzbSA9PiB7XG4gICAgY29uc3QgZnBkR3VhcmQgPSBndWFyZE9ydGIyRnJhZ21lbnRzKHJlcUJpZHNDb25maWdPYmoub3J0YjJGcmFnbWVudHMgfHwge30sIGFjdGl2aXR5UGFyYW1zKE1PRFVMRV9UWVBFX1JURCwgc20ubmFtZSkpO1xuICAgIHZlcmlmaWVycy5wdXNoKGZwZEd1YXJkLnZlcmlmeSk7XG4gICAgc20uZ2V0QmlkUmVxdWVzdERhdGEoe1xuICAgICAgLi4ucmVxQmlkc0NvbmZpZ09iaixcbiAgICAgIG9ydGIyRnJhZ21lbnRzOiBmcGRHdWFyZC5vYmpcbiAgICB9LCBvbkdldEJpZFJlcXVlc3REYXRhQ2FsbGJhY2suYmluZChzbSksIHNtLmNvbmZpZywgX3VzZXJDb25zZW50KVxuICB9KTtcblxuICBmdW5jdGlvbiBvbkdldEJpZFJlcXVlc3REYXRhQ2FsbGJhY2soKSB7XG4gICAgaWYgKGlzRG9uZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb25maWcgJiYgdGhpcy5jb25maWcud2FpdEZvckl0KSB7XG4gICAgICBjYWxsYmFja3NFeHBlY3RlZC0tO1xuICAgIH1cbiAgICBpZiAoY2FsbGJhY2tzRXhwZWN0ZWQgPT09IDApIHtcbiAgICAgIHNldFRpbWVvdXQoZXhpdEhvb2ssIDApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGV4aXRIb29rKCkge1xuICAgIGlmIChpc0RvbmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaXNEb25lID0gdHJ1ZTtcbiAgICBjbGVhclRpbWVvdXQod2FpdFRpbWVvdXQpO1xuICAgIHZlcmlmaWVycy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICAgIGZuLmNhbGwodGhpcywgcmVxQmlkc0NvbmZpZ09iaik7XG4gIH1cbn0pO1xuXG4vKipcbiAqIGxvb3AgdGhyb3VnaCBjb25maWd1cmVkIGRhdGEgcHJvdmlkZXJzIElmIHRoZSBkYXRhIHByb3ZpZGVyIGhhcyByZWdpc3RlcmVkIGdldFRhcmdldGluZ0RhdGEsXG4gKiBjYWxsIGl0LCBwcm92aWRpbmcgYWQgdW5pdCBjb2RlcywgY29uc2VudCBkYXRhIGFuZCBtb2R1bGUgcGFyYW1zXG4gKiB0aGUgc3ViIG1sb2RsZSB3aWxsIHJldHVybiBkYXRhIHRvIHNldCBvbiB0aGUgYWQgdW5pdFxuICogdGhpcyBmdW5jdGlvbiB1c2VkIHRvIHBsYWNlIGtleSB2YWx1ZXMgb24gcHJpbWFyeSBhZCBzZXJ2ZXIgcGVyIGFkIHVuaXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdWN0aW9uIG9iamVjdCByZWNlaXZlZCBvbiBhdWN0aW9uIGVuZCBldmVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWRVbml0VGFyZ2V0aW5nKGF1Y3Rpb24pIHtcbiAgY29uc3QgcmVsZXZhbnRTdWJNb2R1bGVzID0gc3ViTW9kdWxlcy5maWx0ZXIoc20gPT4gdHlwZW9mIHNtLmdldFRhcmdldGluZ0RhdGEgPT09ICdmdW5jdGlvbicpO1xuICBpZiAoIXJlbGV2YW50U3ViTW9kdWxlcy5sZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBnZXQgZGF0YVxuICBjb25zdCBhZFVuaXRDb2RlcyA9IGF1Y3Rpb24uYWRVbml0Q29kZXM7XG4gIGlmICghYWRVbml0Q29kZXMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHRhcmdldGluZyA9IFtdO1xuICBmb3IgKGxldCBpID0gcmVsZXZhbnRTdWJNb2R1bGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3Qgc21UYXJnZXRpbmcgPSByZWxldmFudFN1Yk1vZHVsZXNbaV0uZ2V0VGFyZ2V0aW5nRGF0YShhZFVuaXRDb2RlcywgcmVsZXZhbnRTdWJNb2R1bGVzW2ldLmNvbmZpZywgX3VzZXJDb25zZW50LCBhdWN0aW9uKTtcbiAgICBpZiAoc21UYXJnZXRpbmcgJiYgdHlwZW9mIHNtVGFyZ2V0aW5nID09PSAnb2JqZWN0Jykge1xuICAgICAgdGFyZ2V0aW5nLnB1c2goc21UYXJnZXRpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dXYXJuKCdpbnZhbGlkIGdldFRhcmdldGluZ0RhdGEgcmVzcG9uc2UgZm9yIHN1YiBtb2R1bGUnLCByZWxldmFudFN1Yk1vZHVsZXNbaV0ubmFtZSk7XG4gICAgfVxuICB9XG4gIC8vIHBsYWNlIGRhdGEgb24gYXVjdGlvbiBhZFVuaXRzXG4gIGNvbnN0IG1lcmdlZFRhcmdldGluZyA9IGRlZXBNZXJnZSh0YXJnZXRpbmcpO1xuICBhdWN0aW9uLmFkVW5pdHMuZm9yRWFjaChhZFVuaXQgPT4ge1xuICAgIGNvbnN0IGt2ID0gYWRVbml0LmNvZGUgJiYgbWVyZ2VkVGFyZ2V0aW5nW2FkVW5pdC5jb2RlXTtcbiAgICBpZiAoIWt2KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgbG9nSW5mbygnUlREIHNldCBhZCB1bml0IHRhcmdldGluZyBvZicsIGt2LCAnZm9yJywgYWRVbml0KTtcbiAgICBhZFVuaXRbQ09OU1RBTlRTLkpTT05fTUFQUElORy5BRFNFUlZFUl9UQVJHRVRJTkddID0gT2JqZWN0LmFzc2lnbihhZFVuaXRbQ09OU1RBTlRTLkpTT05fTUFQUElORy5BRFNFUlZFUl9UQVJHRVRJTkddIHx8IHt9LCBrdik7XG4gIH0pO1xuICByZXR1cm4gYXVjdGlvbi5hZFVuaXRzO1xufVxuXG4vKipcbiAqIGRlZXAgbWVyZ2UgYXJyYXkgb2Ygb2JqZWN0c1xuICogQHBhcmFtIHthcnJheX0gYXJyIC0gb2JqZWN0cyBhcnJheVxuICogQHJldHVybiB7T2JqZWN0fSBtZXJnZWQgb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWVwTWVyZ2UoYXJyKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShhcnIpIHx8ICFhcnIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiBhcnIucmVkdWNlKChtZXJnZWQsIG9iaikgPT4ge1xuICAgIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBpZiAoIW1lcmdlZC5oYXNPd25Qcm9wZXJ0eShrZXkpKSBtZXJnZWRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAvLyBkdXBsaWNhdGUga2V5IC0gbWVyZ2UgdmFsdWVzXG4gICAgICAgICAgY29uc3QgZHAgPSBvYmpba2V5XTtcbiAgICAgICAgICBmb3IgKGxldCBkayBpbiBkcCkge1xuICAgICAgICAgICAgaWYgKGRwLmhhc093blByb3BlcnR5KGRrKSkgbWVyZ2VkW2tleV1bZGtdID0gZHBbZGtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9LCB7fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkRhdGFEZWxldGlvblJlcXVlc3QobmV4dCwgLi4uYXJncykge1xuICBzdWJNb2R1bGVzLmZvckVhY2goKHNtKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzbS5vbkRhdGFEZWxldGlvblJlcXVlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNtLm9uRGF0YURlbGV0aW9uUmVxdWVzdChzbS5jb25maWcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2dFcnJvcihgRXJyb3IgZXhlY3V0aW5nICR7c20ubmFtZX0ub25EYXRhRGVsZXRpb25SZXF1ZXN0YCwgZSlcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBuZXh0LmFwcGx5KHRoaXMsIGFyZ3MpO1xufVxuXG5tb2R1bGUoJ3JlYWxUaW1lRGF0YScsIGF0dGFjaFJlYWxUaW1lRGF0YVByb3ZpZGVyKTtcbmluaXQoY29uZmlnKTtcbiIsImltcG9ydCB7c3VibW9kdWxlfSBmcm9tICcuLi9zcmMvaG9vay5qcyc7XG5pbXBvcnQge2lzRm4sIGxvZ0Vycm9yfSBmcm9tICcuLi9zcmMvdXRpbHMuanMnO1xuaW1wb3J0IHtjb25maWd9IGZyb20gJy4uL3NyYy9jb25maWcuanMnO1xuaW1wb3J0IHtnZXRHbG9iYWx9IGZyb20gJy4uL3NyYy9wcmViaWRHbG9iYWwuanMnO1xuaW1wb3J0IHtpbmNsdWRlc30gZnJvbSAnLi4vc3JjL3BvbHlmaWxsLmpzJztcbmltcG9ydCAnLi4vc3JjL2FkYXB0ZXJNYW5hZ2VyLmpzJztcblxubGV0IG9ic2VydmVyQXZhaWxhYmxlID0gdHJ1ZTtcbmZ1bmN0aW9uIGdldEludGVyc2VjdGlvbkRhdGEocmVxdWVzdEJpZHNPYmplY3QsIG9uRG9uZSwgcHJvdmlkZXJDb25maWcsIHVzZXJDb25zZW50KSB7XG4gIGNvbnN0IGludGVyc2VjdGlvbk1hcCA9IHt9O1xuICBjb25zdCBwbGFjZWhvbGRlcnNNYXAgPSB7fTtcbiAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgaWYgKCFvYnNlcnZlckF2YWlsYWJsZSkgcmV0dXJuIGNvbXBsZXRlKCk7XG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKG9ic2VydmVyQ2FsbGJhY2ssIHt0aHJlc2hvbGQ6IDAuNX0pO1xuICBjb25zdCBhZFVuaXRDb2RlcyA9IHJlcXVlc3RCaWRzT2JqZWN0LmFkVW5pdENvZGVzIHx8IFtdO1xuICBjb25zdCBhdWN0aW9uRGVsYXkgPSBjb25maWcuZ2V0Q29uZmlnKCdyZWFsVGltZURhdGEuYXVjdGlvbkRlbGF5JykgfHwgMDtcbiAgY29uc3Qgd2FpdEZvckl0ID0gcHJvdmlkZXJDb25maWcud2FpdEZvckl0O1xuICBsZXQgYWRVbml0cyA9IHJlcXVlc3RCaWRzT2JqZWN0LmFkVW5pdHMgfHwgZ2V0R2xvYmFsKCkuYWRVbml0cyB8fCBbXTtcbiAgaWYgKGFkVW5pdENvZGVzLmxlbmd0aCkge1xuICAgIGFkVW5pdHMgPSBhZFVuaXRzLmZpbHRlcih1bml0ID0+IGluY2x1ZGVzKGFkVW5pdENvZGVzLCB1bml0LmNvZGUpKTtcbiAgfVxuICBsZXQgY2hlY2tUaW1lb3V0SWQ7XG4gIGZpbmRBbmRPYnNlcnZlUGxhY2Vob2xkZXJzKCk7XG4gIGlmIChhdWN0aW9uRGVsYXkgPiAwKSB7XG4gICAgc2V0VGltZW91dChjb21wbGV0ZSwgYXVjdGlvbkRlbGF5KTtcbiAgfVxuICBmdW5jdGlvbiBmaW5kQW5kT2JzZXJ2ZVBsYWNlaG9sZGVycygpIHtcbiAgICBjb25zdCBvYnNlcnZlZCA9IGFkVW5pdHMuZmlsdGVyKCh1bml0KSA9PiB7XG4gICAgICBjb25zdCBjb2RlID0gdW5pdC5jb2RlO1xuICAgICAgaWYgKHBsYWNlaG9sZGVyc01hcFtjb2RlXSkgcmV0dXJuIHRydWU7XG4gICAgICBjb25zdCBwaCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvZGUpO1xuICAgICAgaWYgKHBoKSB7XG4gICAgICAgIHBsYWNlaG9sZGVyc01hcFtjb2RlXSA9IHBoO1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHBoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKFxuICAgICAgb2JzZXJ2ZWQubGVuZ3RoID09PSBhZFVuaXRzLmxlbmd0aCB8fFxuICAgICAgIXdhaXRGb3JJdCB8fFxuICAgICAgYXVjdGlvbkRlbGF5IDw9IDBcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2hlY2tUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZpbmRBbmRPYnNlcnZlUGxhY2Vob2xkZXJzKTtcbiAgfVxuICBmdW5jdGlvbiBvYnNlcnZlckNhbGxiYWNrKGVudHJpZXMpIHtcbiAgICBsZXQgZW50cnkgPSBlbnRyaWVzLnBvcCgpO1xuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gZW50cnkudGFyZ2V0O1xuICAgICAgY29uc3QgaWQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgaWYgKGlkKSB7XG4gICAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbk1hcFtpZF07XG4gICAgICAgIGlmICghaW50ZXJzZWN0aW9uIHx8IGludGVyc2VjdGlvbi50aW1lIDwgZW50cnkudGltZSkge1xuICAgICAgICAgIGludGVyc2VjdGlvbk1hcFtpZF0gPSB7XG4gICAgICAgICAgICAnYm91bmRpbmdDbGllbnRSZWN0JzogY2xvbmVSZWN0KGVudHJ5LmJvdW5kaW5nQ2xpZW50UmVjdCksXG4gICAgICAgICAgICAnaW50ZXJzZWN0aW9uUmVjdCc6IGNsb25lUmVjdChlbnRyeS5pbnRlcnNlY3Rpb25SZWN0KSxcbiAgICAgICAgICAgICdyb290UmVjdCc6IGNsb25lUmVjdChlbnRyeS5yb290UmVjdCksXG4gICAgICAgICAgICAnaW50ZXJzZWN0aW9uUmF0aW8nOiBlbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyxcbiAgICAgICAgICAgICdpc0ludGVyc2VjdGluZyc6IGVudHJ5LmlzSW50ZXJzZWN0aW5nLFxuICAgICAgICAgICAgJ3RpbWUnOiBlbnRyeS50aW1lXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoYWRVbml0cy5ldmVyeSh1bml0ID0+ICEhaW50ZXJzZWN0aW9uTWFwW3VuaXQuY29kZV0pKSB7XG4gICAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZW50cnkgPSBlbnRyaWVzLnBvcCgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgIGlmIChjaGVja1RpbWVvdXRJZCkgY2xlYXJUaW1lb3V0KGNoZWNrVGltZW91dElkKTtcbiAgICBkb25lID0gdHJ1ZTtcbiAgICBjaGVja1RpbWVvdXRJZCA9IG51bGw7XG4gICAgb2JzZXJ2ZXIgJiYgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIGFkVW5pdHMgJiYgYWRVbml0cy5mb3JFYWNoKCh1bml0KSA9PiB7XG4gICAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb25NYXBbdW5pdC5jb2RlXTtcbiAgICAgIGlmIChpbnRlcnNlY3Rpb24gJiYgdW5pdC5iaWRzKSB7XG4gICAgICAgIHVuaXQuYmlkcy5mb3JFYWNoKGJpZCA9PiBiaWQuaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbkRvbmUoKTtcbiAgfVxufVxuZnVuY3Rpb24gaW5pdChtb2R1bGVDb25maWcpIHtcbiAgaWYgKCFpc0ZuKHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlcikpIHtcbiAgICBsb2dFcnJvcignSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaXMgbm90IGRlZmluZWQnKTtcbiAgICBvYnNlcnZlckF2YWlsYWJsZSA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIG9ic2VydmVyQXZhaWxhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb2JzZXJ2ZXJBdmFpbGFibGU7XG59XG5mdW5jdGlvbiBjbG9uZVJlY3QocmVjdCkge1xuICByZXR1cm4gcmVjdCA/IHtcbiAgICAnbGVmdCc6IHJlY3QubGVmdCxcbiAgICAndG9wJzogcmVjdC50b3AsXG4gICAgJ3JpZ2h0JzogcmVjdC5yaWdodCxcbiAgICAnYm90dG9tJzogcmVjdC5ib3R0b20sXG4gICAgJ3dpZHRoJzogcmVjdC53aWR0aCxcbiAgICAnaGVpZ2h0JzogcmVjdC5oZWlnaHQsXG4gICAgJ3gnOiByZWN0LngsXG4gICAgJ3knOiByZWN0LnksXG4gIH0gOiByZWN0O1xufVxuZXhwb3J0IGNvbnN0IGludGVyc2VjdGlvblN1Ym1vZHVsZSA9IHtcbiAgbmFtZTogJ2ludGVyc2VjdGlvbicsXG4gIGdldEJpZFJlcXVlc3REYXRhOiBnZXRJbnRlcnNlY3Rpb25EYXRhLFxuICBpbml0OiBpbml0LFxufTtcbmZ1bmN0aW9uIHJlZ2lzdGVyU3ViTW9kdWxlKCkge1xuICBzdWJtb2R1bGUoJ3JlYWxUaW1lRGF0YScsIGludGVyc2VjdGlvblN1Ym1vZHVsZSk7XG59XG5yZWdpc3RlclN1Yk1vZHVsZSgpO1xuIiwiaW1wb3J0IHtzdWJtb2R1bGV9IGZyb20gJy4uL3NyYy9ob29rLmpzJztcclxuaW1wb3J0IHtkZWVwQWNjZXNzLCBkZWVwU2V0VmFsdWUsIGxvZ0luZm8sIGxvZ1dhcm4sIHRpbWVzdGFtcH0gZnJvbSAnLi4vc3JjL3V0aWxzLmpzJztcclxuXHJcbmxldCBnZW9sb2NhdGlvbjtcclxuZnVuY3Rpb24gZ2V0R2VvbG9jYXRpb25EYXRhKHJlcXVlc3RCaWRzT2JqZWN0LCBvbkRvbmUsIHByb3ZpZGVyQ29uZmlnLCB1c2VyQ29uc2VudCkge1xyXG4gIGdlb2xvY2F0aW9uID0gZGVlcEFjY2Vzcyhwcm92aWRlckNvbmZpZywgJ3BhcmFtcy5nZW8nKTtcclxuICBjb25zb2xlLmxvZyhcIkdFT0xPQ0FUSU9OIFwiLCBnZW9sb2NhdGlvbik7XHJcbiAgY29uc29sZS5sb2coZGVlcEFjY2Vzcyhwcm92aWRlckNvbmZpZywgJ3BhcmFtcycpKTtcclxuICBpZiAoZ2VvbG9jYXRpb24pIHtcclxuICAgIGRlZXBTZXRWYWx1ZShyZXF1ZXN0Qmlkc09iamVjdCwgJ29ydGIyRnJhZ21lbnRzLmdsb2JhbC5kZXZpY2UuZ2VvJywge1xyXG4gICAgICBsYXQ6IGdlb2xvY2F0aW9uLmNvb3Jkcy5sYXRpdHVkZSxcclxuICAgICAgbG9uOiBnZW9sb2NhdGlvbi5jb29yZHMubG9uZ2l0dWRlLFxyXG4gICAgICBsYXN0Zml4OiBNYXRoLnJvdW5kKCh0aW1lc3RhbXAoKSAtIGdlb2xvY2F0aW9uLnRpbWVzdGFtcCkgLyAxMDAwKSxcclxuICAgICAgdHlwZTogMVxyXG4gICAgfSk7XHJcbiAgICBsb2dJbmZvKCdnZW9sb2NhdGlvbiB3YXMgc3VjY2Vzc2Z1bGx5IHJlY2VpdmVkICcsIHJlcXVlc3RCaWRzT2JqZWN0Lm9ydGIyRnJhZ21lbnRzLmdsb2JhbC5kZXZpY2UuZ2VvKVxyXG4gIH1cclxuICBlbHNlXHJcbiAge1xyXG4gICAgbG9nV2Fybignbm8gY3VzdG9tIGdlb2xvY2F0aW9uIG9iamVjdCBwcm92aWRlZCcpXHJcbiAgfVxyXG4gIFxyXG4gIG9uRG9uZSgpO1xyXG59XHJcbmZ1bmN0aW9uIGluaXQobW9kdWxlQ29uZmlnKSB7XHJcbiAgZ2VvbG9jYXRpb24gPSB2b2lkIDA7XHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuZXhwb3J0IGNvbnN0IGN1c3RvbUdlb2xvY2F0aW9uU3VibW9kdWxlID0ge1xyXG4gIG5hbWU6ICdjdXN0b21HZW9sb2NhdGlvbicsXHJcbiAgZ2V0QmlkUmVxdWVzdERhdGE6IGdldEdlb2xvY2F0aW9uRGF0YSxcclxuICBpbml0OiBpbml0LFxyXG59O1xyXG5mdW5jdGlvbiByZWdpc3RlclN1Yk1vZHVsZSgpIHtcclxuICBzdWJtb2R1bGUoJ3JlYWxUaW1lRGF0YScsIGN1c3RvbUdlb2xvY2F0aW9uU3VibW9kdWxlKTtcclxufVxyXG5yZWdpc3RlclN1Yk1vZHVsZSgpOyIsIi8vIEFEUklWRVIgQklEIEFEQVBURVIgZm9yIFByZWJpZCAxLjEzXG5pbXBvcnQgeyBsb2dJbmZvLCBnZXRXaW5kb3dMb2NhdGlvbiwgZ2V0QmlkSWRQYXJhbWV0ZXIsIF9lYWNoIH0gZnJvbSAnLi4vc3JjL3V0aWxzLmpzJztcbmltcG9ydCB7IHJlZ2lzdGVyQmlkZGVyIH0gZnJvbSAnLi4vc3JjL2FkYXB0ZXJzL2JpZGRlckZhY3RvcnkuanMnO1xuaW1wb3J0IHsgZ2V0U3RvcmFnZU1hbmFnZXIgfSBmcm9tICcuLi9zcmMvc3RvcmFnZU1hbmFnZXIuanMnO1xuXG5jb25zdCBCSURERVJfQ09ERSA9ICdhZHJpdmVyJztcbmNvbnN0IEFEUklWRVJfQklEX1VSTCA9ICdodHRwczovL3BiLmFkcml2ZXIucnUvY2dpLWJpbi9iaWQuY2dpJztcbmNvbnN0IFRJTUVfVE9fTElWRSA9IDMwMDA7XG5cbmV4cG9ydCBjb25zdCBzdG9yYWdlID0gZ2V0U3RvcmFnZU1hbmFnZXIoe2JpZGRlckNvZGU6IEJJRERFUl9DT0RFfSk7XG5leHBvcnQgY29uc3Qgc3BlYyA9IHtcbiAgY29kZTogQklEREVSX0NPREUsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBub3QgdGhlIGdpdmVuIGJpZCByZXF1ZXN0IGlzIHZhbGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gYmlkIFRoZSBiaWQgdG8gdmFsaWRhdGUuXG4gICAqIEByZXR1cm4gYm9vbGVhbiBUcnVlIGlmIHRoaXMgaXMgYSB2YWxpZCBiaWQsIGFuZCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBpc0JpZFJlcXVlc3RWYWxpZDogZnVuY3Rpb24gKGJpZCkge1xuICAgIHJldHVybiAhIWJpZC5wYXJhbXMuc2l0ZWlkO1xuICB9LFxuXG4gIGJ1aWxkUmVxdWVzdHM6IGZ1bmN0aW9uICh2YWxpZEJpZFJlcXVlc3RzLCBiaWRkZXJSZXF1ZXN0KSB7XG4gICAgbGV0IHdpbiA9IGdldFdpbmRvd0xvY2F0aW9uKCk7XG4gICAgbGV0IGN1c3RvbUlEID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogOTk5OTk5OTk5KSArICctJyArIE1hdGgucm91bmQobmV3IERhdGUoKSAvIDEwMDApICsgJy0xLTQ2LSc7XG4gICAgbGV0IHNpdGVJZCA9IGdldEJpZElkUGFyYW1ldGVyKCdzaXRlaWQnLCB2YWxpZEJpZFJlcXVlc3RzWzBdLnBhcmFtcykgKyAnJztcbiAgICBsZXQgY3VycmVuY3kgPSBnZXRCaWRJZFBhcmFtZXRlcignY3VycmVuY3knLCB2YWxpZEJpZFJlcXVlc3RzWzBdLnBhcmFtcyk7XG4gICAgY3VycmVuY3kgPSAnUlVCJztcblxuICAgIGxldCB0aW1lb3V0ID0gbnVsbDtcbiAgICBpZiAoYmlkZGVyUmVxdWVzdCkge1xuICAgICAgdGltZW91dCA9IGJpZGRlclJlcXVlc3QudGltZW91dDtcbiAgICB9XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgJ2F0JzogMSxcbiAgICAgICdjdXInOiBbY3VycmVuY3ldLFxuICAgICAgJ3RtYXgnOiB0aW1lb3V0LFxuICAgICAgJ3NpdGUnOiB7XG4gICAgICAgICduYW1lJzogd2luLm9yaWdpbixcbiAgICAgICAgJ2RvbWFpbic6IHdpbi5ob3N0bmFtZSxcbiAgICAgICAgJ2lkJzogc2l0ZUlkLFxuICAgICAgICAncGFnZSc6IHdpbi5ocmVmXG4gICAgICB9LFxuICAgICAgJ2lkJzogY3VzdG9tSUQsXG4gICAgICAndXNlcic6IHtcbiAgICAgICAgJ2J1eWVyaWQnOiAwLFxuICAgICAgICAnZXh0Jzoge1xuICAgICAgICAgICdlaWRzJzogZ2V0VXNlcklkQXNFaWRzKHZhbGlkQmlkUmVxdWVzdHMpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnZGV2aWNlJzoge1xuICAgICAgICAnaXAnOiAnMTk1LjIwOS4xMTEuMTQnLFxuICAgICAgICAndWEnOiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgICAgfSxcbiAgICAgICdpbXAnOiBbXVxuICAgIH07XG5cbiAgICBfZWFjaCh2YWxpZEJpZFJlcXVlc3RzLCAoYmlkKSA9PiB7XG4gICAgICBfZWFjaChiaWQuc2l6ZXMsIChzaXplcykgPT4ge1xuICAgICAgICBsZXQgd2lkdGg7XG4gICAgICAgIGxldCBoZWlnaHQ7XG4gICAgICAgIGxldCBwYXI7XG5cbiAgICAgICAgbGV0IGZsb29yQW5kQ3VycmVuY3kgPSBfZ2V0Rmxvb3IoYmlkLCBjdXJyZW5jeSwgc2l6ZXMpO1xuXG4gICAgICAgIGxldCBiaWRGbG9vciA9IGZsb29yQW5kQ3VycmVuY3kuZmxvb3I7XG4gICAgICAgIGxldCBkZWFsSWQgPSBnZXRCaWRJZFBhcmFtZXRlcignZGVhbGlkJywgYmlkLnBhcmFtcyk7XG4gICAgICAgIGlmICh0eXBlb2Ygc2l6ZXNbMF0gPT09ICdudW1iZXInICYmIHR5cGVvZiBzaXplc1sxXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB3aWR0aCA9IHNpemVzWzBdO1xuICAgICAgICAgIGhlaWdodCA9IHNpemVzWzFdO1xuICAgICAgICB9XG4gICAgICAgIHBhciA9IHtcbiAgICAgICAgICAnaWQnOiBiaWQucGFyYW1zLnBsYWNlbWVudElkLFxuICAgICAgICAgICdleHQnOiB7J3F1ZXJ5JzogJ2JuPTE1JmN1c3RvbT0xMTE9JyArIGJpZC5iaWRJZH0sXG4gICAgICAgICAgJ2Jhbm5lcic6IHtcbiAgICAgICAgICAgICd3Jzogd2lkdGggfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2gnOiBoZWlnaHQgfHwgdW5kZWZpbmVkXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnYmlkZmxvb3InOiBiaWRGbG9vciB8fCAwLFxuICAgICAgICAgICdiaWRmbG9vcmN1cic6IGZsb29yQW5kQ3VycmVuY3kuY3VycmVuY3ksXG4gICAgICAgICAgJ3NlY3VyZSc6IDBcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGRlYWxJZCkge1xuICAgICAgICAgIHBhci5wbXAgPSB7XG4gICAgICAgICAgICAncHJpdmF0ZV9hdWN0aW9uJzogMSxcbiAgICAgICAgICAgICdkZWFscyc6IFt7XG4gICAgICAgICAgICAgICdpZCc6IGRlYWxJZCxcbiAgICAgICAgICAgICAgJ2JpZGZsb29yJzogYmlkRmxvb3IgfHwgMCxcbiAgICAgICAgICAgICAgJ2JpZGZsb29yY3VyJzogY3VycmVuY3lcbiAgICAgICAgICAgIH1dXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBsb2dJbmZvKCdwYXInLCBwYXIpO1xuICAgICAgICBwYXlsb2FkLmltcC5wdXNoKHBhcik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGxldCBhZHJjaWRDb29raWUgPSBzdG9yYWdlLmdldERhdGFGcm9tTG9jYWxTdG9yYWdlKCdhZHJjaWQnKSB8fCB2YWxpZEJpZFJlcXVlc3RzWzBdLnVzZXJJZD8uYWRyY2lkO1xuICAgIGlmIChhZHJjaWRDb29raWUpIHtcbiAgICAgIHBheWxvYWQudXNlci5idXllcmlkID0gYWRyY2lkQ29va2llO1xuICAgIH1cbiAgICBjb25zdCBwYXlsb2FkU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICB1cmw6IEFEUklWRVJfQklEX1VSTCxcbiAgICAgIGRhdGE6IHBheWxvYWRTdHJpbmdcbiAgICB9O1xuICB9LFxuXG4gIGludGVycHJldFJlc3BvbnNlOiBmdW5jdGlvbiAoc2VydmVyUmVzcG9uc2UsIGJpZFJlcXVlc3QpIHtcbiAgICBsb2dJbmZvKCdzZXJ2ZXJSZXNwb25zZS5ib2R5LnNlYXRiaWQnLCBzZXJ2ZXJSZXNwb25zZS5ib2R5LnNlYXRiaWQpO1xuICAgIGNvbnN0IGJpZFJlc3BvbnNlcyA9IFtdO1xuICAgIGxldCBudXJsID0gMDtcbiAgICBfZWFjaChzZXJ2ZXJSZXNwb25zZS5ib2R5LnNlYXRiaWQsIChzZWF0YmlkKSA9PiB7XG4gICAgICBsb2dJbmZvKCdfZWFjaCcsIHNlYXRiaWQpO1xuICAgICAgdmFyIGJpZCA9IHNlYXRiaWQuYmlkWzBdO1xuICAgICAgaWYgKGJpZC5udXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbnVybCA9IGJpZC5udXJsLnNwbGl0KCc6Ly8nKTtcbiAgICAgICAgbnVybCA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBudXJsWzFdO1xuICAgICAgICBudXJsID0gbnVybC5yZXBsYWNlKC9cXCRcXHtBVUNUSU9OX1BSSUNFXFx9LywgYmlkLnByaWNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJpZC5wcmljZSA+PSAwICYmIGJpZC5pbXBpZCAhPT0gdW5kZWZpbmVkICYmIG51cmwgIT09IDAgJiYgYmlkLmRlYWxpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCBiaWRSZXNwb25zZSA9IHtcbiAgICAgICAgICByZXF1ZXN0SWQ6IGJpZC5leHQgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgIGNwbTogYmlkLnByaWNlLFxuICAgICAgICAgIHdpZHRoOiBiaWQudyxcbiAgICAgICAgICBoZWlnaHQ6IGJpZC5oLFxuICAgICAgICAgIGNyZWF0aXZlSWQ6IGJpZC5pbXBpZCB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgY3VycmVuY3k6IHNlcnZlclJlc3BvbnNlLmJvZHkuY3VyLFxuICAgICAgICAgIG5ldFJldmVudWU6IHRydWUsXG4gICAgICAgICAgdHRsOiBUSU1FX1RPX0xJVkUsXG4gICAgICAgICAgbWV0YToge1xuICAgICAgICAgICAgYWR2ZXJ0aXNlckRvbWFpbnM6IGJpZC5hZG9tYWluXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhZDogJzxJRlJBTUUgU1JDPVwiJyArIGJpZC5udXJsICsgJ1wiIEZSQU1FQk9SREVSPVwiMFwiIFNDUk9MTElORz1cIm5vXCIgTUFSR0lOSEVJR0hUPVwiMFwiIE1BUkdJTldJRFRIPVwiMFwiIFRPUE1BUkdJTj1cIjBcIiBMRUZUTUFSR0lOPVwiMFwiIEFMTE9XVFJBTlNQQVJFTkNZPVwidHJ1ZVwiIFNUWUxFID1cIldJRFRIOicgKyBiaWQudyArICdweDsgSEVJR0hUOicgKyBiaWQuaCArICdweFwiPjwvSUZSQU1FPidcbiAgICAgICAgfTtcbiAgICAgICAgbG9nSW5mbygnYmlkUmVzcG9uc2UnLCBiaWRSZXNwb25zZSk7XG4gICAgICAgIGJpZFJlc3BvbnNlcy5wdXNoKGJpZFJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYmlkUmVzcG9uc2VzO1xuICB9XG59O1xucmVnaXN0ZXJCaWRkZXIoc3BlYyk7XG5cbi8qKlxuICogZ2V0IGZpcnN0IHVzZXJJZCBmcm9tIHZhbGlkQmlkUmVxdWVzdHNcbiAqIEBwYXJhbSB2YWxpZEJpZFJlcXVlc3RzXG4gKiBAcmV0dXJucyB7QXJyYXl8Kn0gdXNlcklkQXNFaWRzXG4gKi9cbmZ1bmN0aW9uIGdldFVzZXJJZEFzRWlkcyh2YWxpZEJpZFJlcXVlc3RzKSB7XG4gIGlmICh2YWxpZEJpZFJlcXVlc3RzICYmIHZhbGlkQmlkUmVxdWVzdHMubGVuZ3RoID4gMCAmJiB2YWxpZEJpZFJlcXVlc3RzWzBdLnVzZXJJZEFzRWlkcyAmJlxuICAgIHZhbGlkQmlkUmVxdWVzdHNbMF0udXNlcklkQXNFaWRzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gdmFsaWRCaWRSZXF1ZXN0c1swXS51c2VySWRBc0VpZHM7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyBiaWRmbG9vclxuICogQHBhcmFtIHtPYmplY3R9IGJpZFxuICogQHBhcmFtIGN1cnJlbmN5UGFyXG4gKiBAcGFyYW0gc2l6ZXNcbiAqIEByZXR1cm5zIHtPYmplY3R9IGZsb29yXG4gKi9cbmZ1bmN0aW9uIF9nZXRGbG9vcihiaWQsIGN1cnJlbmN5UGFyLCBzaXplcykge1xuICBjb25zdCBjdXJNZWRpYVR5cGUgPSBiaWQubWVkaWFUeXBlcyAmJiBiaWQubWVkaWFUeXBlcy52aWRlbyA/ICd2aWRlbycgOiAnYmFubmVyJztcbiAgbGV0IGZsb29yID0gMDtcbiAgY29uc3QgY3VycmVuY3kgPSBjdXJyZW5jeVBhciB8fCAnUlVCJztcblxuICBsZXQgY3VycmVuY3lSZXN1bHQgPSAnJztcblxuICBsZXQgaXNTaXplID0gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBzaXplc1swXSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHNpemVzWzFdID09PSAnbnVtYmVyJykge1xuICAgIGlzU2l6ZSA9IHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIGJpZC5nZXRGbG9vciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IGZsb29ySW5mbyA9IGJpZC5nZXRGbG9vcih7XG4gICAgICBjdXJyZW5jeTogY3VycmVuY3ksXG4gICAgICBtZWRpYVR5cGU6IGN1ck1lZGlhVHlwZSxcbiAgICAgIHNpemU6IGlzU2l6ZSA/IHNpemVzIDogJyonXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGZsb29ySW5mbyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICFpc05hTihwYXJzZUZsb2F0KGZsb29ySW5mby5mbG9vcikpKSB7XG4gICAgICBmbG9vciA9IGZsb29ySW5mby5mbG9vcjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGZsb29ySW5mbyA9PT0gJ29iamVjdCcgJiYgZmxvb3JJbmZvLmN1cnJlbmN5KSB7XG4gICAgICBjdXJyZW5jeVJlc3VsdCA9IGZsb29ySW5mby5jdXJyZW5jeTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWN1cnJlbmN5UmVzdWx0KSB7XG4gICAgY3VycmVuY3lSZXN1bHQgPSBjdXJyZW5jeTtcbiAgfVxuXG4gIGlmIChmbG9vciA9PSBudWxsKSB7XG4gICAgZmxvb3IgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmbG9vcjogZmxvb3IsXG4gICAgY3VycmVuY3k6IGN1cnJlbmN5UmVzdWx0XG4gIH07XG59XG4iLCJpbXBvcnQgeyBfbWFwIH0gZnJvbSAnLi4vc3JjL3V0aWxzLmpzJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL3NyYy9jb25maWcuanMnO1xuaW1wb3J0IHsgcmVnaXN0ZXJCaWRkZXIgfSBmcm9tICcuLi9zcmMvYWRhcHRlcnMvYmlkZGVyRmFjdG9yeS5qcyc7XG5cbmNvbnN0IEJJRERFUl9DT0RFID0gJ215dGFyZ2V0JztcbmNvbnN0IEJJRERFUl9VUkwgPSAnLy9hZC5tYWlsLnJ1L2hiaWRfcHJlYmlkLyc7XG5jb25zdCBERUZBVUxUX0NVUlJFTkNZID0gJ1JVQic7XG5jb25zdCBERUZBVUxUX1RUTCA9IDE4MDtcblxuZnVuY3Rpb24gYnVpbGRQbGFjZW1lbnQoYmlkUmVxdWVzdCkge1xuICBsZXQgeyBiaWRJZCwgcGFyYW1zIH0gPSBiaWRSZXF1ZXN0O1xuICBsZXQgeyBwbGFjZW1lbnRJZCwgcG9zaXRpb24sIHJlc3BvbnNlLCBiaWRmbG9vciB9ID0gcGFyYW1zO1xuICBsZXQgcGxhY2VtZW50ID0ge1xuICAgIHBsYWNlbWVudElkLFxuICAgIGlkOiBiaWRJZCxcbiAgICBwb3NpdGlvbjogcG9zaXRpb24gfHwgMCxcbiAgICByZXNwb25zZTogcmVzcG9uc2UgfHwgMFxuICB9O1xuXG4gIGlmICh0eXBlb2YgYmlkZmxvb3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcGxhY2VtZW50LmJpZGZsb29yID0gYmlkZmxvb3I7XG4gIH1cblxuICByZXR1cm4gcGxhY2VtZW50O1xufVxuXG5mdW5jdGlvbiBnZXRTaXRlTmFtZShyZWZlcnJlcikge1xuICBsZXQgc2l0ZW5hbWUgPSBjb25maWcuZ2V0Q29uZmlnKCdteXRhcmdldC5zaXRlbmFtZScpO1xuXG4gIGlmICghc2l0ZW5hbWUpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgcGFyc2VkLmhyZWYgPSBkZWNvZGVVUklDb21wb25lbnQocmVmZXJyZXIpO1xuICAgIHNpdGVuYW1lID0gcGFyc2VkLmhvc3RuYW1lO1xuICB9XG5cbiAgcmV0dXJuIHNpdGVuYW1lO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUlkKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDIpO1xufVxuXG5leHBvcnQgY29uc3Qgc3BlYyA9IHtcbiAgY29kZTogQklEREVSX0NPREUsXG5cbiAgaXNCaWRSZXF1ZXN0VmFsaWQ6IGZ1bmN0aW9uKGJpZCkge1xuICAgIHJldHVybiAhIWJpZC5wYXJhbXMucGxhY2VtZW50SWQ7XG4gIH0sXG5cbiAgYnVpbGRSZXF1ZXN0czogZnVuY3Rpb24odmFsaWRCaWRSZXF1ZXN0cywgYmlkZGVyUmVxdWVzdCkge1xuICAgIGxldCByZWZlcnJlciA9ICcnO1xuXG4gICAgaWYgKGJpZGRlclJlcXVlc3QgJiYgYmlkZGVyUmVxdWVzdC5yZWZlcmVySW5mbykge1xuICAgICAgcmVmZXJyZXIgPSBiaWRkZXJSZXF1ZXN0LnJlZmVyZXJJbmZvLnBhZ2U7XG4gICAgfVxuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHBsYWNlczogX21hcCh2YWxpZEJpZFJlcXVlc3RzLCBidWlsZFBsYWNlbWVudCksXG4gICAgICBzaXRlOiB7XG4gICAgICAgIHNpdGVuYW1lOiBnZXRTaXRlTmFtZShyZWZlcnJlciksXG4gICAgICAgIHBhZ2U6IHJlZmVycmVyXG4gICAgICB9LFxuICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgY3VycmVuY3k6IERFRkFVTFRfQ1VSUkVOQ1ksXG4gICAgICAgIHdpbmRvd1NpemU6IHtcbiAgICAgICAgICB3aWR0aDogd2luZG93LnNjcmVlbi53aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IHdpbmRvdy5zY3JlZW4uaGVpZ2h0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgdXJsOiBCSURERVJfVVJMLFxuICAgICAgZGF0YTogcGF5bG9hZCxcbiAgICB9O1xuICB9LFxuXG4gIGludGVycHJldFJlc3BvbnNlOiBmdW5jdGlvbihzZXJ2ZXJSZXNwb25zZSwgYmlkUmVxdWVzdCkge1xuICAgIGxldCB7IGJvZHkgfSA9IHNlcnZlclJlc3BvbnNlO1xuXG4gICAgaWYgKGJvZHkuYmlkcykge1xuICAgICAgcmV0dXJuIF9tYXAoYm9keS5iaWRzLCAoYmlkKSA9PiB7XG4gICAgICAgIGxldCBiaWRSZXNwb25zZSA9IHtcbiAgICAgICAgICByZXF1ZXN0SWQ6IGJpZC5pZCxcbiAgICAgICAgICBjcG06IGJpZC5wcmljZSxcbiAgICAgICAgICB3aWR0aDogYmlkLnNpemUud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBiaWQuc2l6ZS5oZWlnaHQsXG4gICAgICAgICAgdHRsOiBiaWQudHRsIHx8IERFRkFVTFRfVFRMLFxuICAgICAgICAgIGN1cnJlbmN5OiBiaWQuY3VycmVuY3kgfHwgREVGQVVMVF9DVVJSRU5DWSxcbiAgICAgICAgICBjcmVhdGl2ZUlkOiBiaWQuY3JlYXRpdmVJZCB8fCBnZW5lcmF0ZVJhbmRvbUlkKCksXG4gICAgICAgICAgbmV0UmV2ZW51ZTogdHJ1ZSxcbiAgICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICBhZHZlcnRpc2VyRG9tYWluczogYmlkLmFkb21haW4gJiYgYmlkLmFkb21haW4ubGVuZ3RoID4gMCA/IGJpZC5hZG9tYWluIDogW10sXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpZC5hZG0pIHtcbiAgICAgICAgICBiaWRSZXNwb25zZS5hZCA9IGJpZC5hZG07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmlkUmVzcG9uc2UuYWRVcmwgPSBiaWQuZGlzcGxheVVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBiaWRSZXNwb25zZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG5yZWdpc3RlckJpZGRlcihzcGVjKTtcbiIsImltcG9ydCB7X21hcCwgZGVlcEFjY2VzcywgaXNBcnJheSwgbG9nV2Fybn0gZnJvbSAnLi4vc3JjL3V0aWxzLmpzJztcbmltcG9ydCB7cmVnaXN0ZXJCaWRkZXJ9IGZyb20gJy4uL3NyYy9hZGFwdGVycy9iaWRkZXJGYWN0b3J5LmpzJztcbmltcG9ydCB7YXVjdGlvbk1hbmFnZXJ9IGZyb20gJy4uL3NyYy9hdWN0aW9uTWFuYWdlci5qcyc7XG5pbXBvcnQge0JBTk5FUiwgVklERU99IGZyb20gJy4uL3NyYy9tZWRpYVR5cGVzLmpzJztcbmltcG9ydCB7UmVuZGVyZXJ9IGZyb20gJy4uL3NyYy9SZW5kZXJlci5qcyc7XG5pbXBvcnQge2ZpbmR9IGZyb20gJy4uL3NyYy9wb2x5ZmlsbC5qcyc7XG5cbmNvbnN0IEJJRERFUl9DT0RFID0gJ2h5YnJpZCc7XG5jb25zdCBEU1BfRU5EUE9JTlQgPSAnaHR0cHM6Ly9oYmUxOTguaHlicmlkLmFpL3ByZWJpZGhiJztcbmNvbnN0IFRSQUZGSUNfVFlQRV9XRUIgPSAxO1xuY29uc3QgUExBQ0VNRU5UX1RZUEVfQkFOTkVSID0gMTtcbmNvbnN0IFBMQUNFTUVOVF9UWVBFX1ZJREVPID0gMjtcbmNvbnN0IFBMQUNFTUVOVF9UWVBFX0lOX0lNQUdFID0gMztcbmNvbnN0IFRUTCA9IDYwO1xuY29uc3QgUkVOREVSRVJfVVJMID0gJ2h0dHBzOi8vYWNkbi5hZG54cy5jb20vdmlkZW8vb3V0c3RyZWFtL0FOT3V0c3RyZWFtVmlkZW8uanMnO1xuXG5jb25zdCBwbGFjZW1lbnRUeXBlcyA9IHtcbiAgJ2Jhbm5lcic6IFBMQUNFTUVOVF9UWVBFX0JBTk5FUixcbiAgJ3ZpZGVvJzogUExBQ0VNRU5UX1RZUEVfVklERU8sXG4gICdpbkltYWdlJzogUExBQ0VNRU5UX1RZUEVfSU5fSU1BR0Vcbn07XG5cbmZ1bmN0aW9uIGJ1aWxkQmlkUmVxdWVzdHModmFsaWRCaWRSZXF1ZXN0cykge1xuICByZXR1cm4gX21hcCh2YWxpZEJpZFJlcXVlc3RzLCBmdW5jdGlvbih2YWxpZEJpZFJlcXVlc3QpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB2YWxpZEJpZFJlcXVlc3QucGFyYW1zO1xuICAgIGNvbnN0IGJpZFJlcXVlc3QgPSB7XG4gICAgICBiaWRJZDogdmFsaWRCaWRSZXF1ZXN0LmJpZElkLFxuICAgICAgdHJhbnNhY3Rpb25JZDogdmFsaWRCaWRSZXF1ZXN0Lm9ydGIySW1wPy5leHQ/LnRpZCxcbiAgICAgIHNpemVzOiB2YWxpZEJpZFJlcXVlc3Quc2l6ZXMsXG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFR5cGVzW3BhcmFtcy5wbGFjZW1lbnRdLFxuICAgICAgcGxhY2VJZDogcGFyYW1zLnBsYWNlSWQsXG4gICAgICBpbWFnZVVybDogcGFyYW1zLmltYWdlVXJsIHx8ICcnXG4gICAgfTtcblxuICAgIHJldHVybiBiaWRSZXF1ZXN0O1xuICB9KVxufVxuXG5jb25zdCBvdXRzdHJlYW1SZW5kZXIgPSBiaWQgPT4ge1xuICBiaWQucmVuZGVyZXIucHVzaCgoKSA9PiB7XG4gICAgd2luZG93LkFOT3V0c3RyZWFtVmlkZW8ucmVuZGVyQWQoe1xuICAgICAgc2l6ZXM6IFtiaWQud2lkdGgsIGJpZC5oZWlnaHRdLFxuICAgICAgdGFyZ2V0SWQ6IGJpZC5hZFVuaXRDb2RlLFxuICAgICAgcmVuZGVyZXJPcHRpb25zOiB7XG4gICAgICAgIHNob3dCaWdQbGF5QnV0dG9uOiBmYWxzZSxcbiAgICAgICAgc2hvd1Byb2dyZXNzQmFyOiAnYmFyJyxcbiAgICAgICAgc2hvd1ZvbHVtZTogZmFsc2UsXG4gICAgICAgIGFsbG93RnVsbHNjcmVlbjogdHJ1ZSxcbiAgICAgICAgc2tpcHBhYmxlOiBmYWxzZSxcbiAgICAgICAgY29udGVudDogYmlkLnZhc3RYbWxcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmNvbnN0IGNyZWF0ZVJlbmRlcmVyID0gKGJpZCkgPT4ge1xuICBjb25zdCByZW5kZXJlciA9IFJlbmRlcmVyLmluc3RhbGwoe1xuICAgIHRhcmdldElkOiBiaWQuYWRVbml0Q29kZSxcbiAgICB1cmw6IFJFTkRFUkVSX1VSTCxcbiAgICBsb2FkZWQ6IGZhbHNlXG4gIH0pO1xuXG4gIHRyeSB7XG4gICAgcmVuZGVyZXIuc2V0UmVuZGVyKG91dHN0cmVhbVJlbmRlcik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ1dhcm4oJ1ByZWJpZCBFcnJvciBjYWxsaW5nIHNldFJlbmRlciBvbiByZW5kZXJlcicsIGVycik7XG4gIH1cblxuICByZXR1cm4gcmVuZGVyZXI7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQmlkKGJpZERhdGEpIHtcbiAgY29uc3QgYmlkID0ge1xuICAgIHJlcXVlc3RJZDogYmlkRGF0YS5iaWRJZCxcbiAgICBjcG06IGJpZERhdGEucHJpY2UsXG4gICAgd2lkdGg6IGJpZERhdGEud2lkdGgsXG4gICAgaGVpZ2h0OiBiaWREYXRhLmhlaWdodCxcbiAgICBjcmVhdGl2ZUlkOiBiaWREYXRhLmJpZElkLFxuICAgIGN1cnJlbmN5OiBiaWREYXRhLmN1cnJlbmN5LFxuICAgIG5ldFJldmVudWU6IHRydWUsXG4gICAgdHRsOiBUVEwsXG4gICAgbWV0YToge1xuICAgICAgYWR2ZXJ0aXNlckRvbWFpbnM6IGJpZERhdGEuYWR2ZXJ0aXNlckRvbWFpbnMgfHwgW10sXG4gICAgfVxuICB9O1xuXG4gIGlmIChiaWREYXRhLnBsYWNlbWVudCA9PT0gUExBQ0VNRU5UX1RZUEVfVklERU8pIHtcbiAgICBiaWQudmFzdFhtbCA9IGJpZERhdGEuY29udGVudDtcbiAgICBiaWQubWVkaWFUeXBlID0gVklERU87XG5cbiAgICAvLyBUT0RPOiB3aHkgZG9lcyB0aGlzIG5lZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIGV2ZXJ5IGFkIHVuaXQ/XG4gICAgbGV0IGFkVW5pdCA9IGZpbmQoYXVjdGlvbk1hbmFnZXIuZ2V0QWRVbml0cygpLCBmdW5jdGlvbiAodW5pdCkge1xuICAgICAgcmV0dXJuIHVuaXQudHJhbnNhY3Rpb25JZCA9PT0gYmlkRGF0YS50cmFuc2FjdGlvbklkO1xuICAgIH0pO1xuXG4gICAgaWYgKGFkVW5pdCkge1xuICAgICAgYmlkLndpZHRoID0gYWRVbml0Lm1lZGlhVHlwZXMudmlkZW8ucGxheWVyU2l6ZVswXVswXTtcbiAgICAgIGJpZC5oZWlnaHQgPSBhZFVuaXQubWVkaWFUeXBlcy52aWRlby5wbGF5ZXJTaXplWzBdWzFdO1xuXG4gICAgICBpZiAoYWRVbml0Lm1lZGlhVHlwZXMudmlkZW8uY29udGV4dCA9PT0gJ291dHN0cmVhbScpIHtcbiAgICAgICAgYmlkLnJlbmRlcmVyID0gY3JlYXRlUmVuZGVyZXIoYmlkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoYmlkRGF0YS5wbGFjZW1lbnQgPT09IFBMQUNFTUVOVF9UWVBFX0lOX0lNQUdFKSB7XG4gICAgYmlkLm1lZGlhVHlwZSA9IEJBTk5FUjtcbiAgICBiaWQuaW5JbWFnZUNvbnRlbnQgPSB7XG4gICAgICBjb250ZW50OiB7XG4gICAgICAgIGNvbnRlbnQ6IGJpZERhdGEuY29udGVudCxcbiAgICAgICAgYWN0aW9uVXJsczoge31cbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCBhY3Rpb25VcmxzID0gYmlkLmluSW1hZ2VDb250ZW50LmNvbnRlbnQuYWN0aW9uVXJscztcbiAgICBhY3Rpb25VcmxzLmxvYWRVcmxzID0gYmlkRGF0YS5pbkltYWdlLmxvYWR0cmFja2VycyB8fCBbXTtcbiAgICBhY3Rpb25VcmxzLmltcHJlc3Npb25VcmxzID0gYmlkRGF0YS5pbkltYWdlLmltcHRyYWNrZXJzIHx8IFtdO1xuICAgIGFjdGlvblVybHMuc2Nyb2xsQWN0VXJscyA9IGJpZERhdGEuaW5JbWFnZS5zdGFydHZpc2liaWxpdHl0cmFja2VycyB8fCBbXTtcbiAgICBhY3Rpb25VcmxzLnZpZXdVcmxzID0gYmlkRGF0YS5pbkltYWdlLnZpZXd0cmFja2VycyB8fCBbXTtcbiAgICBhY3Rpb25VcmxzLnN0b3BBbmltYXRpb25VcmxzID0gYmlkRGF0YS5pbkltYWdlLnN0b3BhbmltYXRpb250cmFja2VycyB8fCBbXTtcbiAgICBhY3Rpb25VcmxzLmNsb3NlQmFubmVyVXJscyA9IGJpZERhdGEuaW5JbWFnZS5jbG9zZWJhbm5lcnRyYWNrZXJzIHx8IFtdO1xuXG4gICAgaWYgKGJpZERhdGEuaW5JbWFnZS5idXQpIHtcbiAgICAgIGxldCBpbkltYWdlT3B0aW9ucyA9IGJpZC5pbkltYWdlQ29udGVudC5jb250ZW50LmluSW1hZ2VPcHRpb25zID0ge307XG4gICAgICBpbkltYWdlT3B0aW9ucy5oYXNCdXR0b24gPSB0cnVlO1xuICAgICAgaW5JbWFnZU9wdGlvbnMuYnV0dG9uTG9nb1VybCA9IGJpZERhdGEuaW5JbWFnZS5idXRfbG9nbztcbiAgICAgIGluSW1hZ2VPcHRpb25zLmJ1dHRvblByb2R1Y3RVcmwgPSBiaWREYXRhLmluSW1hZ2UuYnV0X3Byb2Q7XG4gICAgICBpbkltYWdlT3B0aW9ucy5idXR0b25IZWFkID0gYmlkRGF0YS5pbkltYWdlLmJ1dF9oZWFkO1xuICAgICAgaW5JbWFnZU9wdGlvbnMuYnV0dG9uSGVhZENvbG9yID0gYmlkRGF0YS5pbkltYWdlLmJ1dF9oZWFkX2NvbG91cjtcbiAgICAgIGluSW1hZ2VPcHRpb25zLmR5bnBhcmFtcyA9IGJpZERhdGEuaW5JbWFnZS5keW5wYXJhbXMgfHwge307XG4gICAgfVxuXG4gICAgYmlkLmFkID0gd3JhcEFkKGJpZCwgYmlkRGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgYmlkLmFkID0gYmlkRGF0YS5jb250ZW50O1xuICAgIGJpZC5tZWRpYVR5cGUgPSBCQU5ORVI7XG4gIH1cblxuICByZXR1cm4gYmlkO1xufVxuXG5mdW5jdGlvbiBnZXRNZWRpYVR5cGVGcm9tQmlkKGJpZCkge1xuICByZXR1cm4gYmlkLm1lZGlhVHlwZXMgJiYgT2JqZWN0LmtleXMoYmlkLm1lZGlhVHlwZXMpWzBdXG59XG5cbmZ1bmN0aW9uIGhhc1ZpZGVvTWFuZGF0b3J5UGFyYW1zKG1lZGlhVHlwZXMpIHtcbiAgY29uc3QgaXNIYXNWaWRlb0NvbnRleHQgPSAhIW1lZGlhVHlwZXMudmlkZW8gJiYgKG1lZGlhVHlwZXMudmlkZW8uY29udGV4dCA9PT0gJ2luc3RyZWFtJyB8fCBtZWRpYVR5cGVzLnZpZGVvLmNvbnRleHQgPT09ICdvdXRzdHJlYW0nKTtcblxuICBjb25zdCBpc1BsYXllclNpemUgPVxuICAgICEhZGVlcEFjY2VzcyhtZWRpYVR5cGVzLCAndmlkZW8ucGxheWVyU2l6ZScpICYmXG4gICAgaXNBcnJheShkZWVwQWNjZXNzKG1lZGlhVHlwZXMsICd2aWRlby5wbGF5ZXJTaXplJykpO1xuXG4gIHJldHVybiBpc0hhc1ZpZGVvQ29udGV4dCAmJiBpc1BsYXllclNpemU7XG59XG5cbmZ1bmN0aW9uIHdyYXBBZChiaWQsIGJpZERhdGEpIHtcbiAgcmV0dXJuIGA8IURPQ1RZUEUgaHRtbD5cbiAgICA8aHRtbCBsYW5nPVwiZW5cIj5cbiAgICA8aGVhZD5cbiAgICAgICAgPG1ldGEgY2hhcnNldD1cIlVURi04XCI+XG4gICAgICAgIDx0aXRsZT48L3RpdGxlPlxuICAgICAgICA8c2NyaXB0IHNyYz1cImh0dHBzOi8vc3QuaHlicmlkLmFpL3ByZWJpZHJlbmRlcmVyLmpzXCI+PC9zY3JpcHQ+XG4gICAgICAgIDxzdHlsZT5odG1sLCBib2R5IHt3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyBtYXJnaW46IDA7fTwvc3R5bGU+XG4gICAgPC9oZWFkPlxuICAgIDxib2R5PlxuICAgICAgICA8ZGl2IGRhdGEtaHliLXNzcC1pbi1pbWFnZS1vdmVybGF5PVwiJHtiaWREYXRhLnBsYWNlSWR9XCIgc3R5bGU9XCJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlO1wiPjwvZGl2PlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICAgaWYgKHBhcmVudC53aW5kb3cuZnJhbWVzW3dpbmRvdy5uYW1lXSkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnREb2N1bWVudCA9IHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyZW50LndpbmRvdy5mcmFtZXNbd2luZG93Lm5hbWVdLm5hbWUpO1xuICAgICAgICAgICAgICAgIHBhcmVudERvY3VtZW50LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuICAgICAgICAgICAgICAgIHBhcmVudERvY3VtZW50LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2NvbnRlbnQgPSBcIiR7ZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGJpZC5pbkltYWdlQ29udGVudCkpfVwiO1xuICAgICAgICAgICAgd2luZG93Ll9oeWJfcHJlYmlkX3NzcC5yZWdpc3RlckluSW1hZ2UoSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQoX2NvbnRlbnQpKSk7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgIDwvYm9keT5cbiAgPC9odG1sPmA7XG59XG5cbmV4cG9ydCBjb25zdCBzcGVjID0ge1xuICBjb2RlOiBCSURERVJfQ09ERSxcbiAgc3VwcG9ydGVkTWVkaWFUeXBlczogW0JBTk5FUiwgVklERU9dLFxuICBwbGFjZW1lbnRUeXBlczogcGxhY2VtZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBub3QgdGhlIGdpdmVuIGJpZCByZXF1ZXN0IGlzIHZhbGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge0JpZFJlcXVlc3R9IGJpZCBUaGUgYmlkIHBhcmFtcyB0byB2YWxpZGF0ZS5cbiAgICogQHJldHVybiBib29sZWFuIFRydWUgaWYgdGhpcyBpcyBhIHZhbGlkIGJpZCwgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGlzQmlkUmVxdWVzdFZhbGlkKGJpZCkge1xuICAgIHJldHVybiAoXG4gICAgICAhIWJpZC5wYXJhbXMucGxhY2VJZCAmJlxuICAgICAgISFiaWQucGFyYW1zLnBsYWNlbWVudCAmJlxuICAgICAgKFxuICAgICAgICAoZ2V0TWVkaWFUeXBlRnJvbUJpZChiaWQpID09PSBCQU5ORVIgJiYgYmlkLnBhcmFtcy5wbGFjZW1lbnQgPT09ICdiYW5uZXInKSB8fFxuICAgICAgICAoZ2V0TWVkaWFUeXBlRnJvbUJpZChiaWQpID09PSBCQU5ORVIgJiYgYmlkLnBhcmFtcy5wbGFjZW1lbnQgPT09ICdpbkltYWdlJyAmJiAhIWJpZC5wYXJhbXMuaW1hZ2VVcmwpIHx8XG4gICAgICAgIChnZXRNZWRpYVR5cGVGcm9tQmlkKGJpZCkgPT09IFZJREVPICYmIGJpZC5wYXJhbXMucGxhY2VtZW50ID09PSAndmlkZW8nICYmIGhhc1ZpZGVvTWFuZGF0b3J5UGFyYW1zKGJpZC5tZWRpYVR5cGVzKSlcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBNYWtlIGEgc2VydmVyIHJlcXVlc3QgZnJvbSB0aGUgbGlzdCBvZiBCaWRSZXF1ZXN0cy5cbiAgICpcbiAgICogQHBhcmFtIHt2YWxpZEJpZFJlcXVlc3RzW119IC0gYW4gYXJyYXkgb2YgYmlkc1xuICAgKiBAcmV0dXJuIFNlcnZlclJlcXVlc3QgSW5mbyBkZXNjcmliaW5nIHRoZSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIuXG4gICAqL1xuICBidWlsZFJlcXVlc3RzKHZhbGlkQmlkUmVxdWVzdHMsIGJpZGRlclJlcXVlc3QpIHtcbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgLy8gVE9ETzogaXMgJ3BhZ2UnIHRoZSByaWdodCB2YWx1ZSBoZXJlP1xuICAgICAgdXJsOiBiaWRkZXJSZXF1ZXN0LnJlZmVyZXJJbmZvLnBhZ2UsXG4gICAgICBjbXA6ICEhYmlkZGVyUmVxdWVzdC5nZHByQ29uc2VudCxcbiAgICAgIHRyYWZmaWNUeXBlOiBUUkFGRklDX1RZUEVfV0VCLFxuICAgICAgYmlkUmVxdWVzdHM6IGJ1aWxkQmlkUmVxdWVzdHModmFsaWRCaWRSZXF1ZXN0cylcbiAgICB9O1xuXG4gICAgaWYgKHBheWxvYWQuY21wKSB7XG4gICAgICBjb25zdCBnZHByQXBwbGllcyA9IGJpZGRlclJlcXVlc3QuZ2RwckNvbnNlbnQuZ2RwckFwcGxpZXM7XG4gICAgICBpZiAoZ2RwckFwcGxpZXMgIT09IHVuZGVmaW5lZCkgcGF5bG9hZFsnZ2EnXSA9IGdkcHJBcHBsaWVzO1xuICAgICAgcGF5bG9hZFsnY3MnXSA9IGJpZGRlclJlcXVlc3QuZ2RwckNvbnNlbnQuY29uc2VudFN0cmluZztcbiAgICB9XG5cbiAgICBjb25zdCBwYXlsb2FkU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgdXJsOiBEU1BfRU5EUE9JTlQsXG4gICAgICBkYXRhOiBwYXlsb2FkU3RyaW5nLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBVbnBhY2sgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciBpbnRvIGEgbGlzdCBvZiBiaWRzLlxuICAgKlxuICAgKiBAcGFyYW0ge1NlcnZlclJlc3BvbnNlfSBzZXJ2ZXJSZXNwb25zZSBBIHN1Y2Nlc3NmdWwgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyLlxuICAgKiBAcmV0dXJuIHtCaWRbXX0gQW4gYXJyYXkgb2YgYmlkcyB3aGljaCB3ZXJlIG5lc3RlZCBpbnNpZGUgdGhlIHNlcnZlci5cbiAgICovXG4gIGludGVycHJldFJlc3BvbnNlOiBmdW5jdGlvbihzZXJ2ZXJSZXNwb25zZSwgYmlkUmVxdWVzdCkge1xuICAgIGxldCBiaWRSZXF1ZXN0cyA9IEpTT04ucGFyc2UoYmlkUmVxdWVzdC5kYXRhKS5iaWRSZXF1ZXN0cztcbiAgICBjb25zdCBzZXJ2ZXJCb2R5ID0gc2VydmVyUmVzcG9uc2UuYm9keTtcblxuICAgIGlmIChzZXJ2ZXJCb2R5ICYmIHNlcnZlckJvZHkuYmlkcyAmJiBpc0FycmF5KHNlcnZlckJvZHkuYmlkcykpIHtcbiAgICAgIHJldHVybiBfbWFwKHNlcnZlckJvZHkuYmlkcywgZnVuY3Rpb24oYmlkKSB7XG4gICAgICAgIGxldCByYXdCaWQgPSBmaW5kKGJpZFJlcXVlc3RzLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtLmJpZElkID09PSBiaWQuYmlkSWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBiaWQucGxhY2VtZW50ID0gcmF3QmlkLnBsYWNlbWVudDtcbiAgICAgICAgYmlkLnBsYWNlSWQgPSByYXdCaWQucGxhY2VJZDtcbiAgICAgICAgcmV0dXJuIGJ1aWxkQmlkKGJpZCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuXG59XG5yZWdpc3RlckJpZGRlcihzcGVjKTtcbiIsImltcG9ydCB7cmVnaXN0ZXJCaWRkZXJ9IGZyb20gJy4uL3NyYy9hZGFwdGVycy9iaWRkZXJGYWN0b3J5LmpzJztcbmltcG9ydCB7Z2V0QWRVbml0U2l6ZXMsIHBhcnNlU2l6ZXNJbnB1dH0gZnJvbSAnLi4vc3JjL3V0aWxzLmpzJztcbmltcG9ydCB7aW5jbHVkZXN9IGZyb20gJy4uL3NyYy9wb2x5ZmlsbC5qcyc7XG5cbmNvbnN0IEJJRERFUl9DT0RFID0gJ2JldHdlZW4nO1xubGV0IEVORFBPSU5UID0gJ2h0dHBzOi8vYWRzLmJldHdlZW5kaWdpdGFsLmNvbS9hZGpzb24/dD1wcmViaWQnO1xuY29uc3QgQ09ERV9UWVBFUyA9IFsnaW5wYWdlJywgJ3ByZXJvbGwnLCAnbWlkcm9sbCcsICdwb3N0cm9sbCddO1xuXG5leHBvcnQgY29uc3Qgc3BlYyA9IHtcbiAgY29kZTogQklEREVSX0NPREUsXG4gIGFsaWFzZXM6IFsnYnR3J10sXG4gIHN1cHBvcnRlZE1lZGlhVHlwZXM6IFsnYmFubmVyJywgJ3ZpZGVvJ10sXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBiaWQgcmVxdWVzdCBpcyB2YWxpZC5cbiAgICpcbiAgICogQHBhcmFtIHtCaWRSZXF1ZXN0fSBiaWQgVGhlIGJpZCBwYXJhbXMgdG8gdmFsaWRhdGUuXG4gICAqIEByZXR1cm4gYm9vbGVhbiBUcnVlICBpZiB0aGlzIGlzIGEgdmFsaWQgYmlkLCBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgaXNCaWRSZXF1ZXN0VmFsaWQ6IGZ1bmN0aW9uKGJpZCkge1xuICAgIHJldHVybiBCb29sZWFuKGJpZC5wYXJhbXMucyk7XG4gIH0sXG4gIC8qKlxuICAgKiBNYWtlIGEgc2VydmVyIHJlcXVlc3QgZnJvbSB0aGUgbGlzdCBvZiBCaWRSZXF1ZXN0cy5cbiAgICpcbiAgICogQHBhcmFtIHt2YWxpZEJpZFJlcXVlc3Q/cGJqc19kZWJ1Zz10cnVlc1tdfSAtIGFuIGFycmF5IG9mIGJpZHNcbiAgICogQHJldHVybiBTZXJ2ZXJSZXF1ZXN0IEluZm8gZGVzY3JpYmluZyB0aGUgcmVxdWVzdCB0byB0aGUgc2VydmVyLlxuICAgKi9cbiAgYnVpbGRSZXF1ZXN0czogZnVuY3Rpb24odmFsaWRCaWRSZXF1ZXN0cywgYmlkZGVyUmVxdWVzdCkge1xuICAgIGxldCByZXF1ZXN0cyA9IFtdO1xuICAgIGNvbnN0IGdkcHJDb25zZW50ID0gYmlkZGVyUmVxdWVzdCAmJiBiaWRkZXJSZXF1ZXN0LmdkcHJDb25zZW50O1xuICAgIGNvbnN0IHJlZkluZm8gPSBiaWRkZXJSZXF1ZXN0Py5yZWZlcmVySW5mbztcblxuICAgIHZhbGlkQmlkUmVxdWVzdHMuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgY29uc3QgdmlkZW8gPSBpLm1lZGlhVHlwZXMgJiYgaS5tZWRpYVR5cGVzLnZpZGVvO1xuXG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBlaWRzOiBnZXRVc2Vyc0lkcyhpKSxcbiAgICAgICAgc2l6ZXM6IHBhcnNlU2l6ZXNJbnB1dChnZXRBZFVuaXRTaXplcyhpKSksXG4gICAgICAgIGpzdDogJ2hiJyxcbiAgICAgICAgb3JkOiBNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMDAwMDAwMDAsXG4gICAgICAgIHR6OiBnZXRUeigpLFxuICAgICAgICBmbDogZ2V0RmwoKSxcbiAgICAgICAgcnI6IGdldFJyKCksXG4gICAgICAgIHM6IGkucGFyYW1zICYmIGkucGFyYW1zLnMsXG4gICAgICAgIGJpZGlkOiBpLmJpZElkLFxuICAgICAgICB0cmFuc2FjdGlvbmlkOiBpLm9ydGIySW1wPy5leHQ/LnRpZCxcbiAgICAgICAgLy8gVE9ETzogZml4IGF1Y3Rpb25JZCBsZWFrOiBodHRwczovL2dpdGh1Yi5jb20vcHJlYmlkL1ByZWJpZC5qcy9pc3N1ZXMvOTc4MVxuICAgICAgICBhdWN0aW9uaWQ6IGkuYXVjdGlvbklkXG4gICAgICB9O1xuXG4gICAgICBpZiAodmlkZW8pIHtcbiAgICAgICAgcGFyYW1zLm1lZGlhVHlwZSA9IDI7XG4gICAgICAgIHBhcmFtcy5tYXhkID0gdmlkZW8ubWF4ZDtcbiAgICAgICAgcGFyYW1zLm1pbmQgPSB2aWRlby5taW5kO1xuICAgICAgICBwYXJhbXMucG9zID0gJ2F0Zic7XG4gICAgICAgIHBhcmFtcy5qc3QgPSAncHZjJztcbiAgICAgICAgcGFyYW1zLmNvZGVUeXBlID0gaW5jbHVkZXMoQ09ERV9UWVBFUywgdmlkZW8uY29kZVR5cGUpID8gdmlkZW8uY29kZVR5cGUgOiAnaW5wYWdlJztcbiAgICAgIH1cblxuICAgICAgaWYgKGkucGFyYW1zLml0dSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcmFtcy5pdHUgPSBpLnBhcmFtcy5pdHU7XG4gICAgICB9XG5cbiAgICAgIHBhcmFtcy5jdXIgPSBpLnBhcmFtcy5jdXIgfHwgJ1VTRCc7XG5cbiAgICAgIGlmIChpLnBhcmFtcy5zdWJpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcmFtcy5zdWJpZCA9IGkucGFyYW1zLnN1YmlkO1xuICAgICAgfVxuICAgICAgaWYgKGkucGFyYW1zLmNsaWNrM3JkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcGFyYW1zLmNsaWNrM3JkID0gaS5wYXJhbXMuY2xpY2szcmQ7XG4gICAgICB9XG4gICAgICBpZiAoaS5wYXJhbXMucHViZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiBpLnBhcmFtcy5wdWJkYXRhKSB7XG4gICAgICAgICAgcGFyYW1zWydwdWJzaWRlX21hY3JvWycgKyBrZXkgKyAnXSddID0gZW5jb2RlVVJJQ29tcG9uZW50KGkucGFyYW1zLnB1YmRhdGFba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGkuc2NoYWluKSB7XG4gICAgICAgIHBhcmFtcy5zY2hhaW4gPSBlbmNvZGVUb0Jhc2U2NFdlYlNhZmUoSlNPTi5zdHJpbmdpZnkoaS5zY2hhaW4pKTtcbiAgICAgIH1cblxuICAgICAgLy8gVE9ETzogaXMgJ3BhZ2UnIHRoZSByaWdodCB2YWx1ZSBoZXJlP1xuICAgICAgaWYgKHJlZkluZm8gJiYgcmVmSW5mby5wYWdlKSBwYXJhbXMucmVmID0gcmVmSW5mby5wYWdlO1xuXG4gICAgICBpZiAoZ2RwckNvbnNlbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZHByQ29uc2VudC5nZHByQXBwbGllcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwYXJhbXMuZ2RwckFwcGxpZXMgPSAhIWdkcHJDb25zZW50LmdkcHJBcHBsaWVzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZ2RwckNvbnNlbnQuY29uc2VudFN0cmluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwYXJhbXMuY29uc2VudFN0cmluZyA9IGdkcHJDb25zZW50LmNvbnNlbnRTdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVxdWVzdHMucHVzaCh7ZGF0YTogcGFyYW1zfSk7XG4gICAgfSlcbiAgICByZXR1cm4ge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICB1cmw6IEVORFBPSU5ULFxuICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdHMpXG4gICAgfVxuICAgIC8vIHJldHVybiByZXF1ZXN0cztcbiAgfSxcbiAgLyoqXG4gICAqIFVucGFjayB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIGludG8gYSBsaXN0IG9mIGJpZHMuXG4gICAqXG4gICAqIEBwYXJhbSB7U2VydmVyUmVzcG9uc2V9IHNlcnZlclJlc3BvbnNlIEEgc3VjY2Vzc2Z1bCByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqIEByZXR1cm4ge0JpZFtdfSBBbiBhcnJheSBvZiBiaWRzIHdoaWNoIHdlcmUgbmVzdGVkIGluc2lkZSB0aGUgc2VydmVyLlxuICAgKi9cbiAgaW50ZXJwcmV0UmVzcG9uc2U6IGZ1bmN0aW9uKHNlcnZlclJlc3BvbnNlLCBiaWRSZXF1ZXN0KSB7XG4gICAgY29uc3QgYmlkUmVzcG9uc2VzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlcnZlclJlc3BvbnNlLmJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBiaWRSZXNwb25zZSA9IHtcbiAgICAgICAgcmVxdWVzdElkOiBzZXJ2ZXJSZXNwb25zZS5ib2R5W2ldLmJpZGlkLFxuICAgICAgICBjcG06IHNlcnZlclJlc3BvbnNlLmJvZHlbaV0uY3BtIHx8IDAsXG4gICAgICAgIHdpZHRoOiBzZXJ2ZXJSZXNwb25zZS5ib2R5W2ldLncsXG4gICAgICAgIGhlaWdodDogc2VydmVyUmVzcG9uc2UuYm9keVtpXS5oLFxuICAgICAgICB2YXN0WG1sOiBzZXJ2ZXJSZXNwb25zZS5ib2R5W2ldLnZhc3RYbWwsXG4gICAgICAgIG1lZGlhVHlwZTogc2VydmVyUmVzcG9uc2UuYm9keVtpXS5tZWRpYVR5cGUsXG4gICAgICAgIHR0bDogc2VydmVyUmVzcG9uc2UuYm9keVtpXS50dGwsXG4gICAgICAgIGNyZWF0aXZlSWQ6IHNlcnZlclJlc3BvbnNlLmJvZHlbaV0uY3JlYXRpdmVpZCxcbiAgICAgICAgY3VycmVuY3k6IHNlcnZlclJlc3BvbnNlLmJvZHlbaV0uY3VycmVuY3kgfHwgJ1VTRCcsXG4gICAgICAgIG5ldFJldmVudWU6IHNlcnZlclJlc3BvbnNlLmJvZHlbaV0ubmV0UmV2ZW51ZSB8fCB0cnVlLFxuICAgICAgICBhZDogc2VydmVyUmVzcG9uc2UuYm9keVtpXS5hZCxcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgIGFkdmVydGlzZXJEb21haW5zOiBzZXJ2ZXJSZXNwb25zZS5ib2R5W2ldLmFkb21haW4gPyBzZXJ2ZXJSZXNwb25zZS5ib2R5W2ldLmFkb21haW4gOiBbXVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBiaWRSZXNwb25zZXMucHVzaChiaWRSZXNwb25zZSk7XG4gICAgfVxuICAgIHJldHVybiBiaWRSZXNwb25zZXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHRoZSB1c2VyIHN5bmMgcGl4ZWxzIHdoaWNoIHNob3VsZCBiZSBkcm9wcGVkIGFmdGVyIHRoZSBhdWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bmNPcHRpb25zfSBzeW5jT3B0aW9ucyBXaGljaCB1c2VyIHN5bmNzIGFyZSBhbGxvd2VkP1xuICAgKiBAcGFyYW0ge1NlcnZlclJlc3BvbnNlW119IHNlcnZlclJlc3BvbnNlcyBMaXN0IG9mIHNlcnZlcidzIHJlc3BvbnNlcy5cbiAgICogQHJldHVybiB7VXNlclN5bmNbXX0gVGhlIHVzZXIgc3luY3Mgd2hpY2ggc2hvdWxkIGJlIGRyb3BwZWQuXG4gICAqL1xuICBnZXRVc2VyU3luY3M6IGZ1bmN0aW9uKHN5bmNPcHRpb25zLCBzZXJ2ZXJSZXNwb25zZXMpIHtcbiAgICBsZXQgc3luY3MgPSBbXVxuICAgIC8qIGNvbnNvbGUubG9nKHN5bmNPcHRpb25zLHNlcnZlclJlc3BvbnNlcylcbiAgICAgaWYgKHN5bmNPcHRpb25zLmlmcmFtZUVuYWJsZWQpIHtcbiAgICAgIHN5bmNzLnB1c2goe1xuICAgICAgICB0eXBlOiAnaWZyYW1lJyxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9hY2RuLmFkbnhzLmNvbS9kbXAvYXN5bmNfdXNlcnN5bmMuaHRtbCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICAgaWYgKHN5bmNPcHRpb25zLnBpeGVsRW5hYmxlZCAmJiBzZXJ2ZXJSZXNwb25zZXMubGVuZ3RoID4gMCkge1xuICAgICAgc3luY3MucHVzaCh7XG4gICAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICAgIHVybDogc2VydmVyUmVzcG9uc2VzWzBdLmJvZHkudXNlclN5bmMudXJsXG4gICAgICB9KTtcbiAgICB9ICovXG5cbiAgICAvLyBzeW5jcy5wdXNoKHtcbiAgICAvLyAgIHR5cGU6ICdpZnJhbWUnLFxuICAgIC8vICAgdXJsOiAnaHR0cHM6Ly9hY2RuLmFkbnhzLmNvbS9kbXAvYXN5bmNfdXNlcnN5bmMuaHRtbCdcbiAgICAvLyB9KTtcbiAgICBzeW5jcy5wdXNoKFxuICAgICAge1xuICAgICAgICB0eXBlOiAnaWZyYW1lJyxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9hZHMuYmV0d2VlbmRpZ2l0YWwuY29tL3NzcG1hdGNoLWlmcmFtZSdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vYWRzLmJldHdlZW5kaWdpdGFsLmNvbS9zc3BtYXRjaCdcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiBzeW5jcztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRVc2Vyc0lkcyh7IHVzZXJJZEFzRWlkcyB9KSB7XG4gIHJldHVybiAodXNlcklkQXNFaWRzICYmIHVzZXJJZEFzRWlkcy5sZW5ndGggIT09IDApID8gdXNlcklkQXNFaWRzIDogW107XG59XG5cbmZ1bmN0aW9uIGdldFJyKCkge1xuICB0cnkge1xuICAgIHZhciB0ZCA9IHRvcC5kb2N1bWVudDtcbiAgICB2YXIgcnIgPSB0ZC5yZWZlcnJlcjtcbiAgfSBjYXRjaCAoZXJyKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgaWYgKHR5cGVvZiByciAhPSAndW5kZWZpbmVkJyAmJiByci5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChycik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJyICE9ICd1bmRlZmluZWQnICYmIHJyID09ICcnKSB7XG4gICAgcmV0dXJuICdkaXJlY3QnO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEZsKCkge1xuICBpZiAobmF2aWdhdG9yLnBsdWdpbnMgIT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IucGx1Z2lucyAhPT0gbnVsbCkge1xuICAgIGlmIChuYXZpZ2F0b3IucGx1Z2luc1snU2hvY2t3YXZlIEZsYXNoJ10gIT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IucGx1Z2luc1snU2hvY2t3YXZlIEZsYXNoJ10gIT09IG51bGwgJiYgdHlwZW9mIG5hdmlnYXRvci5wbHVnaW5zWydTaG9ja3dhdmUgRmxhc2gnXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBkZXNjcmlwdGlvbiA9IG5hdmlnYXRvci5wbHVnaW5zWydTaG9ja3dhdmUgRmxhc2gnXS5kZXNjcmlwdGlvbjtcbiAgICAgIGlmIChkZXNjcmlwdGlvbiAmJiAhKG5hdmlnYXRvci5taW1lVHlwZXMgIT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IubWltZVR5cGVzWydhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCddICYmICFuYXZpZ2F0b3IubWltZVR5cGVzWydhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCddLmVuYWJsZWRQbHVnaW4pKSB7XG4gICAgICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24ucmVwbGFjZSgvXi4qXFxzKyhcXFMrXFxzK1xcUyskKS8sICckMScpLnJlcGxhY2UoL14oLiopXFwuLiokLywgJyQxJyk7XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGRlc2NyaXB0aW9uLCAxMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGdldFR6KCkge1xuICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVUb0Jhc2U2NFdlYlNhZmUoc3RyaW5nKSB7XG4gIHJldHVybiBidG9hKHN0cmluZykucmVwbGFjZSgvXFwrL2csICctJykucmVwbGFjZSgvXFwvL2csICdfJykucmVwbGFjZSgvPSskLywgJycpO1xufVxuXG4vKlxuZnVuY3Rpb24gZ2V0X3B1YmRhdGEoYWRkcykge1xuICBpZiAoYWRkcyAhPT0gdW5kZWZpbmVkICYmIGFkZHMucHViZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBsZXQgdXJsID0gJyc7XG4gICAgZm9yKHZhciBrZXkgaW4gYWRkcy5wdWJkYXRhKSB7XG4gICAgICBpZiAoaW5kZXggPT0gMCkge1xuICAgICAgICB1cmwgPSB1cmwgKyBlbmNvZGVVUklDb21wb25lbnQoJ3B1YnNpZGVfbWFjcm9bJyArIGtleSArICddJykgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQoYWRkcy5wdWJkYXRhW2tleV0pO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsID0gdXJsICsgJyYnICsgZW5jb2RlVVJJQ29tcG9uZW50KCdwdWJzaWRlX21hY3JvWycgKyBrZXkgKyAnXScpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFkZHMucHViZGF0YVtrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbiAgfVxufVxuKi9cblxucmVnaXN0ZXJCaWRkZXIoc3BlYyk7XG4iLCJpbXBvcnQgeyBkZWVwQWNjZXNzLCB0cmlnZ2VyUGl4ZWwgfSBmcm9tICcuLi9zcmMvdXRpbHMuanMnO1xuaW1wb3J0IHtyZWdpc3RlckJpZGRlcn0gZnJvbSAnLi4vc3JjL2FkYXB0ZXJzL2JpZGRlckZhY3RvcnkuanMnO1xuaW1wb3J0IHtCQU5ORVIsIFZJREVPfSBmcm9tICcuLi9zcmMvbWVkaWFUeXBlcy5qcyc7XG5pbXBvcnQge09VVFNUUkVBTX0gZnJvbSAnLi4vc3JjL3ZpZGVvLmpzJztcbmltcG9ydCB7UmVuZGVyZXJ9IGZyb20gJy4uL3NyYy9SZW5kZXJlci5qcyc7XG5cbmNvbnN0IEJJRERFUl9DT0RFID0gJ3J0YnNhcGUnO1xuY29uc3QgRU5EUE9JTlQgPSAnaHR0cHM6Ly9zc3AtcnRiLnNhcGUucnUvcHJlYmlkJztcbmNvbnN0IFJFTkRFUkVSX1NSQyA9ICdodHRwczovL2Nkbi1ydGIuc2FwZS5ydS9qcy9wbGF5ZXIuanMnO1xuY29uc3QgTUFUQ0hfU1JDID0gJ2h0dHBzOi8vd3d3LmFjaW50Lm5ldC9tYy8/ZHA9MTQxJztcblxuZXhwb3J0IGNvbnN0IHNwZWMgPSB7XG4gIGNvZGU6IEJJRERFUl9DT0RFLFxuICBhbGlhc2VzOiBbJ3NhcGUnXSxcbiAgc3VwcG9ydGVkTWVkaWFUeXBlczogW0JBTk5FUiwgVklERU9dLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBiaWQgcmVxdWVzdCBpcyB2YWxpZC5cbiAgICpcbiAgICogQHBhcmFtIHtCaWRSZXF1ZXN0fSBiaWQgVGhlIGJpZCBwYXJhbXMgdG8gdmFsaWRhdGUuXG4gICAqIEByZXR1cm4gYm9vbGVhbiBUcnVlICBpZiB0aGlzIGlzIGEgdmFsaWQgYmlkLCBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgaXNCaWRSZXF1ZXN0VmFsaWQ6IGZ1bmN0aW9uIChiaWQpIHtcbiAgICByZXR1cm4gISEoYmlkICYmIGJpZC5tZWRpYVR5cGVzICYmIChiaWQubWVkaWFUeXBlcy5iYW5uZXIgfHwgYmlkLm1lZGlhVHlwZXMudmlkZW8pICYmIGJpZC5wYXJhbXMgJiYgYmlkLnBhcmFtcy5wbGFjZUlkKTtcbiAgfSxcblxuICAvKipcbiAgICogTWFrZSBhIHNlcnZlciByZXF1ZXN0IGZyb20gdGhlIGxpc3Qgb2YgQmlkUmVxdWVzdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7QmlkUmVxdWVzdFtdfSB2YWxpZEJpZFJlcXVlc3RzIGFuIGFycmF5IG9mIGJpZHNcbiAgICogQHBhcmFtIGJpZGRlclJlcXVlc3RcbiAgICogQHJldHVybiBTZXJ2ZXJSZXF1ZXN0IEluZm8gZGVzY3JpYmluZyB0aGUgcmVxdWVzdCB0byB0aGUgc2VydmVyLlxuICAgKi9cbiAgYnVpbGRSZXF1ZXN0czogZnVuY3Rpb24gKHZhbGlkQmlkUmVxdWVzdHMsIGJpZGRlclJlcXVlc3QpIHtcbiAgICBsZXQgdHogPSAobmV3IERhdGUoKSkuZ2V0VGltZXpvbmVPZmZzZXQoKVxuICAgIGxldCBwYWRJbnQgPSAodikgPT4gKHYgPCAxMCA/ICcwJyArIHYgOiAnJyArIHYpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVybDogRU5EUE9JTlQsXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgLy8gVE9ETzogZml4IGF1Y3Rpb25JZCBsZWFrOiBodHRwczovL2dpdGh1Yi5jb20vcHJlYmlkL1ByZWJpZC5qcy9pc3N1ZXMvOTc4MVxuICAgICAgICBhdWN0aW9uSWQ6IGJpZGRlclJlcXVlc3QuYXVjdGlvbklkLFxuICAgICAgICByZXF1ZXN0SWQ6IGJpZGRlclJlcXVlc3QuYmlkZGVyUmVxdWVzdElkLFxuICAgICAgICBiaWRzOiB2YWxpZEJpZFJlcXVlc3RzLFxuICAgICAgICB0aW1lem9uZTogKHR6ID4gMCA/ICctJyA6ICcrJykgKyBwYWRJbnQoTWF0aC5mbG9vcihNYXRoLmFicyh0eikgLyA2MCkpICsgJzonICsgcGFkSW50KE1hdGguYWJzKHR6KSAlIDYwKSxcbiAgICAgICAgLy8gVE9ETzogcGxlYXNlIGRvIG5vdCBzZW5kIGludGVybmFsIGRhdGEgc3RydWN0dXJlcyBvdmVyIHRoZSBuZXR3b3JrXG4gICAgICAgIHJlZmVyZXJJbmZvOiBiaWRkZXJSZXF1ZXN0LnJlZmVyZXJJbmZvLmxlZ2FjeVxuICAgICAgfSxcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVucGFjayB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIGludG8gYSBsaXN0IG9mIGJpZHMuXG4gICAqXG4gICAqIEBwYXJhbSB7U2VydmVyUmVzcG9uc2V9IHNlcnZlclJlc3BvbnNlIEEgc3VjY2Vzc2Z1bCByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqIEBwYXJhbSB7e2RhdGE6IHtiaWRzOiBbe21lZGlhVHlwZXM6IHtiYW5uZXI6IGJvb2xlYW59fV19fX0gYmlkUmVxdWVzdCBJbmZvIGRlc2NyaWJpbmcgdGhlIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAgICogQHJldHVybiB7QmlkW119IEFuIGFycmF5IG9mIGJpZHMgd2hpY2ggd2VyZSBuZXN0ZWQgaW5zaWRlIHRoZSBzZXJ2ZXIuXG4gICAqL1xuICBpbnRlcnByZXRSZXNwb25zZTogZnVuY3Rpb24gKHNlcnZlclJlc3BvbnNlLCBiaWRSZXF1ZXN0KSB7XG4gICAgaWYgKCEoc2VydmVyUmVzcG9uc2UuYm9keSAmJiBBcnJheS5pc0FycmF5KHNlcnZlclJlc3BvbnNlLmJvZHkuYmlkcykpKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgbGV0IGJpZHMgPSB7fTtcbiAgICBiaWRSZXF1ZXN0LmRhdGEuYmlkcy5mb3JFYWNoKGJpZCA9PiBiaWRzW2JpZC5iaWRJZF0gPSBiaWQpO1xuXG4gICAgcmV0dXJuIHNlcnZlclJlc3BvbnNlLmJvZHkuYmlkc1xuICAgICAgLmZpbHRlcihiaWQgPT4gdHlwZW9mIChiaWQubWV0YSB8fCB7fSkuYWR2ZXJ0aXNlckRvbWFpbnMgIT09ICd1bmRlZmluZWQnKVxuICAgICAgLm1hcChiaWQgPT4ge1xuICAgICAgICBsZXQgcmVxdWVzdEJpZCA9IGJpZHNbYmlkLnJlcXVlc3RJZF07XG4gICAgICAgIGxldCBjb250ZXh0ID0gZGVlcEFjY2VzcyhyZXF1ZXN0QmlkLCAnbWVkaWFUeXBlcy52aWRlby5jb250ZXh0Jyk7XG5cbiAgICAgICAgaWYgKGNvbnRleHQgPT09IE9VVFNUUkVBTSAmJiAoYmlkLnZhc3RVcmwgfHwgYmlkLnZhc3RYbWwpKSB7XG4gICAgICAgICAgbGV0IHJlbmRlcmVyID0gUmVuZGVyZXIuaW5zdGFsbCh7XG4gICAgICAgICAgICBpZDogYmlkLnJlcXVlc3RJZCxcbiAgICAgICAgICAgIHVybDogUkVOREVSRVJfU1JDLFxuICAgICAgICAgICAgbG9hZGVkOiBmYWxzZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbGV0IG11dGVkID0gZGVlcEFjY2VzcyhyZXF1ZXN0QmlkLCAncGFyYW1zLnZpZGVvLnBsYXllck11dGVkJyk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBtdXRlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG11dGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBiaWQucGxheWVyTXV0ZWQgPSBtdXRlZDtcbiAgICAgICAgICBiaWQucmVuZGVyZXIgPSByZW5kZXJlclxuXG4gICAgICAgICAgcmVuZGVyZXIuc2V0UmVuZGVyKHNldE91dHN0cmVhbVJlbmRlcmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBiaWQ7XG4gICAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVnaXN0ZXIgdGhlIHVzZXIgc3luYyBwaXhlbHMgd2hpY2ggc2hvdWxkIGJlIGRyb3BwZWQgYWZ0ZXIgdGhlIGF1Y3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7U3luY09wdGlvbnN9IHN5bmNPcHRpb25zIFdoaWNoIHVzZXIgc3luY3MgYXJlIGFsbG93ZWQ/XG4gICAqIEByZXR1cm4ge1VzZXJTeW5jW119IFRoZSB1c2VyIHN5bmNzIHdoaWNoIHNob3VsZCBiZSBkcm9wcGVkLlxuICAgKi9cbiAgZ2V0VXNlclN5bmNzOiBmdW5jdGlvbiAoc3luY09wdGlvbnMpIHtcbiAgICBjb25zdCBzeW5jID0gW107XG4gICAgaWYgKHN5bmNPcHRpb25zLmlmcmFtZUVuYWJsZWQpIHtcbiAgICAgIHN5bmMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdpZnJhbWUnLFxuICAgICAgICB1cmw6IE1BVENIX1NSQ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBzeW5jO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBiaWRkZXIgc3BlY2lmaWMgY29kZSwgd2hpY2ggd2lsbCBleGVjdXRlIGlmIGEgYmlkIGZyb20gdGhpcyBiaWRkZXIgd29uIHRoZSBhdWN0aW9uXG4gICAqIEBwYXJhbSB7QmlkfSBiaWQgVGhlIGJpZCB0aGF0IHdvbiB0aGUgYXVjdGlvblxuICAgKi9cbiAgb25CaWRXb246IGZ1bmN0aW9uKGJpZCkge1xuICAgIGlmIChiaWQubnVybCkge1xuICAgICAgdHJpZ2dlclBpeGVsKGJpZC5udXJsKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIFJ0YlNhcGUgb3V0c3RyZWFtIHBsYXllclxuICpcbiAqIEBwYXJhbSBiaWRcbiAqL1xuZnVuY3Rpb24gc2V0T3V0c3RyZWFtUmVuZGVyZXIoYmlkKSB7XG4gIGxldCBwcm9wcyA9IHt9O1xuICBpZiAoYmlkLnZhc3RVcmwpIHtcbiAgICBwcm9wcy51cmwgPSBiaWQudmFzdFVybDtcbiAgfVxuICBpZiAoYmlkLnZhc3RYbWwpIHtcbiAgICBwcm9wcy54bWwgPSBiaWQudmFzdFhtbDtcbiAgfVxuICBiaWQucmVuZGVyZXIucHVzaCgoKSA9PiB7XG4gICAgbGV0IHBsYXllciA9IHdpbmRvdy5zYXBlUnRiUGxheWVySGFuZGxlcihiaWQuYWRVbml0Q29kZSwgYmlkLndpZHRoLCBiaWQuaGVpZ2h0LCBiaWQucGxheWVyTXV0ZWQsIHtzaW5nbGV0b246IHRydWV9KTtcbiAgICBwcm9wcy5vbkNvbXBsZXRlID0gKCkgPT4gcGxheWVyLmRlc3Ryb3koKTtcbiAgICBwcm9wcy5vbkVycm9yID0gKCkgPT4gcGxheWVyLmRlc3Ryb3koKTtcbiAgICBwbGF5ZXIuYWRkU2xvdChwcm9wcyk7XG4gIH0pO1xufVxuXG5yZWdpc3RlckJpZGRlcihzcGVjKTtcbiIsImltcG9ydCB7IGRlZXBBY2Nlc3MsIGRlZXBDbG9uZSB9IGZyb20gJy4uL3NyYy91dGlscy5qcyc7XG5pbXBvcnQge3JlZ2lzdGVyQmlkZGVyfSBmcm9tICcuLi9zcmMvYWRhcHRlcnMvYmlkZGVyRmFjdG9yeS5qcyc7XG5pbXBvcnQge0JBTk5FUiwgVklERU8sIE5BVElWRX0gZnJvbSAnLi4vc3JjL21lZGlhVHlwZXMuanMnO1xuaW1wb3J0IHtSZW5kZXJlcn0gZnJvbSAnLi4vc3JjL1JlbmRlcmVyLmpzJztcbmltcG9ydCB7T1VUU1RSRUFNfSBmcm9tICcuLi9zcmMvdmlkZW8uanMnO1xuaW1wb3J0IHsgY29udmVydE9ydGJSZXF1ZXN0VG9Qcm9wcmlldGFyeU5hdGl2ZSB9IGZyb20gJy4uL3NyYy9uYXRpdmUuanMnO1xuXG5jb25zdCBCSURERVJfQ09ERSA9ICdidXp6b29sYSc7XG5jb25zdCBFTkRQT0lOVCA9ICdodHRwczovL2V4Y2hhbmdlLmJ1enpvb2xhLmNvbS9zc3AvcHJlYmlkanMnO1xuY29uc3QgUkVOREVSRVJfU1JDID0gJ2h0dHBzOi8vdHViZS5idXp6b29sYS5jb20vbmV3L2J1aWxkL2J1enpsaWJyYXJ5LmpzJztcblxuZXhwb3J0IGNvbnN0IHNwZWMgPSB7XG4gIGNvZGU6IEJJRERFUl9DT0RFLFxuICBhbGlhc2VzOiBbJ2J1enpvb2xhQWRhcHRlciddLFxuICBzdXBwb3J0ZWRNZWRpYVR5cGVzOiBbQkFOTkVSLCBWSURFTywgTkFUSVZFXSxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gYmlkIHJlcXVlc3QgaXMgdmFsaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7QmlkUmVxdWVzdH0gYmlkIFRoZSBiaWQgcGFyYW1zIHRvIHZhbGlkYXRlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoaXMgaXMgYSB2YWxpZCBiaWQsIGFuZCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBpc0JpZFJlcXVlc3RWYWxpZDogZnVuY3Rpb24gKGJpZCkge1xuICAgIGxldCB0eXBlcyA9IGJpZC5tZWRpYVR5cGVzO1xuICAgIHJldHVybiAhIShiaWQgJiYgYmlkLm1lZGlhVHlwZXMgJiYgKHR5cGVzLmJhbm5lciB8fCB0eXBlcy52aWRlbyB8fCB0eXBlcy5uYXRpdmUpICYmIGJpZC5wYXJhbXMgJiYgYmlkLnBhcmFtcy5wbGFjZW1lbnRJZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1ha2UgYSBzZXJ2ZXIgcmVxdWVzdCBmcm9tIHRoZSBsaXN0IG9mIEJpZFJlcXVlc3RzLlxuICAgKlxuICAgKiBAcGFyYW0ge0JpZFJlcXVlc3RbXX0gdmFsaWRCaWRSZXF1ZXN0cyBhbiBhcnJheSBvZiBiaWRzXG4gICAqIEBwYXJhbSBiaWRkZXJSZXF1ZXN0XG4gICAqIEByZXR1cm4gU2VydmVyUmVxdWVzdCBJbmZvIGRlc2NyaWJpbmcgdGhlIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAgICovXG4gIGJ1aWxkUmVxdWVzdHM6IGZ1bmN0aW9uICh2YWxpZEJpZFJlcXVlc3RzLCBiaWRkZXJSZXF1ZXN0KSB7XG4gICAgLy8gY29udmVydCBOYXRpdmUgT1JUQiBkZWZpbml0aW9uIHRvIG9sZC1zdHlsZSBwcmViaWQgbmF0aXZlIGRlZmluaXRpb25cbiAgICBiaWRkZXJSZXF1ZXN0LmJpZHMgPSBjb252ZXJ0T3J0YlJlcXVlc3RUb1Byb3ByaWV0YXJ5TmF0aXZlKGJpZGRlclJlcXVlc3QuYmlkcyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdXJsOiBFTkRQT0lOVCxcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgZGF0YTogYmlkZGVyUmVxdWVzdCxcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVucGFjayB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIGludG8gYSBsaXN0IG9mIGJpZHMuXG4gICAqXG4gICAqIEBwYXJhbSB7U2VydmVyUmVzcG9uc2V9IHNlcnZlclJlc3BvbnNlIEEgc3VjY2Vzc2Z1bCByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqIEBwYXJhbSBiaWRkZXJSZXF1ZXN0XG4gICAqIEByZXR1cm4ge0JpZFtdfSBBbiBhcnJheSBvZiBiaWRzIHdoaWNoIHdlcmUgbmVzdGVkIGluc2lkZSB0aGUgc2VydmVyLlxuICAgKi9cbiAgaW50ZXJwcmV0UmVzcG9uc2U6IGZ1bmN0aW9uICh7Ym9keX0sIHtkYXRhfSkge1xuICAgIGxldCByZXF1ZXN0QmlkcyA9IHt9O1xuICAgIGxldCByZXNwb25zZTtcblxuICAgIHRyeSB7XG4gICAgICByZXNwb25zZSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIHJlc3BvbnNlID0gYm9keTtcbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzcG9uc2UpKSByZXNwb25zZSA9IFtdO1xuXG4gICAgZGF0YS5iaWRzLmZvckVhY2goYmlkID0+IHJlcXVlc3RCaWRzW2JpZC5iaWRJZF0gPSBiaWQpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLm1hcChiaWQgPT4ge1xuICAgICAgbGV0IHJlcXVlc3RCaWQgPSByZXF1ZXN0Qmlkc1tiaWQucmVxdWVzdElkXTtcbiAgICAgIGxldCBjb250ZXh0ID0gZGVlcEFjY2VzcyhyZXF1ZXN0QmlkLCAnbWVkaWFUeXBlcy52aWRlby5jb250ZXh0Jyk7XG4gICAgICBsZXQgdmFsaWRCaWQgPSBkZWVwQ2xvbmUoYmlkKTtcblxuICAgICAgaWYgKHZhbGlkQmlkLm1lZGlhVHlwZSA9PT0gVklERU8gJiYgY29udGV4dCA9PT0gT1VUU1RSRUFNKSB7XG4gICAgICAgIGxldCByZW5kZXJlciA9IFJlbmRlcmVyLmluc3RhbGwoe1xuICAgICAgICAgIGlkOiB2YWxpZEJpZC5yZXF1ZXN0SWQsXG4gICAgICAgICAgdXJsOiBSRU5ERVJFUl9TUkMsXG4gICAgICAgICAgbG9hZGVkOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICByZW5kZXJlci5zZXRSZW5kZXIoc2V0T3V0c3RyZWFtUmVuZGVyZXIpO1xuICAgICAgICB2YWxpZEJpZC5yZW5kZXJlciA9IHJlbmRlcmVyXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWxpZEJpZDtcbiAgICB9KTtcbiAgfVxufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIEJ1enpvb2xhIE91dHN0cmVhbSBwbGF5ZXJcbiAqXG4gKiBAcGFyYW0gYmlkXG4gKi9cbmZ1bmN0aW9uIHNldE91dHN0cmVhbVJlbmRlcmVyKGJpZCkge1xuICBsZXQgYWREYXRhID0gSlNPTi5wYXJzZShiaWQuYWQpO1xuICBsZXQgdW5pdFNldHRpbmdzID0gZGVlcEFjY2VzcyhhZERhdGEsICdwbGFjZW1lbnQudW5pdF9zZXR0aW5ncycpO1xuICBsZXQgZXh0ZW5kZWRTZXR0aW5ncyA9IHtcbiAgICB3aWR0aDogJycgKyBiaWQud2lkdGgsXG4gICAgaGVpZ2h0OiAnJyArIGJpZC5oZWlnaHQsXG4gICAgY29udGFpbmVyX2hlaWdodDogJycgKyBiaWQuaGVpZ2h0XG4gIH07XG5cbiAgYWREYXRhLnBsYWNlbWVudCA9IE9iamVjdC5hc3NpZ24oe30sIGFkRGF0YS5wbGFjZW1lbnQpO1xuICBhZERhdGEucGxhY2VtZW50LnVuaXRfc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCB1bml0U2V0dGluZ3MsIGV4dGVuZGVkU2V0dGluZ3MpO1xuXG4gIGJpZC5yZW5kZXJlci5wdXNoKCgpID0+IHtcbiAgICB3aW5kb3cuQnV6em9vbGEuQ29yZS5pbnN0YWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2JpZC5hZFVuaXRDb2RlfWApLCB7XG4gICAgICBkYXRhOiBhZERhdGFcbiAgICB9KTtcbiAgfSk7XG59XG5cbnJlZ2lzdGVyQmlkZGVyKHNwZWMpO1xuIiwiaW1wb3J0IHsgcmVnaXN0ZXJCaWRkZXIgfSBmcm9tICcuLi9zcmMvYWRhcHRlcnMvYmlkZGVyRmFjdG9yeS5qcyc7XG5pbXBvcnQge1xuICBsb2dJbmZvLFxuICBsb2dFcnJvcixcbiAgZ2V0QmlkSWRQYXJhbWV0ZXIsXG4gIF9lYWNoLFxuICBnZXRWYWx1ZSxcbiAgaXNGbixcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNBcnJheSxcbiAgaXNTdHIsXG4gIGlzTnVtYmVyLFxufSBmcm9tICcuLi9zcmMvdXRpbHMuanMnO1xuaW1wb3J0IHsgQkFOTkVSIH0gZnJvbSAnLi4vc3JjL21lZGlhVHlwZXMuanMnO1xuXG5jb25zdCBCSURERVJfQ09ERSA9ICdvdG0nO1xuY29uc3QgT1RNX0JJRF9VUkwgPSAnaHR0cHM6Ly9zc3Aub3RtLXIuY29tL2FkanNvbic7XG5jb25zdCBERUZBVUxUX0NVUlJFTkNZID0gJ1JVQidcblxuZXhwb3J0IGNvbnN0IHNwZWMgPSB7XG5cbiAgY29kZTogQklEREVSX0NPREUsXG4gIHVybDogT1RNX0JJRF9VUkwsXG4gIHN1cHBvcnRlZE1lZGlhVHlwZXM6IFsgQkFOTkVSIF0sXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBub3QgdGhlIGdpdmVuIGJpZCByZXF1ZXN0IGlzIHZhbGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gYmlkIFRoZSBiaWQgdG8gdmFsaWRhdGUuXG4gICAqIEByZXR1cm4gYm9vbGVhbiBUcnVlIGlmIHRoaXMgaXMgYSB2YWxpZCBiaWQsIGFuZCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBpc0JpZFJlcXVlc3RWYWxpZDogZnVuY3Rpb24gKGJpZCkge1xuICAgIHJldHVybiBCb29sZWFuKGJpZC5wYXJhbXMudGlkKTtcbiAgfSxcblxuICAvKipcbiAgICogQnVpbGQgYmlkZGVyIHJlcXVlc3RzLlxuICAgKlxuICAgKiBAcGFyYW0gdmFsaWRCaWRSZXF1ZXN0c1xuICAgKiBAcGFyYW0gYmlkZGVyUmVxdWVzdFxuICAgKiBAcmV0dXJucyB7W119XG4gICAqL1xuICBidWlsZFJlcXVlc3RzOiBmdW5jdGlvbiAodmFsaWRCaWRSZXF1ZXN0cywgYmlkZGVyUmVxdWVzdCkge1xuICAgIGxvZ0luZm8oJ3ZhbGlkQmlkUmVxdWVzdHMnLCB2YWxpZEJpZFJlcXVlc3RzKTtcblxuICAgIGNvbnN0IGJpZFJlcXVlc3RzID0gW107XG4gICAgY29uc3QgdHogPSBuZXcgRGF0ZSgpLmdldFRpbWV6b25lT2Zmc2V0KClcbiAgICAvLyBUT0RPOiBhcmUgdGhlc2UgdGhlIHJpZ2h0IHJlZmVyZXIgdmFsdWVzP1xuICAgIGNvbnN0IHJlZmVycmVyID0gYmlkZGVyUmVxdWVzdD8ucmVmZXJlckluZm8/LnBhZ2UgfHwgJyc7XG4gICAgY29uc3QgdG9wT3JpZ2luID0gYmlkZGVyUmVxdWVzdD8ucmVmZXJlckluZm8/LmRvbWFpbiB8fCAnJztcblxuICAgIF9lYWNoKHZhbGlkQmlkUmVxdWVzdHMsIChiaWQpID0+IHtcbiAgICAgIGNvbnN0IGRvbWFpbiA9IGlzU3RyKGJpZC5wYXJhbXMuZG9tYWluKSA/IGJpZC5wYXJhbXMuZG9tYWluIDogdG9wT3JpZ2luXG4gICAgICBjb25zdCBjdXIgPSBnZXRWYWx1ZShiaWQucGFyYW1zLCAnY3VycmVuY3knKSB8fCBERUZBVUxUX0NVUlJFTkNZXG4gICAgICBjb25zdCBiaWRpZCA9IGdldEJpZElkUGFyYW1ldGVyKCdiaWRJZCcsIGJpZClcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uaWQgPSBiaWQub3J0YjJJbXA/LmV4dD8udGlkIHx8ICcnO1xuICAgICAgLy8gVE9ETzogZml4IGF1Y3Rpb25JZCBsZWFrOiBodHRwczovL2dpdGh1Yi5jb20vcHJlYmlkL1ByZWJpZC5qcy9pc3N1ZXMvOTc4MVxuICAgICAgY29uc3QgYXVjdGlvbmlkID0gZ2V0QmlkSWRQYXJhbWV0ZXIoJ2F1Y3Rpb25JZCcsIGJpZClcbiAgICAgIGNvbnN0IGJpZGZsb29yID0gX2dldEJpZEZsb29yKGJpZClcblxuICAgICAgX2VhY2goYmlkLnNpemVzLCBzaXplID0+IHtcbiAgICAgICAgY29uc3QgaGFzU2l6ZXMgPSBpc0FycmF5KHNpemUpICYmIGlzTnVtYmVyKHNpemVbMF0pICYmIGlzTnVtYmVyKHNpemVbMV0pXG4gICAgICAgIGNvbnN0IHdpZHRoID0gaGFzU2l6ZXMgPyBzaXplWzBdIDogMDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gaGFzU2l6ZXMgPyBzaXplWzFdIDogMDtcblxuICAgICAgICBiaWRSZXF1ZXN0cy5wdXNoKHtcbiAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgIHVybDogT1RNX0JJRF9VUkwsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdHosXG4gICAgICAgICAgICB3OiB3aWR0aCxcbiAgICAgICAgICAgIGg6IGhlaWdodCxcbiAgICAgICAgICAgIGRvbWFpbixcbiAgICAgICAgICAgIGw6IHJlZmVycmVyLFxuICAgICAgICAgICAgczogYmlkLnBhcmFtcy50aWQsXG4gICAgICAgICAgICBjdXIsXG4gICAgICAgICAgICBiaWRpZCxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uaWQsXG4gICAgICAgICAgICBhdWN0aW9uaWQsXG4gICAgICAgICAgICBiaWRmbG9vcixcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICAgIHJldHVybiBiaWRSZXF1ZXN0cztcbiAgfSxcblxuICAvKipcbiAgICogR2VuZXJhdGUgcmVzcG9uc2UuXG4gICAqXG4gICAqIEBwYXJhbSBzZXJ2ZXJSZXNwb25zZVxuICAgKiBAcmV0dXJucyB7W118KltdfVxuICAgKi9cbiAgaW50ZXJwcmV0UmVzcG9uc2U6IGZ1bmN0aW9uIChzZXJ2ZXJSZXNwb25zZSkge1xuICAgIGxvZ0luZm8oJ3NlcnZlclJlc3BvbnNlJywgc2VydmVyUmVzcG9uc2UuYm9keSk7XG5cbiAgICBjb25zdCByZXNwb25zZXNCb2R5ID0gc2VydmVyUmVzcG9uc2UgPyBzZXJ2ZXJSZXNwb25zZS5ib2R5IDoge307XG4gICAgY29uc3QgYmlkUmVzcG9uc2VzID0gW107XG4gICAgdHJ5IHtcbiAgICAgIGlmIChyZXNwb25zZXNCb2R5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIF9lYWNoKHJlc3BvbnNlc0JvZHksIChiaWQpID0+IHtcbiAgICAgICAgaWYgKGJpZC5hZCkge1xuICAgICAgICAgIGJpZFJlc3BvbnNlcy5wdXNoKHtcbiAgICAgICAgICAgIHJlcXVlc3RJZDogYmlkLmJpZGlkLFxuICAgICAgICAgICAgY3BtOiBiaWQuY3BtLFxuICAgICAgICAgICAgd2lkdGg6IGJpZC53LFxuICAgICAgICAgICAgaGVpZ2h0OiBiaWQuaCxcbiAgICAgICAgICAgIGNyZWF0aXZlSWQ6IGJpZC5jcmVhdGl2ZWlkLFxuICAgICAgICAgICAgY3VycmVuY3k6IGJpZC5jdXJyZW5jeSB8fCBERUZBVUxUX0NVUlJFTkNZLFxuICAgICAgICAgICAgbmV0UmV2ZW51ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFkOiBiaWQuYWQsXG4gICAgICAgICAgICB0dGw6IGJpZC50dGwsXG4gICAgICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICAgIGFkdmVydGlzZXJEb21haW5zOiBiaWQuYWREb21haW4gPyBbYmlkLmFkRG9tYWluXSA6IFtdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dFcnJvcihlcnJvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJpZFJlc3BvbnNlcztcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgZmxvb3IgdmFsdWVcbiAqIEBwYXJhbSBiaWRcbiAqIEByZXR1cm5zIHtudWxsfCp9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfZ2V0QmlkRmxvb3IoYmlkKSB7XG4gIGlmICghaXNGbihiaWQuZ2V0Rmxvb3IpKSB7XG4gICAgcmV0dXJuIGJpZC5wYXJhbXMuYmlkZmxvb3IgPyBiaWQucGFyYW1zLmJpZGZsb29yIDogMDtcbiAgfVxuXG4gIGNvbnN0IGZsb29yID0gYmlkLmdldEZsb29yKHtcbiAgICBjdXJyZW5jeTogREVGQVVMVF9DVVJSRU5DWSxcbiAgICBtZWRpYVR5cGU6ICcqJyxcbiAgICBzaXplOiAnKidcbiAgfSk7XG4gIGlmIChpc1BsYWluT2JqZWN0KGZsb29yKSAmJiAhaXNOYU4oZmxvb3IuZmxvb3IpICYmIGZsb29yLmN1cnJlbmN5ID09PSBERUZBVUxUX0NVUlJFTkNZKSB7XG4gICAgcmV0dXJuIGZsb29yLmZsb29yO1xuICB9XG4gIHJldHVybiAwO1xufVxuXG5yZWdpc3RlckJpZGRlcihzcGVjKTtcbiIsImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgcGJqcyBmcm9tICdwcmViaWQuanMnO1xuaW1wb3J0ICdwcmViaWQuanMvbW9kdWxlcy9hbGxvd0FjdGl2aXRpZXMnO1xuaW1wb3J0ICdwcmViaWQuanMvbW9kdWxlcy9jdXJyZW5jeSc7XG5pbXBvcnQgJ3ByZWJpZC5qcy9tb2R1bGVzL2VucmljaG1lbnRGcGRNb2R1bGUnO1xuaW1wb3J0ICdwcmViaWQuanMvbW9kdWxlcy91c2VySWQnO1xuaW1wb3J0ICdwcmViaWQuanMvbW9kdWxlcy9zaGFyZWRJZFN5c3RlbSc7XG5pbXBvcnQgJ3ByZWJpZC5qcy9tb2R1bGVzL2Fkcml2ZXJJZFN5c3RlbSc7XG5pbXBvcnQgJ3ByZWJpZC5qcy9tb2R1bGVzL3BhaXJJZFN5c3RlbSc7XG5pbXBvcnQgJ3ByZWJpZC5qcy9tb2R1bGVzL3J0ZE1vZHVsZSc7XG5pbXBvcnQgJ3ByZWJpZC5qcy9tb2R1bGVzL2ludGVyc2VjdGlvblJ0ZFByb3ZpZGVyJztcbmltcG9ydCAncHJlYmlkLmpzL21vZHVsZXMvY3VzdG9tR2VvbG9jYXRpb25SdGRQcm92aWRlcic7XG5pbXBvcnQgJ3ByZWJpZC5qcy9tb2R1bGVzL2Fkcml2ZXJCaWRBZGFwdGVyJztcbmltcG9ydCAncHJlYmlkLmpzL21vZHVsZXMvbXl0YXJnZXRCaWRBZGFwdGVyJztcbmltcG9ydCAncHJlYmlkLmpzL21vZHVsZXMvaHlicmlkQmlkQWRhcHRlcic7XG5pbXBvcnQgJ3ByZWJpZC5qcy9tb2R1bGVzL2JldHdlZW5CaWRBZGFwdGVyJztcbmltcG9ydCAncHJlYmlkLmpzL21vZHVsZXMvcnRic2FwZUJpZEFkYXB0ZXInO1xuaW1wb3J0ICdwcmViaWQuanMvbW9kdWxlcy9idXp6b29sYUJpZEFkYXB0ZXInO1xuaW1wb3J0ICdwcmViaWQuanMvbW9kdWxlcy9vdG1CaWRBZGFwdGVyJztcblxuXG5cbmZ1bmN0aW9uIGNvbXBvbmVudCgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAvLyBMb2Rhc2gsIG5vdyBpbXBvcnRlZCBieSB0aGlzIHNjcmlwdFxuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gXy5qb2luKFsnSGVsbG8nLCAnd2VicGFjayddLCAnICcpO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG59XG4gIFxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb21wb25lbnQoKSk7XG4gIFxuLy8gY29uc29sZS5sb2cocGJqcyk7XG5cbndpbmRvdy5hZFVuaXRzID0gW1xuICAgIHtcbiAgICBjb2RlOiAnZGl2LWdwdC1hZC0zMDB4MjUwX2ZzJywgLyog0YTRg9C70LvRgdC60YDQuNC9ICovXG4gICAgbWVkaWFUeXBlczoge1xuICAgICAgICBiYW5uZXI6IHtcbiAgICAgICAgICAgIHNpemVzOiBbWzMwMCwgMjUwXV1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmlkczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBiaWRkZXI6IFwiYWRyaXZlclwiLFxuICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBzaXRlaWQ6ICAgICAgICAgJzM4MScsICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgcGxhY2VtZW50SWQ6ICc2MzpraW5vcm9sZV9wcmViaWRfRlNfdjInLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBiaWRkZXI6IFwibXl0YXJnZXRcIixcbiAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgcGxhY2VtZW50SWQ6ICcxNDAwNTA4JyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYmlkZGVyOiBcImh5YnJpZFwiLFxuICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwbGFjZW1lbnQ6IFwiYmFubmVyXCIsXG4gICAgICAgICAgICBwbGFjZUlkOiBcIjY0Zjg4MDk0YjdlYTA2MTU2MDY5ZTczYVwiLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBiaWRkZXI6ICdydGJzYXBlJyxcbiAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgcGxhY2VJZDogODYwMzQ0LFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBiaWRkZXI6ICdidXp6b29sYScsXG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHBsYWNlbWVudElkOiAnMTI1MzY4MCcsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJpZGRlcjogJ2JldHdlZW4nLFxuICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBzOiAnNDcxMzcwOCcsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJpZGRlcjogJ290bScsXG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHRpZDogJzQ4ODg2JyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgY29kZTogJ2Rpdi1ncHQtYWQtMzAweDI1MF9yZWMnLCAvKiDRhNC70LDQudGA0L7Qu9C7ICovXG4gICAgbWVkaWFUeXBlczoge1xuICAgICAgICBiYW5uZXI6IHtcbiAgICAgICAgICAgIHNpemVzOiBbWzMwMCwgMjUwXV1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmlkczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBiaWRkZXI6IFwiYWRyaXZlclwiLFxuICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBzaXRlaWQ6ICAgICAgICAgJzM4MScsICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgcGxhY2VtZW50SWQ6ICc2MzpraW5vcm9sZV9wcmViaWRfcmVjX3YyJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYmlkZGVyOiBcIm15dGFyZ2V0XCIsXG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHBsYWNlbWVudElkOiAnMTQwMDUwNicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJpZGRlcjogXCJoeWJyaWRcIixcbiAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgcGxhY2VtZW50OiBcImJhbm5lclwiLFxuICAgICAgICAgICAgcGxhY2VJZDogXCI2NGY4ODA3YWI3ZWEwNjE1NjA2OWU3MzlcIixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYmlkZGVyOiAncnRic2FwZScsXG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHBsYWNlSWQ6IDg2MDM0NSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYmlkZGVyOiAnYnV6em9vbGEnLFxuICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwbGFjZW1lbnRJZDogJzEyNTM2ODInLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBiaWRkZXI6ICdiZXR3ZWVuJyxcbiAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgczogJzQ3MTM3MTInLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBiaWRkZXI6ICdvdG0nLFxuICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICB0aWQ6ICc0ODg4NycsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgXVxuICAgIH0sXG4gICAge1xuICAgIGNvZGU6ICdkaXYtZ3B0LWFkLTMwMHgyNTBfc3RhdCcsLyrRgdGC0LDRgtC40LrQsCovXG4gICAgbWVkaWFUeXBlczoge1xuICAgICAgICBiYW5uZXI6IHtcbiAgICAgICAgICAgIHNpemVzOiBbWzMwMCwgMjUwXV1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmlkczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBiaWRkZXI6IFwiYWRyaXZlclwiLFxuICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBzaXRlaWQ6ICAgICAgICAgJzM4MScsICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgcGxhY2VtZW50SWQ6ICc2MzpraW5vcm9sZV9wcmViaWRfc3RhdF92MicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJpZGRlcjogXCJteXRhcmdldFwiLFxuICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwbGFjZW1lbnRJZDogJzE0MDA1MTAnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBiaWRkZXI6IFwiaHlicmlkXCIsXG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHBsYWNlbWVudDogXCJiYW5uZXJcIixcbiAgICAgICAgICAgIHBsYWNlSWQ6IFwiNjRmODgwYmFiN2VhMDYxNTYwNjllNzNiXCIsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJpZGRlcjogJ3J0YnNhcGUnLFxuICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwbGFjZUlkOiA4NjAzNDYsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJpZGRlcjogJ2J1enpvb2xhJyxcbiAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgcGxhY2VtZW50SWQ6ICcxMjUzNjc5JyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYmlkZGVyOiAnYmV0d2VlbicsXG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHM6ICc0NzEzNzEwJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYmlkZGVyOiAnb3RtJyxcbiAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgdGlkOiAnNDg4ODUnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICBjb2RlOiAnZGl2LWdwdC1hZC0zMDB4MjUwJywgLyogY9Cw0LnQtNCx0LDRgCAqL1xuICAgIG1lZGlhVHlwZXM6IHtcbiAgICAgICAgYmFubmVyOiB7XG4gICAgICAgICAgICBzaXplczogW1szMDAsIDI1MF1dXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJpZHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgICAgIGJpZGRlcjogXCJhZHJpdmVyXCIsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgc2l0ZWlkOiAgICAgICAgICczODEnLCAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRJZDogJzYzOmtpbm9yb2xlX3ByZWJpZF92MicsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAgICAgYmlkZGVyOiBcIm15dGFyZ2V0XCIsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgcGxhY2VtZW50SWQ6ICcxNDAwNTEyJyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgICAgICBiaWRkZXI6IFwiaHlicmlkXCIsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgcGxhY2VtZW50OiBcImJhbm5lclwiLFxuICAgICAgICAgICAgICAgIHBsYWNlSWQ6IFwiNjRmODgwMWJiMWVlOTE1ZjI0M2UzNGYxXCIsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAgICAgYmlkZGVyOiAncnRic2FwZScsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgcGxhY2VJZDogODYwMzQzLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgICAgIGJpZGRlcjogJ2J1enpvb2xhJyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRJZDogJzEyNTM2ODMnLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgICAgIGJpZGRlcjogJ2JldHdlZW4nLFxuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgIHM6ICc0NzEzNzExJyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgICAgICBiaWRkZXI6ICdvdG0nLFxuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgIHRpZDogJzQ4ODg0JyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF1cbiAgICB9XTtcblxuXG4gICAgd2luZG93LnBiQ29uZmlnID0ge1xuICAgICAgICBjdXJyZW5jeToge1xuICAgICAgICAgICAgYWRTZXJ2ZXJDdXJyZW5jeTogXCJSVUJcIixcbiAgICAgICAgICAgIGdyYW51bGFyaXR5TXVsdGlwbGllcjogMSxcbiAgICAgICAgICAgIGRlZmF1bHRSYXRlczogeyBcbiAgICAgICAgICAgIFwiVVNEXCI6IHsgXCJSVUJcIjogOTguMzA4ODM5NTk1MDQ0IH0sXG4gICAgICAgICAgICBcIkVVUlwiOiB7IFwiUlVCXCI6IDEwNS4yOTI3NzU0NDQzNCB9LFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmaXJzdFBhcnR5RGF0YToge1xuICAgICAgICAgICAgdWFIaW50czogW1xuICAgICAgICAgICAgICAgIFwiYXJjaGl0ZWN0dXJlXCIsXG4gICAgICAgICAgICAgICAgXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgIFwicGxhdGZvcm1cIixcbiAgICAgICAgICAgICAgICBcInBsYXRmb3JtVmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIFwiZnVsbFZlcnNpb25MaXN0XCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgdXNlclN5bmM6IHtcbiAgICAgICAgICAgIHVzZXJJZHM6IFt7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaGFyZWRJZFwiLFxuICAgICAgICAgICAgICAgIHN0b3JhZ2U6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNvb2tpZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX3NoYXJlZGlkXCIsXG4gICAgICAgICAgICAgICAgZXhwaXJlczogMTgwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFkcml2ZXJJZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdwYWlySWQnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHJlYWxUaW1lRGF0YToge1xuICAgICAgICAgICAgYXVjdGlvbkRlbGF5OiAxMDAsXG4gICAgICAgICAgICBkYXRhUHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY3VzdG9tR2VvbG9jYXRpb25cIixcbiAgICAgICAgICAgICAgICAgIFwid2FpdEZvckl0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICBcInBhcmFtc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZ2VvOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjdXJhY3k6IDE0MzguNjAzNzk2NjMwMDczNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0aXR1ZGU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGl0dWRlQWNjdXJhY3k6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiA0Ny4yMzUwNzIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogMzkuNzk2NzM2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlZDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IDE2OTUwMjEwMzMwMjlcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7ICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImludGVyc2VjdGlvblwiLFxuICAgICAgICAgICAgICAgIFwid2FpdEZvckl0XCI6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBlbmFibGVUSURzOiB0cnVlLFxuICAgICAgICBkZXZpY2VBY2Nlc3M6IHRydWUsXG4gICAgICAgIGFsbG93QWN0aXZpdGllczoge1xuICAgICAgICAgICAgc3luY1VzZXI6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgICAgICBydWxlczogW1xuICAgICAgICAgICAgICAgIHthbGxvdzogdHJ1ZX0gXG4gICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWNjZXNzRGV2aWNlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICAgICAgcnVsZXM6IFtcbiAgICAgICAgICAgICAgICB7YWxsb3c6IHRydWV9IFxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuXG5cbmNsYXNzIFByZWJpZERyaXZlciB7XG4gICAgYWRVbml0SWQgPSBudWxsO1xuICAgIHBhcmVudENvbnRhaW5lciA9IG51bGw7XG4gICAgYmFubmVyQ29udGFpbmVyID0gbnVsbDtcbiAgICBkZWJ1ZyA9IDE7XG4gICAgdGltZW91dCA9IDIwMDA7XG4gICAgYWRVbml0ID0gbnVsbDtcbiAgICByZXF1ZXN0Qmlkc09iaiA9IG51bGw7XG4gICAgcHJlZmVycmVkQ3VycmVuY3kgPSAnUlVCJztcbiAgICB1bnNvbGRSZWZyZXNoVGltZW91dCA9IDEwMDA7XG4gICAgbWF4RmFpbGVkUmVxdWVzdHMgPSAyO1xuICAgIGZhaWxlZFJlcXVlc3RzQ291bnQgPSAwO1xuICAgIHBiQ29uZmlnID0ge1xuICAgICAgICBjdXJyZW5jeToge1xuICAgICAgICAgICAgYWRTZXJ2ZXJDdXJyZW5jeTogXCJSVUJcIixcbiAgICAgICAgICAgIGdyYW51bGFyaXR5TXVsdGlwbGllcjogMSxcbiAgICAgICAgICAgIGRlZmF1bHRSYXRlczogeyBcbiAgICAgICAgICAgIFwiVVNEXCI6IHsgXCJSVUJcIjogOTguMzA4ODM5NTk1MDQ0IH0sXG4gICAgICAgICAgICBcIkVVUlwiOiB7IFwiUlVCXCI6IDEwNS4yOTI3NzU0NDQzNCB9LFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmaXJzdFBhcnR5RGF0YToge1xuICAgICAgICAgICAgdWFIaW50czogW1xuICAgICAgICAgICAgICAgIFwiYXJjaGl0ZWN0dXJlXCIsXG4gICAgICAgICAgICAgICAgXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgIFwicGxhdGZvcm1cIixcbiAgICAgICAgICAgICAgICBcInBsYXRmb3JtVmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIFwiZnVsbFZlcnNpb25MaXN0XCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgdXNlclN5bmM6IHtcbiAgICAgICAgICAgIHVzZXJJZHM6IFt7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaGFyZWRJZFwiLFxuICAgICAgICAgICAgICAgIHN0b3JhZ2U6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNvb2tpZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX3NoYXJlZGlkXCIsXG4gICAgICAgICAgICAgICAgZXhwaXJlczogMTgwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFkcml2ZXJJZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdwYWlySWQnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHJlYWxUaW1lRGF0YToge1xuICAgICAgICAgICAgYXVjdGlvbkRlbGF5OiAxMDAsXG4gICAgICAgICAgICBkYXRhUHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImdlb2xvY2F0aW9uXCIsXG4gICAgICAgICAgICAgICAgXCJ3YWl0Rm9ySXRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInBhcmFtc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwicmVxdWVzdFBlcm1pc3Npb25cIjogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHsgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaW50ZXJzZWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgXCJ3YWl0Rm9ySXRcIjogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIGVuYWJsZVRJRHM6IHRydWUsXG4gICAgICAgIGRldmljZUFjY2VzczogdHJ1ZSxcbiAgICAgICAgYWxsb3dBY3Rpdml0aWVzOiB7XG4gICAgICAgICAgICBzeW5jVXNlcjoge1xuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgICAgIHJ1bGVzOiBbXG4gICAgICAgICAgICAgICAge2FsbG93OiB0cnVlfSBcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY2Nlc3NEZXZpY2U6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgICAgICBydWxlczogW1xuICAgICAgICAgICAgICAgIHthbGxvdzogdHJ1ZX0gXG4gICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBldmVudHMpIHtcbiAgICAgICAgaWYoIXNldHRpbmdzLmlkKVxuICAgICAgICB7XG4gICAgICAgIHRoaXMubChcIk5vIEFkIHVuaXQgSUQgc2V0IGZvciBQcmViaWQgZHJpdmVyXCIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZFVuaXRJZCA9IHNldHRpbmdzLmlkO1xuICAgICAgICBpZighc2V0dGluZ3MuY29uZmlnKVxuICAgICAgICB7XG4gICAgICAgIHRoaXMubCh0aGlzLmFkVW5pdElkICsgXCIgTm8gQWQgdW5pdCBQcmViaWQgY29uZmlnIGZvdW5kXCIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZFVuaXQgPSBzZXR0aW5ncy5jb25maWc7XG4gICAgICAgIGlmKHNldHRpbmdzICYmIHNldHRpbmdzLnBiQ29uZmlnKVxuICAgICAgICB7XG4gICAgICAgIHRoaXMucGJDb25maWcgPSBzZXR0aW5ncy5wYkNvbmZpZztcbiAgICAgICAgfVxuICAgICAgICBpZihzZXR0aW5ncyAmJiBzZXR0aW5ncy50aW1lb3V0KVxuICAgICAgICB7XG4gICAgICAgIHRoaXMudGltZW91dCA9IHNldHRpbmdzLnRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgaWYobmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKS5nZXQoJ3BianNfZGVidWcnKSA9PSAndHJ1ZScpXG4gICAgICAgIHRoaXMuZGVidWcgPSAxO1xuICAgIFxuICAgICAgICB0aGlzLnJlcXVlc3RCaWRzT2JqID0ge1xuICAgICAgICB0aW1lb3V0OiB0aGlzLnRpbWVvdXQsXG4gICAgICAgIGJpZHNCYWNrSGFuZGxlcjogdGhpcy5yZXNwb25zZUhhbmRsZXIuYmluZCh0aGlzKVxuICAgICAgICB9O1xuICAgIFxuICAgICAgICB3aW5kb3cucGJqcyA9IHdpbmRvdy5wYmpzIHx8IHt9O1xuICAgICAgICB3aW5kb3cucGJqcy5xdWUgPSB3aW5kb3cucGJqcy5xdWUgfHwgW107XG4gICAgICAgICAgICBcbiAgICAgICAgd2luZG93LnBianMucXVlLnB1c2goKCkgPT4ge1xuICAgICAgICB3aW5kb3cucGJqcy5zZXRDb25maWcodGhpcy5wYkNvbmZpZyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXRFdmVudHMoZXZlbnRzKVxuICAgIH1cbiAgICBcbiAgICBzZXRFdmVudHMgPSAoZXZlbnRzKSA9PiB7XG4gICAgICAgIGNvbnN0IGV2ZW50c0RlZmF1bHQgPSB7XG4gICAgICAgIG9uQ2xvc2U6ICgpID0+IHt9LCBcbiAgICAgICAgb25TdG9wOiAoKSA9PiB7IHRoaXMuY2xlYXJDb250YWluZXIoKTsgfSwgXG4gICAgICAgIG9uRXJyb3I6ICgpID0+IHt9fSBcbiAgICAgICAgdGhpcy5ldmVudHMgPSB7Li4uZXZlbnRzRGVmYXVsdCwgLi4uZXZlbnRzfVxuICAgIH1cbiAgICBcbiAgICBzaG93KHBhcmVudENvbnRhaW5lcikge1xuICAgICAgICBpZihwYXJlbnRDb250YWluZXIpXG4gICAgICAgIHRoaXMucGFyZW50Q29udGFpbmVyID0gcGFyZW50Q29udGFpbmVyO1xuICAgIFxuICAgICAgICBpZighdGhpcy5wYXJlbnRDb250YWluZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5hZFVuaXRJZCArIFwiIENvbnRhaW5lciBpcyBub3QgYXZhaWxhYmxlIGZvciB0aGlzIGJhbm5lciwgY2FuJ3Qgc2hvd1wiKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmFubmVyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuYmFubmVyQ29udGFpbmVyLmlkID0gdGhpcy5hZFVuaXRJZDtcbiAgICAgICAgdGhpcy5wYXJlbnRDb250YWluZXIuYXBwZW5kKHRoaXMuYmFubmVyQ29udGFpbmVyKTtcbiAgICBcbiAgICAgICAgdGhpcy5yZXF1ZXN0QmlkcygpO1xuICAgIH1cbiAgICBcbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLmNsZWFyQ29udGFpbmVyKCk7XG4gICAgfVxuICAgIFxuICAgIGNsZWFyQ29udGFpbmVyKCkge1xuICAgICAgICBpZih0aGlzLmJhbm5lckNvbnRhaW5lcilcbiAgICAgICAge1xuICAgICAgICB0aGlzLmJhbm5lckNvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJlZnJlc2goKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdEJpZHMoKTtcbiAgICB9XG4gICAgXG4gICAgcmVxdWVzdEJpZHMoKSB7XG4gICAgICAgIHRoaXMubCh0aGlzLmFkVW5pdElkICsgJyBSZXF1ZXN0aW5nIGJpZHMnKTtcbiAgICAgICAgcGJqcy5wcm9jZXNzUXVldWUoKTtcbiAgICAgICAgd2luZG93LnBianMucXVlLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgd2luZG93LnBianMuYWRkQWRVbml0cyhbdGhpcy5hZFVuaXRdKTtcbiAgICAgICAgICAgIHdpbmRvdy5wYmpzLnJlcXVlc3RCaWRzKHRoaXMucmVxdWVzdEJpZHNPYmopO1xuICAgICAgICAgICAgd2luZG93LnBianMucmVtb3ZlQWRVbml0KHRoaXMuYWRVbml0LmNvZGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgYWRkQ29kZShiaWQsIHBvc2l0aW9uID0gJ2JlZm9yZWVuZCcpXG4gICAge1xuICAgICAgICB0aGlzLmwodGhpcy5hZFVuaXRJZCArICcgYWRkaW5nIGNvZGUnKTtcbiAgICAgICAgbGV0IGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgICBpZnJhbWUuZnJhbWVCb3JkZXIgPSAnMCc7XG4gICAgICAgIGlmcmFtZS5zY3JvbGxpbmcgPSBcIm5vXCI7XG4gICAgICAgIGlmcmFtZS5zdHlsZSA9ICd3aWR0aDonICsgYmlkLndpZHRoICsgJ3B4O2hlaWdodDonICsgYmlkLmhlaWdodCArICdweDtvdmVyZmxvdzpoaWRkZW4nO1xuICAgICAgICB0aGlzLmNsZWFyQ29udGFpbmVyKCk7XG4gICAgICAgIGlmKGJpZC5hZClcbiAgICAgICAge1xuICAgICAgICB0aGlzLmJhbm5lckNvbnRhaW5lci5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgICBsZXQgaWZyYW1lRG9jID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gICAgICAgIGlmcmFtZURvYy5ib2R5LnN0eWxlID0gJ21hcmdpbjogMDsnXG4gICAgICAgIGlmcmFtZURvYy5ib2R5Lmluc2VydEFkamFjZW50SFRNTChwb3NpdGlvbiwgYmlkLmFkKTtcbiAgICAgICAgbGV0IHNjcmlwdHMgPSBpZnJhbWVEb2MuYm9keS5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHQnKTtcbiAgICAgICAgaWYoc2NyaXB0cy5sZW5ndGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNjcmlwdHMuZm9yRWFjaCgoc2NyaXB0KT0+e1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVTY3JpcHQoc2NyaXB0KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKGJpZC5hZFVybClcbiAgICAgICAge1xuICAgICAgICBpZnJhbWUuc3JjID0gYmlkLmFkVXJsO1xuICAgICAgICB0aGlzLmJhbm5lckNvbnRhaW5lci5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvcHlBdHRyaWJ1dGVzKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHNvdXJjZS5hdHRyaWJ1dGVzKS5mb3JFYWNoKGF0dHJpYnV0ZSA9PiB7XG4gICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICBhdHRyaWJ1dGUubm9kZU5hbWUsXG4gICAgICAgICAgICBhdHRyaWJ1dGUubm9kZVZhbHVlLFxuICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY3JlYXRlU2NyaXB0KHNjcmlwdClcbiAgICB7XG4gICAgICAgIGxldCBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHRoaXMuY29weUF0dHJpYnV0ZXMoc2NyaXB0LCBzKTtcbiAgICAgICAgc2NyaXB0LmJlZm9yZShzKTtcbiAgICAgICAgcy5pbm5lckhUTUwgPSBzY3JpcHQuaW5uZXJIVE1MO1xuICAgICAgICBzY3JpcHQucmVtb3ZlKCk7XG4gICAgfVxuICAgIFxuICAgIHJlc3BvbnNlSGFuZGxlcihiaWRSZXNwb25zZXMpIFxuICAgIHsgXG4gICAgICAgIHRoaXMubCh0aGlzLmFkVW5pdElkICsgICcgUmVzcG9uc2VzIHJlY2lldmVkOicsIGJpZFJlc3BvbnNlcyk7XG4gICAgICAgIGxldCBhZFVuaXRzSWRzID0gT2JqZWN0LmtleXMoYmlkUmVzcG9uc2VzKTtcbiAgICAgICAgaWYoYWRVbml0c0lkcy5sZW5ndGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZmFpbGVkUmVxdWVzdHNDb3VudCA9IDA7XG4gICAgICAgICAgICBhZFVuaXRzSWRzLmZvckVhY2goKGFkVW5pdElkKT0+e1xuICAgICAgICAgICAgICAgIC8vY29uc3QgY29udmVydGVkQmlkcyA9IHRoaXMuY29udmVydEJpZHNUb1ByZWZlcnJlZEN1cnJlbmN5KGJpZFJlc3BvbnNlc1thZFVuaXRJZF0uYmlkcyk7XG4gICAgICAgICAgICAgICAgLy90aGlzLmwodGhpcy5hZFVuaXRJZCArICcgQ29udmVydGVkIGJpZHM6JywgY29udmVydGVkQmlkcylcbiAgICAgICAgICAgICAgICAvL2NvbnN0IHdpbm5pbmdCaWQgPSBjb252ZXJ0ZWRCaWRzLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4gKHByZXYuY3BtID4gY3VycmVudC5jcG0gPyBwcmV2IDogY3VycmVudCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHdpbm5pbmdCaWQgPSBiaWRSZXNwb25zZXNbYWRVbml0SWRdLmJpZHMucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiAocHJldi5jcG0gPiBjdXJyZW50LmNwbSA/IHByZXYgOiBjdXJyZW50KSk7XG4gICAgICAgICAgICAgICAgdGhpcy5sKHRoaXMuYWRVbml0SWQgKyAnIFdpbm5pbmcgYmlkOicsIHdpbm5pbmdCaWQpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHRoaXMuYmFubmVyQ29udGFpbmVyKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENvZGUod2lubmluZ0JpZCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sKHRoaXMuYWRVbml0SWQgKyBcIiBObyBjb250YWluZXIgd2l0aCBBZCB1bml0IElEIGluIERPTVwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICB0aGlzLmZhaWxlZFJlcXVlc3RzQ291bnQrKztcbiAgICBcbiAgICAgICAgdGhpcy5sKHRoaXMuYWRVbml0SWQgKyAgJyBObyBiaWRzIHJlY2lldmVkJyk7XG4gICAgICAgIHRoaXMubCh0aGlzLmFkVW5pdElkICsgICcgZmFpbGVkUmVxdWVzdHNDb3VudCAnLCB0aGlzLmZhaWxlZFJlcXVlc3RzQ291bnQpO1xuICAgICAgICB0aGlzLmwodGhpcy5hZFVuaXRJZCArICAnIHRoaXMuZmFpbGVkUmVxdWVzdHNDb3VudCA+PSB0aGlzLm1heEZhaWxlZFJlcXVlc3RzID0gJywgKHRoaXMuZmFpbGVkUmVxdWVzdHNDb3VudCA+PSB0aGlzLm1heEZhaWxlZFJlcXVlc3RzKSk7XG4gICAgICAgIGlmKHRoaXMuZmFpbGVkUmVxdWVzdHNDb3VudCA+PSB0aGlzLm1heEZhaWxlZFJlcXVlc3RzKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmZhaWxlZFJlcXVlc3RzQ291bnQgPSAwOyAvLyBmb3IgbmV4dCB0aW1lXG4gICAgICAgICAgICB0aGlzLmwodGhpcy5hZFVuaXRJZCArICAnIEFscmVhZHkgdHJpZWQgcmVmcmVzaC4gRmFpbGVkIGFnYWluLiBRdWl0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmwodGhpcy5hZFVuaXRJZCArICAnIFdpbGwgcmV0cnkgaW4gJyArICh0aGlzLnVuc29sZFJlZnJlc2hUaW1lb3V0IC8gMTAwMCApICsgJ3NlYycpO1xuICAgICAgICAgICAgbGV0IF9zZWxmID0gdGhpcztcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgIHRoaXMubCh0aGlzLmFkVW5pdElkICsgICcgUmVmcmVzaGluZyBub3chJyk7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgIH0sIHRoaXMudW5zb2xkUmVmcmVzaFRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgbCguLi5hcmdzKVxuICAgIHsgXG4gICAgICAgIGlmKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKC4uLmFyZ3MpIFxuICAgIH1cbn1cblxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbigpIHtcbiAgICB3aW5kb3cuYWRVbml0cy5mb3JFYWNoKChhZFVuaXRJZCwgaSkgPT4ge1xuICAgICAgICBsZXQgYWRVbml0ID0gbmV3IFByZWJpZERyaXZlcih7aWQ6IGFkVW5pdElkLmNvZGUsIGNvbmZpZzogYWRVbml0SWQsIHBiQ29uZmlnOiB3aW5kb3cucGJDb25maWd9KTtcbiAgICAgICAgbGV0IHBhcmVudENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYW5uZXItY29udGFpbmVyLScgKyBpKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3BhcmVudENvbnRhaW5lcjogJywgcGFyZW50Q29udGFpbmVyKVxuICAgICAgICBhZFVuaXQuc2hvdyhwYXJlbnRDb250YWluZXIpXG4gICAgXG4gICAgICAgIGNvbnN0IGludGVydmFscyA9IFsyMF07XG4gICAgICAgIGNvbnN0IHJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGludGVydmFscy5sZW5ndGgpO1xuICAgICAgICBjb25zb2xlLmxvZyhyYW5kb20sIGludGVydmFsc1tyYW5kb21dKTtcbiAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0ludGVydmFsIGZpcmVkJyk7XG4gICAgICAgICAgICBhZFVuaXQucmVmcmVzaCgpXG4gICAgICAgIH0sIGludGVydmFsc1tyYW5kb21dICogMTAwMCk7XG4gICAgfSk7XG59KTtcblxuLypcbnBianMucHJvY2Vzc1F1ZXVlKCk7IFxuXG5wYmpzLnJlcXVlc3RCaWRzKHt9KSovIl0sIm5hbWVzIjpbImNyZWF0ZSIsIlNZTkMiLCJBU1lOQyIsIlFVRVVFIiwicGFja2FnZU5hbWUiLCJkZWZhdWx0cyIsIk9iamVjdCIsImZyZWV6ZSIsInVzZVByb3h5IiwicmVhZHkiLCJob29rYWJsZU1hcCIsIldlYWtNYXAiLCJyZWR1Y2UiLCJhIiwiYiIsImMiLCJ0b1N0cmluZyIsIkFycmF5IiwicHJvdG90eXBlIiwiY2FsbGJhY2siLCJpbml0aWFsIiwidmFsdWUiLCJvIiwidGhpcyIsImxlbiIsImxlbmd0aCIsImsiLCJyZXN0IiwiYXJncyIsInNraXAiLCJzbGljZSIsImNhbGwiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJvYmoiLCJrZXlzIiwiZm9yRWFjaCIsInByb3AiLCJjb25maWciLCJob29rcyIsInBvc3RSZWFkeSIsImRpc3BhdGNoIiwiYXJnMSIsImFyZzIiLCJob29rRm4iLCJhcHBseSIsImhvb2tPYmoiLCJwcm9wcyIsIm9iak5hbWUiLCJ3YWxrIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9iakhvb2tzIiwiZG9Ob3RIb29rIiwiZmlsdGVyIiwiaW5kZXhPZiIsIm1hdGNoIiwicGFydHMiLCJzcGxpdCIsIm5hbWUiLCJ0eXBlIiwiZm4iLCJ1bmRlZmluZWQiLCJnZXRQcm90b3R5cGVPZiIsImdldCIsInBhdGgiLCJpc0FycmF5IiwibWVtbyIsInBhcnQiLCJpIiwiaXRlbSIsImluc3RhbGxlZCIsInB1c2giLCJjb25zb2xlIiwid2FybiIsIm5ld0hvb2thYmxlIiwib25JbnN0YWxsIiwiYmVmb3JlIiwiYWZ0ZXIiLCJnZW5lcmF0ZVRyYXAiLCJhcGkiLCJob29rIiwicHJpb3JpdHkiLCJhZGQiLCJnZXRIb29rcyIsImNvbmNhdCIsImVudHJ5IiwiZXZlcnkiLCJyZW1vdmUiLCJlIiwiZXJyb3IiLCJyZW1vdmVBbGwiLCJtZXRhIiwiaW5zdGFsbCIsImdlbmVyYXRlIiwic2V0Iiwic3RvcmUiLCJpbmRleCIsInNwbGljZSIsInNvcnQiLCJ0cmFwIiwiaG9va2VkRm4iLCJob29rYWJsZSIsImhhbmRsZXJzIiwiUmVmbGVjdCIsInNldFRyYXAiLCJQcm94eSIsInJldm9jYWJsZSIsInRhcmdldEluZGV4Iiwib3JkZXIiLCJhZGRUb09yZGVyIiwidGhpc0FyZyIsInJlc3VsdCIsImN1cnIiLCJwb3AiLCJiYWlsIiwibmV4dCIsInVuc2hpZnQiLCJxdWV1ZSIsInF1ZXVlZCIsInNoaWZ0IiwicnVuQWxsIiwibW9kdWxlIiwiZXhwb3J0cyIsImNsb25lIiwia2V5IiwiRlVOQ19FUlJPUl9URVhUIiwiSEFTSF9VTkRFRklORUQiLCJQTEFDRUhPTERFUiIsIldSQVBfUEFSVElBTF9GTEFHIiwiV1JBUF9BUllfRkxBRyIsIklORklOSVRZIiwiTUFYX1NBRkVfSU5URUdFUiIsIk5BTiIsIk1BWF9BUlJBWV9MRU5HVEgiLCJ3cmFwRmxhZ3MiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm9iamVjdFRhZyIsInByb21pc2VUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJzeW1ib2xUYWciLCJ3ZWFrTWFwVGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsInJlRW1wdHlTdHJpbmdMZWFkaW5nIiwicmVFbXB0eVN0cmluZ01pZGRsZSIsInJlRW1wdHlTdHJpbmdUcmFpbGluZyIsInJlRXNjYXBlZEh0bWwiLCJyZVVuZXNjYXBlZEh0bWwiLCJyZUhhc0VzY2FwZWRIdG1sIiwiUmVnRXhwIiwic291cmNlIiwicmVIYXNVbmVzY2FwZWRIdG1sIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwicmVJbnRlcnBvbGF0ZSIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJyZVByb3BOYW1lIiwicmVSZWdFeHBDaGFyIiwicmVIYXNSZWdFeHBDaGFyIiwicmVUcmltU3RhcnQiLCJyZVdoaXRlc3BhY2UiLCJyZVdyYXBDb21tZW50IiwicmVXcmFwRGV0YWlscyIsInJlU3BsaXREZXRhaWxzIiwicmVBc2NpaVdvcmQiLCJyZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycyIsInJlRXNjYXBlQ2hhciIsInJlRXNUZW1wbGF0ZSIsInJlRmxhZ3MiLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNIb3N0Q3RvciIsInJlSXNPY3RhbCIsInJlSXNVaW50IiwicmVMYXRpbiIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwicnNBc3RyYWxSYW5nZSIsInJzQ29tYm9SYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNEaW5nYmF0UmFuZ2UiLCJyc0xvd2VyUmFuZ2UiLCJyc1VwcGVyUmFuZ2UiLCJyc1ZhclJhbmdlIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQXN0cmFsIiwicnNCcmVhayIsInJzQ29tYm8iLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNVcHBlciIsInJzWldKIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJzT3B0Q29udHJMb3dlciIsInJzT3B0Q29udHJVcHBlciIsInJlT3B0TW9kIiwicnNNb2RpZmllciIsInJzT3B0VmFyIiwicnNTZXEiLCJqb2luIiwicnNFbW9qaSIsInJzU3ltYm9sIiwicmVBcG9zIiwicmVDb21ib01hcmsiLCJyZVVuaWNvZGUiLCJyZVVuaWNvZGVXb3JkIiwicmVIYXNVbmljb2RlIiwicmVIYXNVbmljb2RlV29yZCIsImNvbnRleHRQcm9wcyIsInRlbXBsYXRlQ291bnRlciIsInR5cGVkQXJyYXlUYWdzIiwiY2xvbmVhYmxlVGFncyIsInN0cmluZ0VzY2FwZXMiLCJmcmVlUGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJmcmVlUGFyc2VJbnQiLCJwYXJzZUludCIsImZyZWVHbG9iYWwiLCJnIiwiZnJlZVNlbGYiLCJzZWxmIiwicm9vdCIsIkZ1bmN0aW9uIiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJyZXF1aXJlIiwidHlwZXMiLCJiaW5kaW5nIiwibm9kZUlzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyIiwibm9kZUlzRGF0ZSIsImlzRGF0ZSIsIm5vZGVJc01hcCIsImlzTWFwIiwibm9kZUlzUmVnRXhwIiwiaXNSZWdFeHAiLCJub2RlSXNTZXQiLCJpc1NldCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJmdW5jIiwiYXJyYXlBZ2dyZWdhdG9yIiwiYXJyYXkiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiYXJyYXlQdXNoIiwidmFsdWVzIiwib2Zmc2V0IiwiYXJyYXlSZWR1Y2UiLCJpbml0QWNjdW0iLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb21lIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUZpbmRLZXkiLCJjb2xsZWN0aW9uIiwiZWFjaEZ1bmMiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsIm9iamVjdCIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImN1cnJlbnQiLCJiYXNlVGltZXMiLCJuIiwiYmFzZVRyaW0iLCJzdHJpbmciLCJ0cmltbWVkRW5kSW5kZXgiLCJyZXBsYWNlIiwiYmFzZVVuYXJ5IiwiYmFzZVZhbHVlcyIsImNhY2hlSGFzIiwiY2FjaGUiLCJoYXMiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJkZWJ1cnJMZXR0ZXIiLCJlc2NhcGVIdG1sQ2hhciIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwidGVzdCIsIm1hcFRvQXJyYXkiLCJtYXAiLCJzaXplIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImFyZyIsInJlcGxhY2VIb2xkZXJzIiwicGxhY2Vob2xkZXIiLCJzZXRUb0FycmF5Iiwic2V0VG9QYWlycyIsInN0cmluZ1NpemUiLCJsYXN0SW5kZXgiLCJ1bmljb2RlU2l6ZSIsInN0cmluZ1RvQXJyYXkiLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsImNoYXJBdCIsInVuZXNjYXBlSHRtbENoYXIiLCJfIiwicnVuSW5Db250ZXh0IiwiY29udGV4dCIsInVpZCIsInBpY2siLCJEYXRlIiwiRXJyb3IiLCJNYXRoIiwiU3RyaW5nIiwiVHlwZUVycm9yIiwiYXJyYXlQcm90byIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiY29yZUpzRGF0YSIsImZ1bmNUb1N0cmluZyIsImhhc093blByb3BlcnR5IiwiaWRDb3VudGVyIiwibWFza1NyY0tleSIsImV4ZWMiLCJJRV9QUk9UTyIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9sZERhc2giLCJyZUlzTmF0aXZlIiwiQnVmZmVyIiwiU3ltYm9sIiwiVWludDhBcnJheSIsImFsbG9jVW5zYWZlIiwiZ2V0UHJvdG90eXBlIiwib2JqZWN0Q3JlYXRlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ltSXRlcmF0b3IiLCJpdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJkZWZpbmVQcm9wZXJ0eSIsImdldE5hdGl2ZSIsImN0eENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImN0eE5vdyIsIm5vdyIsImN0eFNldFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsImNlaWwiLCJuYXRpdmVGbG9vciIsImZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsImlzRmluaXRlIiwibmF0aXZlSm9pbiIsIm5hdGl2ZUtleXMiLCJuYXRpdmVNYXgiLCJtYXgiLCJuYXRpdmVNaW4iLCJtaW4iLCJuYXRpdmVOb3ciLCJuYXRpdmVQYXJzZUludCIsIm5hdGl2ZVJhbmRvbSIsInJhbmRvbSIsIm5hdGl2ZVJldmVyc2UiLCJyZXZlcnNlIiwiRGF0YVZpZXciLCJNYXAiLCJQcm9taXNlIiwiU2V0IiwibmF0aXZlQ3JlYXRlIiwibWV0YU1hcCIsInJlYWxOYW1lcyIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsInN5bWJvbFRvU3RyaW5nIiwibG9kYXNoIiwiaXNPYmplY3RMaWtlIiwiTGF6eVdyYXBwZXIiLCJMb2Rhc2hXcmFwcGVyIiwid3JhcHBlckNsb25lIiwiYmFzZUNyZWF0ZSIsInByb3RvIiwiaXNPYmplY3QiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsIkhhc2giLCJlbnRyaWVzIiwiY2xlYXIiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJTdGFjayIsImRhdGEiLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpc0luZGV4IiwiYXJyYXlTYW1wbGUiLCJiYXNlUmFuZG9tIiwiYXJyYXlTYW1wbGVTaXplIiwic2h1ZmZsZVNlbGYiLCJjb3B5QXJyYXkiLCJiYXNlQ2xhbXAiLCJhcnJheVNodWZmbGUiLCJhc3NpZ25NZXJnZVZhbHVlIiwiZXEiLCJiYXNlQXNzaWduVmFsdWUiLCJhc3NpZ25WYWx1ZSIsIm9ialZhbHVlIiwiYXNzb2NJbmRleE9mIiwiYmFzZUFnZ3JlZ2F0b3IiLCJiYXNlRWFjaCIsImJhc2VBc3NpZ24iLCJjb3B5T2JqZWN0IiwiYmFzZUF0IiwicGF0aHMiLCJudW1iZXIiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImNvbnN0cnVjdG9yIiwiaW5wdXQiLCJpbml0Q2xvbmVBcnJheSIsInRhZyIsImdldFRhZyIsImlzRnVuYyIsImNsb25lQnVmZmVyIiwiaW5pdENsb25lT2JqZWN0IiwiZ2V0U3ltYm9sc0luIiwiY29weVN5bWJvbHNJbiIsImtleXNJbiIsImJhc2VBc3NpZ25JbiIsImdldFN5bWJvbHMiLCJjb3B5U3ltYm9scyIsInN5bWJvbCIsIkN0b3IiLCJjbG9uZUFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNsb25lRGF0YVZpZXciLCJjbG9uZVR5cGVkQXJyYXkiLCJyZWdleHAiLCJjbG9uZVJlZ0V4cCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5Iiwid2FpdCIsImJhc2VEaWZmZXJlbmNlIiwiaW5jbHVkZXMiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsIm91dGVyIiwiY29tcHV0ZWQiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJnZXRNYXBEYXRhIiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJpc0Z1bmN0aW9uIiwiYmFzZUdldCIsImNhc3RQYXRoIiwidG9LZXkiLCJiYXNlR2V0QWxsS2V5cyIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJiYXNlR2V0VGFnIiwiaXNPd24iLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwiYmFzZUd0Iiwib3RoZXIiLCJiYXNlSGFzIiwiYmFzZUhhc0luIiwiYmFzZUludGVyc2VjdGlvbiIsImFycmF5cyIsIm90aExlbmd0aCIsIm90aEluZGV4IiwiY2FjaGVzIiwibWF4TGVuZ3RoIiwiSW5maW5pdHkiLCJzZWVuIiwiYmFzZUludm9rZSIsInBhcmVudCIsImxhc3QiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJtZXNzYWdlIiwiY29udmVydCIsImlzUGFydGlhbCIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsIm9ialN0YWNrZWQiLCJvdGhTdGFja2VkIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJiYXNlSXNOYXRpdmUiLCJiYXNlSXRlcmF0ZWUiLCJpZGVudGl0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsInByb3BlcnR5IiwiYmFzZUtleXMiLCJpc1Byb3RvdHlwZSIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwic2FmZUdldCIsIm5ld1ZhbHVlIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjcml0ZXJpYSIsImNvbXBhcmVyIiwib2JqQ3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlU29ydEJ5IiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImJhc2VQdWxsQXQiLCJpbmRleGVzIiwicHJldmlvdXMiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzdGFydCIsInNldFRvU3RyaW5nIiwib3ZlclJlc3QiLCJiYXNlU2FtcGxlIiwiYmFzZVNhbXBsZVNpemUiLCJuZXN0ZWQiLCJiYXNlU2V0RGF0YSIsImJhc2VTZXRUb1N0cmluZyIsImNvbnN0YW50IiwiYmFzZVNodWZmbGUiLCJiYXNlU2xpY2UiLCJlbmQiLCJiYXNlU29tZSIsImJhc2VTb3J0ZWRJbmRleCIsInJldEhpZ2hlc3QiLCJsb3ciLCJoaWdoIiwibWlkIiwiYmFzZVNvcnRlZEluZGV4QnkiLCJ2YWxJc05hTiIsInZhbElzTnVsbCIsInZhbElzU3ltYm9sIiwidmFsSXNVbmRlZmluZWQiLCJvdGhJc0RlZmluZWQiLCJvdGhJc051bGwiLCJvdGhJc1JlZmxleGl2ZSIsIm90aElzU3ltYm9sIiwic2V0TG93IiwiYmFzZVNvcnRlZFVuaXEiLCJiYXNlVG9OdW1iZXIiLCJiYXNlVG9TdHJpbmciLCJiYXNlVW5pcSIsImNyZWF0ZVNldCIsInNlZW5JbmRleCIsImJhc2VVcGRhdGUiLCJ1cGRhdGVyIiwiYmFzZVdoaWxlIiwiaXNEcm9wIiwiYmFzZVdyYXBwZXJWYWx1ZSIsImFjdGlvbnMiLCJhY3Rpb24iLCJiYXNlWG9yIiwiYmFzZVppcE9iamVjdCIsImFzc2lnbkZ1bmMiLCJ2YWxzTGVuZ3RoIiwiY2FzdEFycmF5TGlrZU9iamVjdCIsImNhc3RGdW5jdGlvbiIsInN0cmluZ1RvUGF0aCIsImNhc3RSZXN0IiwiY2FzdFNsaWNlIiwiaWQiLCJjb3B5IiwiYXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwidmFsSXNEZWZpbmVkIiwidmFsSXNSZWZsZXhpdmUiLCJjb21wb3NlQXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJob2xkZXJzTGVuZ3RoIiwibGVmdEluZGV4IiwibGVmdExlbmd0aCIsInJhbmdlTGVuZ3RoIiwiaXNVbmN1cnJpZWQiLCJjb21wb3NlQXJnc1JpZ2h0IiwiaG9sZGVyc0luZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwiaXNOZXciLCJjcmVhdGVBZ2dyZWdhdG9yIiwiaW5pdGlhbGl6ZXIiLCJjcmVhdGVBc3NpZ25lciIsImFzc2lnbmVyIiwic291cmNlcyIsImd1YXJkIiwiaXNJdGVyYXRlZUNhbGwiLCJpdGVyYWJsZSIsImNyZWF0ZUNhc2VGaXJzdCIsIm1ldGhvZE5hbWUiLCJ0cmFpbGluZyIsImNyZWF0ZUNvbXBvdW5kZXIiLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJjb3VudEhvbGRlcnMiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImFyckxlbmd0aCIsIm9sZEFycmF5IiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImRlZmF1bHRWYWx1ZSIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwic3RlcCIsInRvRmluaXRlIiwiYmFzZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInRvSW50ZWdlciIsInBhaXIiLCJub29wIiwiY3JlYXRlVG9QYWlycyIsImJhc2VUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGF0YSIsImNyZWF0ZUN1cnJ5IiwiY3JlYXRlUGFydGlhbCIsImNyZWF0ZUJpbmQiLCJjdXN0b21EZWZhdWx0c0Fzc2lnbkluIiwiY3VzdG9tRGVmYXVsdHNNZXJnZSIsImN1c3RvbU9taXRDbG9uZSIsImFyclN0YWNrZWQiLCJhcnJWYWx1ZSIsImZsYXR0ZW4iLCJvdGhlckZ1bmMiLCJnZXRWYWx1ZSIsInN0dWJBcnJheSIsImhhc1BhdGgiLCJoYXNGdW5jIiwiaXNMZW5ndGgiLCJBcnJheUJ1ZmZlciIsInJlc29sdmUiLCJjdG9yU3RyaW5nIiwiaXNNYXNrYWJsZSIsInN0dWJGYWxzZSIsIm90aGVyQXJncyIsInNob3J0T3V0IiwicmVmZXJlbmNlIiwiZGV0YWlscyIsImluc2VydFdyYXBEZXRhaWxzIiwidXBkYXRlV3JhcERldGFpbHMiLCJnZXRXcmFwRGV0YWlscyIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwicmFuZCIsIm1lbW9pemUiLCJjaGFyQ29kZUF0IiwicXVvdGUiLCJzdWJTdHJpbmciLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kSW5kZXgiLCJmaW5kTGFzdEluZGV4IiwiaGVhZCIsImludGVyc2VjdGlvbiIsIm1hcHBlZCIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsInB1bGwiLCJwdWxsQWxsIiwicHVsbEF0IiwidW5pb24iLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW56aXAiLCJncm91cCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kIiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiaW5kIiwiYmluZEtleSIsIldSQVBfQklORF9GTEFHIiwiZGVib3VuY2UiLCJvcHRpb25zIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsInRpbWUiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRpbWVyRXhwaXJlZCIsInRyYWlsaW5nRWRnZSIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJsZWFkaW5nRWRnZSIsImNhbmNlbCIsImZsdXNoIiwiZGVmZXIiLCJkZWxheSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm5lZ2F0ZSIsIm92ZXJBcmdzIiwidHJhbnNmb3JtcyIsImZ1bmNzTGVuZ3RoIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiZ3QiLCJndGUiLCJpc0Vycm9yIiwiaXNJbnRlZ2VyIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImx0IiwibHRlIiwidG9BcnJheSIsImRvbmUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnQiLCJpbnZlcnRCeSIsImludm9rZSIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlS2V5c0luIiwibWVyZ2UiLCJvbWl0IiwiQ0xPTkVfREVFUF9GTEFHIiwiYmFzZVBpY2siLCJwaWNrQnkiLCJ0b1BhaXJzIiwidG9QYWlyc0luIiwiY2FtZWxDYXNlIiwid29yZCIsInRvTG93ZXJDYXNlIiwiY2FwaXRhbGl6ZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwidG9VcHBlckNhc2UiLCJwYXR0ZXJuIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2QiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwiYmFzZVByb3BlcnR5RGVlcCIsInJhbmdlIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInJvdW5kIiwic3VidHJhY3QiLCJtaW51ZW5kIiwic3VidHJhaGVuZCIsImNhc3RBcnJheSIsImNodW5rIiwiY29tcGFjdCIsImNvbmQiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsInByb3BlcnRpZXMiLCJjdXJyeSIsImN1cnJ5UmlnaHQiLCJkcm9wIiwiZHJvcFJpZ2h0IiwiZHJvcFJpZ2h0V2hpbGUiLCJkcm9wV2hpbGUiLCJmaWxsIiwiYmFzZUZpbGwiLCJmbGF0TWFwIiwiZmxhdE1hcERlZXAiLCJmbGF0TWFwRGVwdGgiLCJmbGF0dGVuRGVlcCIsImZsYXR0ZW5EZXB0aCIsImZsaXAiLCJmcm9tUGFpcnMiLCJmdW5jdGlvbnMiLCJmdW5jdGlvbnNJbiIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJtYXRjaGVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib25jZSIsIm9yZGVyQnkiLCJwcm9wZXJ0eU9mIiwicHVsbEFsbEJ5IiwicHVsbEFsbFdpdGgiLCJyZWplY3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic2VwYXJhdG9yIiwibGltaXQiLCJzcHJlYWQiLCJ0YWlsIiwidGFrZSIsInRha2VSaWdodCIsInRha2VSaWdodFdoaWxlIiwidGFrZVdoaWxlIiwidGFwIiwidGhyb3R0bGUiLCJ0b1BhdGgiLCJpc0Fyckxpa2UiLCJ1bmFyeSIsInVuaXEiLCJ1bmlxQnkiLCJ1bmlxV2l0aCIsInVuc2V0IiwidXBkYXRlIiwidXBkYXRlV2l0aCIsInZhbHVlc0luIiwid3JhcCIsInppcE9iamVjdCIsInppcE9iamVjdERlZXAiLCJlbnRyaWVzSW4iLCJleHRlbmQiLCJleHRlbmRXaXRoIiwiY2xhbXAiLCJjbG9uZURlZXAiLCJjbG9uZURlZXBXaXRoIiwiY2xvbmVXaXRoIiwiY29uZm9ybXNUbyIsImRlZmF1bHRUbyIsImVuZHNXaXRoIiwicG9zaXRpb24iLCJlc2NhcGUiLCJlc2NhcGVSZWdFeHAiLCJmaW5kS2V5IiwiZmluZExhc3RLZXkiLCJmb3JJbiIsImZvckluUmlnaHQiLCJmb3JPd24iLCJmb3JPd25SaWdodCIsImluUmFuZ2UiLCJiYXNlSW5SYW5nZSIsImlzQm9vbGVhbiIsImlzRWxlbWVudCIsImlzRW1wdHkiLCJpc0VxdWFsIiwiaXNFcXVhbFdpdGgiLCJpc01hdGNoIiwiaXNNYXRjaFdpdGgiLCJpc05hTiIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNVbmRlZmluZWQiLCJpc1dlYWtNYXAiLCJpc1dlYWtTZXQiLCJsYXN0SW5kZXhPZiIsInN0cmljdExhc3RJbmRleE9mIiwibWF4QnkiLCJtZWFuIiwibWVhbkJ5IiwibWluQnkiLCJzdHViT2JqZWN0Iiwic3R1YlN0cmluZyIsInN0dWJUcnVlIiwibnRoIiwibm9Db25mbGljdCIsInBhZCIsInN0ckxlbmd0aCIsInBhZEVuZCIsInBhZFN0YXJ0IiwicmFkaXgiLCJmbG9hdGluZyIsInRlbXAiLCJyZWR1Y2VSaWdodCIsInJlcGVhdCIsInNhbXBsZSIsInNvbWUiLCJzb3J0ZWRJbmRleCIsInNvcnRlZEluZGV4QnkiLCJzb3J0ZWRJbmRleE9mIiwic29ydGVkTGFzdEluZGV4Iiwic29ydGVkTGFzdEluZGV4QnkiLCJzb3J0ZWRMYXN0SW5kZXhPZiIsInN0YXJ0c1dpdGgiLCJzdW0iLCJzdW1CeSIsInRlbXBsYXRlIiwic2V0dGluZ3MiLCJpc0VzY2FwaW5nIiwiaXNFdmFsdWF0aW5nIiwiaW1wb3J0cyIsImltcG9ydHNLZXlzIiwiaW1wb3J0c1ZhbHVlcyIsImludGVycG9sYXRlIiwicmVEZWxpbWl0ZXJzIiwiZXZhbHVhdGUiLCJzb3VyY2VVUkwiLCJlc2NhcGVWYWx1ZSIsImludGVycG9sYXRlVmFsdWUiLCJlc1RlbXBsYXRlVmFsdWUiLCJldmFsdWF0ZVZhbHVlIiwidmFyaWFibGUiLCJ0aW1lcyIsInRvTG93ZXIiLCJ0b1NhZmVJbnRlZ2VyIiwidG9VcHBlciIsInRyaW0iLCJ0cmltRW5kIiwidHJpbVN0YXJ0IiwidHJ1bmNhdGUiLCJvbWlzc2lvbiIsInNlYXJjaCIsInN1YnN0cmluZyIsImdsb2JhbCIsIm5ld0VuZCIsInVuZXNjYXBlIiwidW5pcXVlSWQiLCJwcmVmaXgiLCJlYWNoIiwiZWFjaFJpZ2h0IiwiZmlyc3QiLCJWRVJTSU9OIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImRpciIsImlzUmlnaHQiLCJ2aWV3IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwidG9KU09OIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiZGVmaW5pdGlvbiIsImVudW1lcmFibGUiLCJnbG9iYWxUaGlzIiwid2luZG93Iiwibm1kIiwiY2hpbGRyZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImFycjIiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJmcm9tIiwiX3NsaWNlZFRvQXJyYXkiLCJyIiwibCIsInQiLCJ1IiwiZiIsIl90eXBlb2YiLCJfdG9Qcm9wZXJ0eUtleSIsImhpbnQiLCJwcmltIiwidG9QcmltaXRpdmUiLCJyZXMiLCJfZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInNjb3BlIiwicGJqcyIsImdldEdsb2JhbCIsInJlZ2lzdGVyTW9kdWxlIiwiaW5zdGFsbGVkTW9kdWxlcyIsIml0ZXIiLCJlbGVtIiwicHJlZCIsImNtZCIsInF1ZSIsIl9wYmpzR2xvYmFscyIsIl9kZWZhdWx0UHJlY2lzaW9uIiwiX2xnUHJpY2VDb25maWciLCJfbWdQcmljZUNvbmZpZyIsIl9oZ1ByaWNlQ29uZmlnIiwiX2RlbnNlUHJpY2VDb25maWciLCJfYXV0b1ByaWNlQ29uZmlnIiwiZ2V0Q3BtU3RyaW5nVmFsdWUiLCJjcG0iLCJncmFudWxhcml0eU11bHRpcGxpZXIiLCJjcG1TdHIiLCJpc1ZhbGlkUHJpY2VDb25maWciLCJjYXAiLCJidWNrZXRzIiwicHJldiIsImJ1Y2tldEZsb29yIiwiYnVja2V0IiwidG9GaXhlZCIsImdldENwbVRhcmdldCIsImlzVmFsaWQiLCJpbmNyZW1lbnQiLCJidWNrZXRNaW4iLCJyb3VuZGluZ0Z1bmN0aW9uIiwiY3VzdG9tUm91bmRpbmdGdW5jdGlvbiIsImdldENvbmZpZyIsImNwbVRhcmdldCIsImludmFsaWRSb3VuZGluZyIsInBvdyIsImNwbVRvUm91bmQiLCJlcnIiLCJsb2dXYXJuIiwiTnVtYmVyIiwiZGx2IiwiZGVmIiwicCIsInVuZGVmIiwiREVGQVVMVF9ERUJVRyIsIkNPTlNUQU5UUyIsInBhcnNlUVMiLCJnZXRXaW5kb3dMb2NhdGlvbiIsIlJBTkRPTSIsIlZBTElEX09SREVSUyIsIkRFRkFVTFRfQklEREVSX1NFUVVFTkNFIiwiR1JBTlVMQVJJVFlfT1BUSU9OUyIsIkxPVyIsIk1FRElVTSIsIkhJR0giLCJBVVRPIiwiREVOU0UiLCJDVVNUT00iLCJiaWRkZXJDb25maWciLCJsaXN0ZW5lcnMiLCJjdXJyQmlkZGVyIiwicmVzZXRDb25maWciLCJnZXRQcm9wIiwidmFsIiwic2V0UHJvcCIsInB1Ymxpc2hlckRvbWFpbiIsInByaWNlR3JhbnVsYXJpdHkiLCJ2YWxpZGF0ZVByaWNlR3JhbnVsYXJpdHkiLCJoYXNHcmFudWxhcml0eSIsImxvZ01lc3NhZ2UiLCJjdXN0b21QcmljZUJ1Y2tldCIsIm1lZGlhVHlwZVByaWNlR3JhbnVsYXJpdHkiLCJhZ2dyZWdhdGUiLCJiaWRkZXJTZXF1ZW5jZSIsImF1Y3Rpb25PcHRpb25zIiwiX2kiLCJfT2JqZWN0JGtleXMiLCJpc1N0ciIsInZhbGlkYXRlYXVjdGlvbk9wdGlvbnMiLCJuZXdDb25maWciLCJkZWJ1ZyIsImJpZGRlclRpbWVvdXQiLCJlbmFibGVTZW5kQWxsQmlkcyIsInVzZUJpZENhY2hlIiwiZGV2aWNlQWNjZXNzIiwidGltZW91dEJ1ZmZlciIsImRpc2FibGVBamF4VGltZW91dCIsIm1heE5lc3RlZElmcmFtZXMiLCJvcHRpb24iLCJsb2dFcnJvciIsImRlZmluZVByb3BlcnRpZXMiLCJmcm9tRW50cmllcyIsIl9yZWYiLCJfcmVmMiIsImNhbGxTdWJzY3JpYmVycyIsInRvcGljIiwiX2dldENvbmZpZyIsImN1cnJCaWRkZXJDb25maWciLCJtZXJnZURlZXAiLCJfbWFwIiwiY29uZiIsImFjY2Vzc29yIiwiZGVlcEFjY2VzcyIsInN1YnNjcmliZSIsIl9tYXAyIiwiZ2V0QW55Q29uZmlnIiwiX21hcDQiLCJ3cmFwZWUiLCJkZWVwQ2xvbmUiLCJyZWFkQ29uZmlnIiwicmVhZEFueUNvbmZpZyIsInNldENvbmZpZyIsInRvcGljcyIsInRvcGljYWxDb25maWciLCJsaXN0ZW5lciIsIm5sIiwiaW5pdCIsIlRPUElDUyIsInNldEJpZGRlckNvbmZpZyIsIm1lcmdlRmxhZyIsImJpZGRlcnMiLCJjaGVjayIsImJpZGRlciIsInJ1bldpdGhCaWRkZXIiLCJyZXNldEJpZGRlciIsImdldEN1cnJlbnRCaWRkZXIiLCJtZXJnZUNvbmZpZyIsIm1lcmdlZENvbmZpZyIsIl9vYmplY3RTcHJlYWQiLCJzZXREZWZhdWx0cyIsImNhbGxiYWNrV2l0aEJpZGRlciIsImNiIiwiX2xlbiIsIl9rZXkiLCJnZXRCaWRkZXJDb25maWciLCJtZXJnZUJpZGRlckNvbmZpZyIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yIiwicmVjZWl2ZXIiLCJwcml2YXRlTWFwIiwiX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwiX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwiU1VDQ0VTUyIsIkZBSUwiLCJfcmVzdWx0IiwiX2NhbGxiYWNrcyIsIkdyZWVkeVByb21pc2UiLCJfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyIsImNhbGxiYWNrcyIsInRoZW4iLCJvblN1Y2Nlc3MiLCJvbkVycm9yIiwiX3RoaXMiLCJjb250aW51YXRpb24iLCJoYW5kbGVyIiwicmVzb2x2ZUZuIiwib25GaW5hbGx5IiwiX3RoaXMyIiwidiIsImRlbGF5TXMiLCJwcm9taXNlcyIsIl90aGlzMyIsIl9jbGFzc1N0YXRpY1ByaXZhdGVNZXRob2RHZXQiLCJfY29sbGVjdCIsInN1Y2Nlc3MiLCJfdGhpczQiLCJfdGhpczUiLCJzdGF0dXMiLCJyZWFzb24iLCJjb2xsZWN0b3IiLCJfdGhpczYiLCJjbnQiLCJjbHQiLCJyZWplY3RGbiIsIl9yZWYzJHByb21pc2VGYWN0b3J5IiwicHJvbWlzZUZhY3RvcnkiLCJpbnZva2VyIiwiZGVsZWdhdGUiLCJwcm9taXNlIiwiZXZlbnRFbWl0dGVyIiwidEFyciIsInRTdHIiLCJ0Rm4iLCJ0TnVtYiIsInRPYmplY3QiLCJ0Qm9vbGVhbiIsImNvbnNvbGVFeGlzdHMiLCJCb29sZWFuIiwiY29uc29sZUxvZ0V4aXN0cyIsImxvZyIsImNvbnNvbGVJbmZvRXhpc3RzIiwiaW5mbyIsImNvbnNvbGVXYXJuRXhpc3RzIiwiY29uc29sZUVycm9yRXhpc3RzIiwicGJqc0luc3RhbmNlIiwiZW1pdEV2ZW50IiwiaW50ZXJuYWwiLCJjaGVja0Nvb2tpZVN1cHBvcnQiLCJjcmVhdGVUcmFja1BpeGVsSWZyYW1lSHRtbCIsInVybCIsInNhbmRib3giLCJlbmNvZGVVUkkiLCJnZXRVbmlxdWVJZGVudGlmaWVyU3RyIiwiZ2V0V2luZG93U2VsZiIsImdldFdpbmRvd1RvcCIsImluc2VydFVzZXJTeW5jSWZyYW1lIiwiaW5zZXJ0RWxlbWVudCIsImlzRm4iLCJ0cmlnZ2VyUGl4ZWwiLCJsb2dJbmZvIiwiZm9ybWF0UVMiLCJxdWVyeSIsImRlZXBFcXVhbCIsInByZWJpZEludGVybmFsIiwidW5pcXVlUmVmIiwiZ2V0SW5jcmVtZW50YWxJbnRlZ2VyIiwic3Vic3RyIiwiZ2VuZXJhdGVVVUlEIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiZ2V0QmlkSWRQYXJhbWV0ZXIiLCJwYXJhbXNPYmoiLCJnZXRBZFVuaXRTaXplcyIsImFkVW5pdCIsInNpemVzIiwibWVkaWFUeXBlcyIsImJhbm5lciIsImJhbm5lclNpemVzIiwicGFyc2VTaXplc0lucHV0Iiwic2l6ZU9iaiIsIm9iamVjdFRvQ2hlY2siLCJwcm9wZXJ0eVRvQ2hlY2tGb3IiLCJwYXJzZWRTaXplcyIsInNpemVSZWdleCIsImN1clNpemVQb3MiLCJzaXplQXJyYXlMZW5ndGgiLCJwYXJzZUdQVFNpbmdsZVNpemVBcnJheSIsInNpbmdsZVNpemUiLCJpc1ZhbGlkR1BUU2luZ2xlU2l6ZSIsInRvcCIsImxvY2F0aW9uIiwiZGVidWdUdXJuZWRPbiIsImRlY29yYXRlTG9nIiwicHJlZml4TG9nIiwiZGVjb3JhdGUiLCJsYWJlbCIsImNvbG9yIiwiaXNBIiwiX3QiLCJpc0VtcHR5U3RyIiwic3RyIiwiX2VhY2giLCJjb250YWlucyIsIm91dHB1dCIsImVsbSIsImRvYyIsImFzTGFzdENoaWxkQ2hpbGQiLCJwYXJlbnRFbCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbnNlcnRCZWZvcmVFbCIsImZpcnN0Q2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJ3YWl0Rm9yRWxlbWVudFRvTG9hZCIsImVsZW1lbnQiLCJ0aW1lb3V0IiwidGltZXIiLCJvbkxvYWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltZyIsIkltYWdlIiwic3JjIiwiY2FsbEJ1cmwiLCJidXJsIiwiaWZyYW1lSHRtbCIsImRpdiIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJpZnJhbWUiLCJ1bmlxdWVzIiwiYXJyeSIsImdldEJpZGRlckNvZGVzIiwiYWRVbml0cyIsInVuaXQiLCJiaWRzIiwiYmlkIiwiaXNHcHRQdWJhZHNEZWZpbmVkIiwiZ29vZ2xldGFnIiwicHViYWRzIiwiZ2V0U2xvdHMiLCJnZXRIaWdoZXN0Q3BtIiwiZ2V0SGlnaGVzdENwbUNhbGxiYWNrIiwiZ2V0T2xkZXN0SGlnaGVzdENwbUJpZCIsInVzZVRpZUJyZWFrZXJQcm9wZXJ0eSIsInRpZUJyZWFrZXJDYWxsYmFjayIsImNvdW50ZXIiLCJhZFVuaXRzRmlsdGVyIiwiYWRVbml0Q29kZSIsInJlcGxhY2VBdWN0aW9uUHJpY2UiLCJyZXBsYWNlQ2xpY2tUaHJvdWdoIiwiY2xpY2t0YWciLCJ0aW1lc3RhbXAiLCJnZXRUaW1lIiwiaGFzRGV2aWNlQWNjZXNzIiwibmF2aWdhdG9yIiwiY29va2llRW5hYmxlZCIsImNvb2tpZSIsImRlbGF5RXhlY3V0aW9uIiwibnVtUmVxdWlyZWRDYWxscyIsIm51bUNhbGxzIiwieHMiLCJydiIsIngiLCJnZXREZWZpbmVkUGFyYW1zIiwicGFyYW1zIiwicGFyYW0iLCJnZXRVc2VyQ29uZmlndXJlZFBhcmFtcyIsImNvZGUiLCJiaWRkZXJEYXRhIiwibmV3T2JqIiwibmV3UHJvcCIsImlzQXJyYXlPZk51bXMiLCJhY2MiLCJfY3JpdGVyaWEkc3BsaXQyIiwicGFyc2VVcmwiLCJwYXJzZWQiLCJub0RlY29kZVdob2xlVVJMIiwiaHJlZiIsImRlY29kZVVSSUNvbXBvbmVudCIsInFzQXNTdHJpbmciLCJkZWNvZGVTZWFyY2hBc1N0cmluZyIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJoYXNoIiwiaG9zdCIsImJ1aWxkVXJsIiwib2JqMSIsIm9iajIiLCJfcmVmMiRjaGVja1R5cGVzIiwiY2hlY2tUeXBlcyIsIl9sZW4yIiwiX2tleTIiLCJfbG9vcCIsImFkZEl0RmxhZyIsIl90b0NvbnN1bWFibGVBcnJheSIsImN5cmI1M0hhc2giLCJjaCIsInNlZWQiLCJpbXVsIiwib3BBIiwib3BCIiwiaDEiLCJoMiIsImNhY2hlS2V5IiwiZHNldCIsInR0bENvbGxlY3Rpb24iLCJfcmVmNCIsIm5leHRQdXJnZSIsInRhc2siLCJfcmVmJHN0YXJ0VGltZSIsInN0YXJ0VGltZSIsIl9yZWYkdHRsIiwidHRsIiwiX3JlZiRtb25vdG9uaWMiLCJtb25vdG9uaWMiLCJfcmVmJHNsYWNrIiwic2xhY2siLCJpdGVtcyIsInBlbmRpbmdQdXJnZSIsIm1hcmtGb3JQdXJnZSIsImVsIiwibGVmdCIsInJpZ2h0IiwibWlkZGxlIiwiYmluYXJ5U2VhcmNoIiwiZXhwaXJ5IiwicmVzY2hlZHVsZVB1cmdlIiwiX3BlbmRpbmdQdXJnZSIsImN1cnJlbnRDb2hvcnQiLCJ0aGlzQ29ob3J0IiwiX09iamVjdCRlbnRyaWVzJG1hcCIsImRlbHRhIiwiY3VycmVudENhbGwiLCJfcmVmMyIsImZpZWxkIiwidGhpc0NhbGwiLCJfT2JqZWN0JGVudHJpZXMkbWFwMiIsInJlZnJlc2giLCJta0VudHJ5IiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsInMiLCJUVExfQ09ORklHIiwiZXZlbnRUVEwiLCJldmVudHNGaXJlZCIsIl92YWwiLCJlbWl0Rm4iLCJhbGxFdmVudHMiLCJpZFBhdGhzIiwiX3B1YmxpYyIsIl9oYW5kbGVycyIsImV2ZW50U3RyaW5nIiwiZXZlbnQiLCJ1dGlscyIsIl9jaGVja0F2YWlsYWJsZUV2ZW50IiwiZXZlbnRQYXlsb2FkIiwiZXZlbnRLZXlzIiwiZXZlbnRUeXBlIiwiZWxhcHNlZFRpbWUiLCJwZXJmb3JtYW5jZSIsIl9kaXNwYXRjaCIsIl9oYW5kbGVyIiwiZXZlbnRzIiwiZW1pdCIsIm9uIiwib2ZmIiwiZ2V0RXZlbnRzIiwiYWRkRXZlbnRzIiwiZGVwIiwiZmV0Y2giLCJtYWtlUmVxdWVzdCIsIlJlcXVlc3QiLCJyZXNvdXJjZSIsImN0bCIsIkFib3J0Q29udHJvbGxlciIsImNhbmNlbFRpbWVyIiwiYWJvcnQiLCJzaWduYWwiLCJHRVQiLCJQT1NUIiwiQ1RZUEUiLCJmZXRjaGVyRmFjdG9yeSIsInJlcXVlc3QiLCJmZXRjaGVyIiwiX29wdGlvbnMiLCJfdG8iLCJ0byIsInBtIiwib3JpZ2luIiwiVVJMIiwicmVxIiwidG9YSFIiLCJyZXNwb25zZVRleHQiLCJfcmVmMiRzdGF0dXNUZXh0Iiwic3RhdHVzVGV4dCIsImhlYWRlcnMiLCJ4bWwiLCJyZWFkeVN0YXRlIiwiWE1MSHR0cFJlcXVlc3QiLCJET05FIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlWE1MIiwiX2hlYWRlcnMkZ2V0IiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJoZWFkZXIiLCJhamF4QnVpbGRlciIsIl9yZWY2IiwiZmV0Y2hQbSIsInRleHQiLCJfcmVmNSIsInhociIsIm9rIiwiYXR0YWNoQ2FsbGJhY2tzIiwidXJsSW5mbyIsIkhlYWRlcnMiLCJjdXN0b21IZWFkZXJzIiwiY29udGVudFR5cGUiLCJycU9wdHMiLCJib2R5Iiwid2l0aENyZWRlbnRpYWxzIiwiY3JlZGVudGlhbHMiLCJicm93c2luZ1RvcGljcyIsImlzU2VjdXJlQ29udGV4dCIsInRvRmV0Y2hSZXF1ZXN0IiwiYWpheCIsInR0bEJ1ZmZlckluU2Vjb25kcyIsInRvU3RvcmFnZVJlcXVlc3QiLCJ1cmkiLCJpbXBVcmwiLCJ2YXN0SW1wIiwiX3JlZiRpbmRleCIsImF1Y3Rpb25NYW5hZ2VyIiwidmFzdFZhbHVlIiwidmFzdFhtbCIsInZhc3RVcmwiLCJ2YXN0SW1wVXJsIiwiYXVjdGlvbiIsImdldEF1Y3Rpb24iLCJwYXlsb2FkIiwidHRsc2Vjb25kcyIsImJpZGlkIiwicmVxdWVzdElkIiwiYWlkIiwiYXVjdGlvbklkIiwiZ2V0QXVjdGlvblN0YXJ0IiwiY3VzdG9tQ2FjaGVLZXkiLCJfcmVxdWVzdENhY2hlIiwiX2FwcHJvdmVkTG9hZEV4dGVybmFsSlNMaXN0IiwibG9hZEV4dGVybmFsU2NyaXB0IiwibW9kdWxlQ29kZSIsImF0dHJpYnV0ZXMiLCJzdG9yZWRDYWNoZWRPYmplY3QiLCJnZXRDYWNoZU9iamVjdCIsImNhY2hlZERvY09iaiIsImNhY2hlT2JqZWN0IiwidGFnU3JjIiwianB0U2NyaXB0IiwiYXN5bmMiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJvbmxvYWQiLCJzY3JpcHQiLCJzZXRBdHRyaWJ1dGUiLCJzZXRTY3JpcHRBdHRyaWJ1dGVzIiwicmVxdWVzdFJlc291cmNlIiwiUmVuZGVyZXIiLCJyZW5kZXJOb3ciLCJyZW5kZXIiLCJyZW5kZXJBcmdzIiwicnVuUmVuZGVyIiwiX3JlbmRlciIsImFkVW5pdFJlbmRlcmVyIiwiaGFzVmFsaWRBZFVuaXRSZW5kZXJlciIsIm1lZGlhVHlwZVJlbmRlcmVyIiwiaGFzVmFsaWRNZWRpYVR5cGVSZW5kZXJlciIsImJhY2t1cE9ubHkiLCJpc1JlbmRlcmVyUHJlZmVycmVkRnJvbUFkVW5pdCIsImRvY3VtZW50Q29udGV4dCIsImlzUmVuZGVyZXJSZXF1aXJlZCIsInJlbmRlcmVyIiwiZXhlY3V0ZVJlbmRlcmVyIiwiZG9jQ29udGV4dCIsImRvY3VtZW50UmVzb2x2ZXIiLCJzZXRSZW5kZXIiLCJzZXRFdmVudEhhbmRsZXJzIiwiaGFuZGxlVmlkZW9FdmVudCIsImV2ZW50TmFtZSIsIl9yZXNvbHZlU2NvcGUiLCJXZWFrU2V0IiwiU2NvcGVkU2V0dGluZ3MiLCJnZXRTZXR0aW5ncyIsImRlZmF1bHRTY29wZSIsImdldE93biIsIl9jbGFzc1ByaXZhdGVNZXRob2RHZXQiLCJfcmVzb2x2ZVNjb3BlMiIsIm93blNldHRpbmdzRm9yIiwiYmlkZGVyU2V0dGluZ3MiLCJNT0RVTEVfVFlQRV9QUkVCSUQiLCJNT0RVTEVfVFlQRV9CSURERVIiLCJNT0RVTEVfVFlQRV9VSUQiLCJNT0RVTEVfVFlQRV9BTkFMWVRJQ1MiLCJmdW5Ib29rcyIsInJlYWR5Q3RsIiwiZ2V0SG9vayIsInN1Ym1vZHVsZUluc3RhbGxNYXAiLCJfcmVmJHBvc3RJbnN0YWxsQWxsb3ciLCJwb3N0SW5zdGFsbEFsbG93ZWQiLCJzdWJtb2R1bGVzIiwic3VibW9kdWxlIiwibW9kdWxlcyIsIkFDVElWSVRZX1BBUkFNX0NPTVBPTkVOVCIsIkFDVElWSVRZX1BBUkFNX0NPTVBPTkVOVF9UWVBFIiwiQUNUSVZJVFlfUEFSQU1fQ09NUE9ORU5UX05BTUUiLCJBQ1RJVklUWV9QQVJBTV9BREFQVEVSX0NPREUiLCJBQ1RJVklUWV9QQVJBTV9TVE9SQUdFX1RZUEUiLCJBQ1RJVklUWV9QQVJBTV9TWU5DX1RZUEUiLCJhY3Rpdml0eVBhcmFtc0J1aWxkZXIiLCJyZXNvbHZlQWxpYXMiLCJtb2R1bGVUeXBlIiwibW9kdWxlTmFtZSIsIl9kZWZhdWx0cyIsImJ1aWxkQWN0aXZpdHlQYXJhbXMiLCJfcnVsZVJlZ2lzdHJ5IiwibG9nZ2VyIiwicmVnaXN0cnkiLCJnZXRSdWxlcyIsImFjdGl2aXR5IiwicnVuUnVsZSIsInJ1bGUiLCJhbGxvdyIsImNvbXBvbmVudCIsImR1cGVzIiwibG9nUmVzdWx0IiwibXNnIiwiZGVkdXBpbmciLCJydWxlTmFtZSIsInJ1bGVzIiwicG9zIiwiaXRlbVByaW9yaXR5IiwiaWR4IiwibGFzdFByaW9yaXR5IiwiZm91bmRBbGxvdyIsIl9zdGVwJHZhbHVlIiwicnVsZVJlc3VsdCIsInJ1bGVSZWdpc3RyeSIsIl9ydWxlUmVnaXN0cnkyIiwicmVnaXN0ZXJBY3Rpdml0eUNvbnRyb2wiLCJpc0FjdGl2aXR5QWxsb3dlZCIsIkFDVElWSVRZX0FDQ0VTU19ERVZJQ0UiLCJBQ1RJVklUWV9TWU5DX1VTRVIiLCJBQ1RJVklUWV9FTlJJQ0hfVUZQRCIsIkFDVElWSVRZX0VOUklDSF9FSURTIiwiQUNUSVZJVFlfRkVUQ0hfQklEUyIsIkFDVElWSVRZX1RSQU5TTUlUX0VJRFMiLCJBQ1RJVklUWV9UUkFOU01JVF9VRlBEIiwiQUNUSVZJVFlfVFJBTlNNSVRfUFJFQ0lTRV9HRU8iLCJBQ1RJVklUWV9UUkFOU01JVF9USUQiLCJBZGFwdGVyIiwiYmlkZGVyQ29kZSIsImNhbGxCaWRzIiwic2V0QmlkZGVyQ29kZSIsImdldEJpZGRlckNvZGUiLCJCaWQiLCJzdGF0dXNDb2RlIiwiX3JlZiRzcmMiLCJfcmVmJGJpZGRlciIsImJpZElkIiwidHJhbnNhY3Rpb25JZCIsIl9iaWRTcmMiLCJfc3RhdHVzQ29kZSIsIndpZHRoIiwiaGVpZ2h0Iiwic3RhdHVzTWVzc2FnZSIsIl9nZXRTdGF0dXMiLCJhZElkIiwibWVkaWFUeXBlIiwiZ2V0U3RhdHVzQ29kZSIsImdldFNpemUiLCJnZXRJZGVudGlmaWVycyIsImNyZWF0ZUJpZCIsImlkZW50aWZpZXJzIiwiT1VUU1RSRUFNIiwiY2hlY2tWaWRlb0JpZFNldHVwIiwidmlkZW9NZWRpYVR5cGUiLCJ1c2VDYWNoZUtleSIsIkNPTkZJR19UT0dHTEUiLCJOT0RFUyIsIm1ldHJpY3NGYWN0b3J5IiwiX3JlZiRub3ciLCJfcmVmJG1rTm9kZSIsIm1rTm9kZSIsIm1ha2VOb2RlIiwiX3JlZiRta1RpbWVyIiwibWtUaW1lciIsIm1ha2VUaW1lciIsIl9yZWYkbWtSZW5hbWVyIiwibWtSZW5hbWVyIiwicmVuYW1lIiwiX3JlZiRub2RlcyIsIm5vZGVzIiwibWFrZU1ldHJpY3MiLCJnZXRUaW1lc3RhbXAiLCJkZldhbGsiLCJ2aXNpdCIsImVkZ2UiLCJub2RlIiwic2V0TWV0cmljIiwibmFtZXMiLCJmb2xsb3ciLCJpbkVkZ2UiLCJvdXRFZGdlIiwicHJvcGFnYXRlIiwic3RvcFByb3BhZ2F0aW9uIiwibWV0cmljcyIsImdyb3VwcyIsInN0YXJ0VGltaW5nIiwiZ2V0TWV0cmljcyIsImluY2x1ZGVHcm91cHMiLCJtZWFzdXJlVGltZSIsInN0b3BBZnRlciIsIm1lYXN1cmVIb29rVGltZSIsInN0b3BUaW1pbmciLCJvcmlnIiwic3RvcEJlZm9yZSIsInVudGltZWQiLCJjaGVja3BvaW50IiwidGltZXN0YW1wcyIsInRpbWVTaW5jZSIsIm1ldHJpYyIsInRzIiwiZWxhcHNlZCIsInRpbWVCZXR3ZWVuIiwic3RhcnRDaGVja3BvaW50IiwiZW5kQ2hlY2twb2ludCIsImZvcmsiLCJfcmVmMiRwcm9wYWdhdGUiLCJfcmVmMiRzdG9wUHJvcGFnYXRpb24iLCJfcmVmMiRpbmNsdWRlR3JvdXBzIiwib3RoZXJNZXRyaWNzIiwiX3JlZjMkcHJvcGFnYXRlIiwiX3JlZjMkc3RvcFByb3BhZ2F0aW9uIiwiX3JlZjMkaW5jbHVkZUdyb3VwcyIsImFkZFBhcmVudCIsIm5ld01ldHJpY3MiLCJuZXdTaWJsaW5nIiwicmVuYW1lV2l0aCIsInJlbmFtZUZuIiwid3JhcEZuIiwicGFyZW50cyIsIl9yZWY0JGZvbGxvdyIsIl9yZWY0JHZpc2l0ZWQiLCJ2aXNpdGVkIiwibnVsbE1ldHJpY3MiLCJub3AiLCJlbXB0eSIsIm5vbmUiLCJudWxsVGltZXIiLCJudWxsTm9kZSIsImVuYWJsZWQiLCJ1c2VNZXRyaWNzIiwiY2ZnIiwiaG9va1RpbWVyIiwidGhhdCIsInRpbWVkQXVjdGlvbkhvb2siLCJ0aW1lZEJpZFJlc3BvbnNlSG9vayIsImFjdGl2aXR5UGFyYW1zIiwiYWxpYXMiLCJhZGFwdGVyTWFuYWdlciIsIkNPTU1PTl9CSURfUkVTUE9OU0VfS0VZUyIsIlRJRFMiLCJyZWdpc3RlckJpZGRlciIsInNwZWMiLCJzdXBwb3J0ZWRNZWRpYVR5cGVzIiwicHV0QmlkZGVyIiwibmV3QmlkZGVyIiwicmVnaXN0ZXJCaWRBZGFwdGVyIiwiYWxpYXNlcyIsImd2bGlkIiwic2tpcFBic0FsaWFzaW5nIiwiYWxpYXNDb2RlIiwiYWxpYXNSZWdpc3RyeSIsImdldFNwZWMiLCJyZWdpc3RlclN5bmNzIiwiYmlkZGVyUmVxdWVzdCIsImFkZEJpZFJlc3BvbnNlIiwib25UaW1lbHlSZXNwb25zZSIsImNvbmZpZ0VuYWJsZWRDYWxsYmFjayIsInRpZEd1YXJkIiwiYmlkUmVxdWVzdCIsImJyIiwicHJpdmF0ZUFjY2Vzc1Byb3h5IiwicHJveHkiLCJndWFyZFRpZHMiLCJhZFVuaXRDb2Rlc0hhbmRsZWQiLCJyZXNwb25zZXMiLCJ2YWxpZEJpZFJlcXVlc3RzIiwiYWRhcHRlck1ldHJpY3MiLCJpc0JpZFJlcXVlc3RWYWxpZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJiaWRSZXF1ZXN0TWFwIiwicGxhY2VtZW50Q29kZSIsInByb2Nlc3NCaWRkZXJSZXF1ZXN0cyIsIm9uUmVxdWVzdCIsInJlcXVlc3RPYmplY3QiLCJvblJlc3BvbnNlIiwicmVzcCIsIm9uRmxlZGdlQXVjdGlvbkNvbmZpZ3MiLCJmbGVkZ2VBdWN0aW9uQ29uZmlncyIsImZsZWRnZUF1Y3Rpb25Db25maWciLCJhZGRDb21wb25lbnRBdWN0aW9uIiwiZXJyb3JNZXNzYWdlIiwiY2FsbEJpZGRlckVycm9yIiwib25CaWQiLCJyZXNwb25zZUJpZGRlciIsInJlcXVlc3RCaWRkZXIiLCJhbGxvd0FsdGVybmF0ZUJpZGRlckNvZGVzIiwiYWx0ZXJuYXRlQmlkZGVyc0xpc3QiLCJhZGFwdGVyQ29kZSIsIm9yaWdpbmFsQ3BtIiwib3JpZ2luYWxDdXJyZW5jeSIsImN1cnJlbmN5IiwicHJlYmlkQmlkIiwiX3JlZjckaW5kZXgiLCJoYXNWYWxpZEtleXMiLCJiaWRLZXlzIiwiX2JpZCRuYXRpdmUiLCJnZXRBZFVuaXQiLCJvcnRiUmVxdWVzdCIsIm5hdGl2ZU9ydGJSZXF1ZXN0IiwiYmlkT1JUQiIsImJpZFJlcXVlc3RPUlRCIiwicmVxdWlyZWRBc3NldElkcyIsImFzc2V0cyIsImFzc2V0IiwicmVxdWlyZWQiLCJyZXR1cm5lZEFzc2V0SWRzIiwiYXNzZXRJZCIsImlzTmF0aXZlT3BlblJUQkJpZFZhbGlkIiwib3J0YiIsInRvT3J0Yk5hdGl2ZVJlc3BvbnNlIiwibmF0aXZlQmlkSXNWYWxpZCIsImdldE1lZGlhVHlwZXMiLCJpc1ZhbGlkVmlkZW9CaWQiLCJfcmVmNiRpbmRleCIsImdldEJpZFJlcXVlc3QiLCJfcGFyc2VkU2l6ZXMkMCRzcGxpdDIiLCJ2YWxpZEJpZFNpemUiLCJhZGRCaWRXaXRoQ29kZSIsIm9uQ29tcGxldGlvbiIsImFmdGVyQWxsUmVzcG9uc2VzIiwiZ2RwckNvbnNlbnQiLCJ1c3BDb25zZW50IiwiZ3BwQ29uc2VudCIsInJlZ2lzdGVyU3luY0lubmVyIiwid3JhcENhbGxiYWNrIiwicmVxdWVzdHMiLCJidWlsZFJlcXVlc3RzIiwicmVxdWVzdERvbmUiLCJyZXF1ZXN0TWV0cmljcyIsImFkZEJpZCIsInJlc3BvbnNlT2JqIiwibmV0d29ya0RvbmUiLCJwYXJzZSIsImludGVycHJldFJlc3BvbnNlIiwib25GYWlsdXJlIiwiZ2V0T3B0aW9ucyIsInJvIiwicXVlcnlPYmoiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXJzZVF1ZXJ5U3RyaW5nUGFyYW1ldGVycyIsImFsaWFzU3luY0VuYWJsZWQiLCJnZXRVc2VyU3luY3MiLCJmaWx0ZXJDb25maWciLCJzeW5jcyIsImlmcmFtZUVuYWJsZWQiLCJhbGwiLCJwaXhlbEVuYWJsZWQiLCJpbWFnZSIsInN5bmMiLCJ1c2VyU3luYyIsInJlZ2lzdGVyU3luYyIsImJpZGRlckRvbmUiLCJpbmNyZW1lbnRBZFVuaXRDb3VudCIsImFkdW5pdCIsImVuc3VyZUFkVW5pdCIsImFkdW5pdENvdW50ZXIiLCJlbnN1cmVQcm90b2NvbCIsIndpbiIsIndpbmRvd1Byb3RvIiwicGFyc2VEb21haW4iLCJfcmVmJG5vTGVhZGluZ1d3dyIsIm5vTGVhZGluZ1d3dyIsIl9yZWYkbm9Qb3J0Iiwibm9Qb3J0IiwiZ2V0Q2Fub25pY2FsVXJsIiwicXVlcnlTZWxlY3RvciIsImdldFJlZmVyZXJJbmZvIiwiY2Fub25pY2FsIiwibmV3Q2Fub25pY2FsIiwibmV3SHJlZiIsImNhY2hlV2l0aExvY2F0aW9uIiwiY3VycmVudFdpbmRvdyIsImJlc3RMb2NhdGlvbiIsImJlc3RDYW5vbmljYWxVcmwiLCJyZWYiLCJhbmNlc3RvcnMiLCJhbmNlc3Rvck9yaWdpbnMiLCJnZXRBbmNlc3Rvck9yaWdpbnMiLCJyZWFjaGVkVG9wIiwibGV2ZWwiLCJ2YWx1ZXNGcm9tQW1wIiwiaW5BbXBGcmFtZSIsImhhc1RvcExvY2F0aW9uIiwicHJldmlvdXNXaW5kb3ciLCJ3YXNJbkFtcEZyYW1lIiwiY3VycmVudExvY2F0aW9uIiwiY3Jvc3NPcmlnaW4iLCJmb3VuZExvY2F0aW9uIiwic291cmNlVXJsIiwiY2Fub25pY2FsVXJsIiwicmVmZXJyZXIiLCJwYWdlIiwiaXNBbXAiLCJudW1JZnJhbWVzIiwidG9wbW9zdExvY2F0aW9uIiwiZG9tYWluIiwibGVnYWN5IiwicmVmZXJlciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsIl9zZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX2dldFByb3RvdHlwZU9mIiwiVkVORE9STEVTU19HVkxJRCIsIl9lbmFibGVkIiwiX2RhdGEiLCJfZGVmZXIiLCJfcmVhZHkiLCJfZGlydHkiLCJfaGFzaCIsIl9yZXNvbHZlIiwiQ29uc2VudEhhbmRsZXIiLCJyZXNldCIsImdlbmVyYXRlZFRpbWUiLCJfcmVzb2x2ZTIiLCJoYXNoRmllbGRzIiwiZmxhdCIsIlVzcENvbnNlbnRIYW5kbGVyIiwiX0NvbnNlbnRIYW5kbGVyIiwiX3N1cGVyIiwiX2NyZWF0ZVN1cGVyIiwiY29uc2VudERhdGEiLCJnZXRDb25zZW50RGF0YSIsInVzcCIsImdlbmVyYXRlZEF0IiwiR2RwckNvbnNlbnRIYW5kbGVyIiwiX0NvbnNlbnRIYW5kbGVyMiIsIl9zdXBlcjIiLCJ2ZW5kb3JEYXRhIiwiZ2RwckFwcGxpZXMiLCJjb25zZW50U3RyaW5nU2l6ZSIsInRjU3RyaW5nIiwiYXBpVmVyc2lvbiIsIkdwcENvbnNlbnRIYW5kbGVyIiwiX0NvbnNlbnRIYW5kbGVyMyIsIl9zdXBlcjMiLCJnZHByRGF0YUhhbmRsZXIiLCJ1c3BEYXRhSGFuZGxlciIsImdwcERhdGFIYW5kbGVyIiwiY29wcGFEYXRhSGFuZGxlciIsImdldENvcHBhIiwiZ2V0Q29uc2VudE1ldGEiLCJHRFBSX0dWTElEUyIsInJlZ2lzdGVyIiwiQUxMX0hBTkRMRVJTIiwiZ2RwciIsImdwcCIsImNvcHBhIiwiYWxsQ29uc2VudCIsIm11bHRpSGFuZGxlciIsIk9SVEJfVUZQRF9QQVRIUyIsIk9SVEJfRUlEU19QQVRIUyIsIk9SVEJfR0VPX1BBVEhTIiwicmVkYWN0UnVsZSIsInJ1bGVEZWYiLCJydW4iLCJhcHBsaWVzIiwiaXNEYXRhIiwicmVwbCIsIm9iamVjdFRyYW5zZm9ybWVyIiwic2Vzc2lvbiIsInNlc3Npb25lZEFwcGxpZXMiLCJhcHBsaWVzV2hlbkFjdGl2aXR5RGVuaWVkIiwiaXNBbGxvd2VkIiwib3J0YjJUcmFuc21pdFJ1bGVzIiwiRVBTSUxPTiIsInJlZGFjdG9yIiwicmVkYWN0T3J0YjIiLCJyZWRhY3RCaWRSZXF1ZXN0IiwiYmlkUmVxdWVzdFRyYW5zbWl0UnVsZXMiLCJvcnRiMiIsInJlZGFjdG9yRmFjdG9yeSIsIlBCU19BREFQVEVSX05BTUUiLCJQQVJUSVRJT05TIiwicmVkYWN0IiwiX2JpZGRlclJlZ2lzdHJ5IiwiYmlkZGVyUmVnaXN0cnkiLCJfYWxpYXNSZWdpc3RyeSIsIl9zMnNDb25maWdzIiwiczJzQ29uZmlnIiwiX2FuYWx5dGljc1JlZ2lzdHJ5IiwiaG9va2VkR2V0QmlkcyIsImJpZGRlclJlcXVlc3RJZCIsInMyc0JpZCIsIm9ydGIySW1wIiwiU1VQUE9SVEVEX01FRElBX1RZUEVTIiwidmlkZW8iLCJpc1ZhbGlkTWVkaWFUeXBlcyIsImJpZF9pZCIsImJpZFJlcXVlc3RzQ291bnQiLCJiaWRkZXJSZXF1ZXN0c0NvdW50IiwiYmlkZGVyV2luc0NvdW50IiwiZmlsdGVyQmlkc0ZvckFkVW5pdCIsIl9yZWYyJGdldFMyU0JpZGRlcnMiLCJnZXRTMlNCaWRkZXJzIiwic2VydmVyQmlkZGVycyIsImdldFMyU0JpZGRlclNldCIsInNldHVwQWRVbml0TWVkaWFUeXBlcyIsImxhYmVscyIsInMyc0NvbmZpZ3MiLCJzMnMiLCJwYXJ0aXRpb25CaWRkZXJzIiwiX2dldEJpZGRlckNvZGVzJHJlZHVjIiwiX3JlZjMkZ2V0UzJTQmlkZGVycyIsImdldEJpZGRlck1ldGhvZCIsImFkYXB0ZXIiLCJpbnZva2VCaWRkZXJNZXRob2QiLCJ0cnlDYWxsQmlkZGVyTWV0aG9kIiwibWFrZUJpZFJlcXVlc3RzIiwiYXVjdGlvblN0YXJ0IiwiY2JUaW1lb3V0Iiwib3J0YjJGcmFnbWVudHMiLCJhdWN0aW9uTWV0cmljcyIsIm5hdGl2ZVBhcmFtcyIsInByb2Nlc3NOYXRpdmVBZFVuaXRQYXJhbXMiLCJsZWdhY3lOYXRpdmVBc3NldHMiLCJ2ZXIiLCJOQVRJVkVfS0VZU19USEFUX0FSRV9OT1RfQVNTRVRTIiwiTkFUSVZFX0tFWVMiLCJvcnRiQXNzZXQiLCJQUkVCSURfTkFUSVZFX0RBVEFfS0VZU19UT19PUlRCIiwiTkFUSVZFX0FTU0VUX1RZUEVTIiwiTkFUSVZFX0lNQUdFX1RZUEVTIiwiSUNPTiIsIk1BSU4iLCJhc3BlY3RfcmF0aW9zIiwiX2Fzc2V0JGFzcGVjdF9yYXRpb3MkIiwibWluV2lkdGgiLCJtaW5fd2lkdGgiLCJtaW5IZWlnaHQiLCJtaW5faGVpZ2h0Iiwid21pbiIsImhtaW4iLCJhc3BlY3RSYXRpb3MiLCJhciIsInJhdGlvX3dpZHRoIiwicmF0aW9faGVpZ2h0IiwicmF0aW8iLCJleHQiLCJhc3BlY3RyYXRpb3MiLCJ3IiwiaCIsInRpdGxlIiwicHJpdmFjeSIsInRvT3J0Yk5hdGl2ZVJlcXVlc3QiLCJkZWNvcmF0ZUFkVW5pdHNXaXRoTmF0aXZlUGFyYW1zIiwiYXUiLCJfcGFydGl0aW9uQmlkZGVyczIiLCJjbGllbnRCaWRkZXJzIiwicmVmZXJlckluZm8iLCJiaWRSZXF1ZXN0cyIsImJpZGRlck9ydGIyIiwiYWRkT3J0YjIiLCJzMnNBY3Rpdml0eVBhcmFtcyIsImZwZCIsInRpZCIsInMyc1BhcmFtcyIsImNvbmZpZ05hbWUiLCJfZ2V0QWRVbml0Q29weUZvclByZWIiLCJhZFVuaXRzQ29weSIsImhhc01vZHVsZUJpZHMiLCJzMnNCaWRzIiwiX2IkcGFyYW1zIiwiZ2V0QWRVbml0Q29weUZvclByZWJpZFNlcnZlciIsImFkVW5pdHNTMlNDb3B5IiwidW5pcXVlUGJzVGlkIiwiYWRVbml0Q29weSIsInZhbGlkQmlkcyIsImFkVW5pdEJpZCIsInJlcUJpZCIsImFkVW5pdHNDbGllbnRDb3B5IiwiZ2V0QWRVbml0Q29weUZvckNsaWVudEFkYXB0ZXJzIiwiZG9uZUNiIiwicmVxdWVzdENhbGxiYWNrcyIsInJlcXVlc3RCaWRzVGltZW91dCIsIl9iaWRSZXF1ZXN0cyRyZWR1Y2UyIiwicGFydGl0aW9ucyIsImNsaWVudEJpZGRlclJlcXVlc3RzIiwic2VydmVyQmlkZGVyUmVxdWVzdHMiLCJ1bmlxdWVTZXJ2ZXJCaWRSZXF1ZXN0cyIsInNlcnZlckJpZFJlcXVlc3QiLCJzMnNBamF4IiwiYWRhcHRlcnNTZXJ2ZXJTaWRlIiwiczJzQWRhcHRlciIsInVuaXF1ZVNlcnZlclJlcXVlc3RzIiwiczJzQmlkUmVxdWVzdCIsImFkX3VuaXRzIiwiZG9uZUNicyIsImFkYXB0ZXJEb25lIiwidmlkZW9BZGFwdGVycyIsImJpZEFkYXB0ZXIiLCJfYmlkQWRhcHRlciRnZXRTcGVjIiwiX3JlZjQkc3VwcG9ydGVkTWVkaWFUIiwibmF0aXZlQWRhcHRlcnMiLCJhbGlhc0JpZEFkYXB0ZXIiLCJub25TMlNBbGlhcyIsInMyc0JpZGRlcnMiLCJuZXdBZGFwdGVyIiwiZ2V0U3VwcG9ydGVkTWVkaWFUeXBlcyIsInJlZ2lzdGVyQW5hbHl0aWNzQWRhcHRlciIsImVuYWJsZUFuYWx5dGljcyIsImFkYXB0ZXJDb25maWciLCJwcm92aWRlciIsImdldEJpZEFkYXB0ZXIiLCJnZXRBbmFseXRpY3NBZGFwdGVyIiwiY2FsbFRpbWVkT3V0QmlkZGVycyIsInRpbWVkT3V0QmlkZGVycyIsInRpbWVkT3V0QmlkZGVyIiwiY2FsbEJpZFdvbkJpZGRlciIsImNhbGxCaWRCaWxsYWJsZUJpZGRlciIsImNhbGxTZXRUYXJnZXRpbmdCaWRkZXIiLCJjYWxsQmlkVmlld2FibGVCaWRkZXIiLCJjYWxsRGF0YURlbGV0aW9uUmVxdWVzdCIsImJpZGRlclJlcXVlc3RzIiwiZ2V0Qmlkc1JlcXVlc3RlZCIsIl9lbnRyeSRhZGFwdGVyIiwiX3JlZjciLCJTVE9SQUdFX1RZUEVfTE9DQUxTVE9SQUdFIiwiU1RPUkFHRV9UWVBFX0NPT0tJRVMiLCJzdG9yYWdlQ2FsbGJhY2tzIiwibmV3U3RvcmFnZU1hbmFnZXIiLCJfcmVmMiRpc0FsbG93ZWQiLCJzdG9yYWdlVHlwZSIsIm1vZCIsImN1ckJpZGRlciIsInZhbGlkIiwic2NoZWR1bGUiLCJvcGVyYXRpb24iLCJoYXNMb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJzZXRDb29raWUiLCJleHBpcmVzIiwic2FtZVNpdGUiLCJkb21haW5Qb3J0aW9uIiwiZXhwaXJlc1BvcnRpb24iLCJzZWN1cmUiLCJnZXRDb29raWUiLCJtIiwibG9jYWxTdG9yYWdlSXNFbmFibGVkIiwic2V0SXRlbSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiY29va2llc0FyZUVuYWJsZWQiLCJzZXREYXRhSW5Mb2NhbFN0b3JhZ2UiLCJnZXREYXRhRnJvbUxvY2FsU3RvcmFnZSIsInJlbW92ZURhdGFGcm9tTG9jYWxTdG9yYWdlIiwiZmluZFNpbWlsYXJDb29raWVzIiwia2V5TGlrZSIsImNvb2tpZXMiLCJzZXBhcmF0b3JJbmRleCIsImdldFN0b3JhZ2VNYW5hZ2VyIiwiZ2V0Q29yZVN0b3JhZ2VNYW5hZ2VyIiwiYnMiLCJzeW5jRW5hYmxlZCIsImZpbHRlclNldHRpbmdzIiwic3luY3NQZXJCaWRkZXIiLCJzeW5jRGVsYXkiLCJhdWN0aW9uRGVsYXkiLCJzdG9yYWdlIiwiZGVwcyIsInB1YmxpY0FwaSIsImhhc0ZpcmVkQmlkZGVyIiwibnVtQWRhcHRlckJpZHMiLCJwZXJtaXR0ZWRQaXhlbHMiLCJ1c0NvbmZpZyIsImZpcmVTeW5jcyIsImJyb3dzZXJTdXBwb3J0c0Nvb2tpZXMiLCJmb3JFYWNoRmlyZSIsIl9zeW5jMiIsImJpZGRlck5hbWUiLCJpZnJhbWVVcmwiLCJpZnJhbWVTeW5jQmlkZGVyTmFtZSIsImltYWdlU3luYyIsInJlbW92ZUltYWdlUGl4ZWxzRm9yQmlkZGVyIiwiX3N5bmMiLCJ0cmFja2luZ1BpeGVsVXJsIiwiZnMiLCJyZWdSdWxlIiwic3luY1R5cGUiLCJjYW5CaWRkZXJSZWdpc3RlclN5bmMiLCJfYWN0aXZpdHlQYXJhbXMiLCJpbmNyZW1lbnRBZGFwdGVyQmlkcyIsInN5bmNVc2VycyIsInRyaWdnZXJVc2VyU3luY3MiLCJlbmFibGVPdmVycmlkZSIsImFjdGl2ZUNvbmZpZyIsImFjdGl2ZUNvbmZpZ05hbWUiLCJmaWx0ZXJGaWVsZCIsImJpZGRlcnNGaWVsZCIsImJpZGRlckluTGlzdCIsImlzRmlsdGVyQ29uZmlnVmFsaWQiLCJiaWRkZXJzVG9GaWx0ZXIiLCJjaGVja0ZvckZpbHRlcmluZyIsInNob3VsZEJpZGRlckJlQmxvY2tlZCIsIm5ld1VzZXJTeW5jIiwidXNlckFnZW50IiwiTkFUSVZFIiwiVklERU8iLCJCQU5ORVIiLCJBVUNUSU9OX0NPTVBMRVRFRCIsImJpZFByaWNlQWRqdXN0ZWQiLCJiaWRSZXNwb25zZSIsIl9iaWRSZXF1ZXN0IiwiX3JlZiRicyIsImFkanVzdEFsdGVybmF0ZUJpZHMiLCJiaWRDcG1BZGp1c3RtZW50IiwiYWRqdXN0Q3BtIiwiYWRqdXN0QmlkcyIsIm91dHN0YW5kaW5nUmVxdWVzdHMiLCJzb3VyY2VJbmZvIiwicXVldWVkQ2FsbHMiLCJuZXdBdWN0aW9uIiwiYWRVbml0Q29kZXMiLCJfYXVjdGlvblN0YXJ0IiwiX2F1Y3Rpb25FbmQiLCJfdGltZW91dFRpbWVyIiwiX2F1Y3Rpb25TdGF0dXMiLCJfYWRVbml0cyIsIl9sYWJlbHMiLCJfYWRVbml0Q29kZXMiLCJfYXVjdGlvbklkIiwiX3RpbWVvdXQiLCJfdGltZWx5UmVxdWVzdHMiLCJfYmlkc1JlamVjdGVkIiwiX2NhbGxiYWNrIiwiX2JpZGRlclJlcXVlc3RzIiwiX2JpZHNSZWNlaXZlZCIsIl9ub0JpZHMiLCJfd2lubmluZ0JpZHMiLCJfbm9uQmlkcyIsImdldFByb3BlcnRpZXMiLCJhdWN0aW9uRW5kIiwiYXVjdGlvblN0YXR1cyIsIm5vQmlkcyIsImJpZHNSZWNlaXZlZCIsImJpZHNSZWplY3RlZCIsIndpbm5pbmdCaWRzIiwic2VhdE5vbkJpZHMiLCJleGVjdXRlQ2FsbGJhY2siLCJ0aW1lZE91dCIsInRpbWVkT3V0UmVxdWVzdHMiLCJycSIsImJpZHNCYWNrQ2FsbGJhY2siLCJncm91cEJ5UGxhY2VtZW50IiwidXNlclN5bmNDb25maWciLCJhdWN0aW9uRG9uZSIsImFkZEJpZGRlclJlcXVlc3RzQ2FsbGJhY2siLCJhdWN0aW9uSW5zdGFuY2UiLCJfcmVmMiRpbmRleCIsIm91dHN0YW5kaW5nQmlkc0FkZGVkIiwiYWxsQWRhcHRlckNhbGxlZERvbmUiLCJiaWRkZXJSZXF1ZXN0c0RvbmUiLCJiaWRSZXNwb25zZU1hcCIsImFmdGVyQmlkQWRkZWQiLCJoYW5kbGVCaWRSZXNwb25zZSIsIl9yZWY0JGluZGV4IiwiZ2V0QmlkZGVyUmVxdWVzdCIsInJlcXVlc3RUaW1lc3RhbXAiLCJyZXNwb25zZVRpbWVzdGFtcCIsInR0bEJ1ZmZlciIsInRpbWVUb1Jlc3BvbmQiLCJhZGRDb21tb25SZXNwb25zZVByb3BlcnRpZXMiLCJhY2NlcHRCaWRSZXNwb25zZSIsIl9pbmRleCRnZXRCaWRSZXF1ZXN0IiwiX3JlZjUkaW5kZXgiLCJiaWRSZW5kZXJlciIsImJpZE9iamVjdE1lZGlhVHlwZSIsImJpZE1lZGlhVHlwZSIsIm1lZGlhVHlwZUdyYW51bGFyaXR5IiwiZ2V0TWVkaWFUeXBlR3JhbnVsYXJpdHkiLCJwcmljZVN0cmluZ3NPYmoiLCJjdXN0b21Db25maWciLCJjcG1GbG9hdCIsIm1lZCIsImF1dG8iLCJkZW5zZSIsImN1c3RvbSIsImdldFByaWNlQnVja2V0U3RyaW5nIiwicGJMZyIsInBiTWciLCJwYkhnIiwicGJBZyIsInBiRGciLCJwYkNnIiwiZ2V0UHJlcGFyZWRCaWRGb3JBdWN0aW9uIiwiX3JlZjMkaW5kZXgiLCJvcmlnaW5hbFJlcXVlc3RJZCIsInZpZGVvQ2FjaGVLZXkiLCJjYWxsUHJlYmlkQ2FjaGUiLCJhZGRCaWRUb0F1Y3Rpb24iLCJ0cnlBZGRWaWRlb0JpZCIsImFkZExlZ2FjeUZpZWxkc0lmTmVlZGVkIiwicmVqZWN0QmlkUmVzcG9uc2UiLCJyZWplY3Rpb25SZWFzb24iLCJhZGRCaWRSZWplY3RlZCIsImdldEJpZFJlcXVlc3RzIiwiYXVjdGlvbk9wdGlvbnNDb25maWciLCJzZWNvbmRhcnlCaWRkZXJzIiwiYWRkTm9CaWQiLCJyZWplY3RlZCIsImdldFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwib3JwaGFuV2FpdCIsInJhY2UiLCJhdWN0aW9uQ2FsbGJhY2tzIiwiU1JBIiwicnVuSWZPcmlnaW5IYXNDYXBhY2l0eSIsImhhc0NhcGFjaXR5IiwibWF4UmVxdWVzdHMiLCJzZWF0bm9uYmlkcyIsInNlYXRub25iaWQiLCJhZGRCaWRSZWNlaXZlZCIsIm5vQmlkIiwiYWRkQmlkZGVyUmVxdWVzdHMiLCJhZGRXaW5uaW5nQmlkIiwid2lubmluZ0JpZCIsIndpbm5pbmdBZCIsImRlZmVyQmlsbGluZyIsInNldEJpZFRhcmdldGluZyIsImdldFdpbm5pbmdCaWRzIiwiZ2V0QXVjdGlvbkVuZCIsImdldEF1Y3Rpb25JZCIsImdldEF1Y3Rpb25TdGF0dXMiLCJnZXRBZFVuaXRzIiwiZ2V0QWRVbml0Q29kZXMiLCJnZXRCaWRzUmVjZWl2ZWQiLCJnZXROb0JpZHMiLCJnZXROb25CaWRzIiwiZ2V0RlBEIiwiYmlkT2JqZWN0Iiwia2V5VmFsdWVzIiwiY3BtQ2hlY2siLCJkZWFsSWQiLCJjdXN0QmlkT2JqIiwic2V0S2V5cyIsImdldFN0YW5kYXJkQmlkZGVyU2V0dGluZ3MiLCJzZW5kU3RhbmRhcmRUYXJnZXRpbmciLCJnZXRBc3NldFZhbHVlIiwiZ2xvYmFsU2VuZFRhcmdldGluZ0tleXMiLCJleHRyYU5hdGl2ZUtleXMiLCJleHRLZXkiLCJnZXROYXRpdmVLZXlzIiwiZmxhdEJpZE5hdGl2ZUtleXMiLCJzZW5kUGxhY2Vob2xkZXIiLCJhc3NldFNlbmRUYXJnZXRpbmdLZXlzIiwiZ2V0TmF0aXZlVGFyZ2V0aW5nIiwiZ2V0S2V5VmFsdWVUYXJnZXRpbmdQYWlycyIsImFkc2VydmVyVGFyZ2V0aW5nIiwiYmF0Y2hTaXplIiwiYmF0Y2hUaW1lb3V0IiwiX2F1Y3Rpb25NYW5hZ2VyJGluZGV4IiwiX2JpZFJlc3BvbnNlJG5hdGl2ZSIsIm5hdGl2ZU9ydGJSZXNwb25zZSIsImxlZ2FjeVJlc3BvbnNlIiwib3J0YlJlc3BvbnNlIiwicmVxdWVzdEFzc2V0cyIsImNsaWNrVXJsIiwibGluayIsInByaXZhY3lMaW5rIiwiX3N0ZXAzIiwiX2l0ZXJhdG9yMyIsIl9sb29wMiIsInJlcXVlc3RBc3NldCIsInJlcUFzc2V0IiwiUFJFQklEX05BVElWRV9EQVRBX0tFWVNfVE9fT1JUQl9JTlZFUlNFIiwiTkFUSVZFX0FTU0VUX1RZUEVTX0lOVkVSU0UiLCJpbXByZXNzaW9uVHJhY2tlcnMiLCJfbGVnYWN5UmVzcG9uc2UkaW1wcmUiLCJqc1RyYWNrZXJzIiwiaW1wdHJhY2tlcnMiLCJfc3RlcDQiLCJfaXRlcmF0b3I0IiwiZXZlbnR0cmFja2VycyIsImV2ZW50VHJhY2tlciIsIlRSQUNLRVJfRVZFTlRTIiwiaW1wcmVzc2lvbiIsIlRSQUNLRVJfTUVUSE9EUyIsImpzIiwianN0cmFja2VyIiwiamF2YXNjcmlwdFRyYWNrZXJzIiwidG9MZWdhY3lSZXNwb25zZSIsInN0b3JlSW5DYWNoZSIsImJhdGNoIiwiZ2V0QWpheCIsInJlcXVlc3REYXRhIiwicHV0cyIsInJlc3BvbnNlQm9keSIsImlkcyIsInNoaW1TdG9yYWdlQ2FsbGJhY2siLCJjYWNoZUlkcyIsImNhY2hlSWQiLCJfYmF0Y2gkaSIsInV1aWQiLCJjYWNoZUNvbmZpZyIsImJhdGNoQW5kU3RvcmUiLCJiYXRjaGVzIiwiZGVib3VuY2luZyIsIm5vVGltZW91dCIsImJhdGNoRnVuYyIsImJhdGNoaW5nQ2FjaGUiLCJnZXRQcmljZUJ5R3JhbnVsYXJpdHkiLCJncmFudWxhcml0eSIsImJpZEdyYW51bGFyaXR5IiwiZ2V0UHJpY2VHcmFudWxhcml0eSIsImdldENyZWF0aXZlSWQiLCJjcmVhdGl2ZUlkIiwiZ2V0QWR2ZXJ0aXNlckRvbWFpbiIsImFkdmVydGlzZXJEb21haW5zIiwiZ2V0RFNQIiwibmV0d29ya0lkIiwibmV0d29ya05hbWUiLCJnZXRQcmltYXJ5Q2F0SWQiLCJwcmltYXJ5Q2F0SWQiLCJjcmVhdGVLZXlWYWwiLCJiaWRSZXEiLCJUQVJHRVRJTkdfS0VZUyIsInN0YW5kYXJkU2V0dGluZ3MiLCJzZXR0aW5nc0ZvciIsIkJJRERFUiIsIkFEX0lEIiwiUFJJQ0VfQlVDS0VUIiwiU0laRSIsIkRFQUwiLCJTT1VSQ0UiLCJGT1JNQVQiLCJBRE9NQUlOIiwiQUNBVCIsIkRTUCIsIkNSSUQiLCJkZWZhdWx0QWRzZXJ2ZXJUYXJnZXRpbmciLCJVVUlEIiwiQ0FDSEVfSUQiLCJ0YXJnZXRpbmdLZXlWYWwiLCJrdlBhaXIiLCJDQUNIRV9IT1NUIiwidGFyZ2V0aW5nIiwic3VwcHJlc3NFbXB0eUtleXMiLCJiaWRzQnlQbGFjZW1lbnQiLCJBdWN0aW9uSW5kZXgiLCJnZXRBdWN0aW9ucyIsImJlcnMiLCJiZXIiLCJUVExfQlVGRkVSIiwiZ2V0VFRMIiwiQ0FDSEVfVFRMX1NFVFRJTkciLCJtaW5DYWNoZVRUTCIsIl9hdWN0aW9ucyIsImFsbEJpZHNSZWNlaXZlZCIsImdldEFsbFdpbm5pbmdCaWRzIiwicHJlIiwicG9zdCIsIm1nck1ldGhvZCIsIl9yZWYyJCIsIl9yZWYyJCRuYW1lIiwibWFwcGVyIiwiZ2V0QWxsQmlkc0ZvckFkVW5pdENvZGUiLCJjcmVhdGVBdWN0aW9uIiwib3B0cyIsIl9hZGRBdWN0aW9uIiwiZmluZEJpZEJ5QWRJZCIsImdldFN0YW5kYXJkQmlkZGVyQWRTZXJ2ZXJUYXJnZXRpbmciLCJzZXRTdGF0dXNGb3JCaWRzIiwiZ2V0TGFzdEF1Y3Rpb25JZCIsImF1Y3Rpb25zIiwiY2xlYXJBbGxBdWN0aW9ucyIsIm5ld0F1Y3Rpb25NYW5hZ2VyIiwiTkFUSVZFX1RBUkdFVElOR19LRVlTIiwiU1VQUE9SVEVEX1RZUEVTIiwic3BvbnNvcmVkQnkiLCJpY29uIiwiaW52ZXJzZSIsImlzT3BlblJUQkJpZFJlcXVlc3RWYWxpZCIsIm1pbWVzIiwicHJvdG9jb2xzIiwibWluZHVyYXRpb24iLCJtYXhkdXJhdGlvbiIsImlzT3BlblJUQkFzc2V0VmFsaWQiLCJhc3NldHNNZXNzYWdlIiwiYWRPYmplY3QiLCJfYWRVbml0JG1lZGlhVHlwZXMiLCJuYXRpdmVSZXNwIiwiYWRUZW1wbGF0ZSIsInJlbmRlcmVyVXJsIiwiZnJvbU9ydGJOYXRpdmVSZXF1ZXN0Iiwib3BlblJUQlJlcXVlc3QiLCJvbGROYXRpdmVPYmplY3QiLCJzY2FsZSIsImdjZCIsImFzc2V0VHlwZSIsInByZWJpZEFzc2V0TmFtZSIsImxlZ2FjeVByb3BlcnRpZXNUb09ydGJOYXRpdmUiLCJsZWdhY3lOYXRpdmUiLCJjbGlja3RyYWNrZXJzIiwidXNlUmVxdWVzdEFzc2V0IiwidGl0bGVBc3NldCIsImltYWdlVHlwZSIsImltYWdlQXNzZXQiLCJkYXRhQXNzZXQiLCJyZXRvYmoiLCJfQ09OU1RBTlRTJEVWRU5UUyIsIkFEX1JFTkRFUl9GQUlMRUQiLCJBRF9SRU5ERVJfU1VDQ0VFREVEIiwiZW1pdEFkUmVuZGVyRmFpbCIsImVtaXRBZFJlbmRlclN1Y2NlZWRlZCIsIkJJRF9XT04iLCJjb25zdGFudHMiLCJTVEFMRV9SRU5ERVIiLCJXT05fQURfSURTIiwiSEFORExFUl9NQVAiLCJyZXBseSIsImFkIiwiYWRVcmwiLCJyZXNpemVSZW1vdGVDcmVhdGl2ZSIsIl9zZW5kQWRUb0NyZWF0aXZlIiwicmVjZWl2ZU1lc3NhZ2UiLCJldiIsInBvcnRzIiwicG9zdE1lc3NhZ2UiLCJnZXRSZXBsaWVyIiwiZWxtVHlwZSIsInNsb3QiLCJnZXRUYXJnZXRpbmdLZXlzIiwiZ2V0VGFyZ2V0aW5nIiwiZ2V0U2xvdEVsZW1lbnRJZCIsImdldERmcEVsZW1lbnRJZCIsImFwbnRhZyIsImlzQXBuR2V0VGFnRGVmaW5lZCIsImFzdFRhZyIsInRhcmdldElkIiwiZ2V0QXN0RWxlbWVudElkIiwiZ2V0RWxlbWVudElkQmFzZWRPbkFkU2VydmVyIiwicGFyZW50RGl2RWxlIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50QnlBZFVuaXQiLCJlbGVtZW50U3R5bGUiLCJzdHlsZSIsIm5hdGl2ZVJlc3BvbnNlIiwiZ2V0S2V5QnlWYWx1ZSIsImdldEFzc2V0TWVzc2FnZSIsImdldEFsbEFzc2V0c01lc3NhZ2UiLCJfcmVmMyRmZXRjaFVSTCIsImZldGNoVVJMIiwiX25hdGl2ZVJlc3BvbnNlJGxpbmsyIiwiYXNzZXRJZExpbmtNYXAiLCJtYXN0ZXJDbGlja1RyYWNrZXJzIiwiYXNzZXRMaW5rIiwiY2xpY2tUcmFja2VycyIsIl9uYXRpdmVSZXNwb25zZSRsaW5rIiwiZmlyZUNsaWNrVHJhY2tlcnMiLCJfcmVmMiRydW5NYXJrdXAiLCJydW5NYXJrdXAiLCJta3VwIiwiaHRtbENvZGUiLCJoc3BhY2UiLCJ2c3BhY2UiLCJtYXJnaW5XaWR0aCIsIm1hcmdpbkhlaWdodCIsImRpc3BsYXkiLCJzY3JvbGxpbmciLCJmcmFtZUJvcmRlciIsImFsbG93dHJhbnNwYXJlbmN5IiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImNsb3NlIiwiaW5zZXJ0SHRtbEludG9JZnJhbWUiLCJfcmVmMiRmZXRjaFVSTCIsIl9pbXBUcmFja2VycyRyZWR1Y2UiLCJ0cmFja2VyIiwidGFsbHkiLCJmaXJlSW1wcmVzc2lvblRyYWNrZXJzIiwicGJUYXJnZXRpbmdLZXlzIiwiQ0ZHX0FMTE9XX1RBUkdFVElOR19LRVlTIiwiQ0ZHX0FERF9UQVJHRVRJTkdfS0VZUyIsIlRBUkdFVElOR19LRVlfQ09ORklHVVJBVElPTl9FUlJPUl9NU0ciLCJmaWx0ZXJzIiwiaXNBY3R1YWxCaWQiLCJpc0JpZE5vdEV4cGlyZWQiLCJpc1VudXNlZEJpZCIsImlzQmlkVXNhYmxlIiwiZ2V0SGlnaGVzdENwbUJpZHNGcm9tQmlkUG9vbCIsImhpZ2hlc3RDcG1DYWxsYmFjayIsImFkVW5pdEJpZExpbWl0IiwiZGVhbFByaW9yaXRpemF0aW9uIiwiYnVja2V0S2V5IiwiYnVja2V0QmlkcyIsImJpZHNCeUJpZGRlciIsInNvcnRCeURlYWxBbmRQcmljZUJ1Y2tldE9yQ3BtIiwidXNlQ3BtIiwiaGJfZGVhbCIsImhiX3BiIiwibGF0ZXN0QXVjdGlvbkZvckFkVW5pdCIsImJpZFNob3VsZEJlQWRkZWRUb1RhcmdldGluZyIsImZpbHRlckZ1bmN0aW9uIiwiZ2V0V2lubmluZ0JpZFRhcmdldGluZyIsIndpbm5lcnMiLCJzdGFuZGFyZEtleXMiLCJnZXRTdGFuZGFyZEtleXMiLCJ3aW5uZXIiLCJ0YXJnZXRpbmdWYWx1ZSIsImJpZGRlckNvZGVUYXJnZXRpbmciLCJtZXJnZUFkU2VydmVyVGFyZ2V0aW5nIiwiZ2V0Q3VzdG9tS2V5cyIsImN1cnJlbnRCaWRFbGVtZW50IiwiaGFzU2FtZUFkdW5pdENvZGVBbmRLZXkiLCJjb25jYXRUYXJnZXRpbmdWYWx1ZSIsInRydW5jYXRlQ3VzdG9tS2V5cyIsImdldFRhcmdldGluZ01hcCIsInNldExhdGVzdEF1Y3Rpb25Gb3JBZFVuaXQiLCJyZXNldFByZXNldFRhcmdldGluZyIsImN1c3RvbVNsb3RNYXRjaGluZyIsInVuc2V0S2V5cyIsInJlZHVjZXIiLCJjdXN0b21TbG90TWF0Y2hpbmdGdW5jIiwiZ2V0QWRVbml0UGF0aCIsInVwZGF0ZVRhcmdldGluZ0Zyb21NYXAiLCJyZXNldFByZXNldFRhcmdldGluZ0FTVCIsImtleXdvcmRzIiwiY3VycmVudEtleXdvcmRzIiwibmV3S2V5d29yZHMiLCJtb2RpZnlUYWciLCJnZXRBbGxUYXJnZXRpbmciLCJnZXRDdXN0b21CaWRUYXJnZXRpbmciLCJhbGxvd1NlbmRBbGxCaWRzVGFyZ2V0aW5nS2V5cyIsImFsbG93ZWRTZW5kQWxsQmlkVGFyZ2V0aW5nIiwiZ2V0QmlkTGFuZHNjYXBlVGFyZ2V0aW5nIiwiZ2V0RGVhbEJpZHMiLCJnZXRUYXJnZXRpbmdPYmoiLCJhdXQiLCJnZXRUYXJnZXRpbmdWYWx1ZXMiLCJnZXRBZFVuaXRUYXJnZXRpbmciLCJ0YXJnZXRLZXkiLCJkZWZhdWx0S2V5cyIsImFsbG93ZWRLZXlzIiwiYWRkZWRLZXlzIiwiZGVmYXVsdEtleXJpbmciLCJrZXlEaXNwb3NpdGlvbnMiLCJmb3VuZCIsImRlZmF1bHRLZXkiLCJhbGxvd2VkS2V5IiwiYWxsb3dlZEtleU5hbWUiLCJyZW1vdmVkS2V5cyIsImdldEFsbG93ZWRUYXJnZXRpbmdLZXlWYWx1ZXMiLCJ0YXJnZXRpbmdPYmoiLCJmbGF0dGVuVGFyZ2V0aW5nIiwiYXVjdGlvbktleXNUaHJlc2hvbGQiLCJ0YXJnZXRpbmdDb3B5IiwidGFyZ2V0aW5nTWFwIiwiYWNjTWFwIiwiY3Vyck1hcCIsImtleU1hcCIsImFkVW5pdFF1ZXJ5U3RyaW5nIiwicXVlcnlTdHJpbmciLCJxdWVyeVNpemUiLCJmaWx0ZXJUYXJnZXRpbmdLZXlzIiwic2V0VGFyZ2V0aW5nRm9yR1BUIiwidGFyZ2V0aW5nQ29uZmlnIiwiY29tcGFyZUNvZGVBbmRTbG90IiwiaXNBZFVuaXRDb2RlTWF0Y2hpbmdTbG90Iiwic2V0VGFyZ2V0aW5nRm9yQXN0IiwiYXN0VGFyZ2V0aW5nIiwia2V5d29yZHNPYmoiLCJzZXRLZXl3b3JkcyIsIm92ZXJyaWRlS2V5VmFsdWUiLCJpc0FwbnRhZ0RlZmluZWQiLCJuZXdUYXJnZXRpbmciLCJERUJVR19LRVkiLCJpc0RlYnVnZ2luZ0luc3RhbGxlZCIsImxvYWRTY3JpcHQiLCJkZWJ1Z2dpbmdNb2R1bGVMb2FkZXIiLCJfcmVmJGFscmVhZHlJbnN0YWxsZWQiLCJhbHJlYWR5SW5zdGFsbGVkIiwiX3JlZiRzY3JpcHQiLCJsb2FkaW5nIiwiX2luc3RhbGxEZWJ1Z2dpbmciLCJfcmVmMiRsb2FkIiwibG9hZCIsIl9yZWYyJGhvb2siLCJ3YWl0Rm9yRGVidWdnaW5nIiwiZGlzYWJsZSIsImVuYWJsZSIsImRlYnVnZ2luZ0NvbnRyb2xzIiwiZGVidWdnaW5nIiwiY29yZVN0b3JhZ2UiLCJmaW5kUm9vdERvbWFpbiIsImZ1bGxEb21haW4iLCJyb290RG9tYWluIiwiY29udGludWVTZWFyY2hpbmciLCJkb21haW5QYXJ0cyIsInN0YXJ0SW5kZXgiLCJURVNUX0NPT0tJRV9OQU1FIiwiVEVTVF9DT09LSUVfVkFMVUUiLCJleHBpcmF0aW9uRGF0ZSIsInRvVVRDU3RyaW5nIiwiYWJzIiwiSElHSF9FTlRST1BZX0hJTlRTIiwiTE9XX0VOVFJPUFlfSElOVFMiLCJnZXRMb3dFbnRyb3B5U1VBIiwiX3dpbmRvdyRuYXZpZ2F0b3IiLCJ1YURhdGEiLCJ1c2VyQWdlbnREYXRhIiwic3VhIiwidWFEYXRhVG9TVUEiLCJsb3dFbnRyb3B5U1VBQWNjZXNzb3IiLCJnZXRIaWdoRW50cm9weVNVQSIsIl93aW5kb3ckbmF2aWdhdG9yMiIsImhpbnRzIiwic29ydGVkIiwiZ2V0SGlnaEVudHJvcHlWYWx1ZXMiLCJoaWdoRW50cm9weVNVQUFjY2Vzc29yIiwidG9CcmFuZFZlcnNpb24iLCJicmFuZCIsInZlcnNpb24iLCJidiIsInBsYXRmb3JtIiwicGxhdGZvcm1WZXJzaW9uIiwiZnVsbFZlcnNpb25MaXN0IiwiYnJhbmRzIiwiYnJvd3NlcnMiLCJtb2JpbGUiLCJDTElFTlRfU0VDVElPTlMiLCJoYXNTZWN0aW9uIiwic2VjdGlvbiIsIm9uZUNsaWVudCIsImVucmljaEZQRCIsInJpIiwibWVyZ2VMZWdhY3lTZXRDb25maWdzIiwiRU5SSUNITUVOVFMiLCJnZXRFbnJpY2htZW50cyIsImRlZXBTZXRWYWx1ZSIsImRldmljZSIsImNsaWVudEVucmljaG1lbnQiLCJ3aW5GYWxsYmFjayIsInJlbW92ZVVuZGVmIiwic2l0ZSIsImlubmVyV2lkdGgiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsImlubmVySGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiZG50IiwiZG9Ob3RUcmFjayIsIm1zRG9Ob3RUcmFjayIsInVhIiwibGFuZ3VhZ2UiLCJyZWdzIiwiZ2xvYmFsUHJpdmFjeUNvbnRyb2wiLCJfd2luRmFsbGJhY2siLCJfd2luRmFsbGJhY2skcmVwbGFjZSIsImNvbnRlbnQiLCJwdWJsaXNoZXIiLCJBRERfQURfVU5JVFMiLCJSRVFVRVNUX0JJRFMiLCJTRVRfVEFSR0VUSU5HIiwiX0NPTlNUQU5UUyRBRF9SRU5ERVJfIiwiUFJFVkVOVF9XUklUSU5HX09OX01BSU5fRE9DVU1FTlQiLCJOT19BRCIsIkVYQ0VQVElPTiIsIkNBTk5PVF9GSU5EX0FEIiwiTUlTU0lOR19ET0NfT1JfQURJRCIsImV2ZW50VmFsaWRhdG9ycyIsImJpZFdvbiIsImJpZFNldCIsInNldFJlbmRlclNpemUiLCJkZWZhdWx0VmlldyIsImZyYW1lRWxlbWVudCIsInZhbGlkYXRlU2l6ZXMiLCJ0YXJnTGVuZ3RoIiwiY2xlYW5TaXplcyIsInN6IiwidmFsaWRhdGVCYW5uZXJNZWRpYVR5cGUiLCJ2YWxpZGF0ZWRBZFVuaXQiLCJ2YWxpZGF0ZVZpZGVvTWVkaWFUeXBlIiwicGxheWVyU2l6ZSIsInRhclBsYXllclNpemVMZW4iLCJ2aWRlb1NpemVzIiwidmFsaWRhdGVOYXRpdmVNZWRpYVR5cGUiLCJuYXRpdmUiLCJsZWdhY3lOYXRpdmVLZXlzIiwibmF0aXZlS2V5IiwibGVnYWN5S2V5IiwidmFsaWRhdGVBZFVuaXRQb3MiLCJ3YXJuaW5nIiwidmFsaWRhdGVBZFVuaXQiLCJzZXNzaW9uU3RvcmFnZSIsImxvYWRTZXNzaW9uIiwibGliTG9hZGVkIiwiYWRVbml0U2V0dXBDaGVja3MiLCJjaGVja0FkVW5pdFNldHVwIiwidmFsaWRhdGVkQWRVbml0cyIsInZhbGlkYXRlZEJhbm5lciIsInZhbGlkYXRlZFZpZGVvIiwidmFsaWRhdGVkTmF0aXZlIiwiZ2V0QmlkcyIsImN1cnJlbnRBdWN0aW9uSWQiLCJyZWluamVjdE5vZGVJZlJlbW92ZWQiLCJ0YWdOYW1lIiwiaW5qZWN0aW9uTm9kZSIsInBhcmVudE5vZGUiLCJnZXRBZHNlcnZlclRhcmdldGluZ0ZvckFkVW5pdENvZGVTdHIiLCJhZHVuaXRDb2RlIiwidHJhbnNmb3JtQWRTZXJ2ZXJUYXJnZXRpbmdPYmoiLCJnZXRBZHNlcnZlclRhcmdldGluZ0ZvckFkVW5pdENvZGUiLCJnZXRIaWdoZXN0VW51c2VkQmlkUmVzcG9uc2VGb3JBZFVuaXRDb2RlIiwiZ2V0QWRzZXJ2ZXJUYXJnZXRpbmciLCJnZXRDb25zZW50TWV0YWRhdGEiLCJnZXROb0JpZHNGb3JBZFVuaXRDb2RlIiwiZ2V0QmlkUmVzcG9uc2VzIiwiZ2V0QmlkUmVzcG9uc2VzRm9yQWRVbml0Q29kZSIsInNldFRhcmdldGluZ0ZvckdQVEFzeW5jIiwidGFyZ2V0aW5nU2V0IiwidGFyZ2V0aW5nS2V5IiwicmVuZGVyQWQiLCJjbGlja1Rocm91Z2giLCJ2aWRlb01vZHVsZSIsInJlbmRlckJpZCIsImRpdklkIiwiY3JlYXRpdmVDb21tZW50IiwiY3JlYXRlQ29tbWVudCIsImluSWZyYW1lIiwiYm9yZGVyIiwib3ZlcmZsb3ciLCJyZW1vdmVBZFVuaXQiLCJyZXF1ZXN0QmlkcyIsImJpZHNCYWNrSGFuZGxlciIsInN0YXJ0QXVjdGlvbiIsIndyYXBIb29rIiwicGxjbXQiLCJwbGFjZW1lbnQiLCJwbGF5YmFja21ldGhvZCIsImZpbGxBZFVuaXREZWZhdWx0cyIsIl9hZFVuaXQkb3J0YjJJbXAiLCJhZFVuaXRNZWRpYVR5cGVzIiwiYWxsQmlkZGVycyIsImJpZGRlck1lZGlhVHlwZXMiLCJ1bnN1cHBvcnRlZEJpZGRlck1lc3NhZ2UiLCJhZFVuaXRzTGVuIiwicmVxQmlkc0NvbmZpZ09iaiIsImVuYWJsZUFuYWx5dGljc0NhbGxiYWNrcyIsImFkZEFkVW5pdHMiLCJhZFVuaXRBcnIiLCJvbkV2ZW50Iiwib2ZmRXZlbnQiLCJiaWRkZXJBZGFwdG9yIiwiZW5hYmxlQW5hbHl0aWNzQ2IiLCJhbGlhc0JpZGRlciIsImdldEFsbFByZWJpZFdpbm5pbmdCaWRzIiwiZ2V0SGlnaGVzdENwbUJpZHMiLCJtYXJrV2lubmluZ0JpZEFzVXNlZCIsIm1hcmtCaWRSZXF1ZXN0IiwiZmV0Y2hSZWNlaXZlZEJpZHMiLCJ3YXJuaW5nTWVzc2FnZSIsInByb2Nlc3NRdWV1ZSIsImNhbGxlZCIsImNvbW1hbmQiLCJ0cmlnZ2VyQmlsbGluZyIsInRyaWdnZXJCaWxsaW5nQmlkIiwiQ0ZHX05BTUUiLCJSVUxFX05BTUUiLCJyZWdpc3RlclJ1bGUiLCJhY3RpdmVSdWxlSGFuZGxlcyIsImRlZmF1bHRSdWxlSGFuZGxlcyIsInJ1bGVzQnlBY3Rpdml0eSIsImNsZWFuUGFyYW1zIiwicnVsZXNldCIsImFjdGl2aXR5Q2ZnIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJzZXR1cERlZmF1bHRSdWxlIiwiaGFuZGxlcyIsImNvbmRpdGlvbiIsInNldHVwUnVsZSIsInVwZGF0ZVJ1bGVzRnJvbUNvbmZpZyIsIl9fcjAiLCJwcm9jZXNzb3JzIiwiZGVmYXVsdFJhdGVzIiwiUFJPQ0VTU09SX1RZUEVTIiwiUkVRVUVTVCIsIkRFRkFVTFQiLCJfcHJvY2Vzc29yUmVnaXN0cnkiLCJyZWdpc3Rlck9ydGJQcm9jZXNzb3IiLCJfcmVmJHByaW9yaXR5IiwiX3JlZiRkaWFsZWN0cyIsImRpYWxlY3RzIiwiZGlhbGVjdCIsImdldFByb2Nlc3NvcnMiLCJDVVJSRU5DWV9SQVRFX1BSRUNJU0lPTiIsImJpZFJlc3BvbnNlUXVldWUiLCJjb252ZXJzaW9uQ2FjaGUiLCJjdXJyZW5jeVJhdGVzTG9hZGVkIiwibmVlZFRvQ2FsbEZvckN1cnJlbmN5RmlsZSIsImFkU2VydmVyQ3VycmVuY3kiLCJjdXJyZW5jeVN1cHBvcnRFbmFibGVkIiwiY3VycmVuY3lSYXRlcyIsImJpZGRlckN1cnJlbmN5RGVmYXVsdCIsImVycm9yU2V0dGluZ3NSYXRlcyIsInJhdGVzIiwiY29udmVyc2lvbnMiLCJjb252ZXJzaW9uUmF0ZUZpbGUiLCJtYWNyb0xvY2F0aW9uIiwibW9udGgiLCJnZXRNb250aCIsImRheSIsImdldERhdGUiLCJ0b2RheXNEYXRlIiwiZ2V0RnVsbFllYXIiLCJjb252ZXJ0Q3VycmVuY3kiLCJmcm9tQ3VycmVuY3kiLCJ0b0N1cnJlbmN5IiwiZ2V0Q3VycmVuY3lDb252ZXJzaW9uIiwiYWRkQmlkUmVzcG9uc2VIb29rIiwicHJvY2Vzc0JpZFJlc3BvbnNlUXVldWUiLCJpbml0Q3VycmVuY3kiLCJyZXNldEN1cnJlbmN5IiwiY3VycmVuY3lEZWZhdWx0IiwiZ2V0Q3BtSW5OZXdDdXJyZW5jeSIsImNvbnZlcnNpb24iLCJ3cmFwRnVuY3Rpb24iLCJjb252ZXJzaW9uUmF0ZSIsInJvdW5kRmxvYXQiLCJhbnlCYXNlQ3VycmVuY3kiLCJ0b0ludGVybWVkaWF0ZUNvbnZlcnNpb25SYXRlIiwibnVtIiwiZGVjIiwiY3VyIiwiRUlEX0NPTkZJRyIsImNyZWF0ZUVpZE9iamVjdCIsInVzZXJJZERhdGEiLCJzdWJNb2R1bGVLZXkiLCJlaWQiLCJhdHlwZSIsInVpZEV4dCIsInVpZHMiLCJlaWRFeHQiLCJjcmVhdGVFaWRzQXJyYXkiLCJiaWRSZXF1ZXN0VXNlcklkIiwiZWlkcyIsImluaXRpYWxpemVkU3VibW9kdWxlcyIsInBwaWRTb3VyY2UiLCJjb25maWdMaXN0ZW5lciIsImdldFBQSUQiLCJNT0RVTEVfTkFNRSIsIkNPT0tJRSIsIkxPQ0FMX1NUT1JBR0UiLCJQQkpTX1VTRVJfSURfT1BUT1VUX05BTUUiLCJhZGRlZFVzZXJJZEhvb2siLCJjb25maWdSZWdpc3RyeSIsImlkUHJpb3JpdHkiLCJzdWJtb2R1bGVSZWdpc3RyeSIsInVpZE1ldHJpY3MiLCJzdWJtb2R1bGVNZXRyaWNzIiwiY29va2llU2V0dGVyIiwic3RvcmFnZU1nciIsImRvbWFpbk92ZXJyaWRlIiwic3VmZml4IiwiZXhwaXJhdGlvbiIsInNldFN0b3JlZFZhbHVlIiwibWdyIiwiZXhwaXJlc1N0ciIsInZhbHVlU3RyIiwiZ2V0Q29uc2VudEhhc2giLCJyZWZyZXNoSW5TZWNvbmRzIiwiZ2V0U3RvcmVkVmFsdWUiLCJzdG9yZWRWYWx1ZSIsInN0b3JlZEtleSIsInN0b3JlZFZhbHVlRXhwIiwicHJvY2Vzc1N1Ym1vZHVsZUNhbGxiYWNrcyIsImFsbE1vZHVsZXMiLCJ0aW1lb3V0SUQiLCJtb2R1bGVEb25lIiwiaWRPYmoiLCJkZWNvZGUiLCJ1cGRhdGVQUElEIiwiZ2V0Q29tYmluZWRTdWJtb2R1bGVJZHMiLCJnZXRQcmlvcml0aXplZENvbWJpbmVkU3VibW9kdWxlSWRzIiwiY29sbGVjdEJ5UHJpb3JpdHkiLCJnZXRJZHMiLCJnZXROYW1lIiwiY2FycnkiLCJzdWJtb2QiLCJfaWRQcmlvcml0eSRrZXkiLCJtYXliZUN1cnJlbnRJZFByaW9yaXR5IiwiY3VycmVudElkU3RhdGUiLCJ3aW5uZXJJZFN0YXRlIiwiaW5pdElkU3lzdGVtIiwiSU5JVF9DQU5DRUxFRCIsImdldFVzZXJJZHNBc0VpZHMiLCJtYXRjaGluZ1VzZXJJZCIsInVzZXJJRCIsInBwaWRWYWx1ZSIsInJlcXVlc3RCaWRzSG9vayIsIl9yZWY2JGRlbGF5IiwiX3JlZjYkZ2V0SWRzIiwiZ2V0VXNlcklkc0FzeW5jIiwiY29tYmluZWRTdWJtb2R1bGVJZHMiLCJnZXRDb21iaW5lZFN1Ym1vZHVsZUlkc0ZvckJpZGRlciIsInVzZXJJZCIsInVzZXJJZEFzRWlkcyIsImFkZElkRGF0YVRvQWRVbml0QmlkcyIsImdldFVzZXJJZHMiLCJnZXRVc2VySWRzQXNFaWRCeVNvdXJjZSIsInNvdXJjZU5hbWUiLCJwcmlvcml0aXNlZElkcyIsImVsaWdpYmxlSWROYW1lIiwiaWROYW1lIiwiZ2V0U291cmNlIiwiZ2V0U3VibW9kdWxlSWQiLCJnZXRFbmNyeXB0ZWRFaWRzRm9yU291cmNlIiwiZW5jcnlwdCIsImN1c3RvbUZ1bmN0aW9uIiwiZWlkc1NpZ25hbHMiLCJjdXN0b21TaWduYWxzIiwiZW5jcnlwdFNpZ25hbHMiLCJzaWduYWxzIiwiZW5jcnlwdGVkU2lnIiwiYnRvYSIsInJlZ2lzdGVyU2lnbmFsU291cmNlcyIsInNlY3VyZVNpZ25hbFByb3ZpZGVycyIsImVuY3J5cHRlZFNpZ25hbFNvdXJjZXMiLCJyZWdpc3RlckRlbGF5IiwiY3VzdG9tRnVuYyIsImNvbGxlY3RvckZ1bmN0aW9uIiwicmVmcmVzaFVzZXJJZHMiLCJzdWJtb2R1bGVOYW1lcyIsImJ5dGVzIiwiZnJvbUNoYXJDb2RlIiwidXNlcklkcyIsInBwaWQiLCJzZXRQdWJsaXNoZXJQcm92aWRlZElkIiwiaW5pdFN1Ym1vZHVsZXMiLCJkZXN0IiwiZm9yY2VSZWZyZXNoIiwiX3N1Ym1vZHVsZSRjb25maWcyIiwiY2FuVXNlU3RvcmFnZSIsImluaXRpYWxpemVkIiwiYWxsU3VibW9kdWxlcyIsInN0b3JlZElkIiwicmVmcmVzaE5lZWRlZCIsInN0b3JlZERhdGUiLCJzdG9yZWRDb25zZW50IiwiY29uc2VudENoYW5nZWQiLCJnZXRJZCIsImV4dGVuZElkIiwicG9wdWxhdGVTdWJtb2R1bGVJZCIsInNldEVpZFBlcm1pc3Npb25zIiwiZWlkUGVybWlzc2lvbnMiLCJlaWRDb25mIiwiYnVpbGRFaWRQZXJtaXNzaW9ucyIsInNldFByZWJpZFNlcnZlckVpZFBlcm1pc3Npb25zIiwidXBkYXRlSW5pdGlhbGl6ZWRTdWJtb2R1bGVzIiwidXBkYXRlZCIsIkFMTF9TVE9SQUdFX1RZUEVTIiwidXBkYXRlU3VibW9kdWxlcyIsIl9yZWY5IiwiX3JlZjEwIiwidXBkYXRlRUlEQ29uZmlnIiwiY29uZmlncyIsImdldFZhbGlkU3VibW9kdWxlQ29uZmlncyIsImFkZGVkU3VibW9kdWxlcyIsImoiLCJzdWJtb2R1bGVDb25maWciLCJhbGlhc05hbWUiLCJzbSIsInJlcXVlc3REYXRhRGVsZXRpb24iLCJjb3JlR2V0UFBJRCIsIm9uRGF0YURlbGV0aW9uUmVxdWVzdCIsIl9zdWJtb2R1bGUkc3VibW9kdWxlIiwiX3N1Ym1vZHVsZSRjb25maWciLCJkZWxldGVyIiwic3VmZml4ZXMiLCJkZWxldGVTdG9yZWRWYWx1ZSIsIm5vcm1hbGl6ZVByb21pc2UiLCJfcmVmMTEkZGVsYXkiLCJpbml0TWV0cmljcyIsIl9yZWY0JGRlbGF5Iiwic3RhcnRJbml0Iiwic3RhcnRDYWxsYmFja3MiLCJjYW5jZWxBbmRUcnkiLCJpbml0TW9kdWxlcyIsImNoZWNrUmVmcyIsInRpbWVDb25zZW50IiwiaG9va3NSZWFkeSIsIm1vZFdpdGhDYiIsIl9yZWY1JHJlZnJlc2giLCJfcmVmNSRzdWJtb2R1bGVOYW1lcyIsIl9yZWY1JHJlYWR5IiwiYXVjdGlvbkVuZEhhbmRsZXIiLCJjYk1vZHVsZXMiLCJpZFN5c3RlbUluaXRpYWxpemVyIiwiaWRQcmlvcml0eUNvbmZpZyIsImFsaWFzVG9OYW1lIiwidXBkYXRlSWRQcmlvcml0eSIsIk9QVE9VVF9OQU1FIiwiUFVCX0NPTU1PTl9JRCIsInJlYWRWYWx1ZSIsImV4cFZhbHVlIiwiZ2V0SWRDYWxsYmFjayIsInB1YmNpZCIsInBpeGVsVXJsIiwiZ2V0U3RvcmVkSWQiLCJxdWV1ZVBpeGVsQ2FsbGJhY2siLCJ0YXJnZXRVcmwiLCJoYXNPcHRlZE91dCIsInNoYXJlZElkU3lzdGVtU3VibW9kdWxlIiwiX2NvbmZpZyRwYXJhbXMiLCJfY29uZmlnJHBhcmFtczIiLCJfY29uZmlnJHBhcmFtczIkY3JlYXQiLCJuZXdJZCIsIl9jb25maWckcGFyYW1zMyIsIl9jb25maWckcGFyYW1zNCIsIl9jb25maWckcGFyYW1zNCRleHRlbiIsInRvcERvbWFpbiIsInRlc3RDb29raWUiLCJkb21haW5FbGVtZW50cyIsImNvb2tpZU5hbWUiLCJuZXh0RG9tYWluIiwiZG9tYWluT3ZlcnJpZGVUb1Jvb3REb21haW4iLCJhZHJpdmVySWRTdWJtb2R1bGUiLCJhZHJjaWQiLCJjcmVhdGlvbkRhdGUiLCJzZXRUaW1lIiwibmV3VXJsIiwiUEFJUl9JRF9LRVkiLCJwYWlySWRGcm9tTG9jYWxTdG9yYWdlIiwicGFpcklkRnJvbUNvb2tpZSIsInBhaXJJZFN1Ym1vZHVsZSIsInBhaXJJZHNTdHJpbmciLCJhdG9iIiwiY29uZmlnUGFyYW1zIiwibGl2ZXJhbXAiLCJMUlN0b3JhZ2VMb2NhdGlvbiIsInN0b3JhZ2VLZXkiLCJsaXZlcmFtcFZhbHVlIiwiZW52ZWxvcGUiLCJ3cml0ZVByb3RlY3RSdWxlIiwid3AiLCJvcmlnSGFzUHJvcCIsIm9yaWdpbmFsIiwib3JpZ0NvcHkiLCJmaW5hbEhhc1Byb3AiLCJmaW5hbFZhbHVlIiwib3J0YjJHdWFyZCIsIndyaXRlUnVsZXMiLCJ3cFRyYW5zZm9ybWVyIiwibWtHdWFyZCIsInRyZWUiLCJfdHJlZSRwcm9wIiwidHJhbnNmb3JtUmVzdWx0IiwidmVyaWZ5Iiwib2JqZWN0R3VhcmQiLCJvcnRiMkVucmljaFJ1bGVzIiwib3J0YjJHdWFyZEZhY3RvcnkiLCJndWFyZE9ydGIyRnJhZ21lbnRzIiwiZ3VhcmRPcnRiMiIsImZyYWdtZW50cyIsInZlcmlmaWVycyIsIm1ha2VHdWFyZCIsIm9ydGIyRnJhZ21lbnRzR3VhcmRGYWN0b3J5IiwiX21vZHVsZUNvbmZpZyIsIl91c2VyQ29uc2VudCIsInJlZ2lzdGVyZWQiLCJhbCIsInJlZ2lzdGVyZWRTdWJNb2R1bGVzIiwic3ViTW9kdWxlcyIsIl9kYXRhUHJvdmlkZXJzIiwic2V0RXZlbnRzTGlzdGVuZXJzIiwiX09iamVjdCRlbnRyaWVzIiwicHJlcHJvY2VzcyIsImluaXRTdWJNb2R1bGVzIiwic3ViTW9kdWxlc0J5T3JkZXIiLCJzZXRCaWRSZXF1ZXN0c0RhdGEiLCJyZWxldmFudFN1Yk1vZHVsZXMiLCJwcmlvcml0eVN1Yk1vZHVsZXMiLCJnZXRCaWRSZXF1ZXN0RGF0YSIsIndhaXRGb3JJdCIsIndhaXRUaW1lb3V0Iiwic2hvdWxkRGVsYXlBdWN0aW9uIiwiY2FsbGJhY2tzRXhwZWN0ZWQiLCJpc0RvbmUiLCJleGl0SG9vayIsIm9uR2V0QmlkUmVxdWVzdERhdGFDYWxsYmFjayIsImZwZEd1YXJkIiwiZ2V0VGFyZ2V0aW5nRGF0YSIsInNtVGFyZ2V0aW5nIiwibWVyZ2VkVGFyZ2V0aW5nIiwibWVyZ2VkIiwiZHAiLCJkayIsImt2IiwiY29uZkxpc3RlbmVyIiwicmVhbFRpbWVEYXRhIiwiZGF0YVByb3ZpZGVycyIsIm9ic2VydmVyQXZhaWxhYmxlIiwiY2xvbmVSZWN0IiwicmVjdCIsImJvdHRvbSIsInkiLCJnZW9sb2NhdGlvbiIsImludGVyc2VjdGlvblN1Ym1vZHVsZSIsInJlcXVlc3RCaWRzT2JqZWN0Iiwib25Eb25lIiwicHJvdmlkZXJDb25maWciLCJ1c2VyQ29uc2VudCIsImludGVyc2VjdGlvbk1hcCIsInBsYWNlaG9sZGVyc01hcCIsImNvbXBsZXRlIiwiY2hlY2tUaW1lb3V0SWQiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZ2V0QXR0cmlidXRlIiwiYm91bmRpbmdDbGllbnRSZWN0IiwiaW50ZXJzZWN0aW9uUmVjdCIsInJvb3RSZWN0IiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJpc0ludGVyc2VjdGluZyIsInRocmVzaG9sZCIsImRpc2Nvbm5lY3QiLCJmaW5kQW5kT2JzZXJ2ZVBsYWNlaG9sZGVycyIsInBoIiwib2JzZXJ2ZSIsIm1vZHVsZUNvbmZpZyIsImxhdCIsImNvb3JkcyIsImxhdGl0dWRlIiwibG9uIiwibG9uZ2l0dWRlIiwibGFzdGZpeCIsImdlbyIsIkJJRERFUl9DT0RFIiwic2l0ZWlkIiwiX3ZhbGlkQmlkUmVxdWVzdHMkMCR1IiwiY3VzdG9tSUQiLCJzaXRlSWQiLCJnZXRVc2VySWRBc0VpZHMiLCJwYXIiLCJmbG9vckFuZEN1cnJlbmN5IiwiY3VycmVuY3lQYXIiLCJjdXJNZWRpYVR5cGUiLCJjdXJyZW5jeVJlc3VsdCIsImlzU2l6ZSIsImdldEZsb29yIiwiZmxvb3JJbmZvIiwiX2dldEZsb29yIiwiYmlkRmxvb3IiLCJwbGFjZW1lbnRJZCIsInBtcCIsImltcCIsImFkcmNpZENvb2tpZSIsInVzZXIiLCJidXllcmlkIiwic2VydmVyUmVzcG9uc2UiLCJzZWF0YmlkIiwiYmlkUmVzcG9uc2VzIiwibnVybCIsInByaWNlIiwiaW1waWQiLCJkZWFsaWQiLCJuZXRSZXZlbnVlIiwiYWRvbWFpbiIsImJ1aWxkUGxhY2VtZW50IiwiYmlkZmxvb3IiLCJnZXRTaXRlTmFtZSIsInNpdGVuYW1lIiwicGxhY2VzIiwid2luZG93U2l6ZSIsInNjcmVlbiIsImFkbSIsImRpc3BsYXlVcmwiLCJwbGFjZW1lbnRUeXBlcyIsImJ1aWxkQmlkUmVxdWVzdHMiLCJ2YWxpZEJpZFJlcXVlc3QiLCJfdmFsaWRCaWRSZXF1ZXN0JG9ydGIiLCJwbGFjZUlkIiwiaW1hZ2VVcmwiLCJvdXRzdHJlYW1SZW5kZXIiLCJBTk91dHN0cmVhbVZpZGVvIiwicmVuZGVyZXJPcHRpb25zIiwic2hvd0JpZ1BsYXlCdXR0b24iLCJzaG93UHJvZ3Jlc3NCYXIiLCJzaG93Vm9sdW1lIiwiYWxsb3dGdWxsc2NyZWVuIiwic2tpcHBhYmxlIiwiZ2V0TWVkaWFUeXBlRnJvbUJpZCIsImlzSGFzVmlkZW9Db250ZXh0IiwiaXNQbGF5ZXJTaXplIiwiY21wIiwidHJhZmZpY1R5cGUiLCJjb25zZW50U3RyaW5nIiwic2VydmVyQm9keSIsInJhd0JpZCIsImJpZERhdGEiLCJjcmVhdGVSZW5kZXJlciIsImluSW1hZ2VDb250ZW50IiwiYWN0aW9uVXJscyIsImxvYWRVcmxzIiwiaW5JbWFnZSIsImxvYWR0cmFja2VycyIsImltcHJlc3Npb25VcmxzIiwic2Nyb2xsQWN0VXJscyIsInN0YXJ0dmlzaWJpbGl0eXRyYWNrZXJzIiwidmlld1VybHMiLCJ2aWV3dHJhY2tlcnMiLCJzdG9wQW5pbWF0aW9uVXJscyIsInN0b3BhbmltYXRpb250cmFja2VycyIsImNsb3NlQmFubmVyVXJscyIsImNsb3NlYmFubmVydHJhY2tlcnMiLCJidXQiLCJpbkltYWdlT3B0aW9ucyIsImhhc0J1dHRvbiIsImJ1dHRvbkxvZ29VcmwiLCJidXRfbG9nbyIsImJ1dHRvblByb2R1Y3RVcmwiLCJidXRfcHJvZCIsImJ1dHRvbkhlYWQiLCJidXRfaGVhZCIsImJ1dHRvbkhlYWRDb2xvciIsImJ1dF9oZWFkX2NvbG91ciIsImR5bnBhcmFtcyIsIndyYXBBZCIsImJ1aWxkQmlkIiwiQ09ERV9UWVBFUyIsImdldFJyIiwicnIiLCJnZXRGbCIsInBsdWdpbnMiLCJkZXNjcmlwdGlvbiIsIm1pbWVUeXBlcyIsImVuYWJsZWRQbHVnaW4iLCJzZXRPdXRzdHJlYW1SZW5kZXJlciIsInBsYXllciIsInNhcGVSdGJQbGF5ZXJIYW5kbGVyIiwicGxheWVyTXV0ZWQiLCJzaW5nbGV0b24iLCJvbkNvbXBsZXRlIiwiZGVzdHJveSIsImFkZFNsb3QiLCJyZWZJbmZvIiwiX2kkb3J0YjJJbXAiLCJqc3QiLCJvcmQiLCJ0eiIsImdldFRpbWV6b25lT2Zmc2V0IiwiZmwiLCJ0cmFuc2FjdGlvbmlkIiwiYXVjdGlvbmlkIiwibWF4ZCIsIm1pbmQiLCJjb2RlVHlwZSIsIml0dSIsInN1YmlkIiwiY2xpY2szcmQiLCJwdWJkYXRhIiwic2NoYWluIiwiY3JlYXRpdmVpZCIsInN5bmNPcHRpb25zIiwic2VydmVyUmVzcG9uc2VzIiwicGFkSW50IiwidGltZXpvbmUiLCJyZXF1ZXN0QmlkIiwibXV0ZWQiLCJvbkJpZFdvbiIsIl9OQVRJVkUiLCJfc3RlcDIiLCJiaWRSZXF1ZXN0c0NvcHkiLCJfaXRlcmF0b3IyIiwiY29udmVydE9ydGJSZXF1ZXN0VG9Qcm9wcmlldGFyeU5hdGl2ZSIsImV4IiwidmFsaWRCaWQiLCJhZERhdGEiLCJ1bml0U2V0dGluZ3MiLCJleHRlbmRlZFNldHRpbmdzIiwiY29udGFpbmVyX2hlaWdodCIsInVuaXRfc2V0dGluZ3MiLCJCdXp6b29sYSIsIkNvcmUiLCJPVE1fQklEX1VSTCIsIkRFRkFVTFRfQ1VSUkVOQ1kiLCJfYmlkZGVyUmVxdWVzdCRyZWZlcmUiLCJfYmlkZGVyUmVxdWVzdCRyZWZlcmUyIiwidG9wT3JpZ2luIiwiX2JpZCRvcnRiMkltcCIsIl9nZXRCaWRGbG9vciIsImhhc1NpemVzIiwicmVzcG9uc2VzQm9keSIsImFkRG9tYWluIiwiYXBwZW5kQ2hpbGQiLCJwYkNvbmZpZyIsImZpcnN0UGFydHlEYXRhIiwidWFIaW50cyIsImFjY3VyYWN5IiwiYWx0aXR1ZGUiLCJhbHRpdHVkZUFjY3VyYWN5IiwiaGVhZGluZyIsInNwZWVkIiwiZW5hYmxlVElEcyIsImFsbG93QWN0aXZpdGllcyIsInN5bmNVc2VyIiwiZGVmYXVsdCIsImFjY2Vzc0RldmljZSIsIlByZWJpZERyaXZlciIsImFkVW5pdElkIiwicGFyZW50Q29udGFpbmVyIiwiYmFubmVyQ29udGFpbmVyIiwicmVxdWVzdEJpZHNPYmoiLCJwcmVmZXJyZWRDdXJyZW5jeSIsInVuc29sZFJlZnJlc2hUaW1lb3V0IiwibWF4RmFpbGVkUmVxdWVzdHMiLCJmYWlsZWRSZXF1ZXN0c0NvdW50IiwiVVJMU2VhcmNoUGFyYW1zIiwicmVzcG9uc2VIYW5kbGVyIiwic2V0RXZlbnRzIiwiZXZlbnRzRGVmYXVsdCIsIm9uQ2xvc2UiLCJvblN0b3AiLCJjbGVhckNvbnRhaW5lciIsInNob3ciLCJhcHBlbmQiLCJoaWRlIiwiYWRkQ29kZSIsImlmcmFtZURvYyIsImluc2VydEFkamFjZW50SFRNTCIsInNjcmlwdHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY3JlYXRlU2NyaXB0IiwiY29weUF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGUiLCJub2RlTmFtZSIsIm5vZGVWYWx1ZSIsImFkVW5pdHNJZHMiLCJpbnRlcnZhbHMiLCJzZXRJbnRlcnZhbCJdLCJzb3VyY2VSb290IjoiIn0=